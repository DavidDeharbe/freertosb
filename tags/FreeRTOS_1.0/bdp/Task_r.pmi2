THEORY BalanceX IS
  Task_r,145,5,0,83,4,1,0;
  AssertionLemmas,4,0,0,3,0,0,0;
  Initialisation,2,0,0,2,0,0,0;
  t_create,33,0,0,33,0,0,0;
  t_delete,28,3,0,22,0,0,0;
  t_suspend,4,0,0,0,0,0,0;
  t_resume,3,0,0,0,0,0,0;
  t_getPriority,1,1,0,0,0,0,0;
  t_getCurrent,0,0,0,0,0,0,0;
  t_getNumberOfTasks,0,0,0,0,0,0,0;
  t_delayTask,4,0,0,0,0,0,0;
  t_startScheduler,9,1,0,7,0,1,0;
  t_endScheduler,3,0,0,2,0,0,0;
  t_resumeAll,16,0,0,0,0,0,0;
  t_unblock,3,0,0,0,0,0,0;
  t_setPriority,19,0,0,10,3,0,0;
  t_PriorityInherit,11,0,0,3,1,0,0;
  t_resumeIncrement,3,0,0,1,0,0,0;
  t_unblockMutex,2,0,0,0,0,0,0;
  t_addPending,0,0,0,0,0,0,0
END
&
THEORY ProofState IS
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Proved(0);
  Unproved;
  Unproved;
  Unproved;
  Proved(0);
  Unproved;
  Proved(0);
  Proved(0);
  Proved(1);
  Unproved;
  Unproved;
  Unproved;
  Proved(0);
  Unproved;
  Proved(0);
  Proved(0);
  Proved(1);
  Unproved;
  Proved(0);
  Unproved;
  Proved(0);
  Proved(0);
  Proved(0);
  Unproved;
  Unproved;
  Proved(0);
  Unproved;
  Proved(1);
  Proved(1);
  Proved(0);
  Proved(0);
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Proved(0);
  Proved(0);
  Unproved;
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(2);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Proved(Util);
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Unproved;
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Unproved;
  Proved(0);
  Proved(0);
  Proved(0);
  Unproved;
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Unproved;
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0)
END
&
THEORY MethodList IS
  ?;
  ?;
  ?;
  ?;
  pr;
  ?;
  ?;
  ?;
  pr;
  ?;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  ?;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & ah(#(task$0).(task$0: TASK & task$0: tasks$1 & task$0: ready$1 & (atask = task$0 & (ready$1\/{running$1})-{atask} = (ready$1\/{running$1})-{task$0}))) & se(atask) & ss & eh(task,running$1,AllHyp) & ss & dd & pr & ah(atask: ready$1) & ph(ready$1,t_priority$1,!(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) => schedule_p(tasks,t_priority) <: tasks)) & pr & pr & ah(idle$1: ready$1) & ah(not(running$1 = idle$1) & (running$1 = idle$1 or idle$1: ready$1)) & pr & pr & pr & pr & pr & dd & pr & dd & pr & pr & ph(ready$1,t_priority$1,!(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) => schedule_p(tasks,t_priority) <: tasks)) & pr & pr & pr & pr & pr & aq(#(task$0).(task$0: TASK & task$0: tasks$1 & task$0: ready$1 & (atask = task$0 & (ready$1\/{running$1})-{atask} = (ready$1\/{running$1})-{task$0}))) & dd & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  ?;
  ?;
  ?;
  ?;
  ?;
  ?;
  ?;
  pr;
  pr;
  dd & dc(ready$1 = {}) & dd & ah(tt: unblocked) & pr & ah(tt: ready$1\/unblocked & not(unblocked = {}) & ready$1 = {}) & pr & pr & pr & pr & dd & ah(t_priority$1(tt)<=max(t_priority$1[unblocked])) & ah(tt: unblocked) & pr & dd & ah(t_priority$1(tt)<=max(t_priority$1[unblocked]) & not(t_priority$1(running$1)<=max(t_priority$1[unblocked]))) & pr & pr & pp(rt.1) & dd & dc(tt: ready$1) & dd & ph(tt,!tt.(tt: ready$1 => t_priority$1(tt)<=t_priority$1(running$1))) & pr & dd & ah(tt: unblocked) & pr & dd & ah(t_priority$1(tt)<=max(t_priority$1[unblocked]) & not(t_priority$1(running$1)<=max(t_priority$1[unblocked]))) & ah(tt: unblocked) & pr & pr & pp(rt.1);
  pr;
  pr;
  pr;
  dd & ah(t_priority$1(task) = max(t_priority$1[unblocked])) & ph(unblocked,t_priority$1,task,!(tasks,t_priority,task$0).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) & (task$0: tasks & task$0: schedule_p(tasks,t_priority)) => t_priority(task$0) = max(t_priority[tasks]))) & pr & pr & pr & pr & ph(unblocked,t_priority$1,!(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) => schedule_p(tasks,t_priority) <: tasks)) & pr & pr & pr & pr & pr & pr & dd & eh(t_priority$1(task),max(t_priority$1[unblocked]),Goal) & ah(tt: unblocked) & pr;
  pr;
  dd & se(unblocked) & ss & pr & ah(#(task$0).(task$0: TASK & task$0: {running$1}\/suspended$1\/blocked$1 & task$0: unblocked & (task = task$0 & unblocked-{task}-(unblocked-{task$0}) = unblocked-{task$0}-{running$1}-(unblocked-{task})))) & se(task) & ss & ah(task: unblocked) & ah(task: schedule_p(unblocked,t_priority$1)) & ph(unblocked,t_priority$1,!(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) => schedule_p(tasks,t_priority) <: tasks)) & pr & pr & pr & pr & pr & dd & pr & ah(task: blocked$1) & ah(task: unblocked & unblocked <: blocked$1) & pr & pr & pr & pr & pr & aq(#(task$0).(task$0: TASK & task$0: {running$1}\/suspended$1\/blocked$1 & task$0: unblocked & (task = task$0 & unblocked-{task}-(unblocked-{task$0}) = unblocked-{task$0}-{running$1}-(unblocked-{task})))) & dd & ah(PP) & dd(1) & ss & ah(PP) & mp & dd & ah(not(ready$1 = {})) & ah(active$1 = TRUE & not(active$1 = TRUE & ready$1 = {})) & pr & pr & ss & pr & dd & ah(not(unblocked = {}) & (#(task$0).(task$0: TASK & task$0: {running$1}\/suspended$1\/blocked$1\/ready$1 & task$0: unblocked & (task = task$0 & unblocked-{task}-(unblocked-{task$0}) = unblocked-{task$0}-ready$1-{running$1}-(unblocked-{task}))) or (ready$1\/{running$1}\/unblocked-{task} = ready$1\/unblocked & task = running$1))) & pr & ah(#(task$0).(task$0: TASK & task$0: {running$1}\/suspended$1\/blocked$1\/ready$1 & task$0: unblocked & (task = task$0 & unblocked-{task}-(unblocked-{task$0}) = unblocked-{task$0}-ready$1-{running$1}-(unblocked-{task})))) & se(task) & ss & ah(task: unblocked) & ah(task: schedule_p(unblocked,t_priority$1)) & ph(unblocked,t_priority$1,!(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) => schedule_p(tasks,t_priority) <: tasks)) & pr & pr & pr & pr & pr & dd & pr & ah(task: blocked$1) & ah(task: unblocked & unblocked <: blocked$1) & pr & pr & pr & pr & pr & pp(rp.0) & pp(rp.0);
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & dc(tt = idle_task) & ss & dc(ready$1 = {}) & ss & pr;
  pr;
  pr;
  pr;
  pr;
  ?;
  pr;
  pr;
  pr;
  dd & ah(atask: tasks$1 & dom(t_priority$1) = tasks$1 & t_priority$1: TASK +-> PRIORITY) & pr & pr & pr & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & ah(running$2: schedule_p(n_ready,n_priority)) & eh(schedule_p,_h,Goal) & eh(n_ready,_h,Goal) & pr;
  dd & ah(running: ready) & pr & dd & pr & ah(running$2: schedule_p(n_ready,n_priority)) & eh(schedule_p,_h,Goal) & pr;
  ah(schedule_p(ready$1,t_priority$1) <: ready$1) & ah(PRIORITY <: NATURAL & active$1 = TRUE => running$1: dom(t_priority$1) & !(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) => schedule_p(tasks,t_priority) <: tasks)) & pr & pr & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr
END
&
THEORY PassList IS
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),?;
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),?;
  Force(0),(?;0;1;2);
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),?;
  Force(0),(?;0;1;2);
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),(?;0;1;2);
  Force(0),?;
  Force(0),(?;0;1;2);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),?;
  Force(1),(?;0;1;2);
  Force(1),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(1),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(3),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(3),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1;2);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(2),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),?;
  Force(0),(?;0;1;2);
  Force(1),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),(?;0;1;2);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1;2);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1;2);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1;2);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1;2);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?
END
&
THEORY ManForms 
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO,genDivergencePO == KO,local_op == OK);
  PRVersion("V3.3.3.p39")(CLT == "V3.7.6")
END
