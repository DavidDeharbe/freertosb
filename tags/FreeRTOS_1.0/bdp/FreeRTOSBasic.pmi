THEORY BalanceX IS
  FreeRTOSBasic,276,75,0,186,10,5,0;
  InstanciatedConstraintsLemmas,0,0,0,0,0,0,0;
  AssertionLemmas,2,0,0,2,0,0,0;
  Initialisation,2,0,0,2,0,0,0;
  xTaskCreate,6,0,0,6,0,0,0;
  vTaskDelay,2,0,0,2,0,0,0;
  vTaskDelayUntil,3,0,0,3,0,0,0;
  vTaskDelete,30,0,0,30,0,0,0;
  vTaskEndScheduler,1,0,0,1,0,0,0;
  xTaskGetCurrentTaskHandle,0,0,0,0,0,0,0;
  uxTaskGetNumberOfTasks,0,0,0,0,0,0,0;
  uxTaskPriorityGet,0,0,0,0,0,0,0;
  vTaskPrioritySet,0,0,0,0,0,0,0;
  vTaskResume,4,0,0,4,0,0,0;
  xQueueGenericSend,44,9,0,30,3,2,0;
  xTaskResumeAll,33,25,0,7,0,1,0;
  vTaskStartScheduler,3,0,0,3,0,0,0;
  vTaskSuspend,8,0,0,8,0,0,0;
  vTaskSuspendAll,0,0,0,0,0,0,0;
  xQueueCreate,4,2,0,2,0,0,0;
  vQueueDelete,18,0,0,18,0,0,0;
  xQueueGenericReceive,64,12,0,45,7,0,0;
  xTaskGetTickCount,0,0,0,0,0,0,0;
  incrementTick,33,19,0,12,0,2,0;
  vSemaphoreCreateBinary,4,2,0,2,0,0,0;
  xSemaphoreCreateCounting,5,2,0,3,0,0,0;
  xQueueCreateMutex,5,2,0,3,0,0,0;
  xSemaphoreCreateRecursiveMutex,5,2,0,3,0,0,0
END
&
THEORY ProofState IS
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(2);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(2);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(Util);
  Proved(1);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(1);
  Proved(1);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(2);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(2);
  Proved(2);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0)
END
&
THEORY MethodList IS
  dc(mutex = que) & pr & dd & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked\/suspended)) & pr & pr & ah(task: (queue_receiving\/{mutex|->{}})(que) & mutex/=que) & pr & pr & pr;
  dc(mutex = que) & pr & dd & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked\/suspended)) & pr & pr & ah(task: (queue_sending\/{mutex|->{}})(que) & mutex/=que) & pr & pr & pr;
  pr;
  pr;
  pr;
  dc(mutex = que) & pr & dd & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked\/suspended)) & pr & pr & ah(task: (queue_receiving\/{mutex|->{}})(que) & mutex/=que) & pr & pr & pr;
  dc(mutex = que) & pr & dd & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked\/suspended)) & pr & pr & ah(task: (queue_sending\/{mutex|->{}})(que) & mutex/=que) & pr & pr & pr;
  pr;
  pr;
  pr;
  dc(semaphore$0 = que) & pr & dd & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked\/suspended)) & pr & pr & ah(task: (queue_receiving\/{semaphore$0|->{}})(que) & semaphore$0/=que) & pr & pr & pr;
  dc(semaphore$0 = que) & pr & dd & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked\/suspended)) & pr & pr & ah(task: (queue_sending\/{semaphore$0|->{}})(que) & semaphore$0/=que) & pr & pr & pr;
  pr;
  pr;
  pr;
  dc(semaphore$0 = que) & pr & dd & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked\/suspended)) & pr & pr & ah(task: (queue_receiving\/{semaphore$0|->{}})(que) & semaphore$0/=que) & pr & pr & pr;
  dc(semaphore$0 = que) & pr & dd & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked\/suspended)) & pr & pr & ah(task: (queue_sending\/{semaphore$0|->{}})(que) & semaphore$0/=que) & pr & pr & pr;
  pr;
  pr;
  dd & pr;
  dd & ah(queue_receiving = remove_task(queue_receiving,unblocked)) & pr & dd & ah(task: queue_receiving(que)) & eh(queue_receiving,_h,Goal) & eh(remove_task,_h,Goal) & pr;
  dd & ah(task/:queue_sending(que)) & ah(queue_sending = {}) & pr & dd & ah(not(task: queue_sending(que)) & task: queue_sending(que)) & pr & pr;
  pr;
  dd & ah(queue_receiving = remove_task(queue_receiving,unblocked)) & pr & dd & ah(task: queue_receiving(que)) & eh(queue_receiving,_h,Goal) & eh(remove_task,_h,Goal) & pr;
  dd & ah(task/:queue_sending(que)) & ah(queue_sending = {}) & pr & dd & ah(not(task: queue_sending(que)) & task: queue_sending(que)) & pr & pr;
  pr;
  pr;
  pr;
  dd & ah(task: remove_task(queue_receiving,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
  dd & ah(task/:queue_sending(que)) & ah(queue_sending = {}) & pr & dd & ah(not(task: queue_sending(que)) & task: queue_sending(que)) & pr & pr;
  pr;
  dd & ah(task: remove_task(queue_receiving,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
  dd & ah(task/:queue_sending(que)) & ah(queue_sending = {}) & pr & dd & ah(not(task: queue_sending(que)) & task: queue_sending(que)) & pr & pr;
  pr;
  pr;
  pr;
  dd & ah(queue_receiving = remove_task(queue_receiving,unblocked)) & pr & dd & ah(task: queue_receiving(que)) & eh(queue_receiving,_h,Goal) & eh(remove_task,_h,Goal) & pr;
  dd & ah(task: remove_task(queue_sending,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
  pr;
  dd & ah(queue_receiving = remove_task(queue_receiving,unblocked)) & pr & dd & ah(task: queue_receiving(que)) & eh(queue_receiving,_h,Goal) & eh(remove_task,_h,Goal) & pr;
  dd & ah(task: remove_task(queue_sending,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
  pr;
  dd & ah(task: remove_task(queue_receiving,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
  dd & ah(task: remove_task(queue_sending,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
  pr;
  dd & ah(task: remove_task(queue_receiving,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
  dd & ah(task: remove_task(queue_sending,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
  pr;
  dd & ah(task: remove_task(queue_receiving,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
  dd & ah(task: remove_task(queue_sending,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
  pr;
  pr;
  pr;
  dc(pxQueue = que$0) & pr & dd & dd & ah((queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0) = queue_sending(que$0)) & pr & dd & ah(task$0: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0)) & eh((queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0),_h,Goal) & dd & ah(task$0/=task) & ph(pxQueue,que$0,task,!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_sending(q1) => tk/:queue_sending(q2))) & pr & pr & pr & pr & pr & dd & ah(task$0: queue_sending(que$0) & task/:queue_sending(que$0)) & pr & pr & pr & dd & ph(que$0,task$0,!(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked\/suspended)) & pr & pr & pr & pr;
  pr;
  pr;
  dc(pxQueue = mt) & pr & dd & dd & ah((mutex_holder<+{pxQueue|->running})(mt) = mutex_holder(mt)) & pr & dd & ph(mt,!mt.(mt: queues & mt: mutexes_busy => mutex_holder(mt): tasks & mutex_holder(mt)/=idle)) & pr & ah(mt/:{pxQueue}) & pr & dd & pr & pr;
  pr;
  pr;
  pr;
  dc(pxQueue = que$0) & pr & dd & dd & ah((queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0) = queue_sending(que$0)) & pr & dd & ah(task$0: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0)) & eh((queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0),_h,Goal) & dd & ah(task$0/=task) & ph(pxQueue,que$0,task,!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_sending(q1) => tk/:queue_sending(q2))) & pr & pr & pr & pr & pr & dd & ah(task$0: queue_sending(que$0) & task/:queue_sending(que$0)) & pr & pr & pr & dd & ph(que$0,task$0,!(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked\/suspended)) & pr & pr & pr & pr;
  dc(mt = pxQueue) & pr & dd & dd & ah((mutex_holder<+{pxQueue|->running})(mt) = mutex_holder(mt)) & pr & dd & eh((mutex_holder<+{pxQueue|->running})(mt),_h,Goal) & ph(mt,!mt.(mt: queues & mt: mutexes_busy => mutex_holder(mt): tasks & mutex_holder(mt)/=idle)) & pr & ah(mt/:{pxQueue}) & pr & dd & pr;
  dc(pxQueue = mt) & pr & dd & dd & ah((mutex_holder<+{pxQueue|->running})(mt) = mutex_holder(mt)) & pr & dd & eh((mutex_holder<+{pxQueue|->running})(mt),_h,Goal) & ph(mt,!mt.(mt: queues & mt: mutexes_busy => mutex_holder(mt): tasks & mutex_holder(mt)/=idle)) & pr & ah(mt/:{pxQueue}) & pr & dd & pr & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dc(pxQueue = que$0) & pr & dd & dd & ah((queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0) = queue_sending(que$0)) & pr & dd & ah(task$0: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0)) & eh((queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0),_h,Goal) & dd & ah(task$0/=task) & ph(pxQueue,que$0,task,!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_sending(q1) => tk/:queue_sending(q2))) & pr & pr & pr & pr & pr & dd & ah(task$0: queue_sending(que$0) & task/:queue_sending(que$0)) & pr & pr & pr & dd & ph(que$0,task$0,!(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked\/suspended)) & pr & pr & pr & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dc(pxQueue = que$0) & pr & dd & dd & ah((queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0) = queue_sending(que$0)) & pr & dd & ah(task$0: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0)) & eh((queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0),_h,Goal) & dd & ah(task$0/=task) & ph(pxQueue,que$0,task,!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_sending(q1) => tk/:queue_sending(q2))) & pr & pr & pr & pr & pr & dd & ah(task$0: queue_sending(que$0) & task/:queue_sending(que$0)) & pr & pr & pr & dd & ph(que$0,task$0,!(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked\/suspended)) & pr & pr & pr & pr;
  dc(mt = pxQueue) & pr & dd & dd & ah((mutex_holder<+{pxQueue|->running})(mt) = mutex_holder(mt)) & pr & dd & eh((mutex_holder<+{pxQueue|->running})(mt),_h,Goal) & ph(mt,!mt.(mt: queues & mt: mutexes_busy => mutex_holder(mt): tasks & mutex_holder(mt)/=idle)) & pr & ah(mt/:{pxQueue}) & pr & dd & pr;
  dc(pxQueue = mt) & pr & dd & dd & ah((mutex_holder<+{pxQueue|->running})(mt) = mutex_holder(mt)) & pr & dd & eh((mutex_holder<+{pxQueue|->running})(mt),_h,Goal) & ph(mt,!mt.(mt: queues & mt: mutexes_busy => mutex_holder(mt): tasks & mutex_holder(mt)/=idle)) & pr & ah(mt/:{pxQueue}) & pr & dd & pr & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dc(pxQueue = que) & pr & dd & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked\/suspended)) & pr & pr & ah((queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(que) = queue_receiving(que)) & pr & dd & ah(task: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(que)) & eh((queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(que),_h,Goal) & pr;
  pr;
  dc(pxQueue = que) & pr & dd & dd & ah((queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(que) = queue_receiving(que)) & pr & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked\/suspended)) & pr & pr & ah((queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(que) = queue_receiving(que)) & dd & ah(task: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(que)) & eh((queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(que),_h,Goal) & pr;
  pr;
  pr;
  pr;
  dc(pxQueue = que) & pr & dd & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked\/suspended)) & pr & pr & ah((queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(que) = queue_receiving(que)) & pr & dd & ah(task: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(que)) & eh((queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(que),_h,Goal) & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dc(pxQueue = que) & pr & dd & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked\/suspended)) & pr & pr & ah(task: (queue_receiving\/{pxQueue|->{}})(que) & pxQueue/=que) & pr & pr & pr;
  dc(pxQueue = que) & pr & dd & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked\/suspended)) & pr & pr & ah(task: (queue_sending\/{pxQueue|->{}})(que) & pxQueue/=que) & pr & pr & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & pr;
  dd & ah(task/:queue_receiving(que)) & ah(queue_receiving = {}) & pr & pr;
  dd & ah(queue_sending = remove_task(queue_sending,unblocked)) & pr & dd & pr & ah(task: queue_sending(que)) & eh(queue_sending,_h,Goal) & eh(remove_task,_h,Goal) & pr;
  dd & pr;
  dd & ah(task/:queue_receiving(que)) & ah(queue_receiving = {}) & pr & pr;
  dd & ah(queue_sending = remove_task(queue_sending,unblocked)) & pr & dd & pr & ah(task: queue_sending(que)) & eh(queue_sending,_h,Goal) & eh(remove_task,_h,Goal) & pr;
  pr;
  pr;
  pr;
  dd & ah(task/:queue_receiving(que)) & ah(queue_receiving = {}) & pr & pr;
  dd & ah(task: remove_task(queue_sending,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
  pr;
  dd & ah(task/:queue_receiving(que)) & ah(queue_receiving = {}) & pr & pr;
  dd & ah(task: remove_task(queue_sending,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
  pr;
  dd & pr & ah(task: remove_task(queue_receiving,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
  dd & ah(task/:queue_sending(que)) & pr & ah(queue_sending = {}) & pr;
  dd & ah(task: remove_task(queue_receiving,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
  dd & ah(queue_sending = remove_task(queue_sending,unblocked)) & pr & dd & pr & ah(task: queue_sending(que)) & eh(queue_sending,_h,Goal) & eh(remove_task,_h,Goal) & pr;
  dd & pr;
  dd & ah(task: remove_task(queue_receiving,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
  dd & ah(queue_sending = remove_task(queue_sending,unblocked)) & pr & dd & pr & ah(task: queue_sending(que)) & eh(queue_sending,_h,Goal) & eh(remove_task,_h,Goal) & pr;
  pr;
  dd & pr & ah(task: remove_task(queue_receiving,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
  dd & ah(task: remove_task(queue_sending,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
  dd & pr;
  dd & ah(task: remove_task(queue_receiving,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
  dd & ah(task: remove_task(queue_sending,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
  dd & pr;
  dd & ah(task: remove_task(queue_receiving,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
  dd & ah(task: remove_task(queue_sending,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
  pr;
  pr;
  pr;
  dc(pxQueue = que) & pr & dd & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked\/suspended)) & pr & pr & ah((queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(que) = queue_sending(que)) & pr & dd & ah(task: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(que)) & eh((queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(que),_h,Goal) & pr;
  dc(pxQueue = que$0) & pr & dd & dd & ah(task$0/=task) & ah((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0) = queue_receiving(que$0)) & pr & dd & ah(task$0: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0)) & eh((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0),_h,Goal) & dd & ph(que$0,pxQueue,task$0,!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_receiving(q1) => tk/:queue_receiving(q2))) & pr & pr & pr & pr & pr & dd & ah(not(task$0: queue_receiving(pxQueue)) & task: queue_receiving(pxQueue)) & pr & pr & pr & dd & ph(que$0,task$0,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked\/suspended)) & pr & pr & ah((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0) = queue_receiving(que$0)) & pr & dd & ah(task$0: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0)) & eh((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0),_h,Goal) & dd & pr;
  pr;
  dc(pxQueue = que$0) & pr & dd & dd & ah(task/=task$0) & ah((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0) = queue_receiving(que$0)) & pr & ah(pxQueue/=que$0) & pr & pr & dd & ah(task$0: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0)) & eh((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0),_h,Goal) & dd & ph(que$0,pxQueue,task$0,!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_receiving(q1) => tk/:queue_receiving(q2))) & pr & pr & pr & pr & pr & dd & pr & dd & ph(que$0,task$0,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked\/suspended)) & pr & pr & ah((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0) = queue_receiving(que$0)) & ah(pxQueue/=que$0) & pr & pr & pr & dd & ah(task$0: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0)) & eh((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0),_h,Goal) & pr;
  pr;
  dc(pxQueue = que$0) & pr & dd & dd & ah(task/=task$0) & ah((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0) = queue_receiving(que$0)) & pr & ah(pxQueue/=que$0) & pr & pr & dd & ah(task$0: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0)) & eh((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0),_h,Goal) & dd & ph(que$0,pxQueue,task$0,!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_receiving(q1) => tk/:queue_receiving(q2))) & pr & pr & pr & pr & pr & dd & pr & dd & ph(que$0,task$0,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked\/suspended)) & pr & pr & ah((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0) = queue_receiving(que$0)) & ah(pxQueue/=que$0) & pr & pr & pr & dd & ah(task$0: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0)) & eh((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0),_h,Goal) & pr;
  pr;
  pr;
  pr;
  dc(pxQueue = que$0) & pr & dd & dd & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dc(pxQueue = que$0) & pr & dd & dd & ah(task$0/=task) & ah((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0) = queue_receiving(que$0)) & pr & dd & ah(task$0: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0)) & eh((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0),_h,Goal) & dd & ph(que$0,pxQueue,task$0,!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_receiving(q1) => tk/:queue_receiving(q2))) & pr & pr & pr & pr & pr & dd & ah(not(task$0: queue_receiving(pxQueue)) & task: queue_receiving(pxQueue)) & pr & pr & pr & dd & ph(que$0,task$0,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked\/suspended)) & pr & pr & ah((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0) = queue_receiving(que$0)) & pr & dd & ah(task$0: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0)) & eh((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0),_h,Goal) & dd & pr;
  pr;
  dc(pxQueue = que$0) & pr & dd & dd & ah(task/=task$0) & ah((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0) = queue_receiving(que$0)) & pr & ah(pxQueue/=que$0) & pr & pr & dd & ah(task$0: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0)) & eh((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0),_h,Goal) & dd & ph(que$0,pxQueue,task$0,!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_receiving(q1) => tk/:queue_receiving(q2))) & pr & pr & pr & pr & pr & dd & pr & dd & ph(que$0,task$0,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked\/suspended)) & pr & pr & ah((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0) = queue_receiving(que$0)) & ah(pxQueue/=que$0) & pr & pr & pr & dd & ah(task$0: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0)) & eh((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0),_h,Goal) & pr;
  pr;
  dc(pxQueue = que$0) & pr & dd & dd & ah(task/=task$0) & ah((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0) = queue_receiving(que$0)) & pr & ah(pxQueue/=que$0) & pr & pr & dd & ah(task$0: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0)) & eh((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0),_h,Goal) & dd & ph(que$0,pxQueue,task$0,!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_receiving(q1) => tk/:queue_receiving(q2))) & pr & pr & pr & pr & pr & dd & pr & dd & ph(que$0,task$0,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked\/suspended)) & pr & pr & ah((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0) = queue_receiving(que$0)) & ah(pxQueue/=que$0) & pr & pr & pr & dd & ah(task$0: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0)) & eh((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0),_h,Goal) & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dc(task = running) & pr & dd & dd & dc(pxQueue = que) & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked\/suspended)) & pr & pr & ah((queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(que) = queue_sending(pxQueue)\/{running}) & eh(pxQueue,_h,Goal) & pr & dd & ah(task: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(que)) & eh((queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(que),_h,Goal) & dd & pr & dd & pr & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked\/suspended)) & pr & pr & ah((queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(que) = queue_sending(que)) & ah(pxQueue/=que) & pr & pr & pr & dd & ah(task: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(que)) & eh((queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(que),_h,Goal) & dd & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr
END
&
THEORY PassList IS
  Force(2),(?;0;1;2;3);
  Force(2),(?;0;1;2;3);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(2),(?;0;1;2;3);
  Force(2),(?;0;1;2;3);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(2),(?;0;1;2;3);
  Force(2),(?;0;1;2;3);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(2),(?;0;1;2;3);
  Force(2),(?;0;1;2;3);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1;2;3);
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1;2;3);
  Force(0),?;
  Force(0),?;
  Force(2),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(2),?;
  Force(0),?;
  Force(0),(?;0;1;2;3);
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1;2;3);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),(?;0;1;2;3);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),(?;0;1;2;3);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(1),(?;0;1;2;3);
  Force(1),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),(?;0;1;2;3);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(1),?;
  Force(1),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),(?;0;1;2;3);
  Force(0),?;
  Force(1),(?;0;1;2;3);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1;2;3);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(2),(?;0;1;2;3);
  Force(2),(?;0;1;2;3);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(2),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(2),?;
  Force(2),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?
END
&
THEORY ManForms 
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO,genDivergencePO == KO,local_op == OK);
  PRVersion("V3.3.3.p39")(CLT == "V3.7.6")
END
