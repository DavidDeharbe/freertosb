/* Task_r

\brief Refinement of Task Core .

Module responsible for specific the features priority in the task concepts.


Author: Stephenson Galvao, David Deharbe
Creation date: Sun Mar 8 2009
Universidade Federal do Rio Grande do Norte
Departamento de Informatica e Matematica Aplicada
Programa de Pos-Graduacao em Sistemas e Computacao
Formal Methods and Languages Laboratory

*/
REFINEMENT
  Task_r
  
REFINES
  Task
  
SEES
  FreeRTOSConfig ,
  Types,
  Scheduler
  
CONSTANTS
  max_prt,
  schedule_p
  
PROPERTIES
  
  max_prt: PRIORITY * PRIORITY --> PRIORITY &
  max_prt = %(tmp_mprt_ready,t_prt).(tmp_mprt_ready : PRIORITY & t_prt : PRIORITY | max({tmp_mprt_ready,t_prt})) &
  
  /*
  This function is used to make a switch context. Here than return a set of task that are able to became in running 
  in this first case any one of this tasks can became in runnig states, but in future the sequence of task will be 
  implemented
  */
  schedule_p: (FIN(TASK) * (TASK +-> PRIORITY)) +-> FIN(TASK) &
  schedule_p = %(tasks, t_priority). (tasks : FIN(TASK) & t_priority : TASK +-> PRIORITY & tasks /= {} 
    							& tasks <:dom(t_priority) | tasks /\ dom(t_priority |> {max(t_priority[tasks])} ))
  
ABSTRACT_VARIABLES
  active, /** the system is in active mode: the scheduler is functionning and tasks are executed */
  tasks,	/** all existing tasks */   
  blocked, /** set of blocked task*/
  runable, /** set of runable task*/
  suspended, /** set of suspend task*/
  running, /** task current*/
  idle, 
  t_priority,
  t_bpriority
  
INVARIANT
  active : BOOL &
  
  t_priority : TASK +-> PRIORITY & 
  dom(t_priority) = tasks &
  
  t_bpriority: TASK +-> PRIORITY & 
  dom(t_bpriority) = tasks &
  
  (active = TRUE =>
    t_priority(idle) = IDLE_PRIORITY &
  	t_priority(running) = max(t_priority[runable]) &
  	IDLE_PRIORITY <= min(t_priority[tasks])
 )
 

  
ASSERTIONS
  (PRIORITY <: NATURAL);
  
  (active = TRUE => running : dom(t_priority));
  
  active = TRUE => {t_priority[runable]} <: FIN(PRIORITY);
  
  active = TRUE => !atask.(atask:TASK & atask:runable & atask/=idle => runable/={atask});
  
  active = TRUE => t_priority[runable]/={};
  
  /*(active = TRUE => (!(tt).(tt : runable => (t_priority (tt) <= t_priority(running)))));*/
 	
 	/*!(atask).(atask:TASK & runable/={} & atask:runable & idle:runable & idle/= atask => runable/={atask});*/
 	
 /*	not(ran(schedule_p) = {});*/
 	
 	
 	!(tasks,t_priority,rtask).(tasks : FIN(TASK) & t_priority:TASK+->PRIORITY & tasks/={} & tasks <:dom(t_priority) & rtask:TASK &
 	  rtask:tasks & rtask:schedule_p(tasks,t_priority)=> t_priority(rtask) = max(t_priority[tasks]));
 	
 	!(tasks,t_priority,rtask,dtask).(tasks : FIN(TASK) & t_priority:TASK+->PRIORITY & tasks/={} & tasks <:dom(t_priority) & rtask:TASK & rtask:tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask:TASK & dtask:tasks & rtask/= dtask => t_priority(rtask) = max(t_priority[tasks-{dtask}]));
 	
 	!(tasks,t_priority,run,atask).(tasks : FIN(TASK) & t_priority:TASK+->PRIORITY & tasks/={} & tasks <:dom(t_priority) & run:TASK & run:tasks & t_priority(run) = max(t_priority[tasks]) & atask:TASK & atask/:tasks & 
 	  t_priority(atask)<t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}]));
 	
 	
 	!(tasks,t_priority,rtask).(tasks : FIN(TASK) & t_priority:TASK+->PRIORITY & tasks <:dom(t_priority) & tasks/={} & rtask:TASK & rtask:tasks & tasks/={rtask} => max(t_priority[tasks-{rtask}]) <= max(t_priority[tasks]));
 	
 	
 	!(tasks,t_priority,rtask,priority ).(tasks : FIN(TASK) & t_priority:TASK+->PRIORITY & tasks <:dom(t_priority) & tasks/={} & rtask:TASK & rtask:tasks & tasks/={rtask}& priority:PRIORITY & max(t_priority[tasks])<=priority & max(t_priority[tasks-{rtask}])<=max(t_priority[tasks]) => priority = max(t_priority[tasks-{rtask}]\/{priority}));
 	
 	!(tasks,t_priority,rtask,priority ).(tasks : FIN(TASK) & t_priority:TASK+->PRIORITY & tasks <:dom(t_priority) & tasks/={} & rtask:TASK & rtask:tasks & tasks/={rtask} & priority:PRIORITY & priority+1<=max(t_priority[tasks]) & max(t_priority[tasks-{rtask}])=max(t_priority[tasks]) => max(t_priority[tasks]) = max(t_priority[tasks-{rtask}]\/{priority})) 	
 	
  /*
  (!(tasks, t_priority).(tasks : FIN(TASK) & t_priority : TASK +-> PRIORITY & tasks /= {} & tasks <: dom(t_priority) 
      => schedule_p(tasks, t_priority) <: tasks));
  
  (!(tasks, t_priority).(tasks : FIN(TASK) & t_priority : TASK +-> PRIORITY & tasks /= {} & tasks <: dom(t_priority) => 
      !(task).(task : tasks & task : schedule_p(tasks, t_priority) => t_priority(task) = max(t_priority[tasks]))))
  */
INITIALISATION
  active := FALSE ||
  tasks := {} ||
  running :: TASK ||
  idle :: TASK ||
  t_priority := {} ||
  t_bpriority:={}||
  blocked, runable, suspended:= {},{},{}
  
OPERATIONS
  /**	
  \brief Task creation
  
  \do 
  This method create a new task. The task created can have the state ready or running. This choice 
  depend both of the priorities of the tasks in ready state and the priority of the new task created
  and will be implement in future refinement. The parameter priority is declared but not used.
  
  \parameters
  priority - The priority of the task
  
  \note 
  The actual function takes the handled as a parameter passed by reference.
  
  **/
  result <-- t_create (priority) =
  BEGIN	
    ANY
      task,
      n_runable, /* the creating of n_runable was better to refinament prove*/
      n_priority
    WHERE
      task : TASK &
      task /: tasks &
      n_runable <: tasks &
      n_runable = runable \/ {task} &
      task/=TASK_NULL &
      n_priority:TASK +-> PRIORITY &
      n_priority= t_priority \/ {task|->priority}
    THEN
      tasks := tasks \/ {task} ||
      runable := n_runable||
      t_priority:= n_priority||
      t_bpriority:= t_bpriority \/ {task|->priority}||
      IF active = TRUE THEN
        IF priority>=t_priority(running) THEN /* Scheduler actived and the new task priority gratter then running tasks */
          running::schedule_p(n_runable,n_priority) /* forcing the switch context */
        END
      ELSE
        IF runable = {} THEN
          running:=task
        ELSE
          IF priority >= t_priority(running) THEN
            running::schedule_p(n_runable,n_priority)
          END
        END
      END||
      result := task
    END
  END;
  
  /**
  \brief Delete Task
  
  \do	
  Delete a task managed by FreeRTOS. If the task that will be delete is the current task, a ready 
  task will became the running task. The NULL task can't be deleted. 
  
  \parameters 
  aTask - Task that will be deleted
  
  \question
  can it delete the idle task?
  R - the handle to idle task is not visible for user
  when the task that gonna delete is the unique task in tasks, what do it do?
  R- I don't allow this. The handle for idle task can't be take.
  
  **/
  t_delete (atask)=
  BEGIN
    ANY 
      n_runable,
      n_priority
    WHERE
      n_runable<:tasks &
      n_runable = runable - {atask} &
      n_runable /={} &
      n_priority:TASK +-> PRIORITY &
      n_priority = {atask} <<| t_priority
    THEN
      tasks := tasks - { atask } || 
      t_priority := n_priority||
      t_bpriority:= {atask} <<| t_bpriority||
      IF atask : runable  THEN
        runable := n_runable||        
        IF atask = running THEN
          IF active = TRUE THEN 
            running::schedule_p(n_runable,n_priority)
          END
        END
    	ELSIF atask : blocked  THEN
      	blocked := blocked - { atask }
    	ELSIF atask : suspended THEN
      	suspended := suspended - { atask }
    	END
    END
  END;  
  
  t_yield =
  PRE
    active=TRUE
  THEN
    running::schedule_p(runable,t_priority)
  END;
  
  /**
  \brief Suspend Task
  
  \do	
  This method suspend the passed task. If the task that will be suspend is 
  the current task, a task with the state ready will choice to be the current task.
  
  \parameters 
  atask- Task that will be suspend
  
  **/
  t_suspend (stask)=
  BEGIN
    IF stask : runable THEN
      ANY n_runable 
      WHERE 
        n_runable<:tasks&
        n_runable=runable-{stask}&
        n_runable/={}
      THEN
        runable:=n_runable||
        IF stask=running THEN
          running::schedule_p(n_runable,t_priority)
        END
      END                
    ELSIF stask : blocked THEN
      blocked := blocked - { stask }
    END||
    suspended := suspended \/ { stask } 
  END;
  
  /**
  \brief	Resume Task
  
  \do	
  This method resume a suspended tasks. The resumed task can go to ready or running state depend 
  the priority of resumed tasks (this choice will be specific in future refinement)
  
  \parameters 
  atask - Task that will be resume
  
  **/
  
  t_resume(rtask) =
  BEGIN 
    ANY 
      n_runable
    WHERE
      n_runable<:tasks &
      n_runable = runable \/ {rtask}
    THEN
      runable := n_runable ||
      IF t_priority(rtask) >= t_priority(running) THEN
        running::schedule_p(n_runable,t_priority)
      END
    END||        
    suspended := suspended - {rtask}
  END;
  
/**
\brief	Get Task Priority

\do	
This method get the priority of the task passed, but here this only return a priority available. 
It will implement in future refinement.

\parameters 
atask - Task that will be returned the priority

\returns
priority - a priority belong of Priority set

**/
priority <-- t_getPriority(atask)=
BEGIN
  priority := t_priority(atask)
END;

/**
\brief	Get Current Task

\do	
Return the currently running task

\returns
result - The currently running task

**/
result <-- t_getCurrent =
BEGIN
  result := running
END;

/**
\brief	Get Number of Task

\do	
Get the number of tasks managed by the FreeRTOS

\returns
numberOfTasks -  number of tasks managed by the FreeRTOS

**/
result <-- t_getNumberOfTasks =
BEGIN
  result := card(tasks)
END;

/**
\brief	Delay Task

\do	
Change the state of the current task for the blocked state during the number tick passed. 
But here it only change the state of task leaving the feature time of block for the next refinement


\paramenters
tick - The tick that the task should be unbloked. Is declared but no used here

**/
t_delayTask(ticks,task)=
BEGIN
  ANY
    n_runable
  WHERE
    n_runable <: tasks &
    n_runable = runable-{running}&
    n_runable/={}
  THEN
    runable:= n_runable ||
    running::schedule_p(n_runable,t_priority)
  END||
  blocked := blocked \/ {running}
END;

/**
\brief	Start Scheduler

\do	
Start the scheduler and create the idle task		

\return 

**/
t_startScheduler = 
BEGIN
  active := TRUE ||
  ANY
    idle_task,
    n_runable
  WHERE
    idle_task:TASK & 
    idle_task/: tasks &
    n_runable <:tasks &
    n_runable = runable\/ {idle_task}
  THEN
    idle := idle_task ||
    tasks := tasks\/{idle_task}||
    running::schedule_p(n_runable,t_priority)
  END
END;



/**
\brief	End Scheduler

\do	
End the task of schuler
**/
t_endScheduler =
BEGIN
  active := FALSE ||
  tasks := {} ||
  t_priority:= {} ||
  t_bpriority:={} ||
  blocked , runable , suspended := {},{},{}
END;


/**
\brief	Resume All

\do	
Method used for resume the scheduler. It increment the tick with missed ticks and verify the list of 
blocked tasks to unblock the tasks with expired timers.
**/
t_resumeAll(unblocked) = 
BEGIN
  IF unblocked /= {} THEN
    ANY
      n_runable
    WHERE
      n_runable<:tasks &
      n_runable = runable \/ unblocked
    THEN
      runable:=n_runable ||
      running::schedule_p(n_runable,t_priority)
    END||
    blocked := blocked - unblocked
  END
END;


/**
\brief	Remove From Block List

\do
Unblock the given task

**/
t_unblock(task)=
BEGIN
  blocked := blocked - {task}||
  ANY
    n_runable
  WHERE
    n_runable<:tasks &
    n_runable = runable \/ {task}
  THEN
    runable := n_runable||
    IF t_priority(task) >= t_priority(running) THEN
      running :: schedule_p(n_runable,t_priority)
    END
  END
END;


t_removeFromEventList(task)=
BEGIN
  IF 
    task: blocked 
  THEN
    blocked:= blocked - {task}
  END||
  IF
    task:suspended
  THEN
    suspended:= suspended - {task}
  END||  
  ANY
    n_runable
  WHERE
    n_runable<:tasks &
    n_runable = runable \/ {task}
  THEN
    runable := n_runable||
    IF t_priority(task) >= t_priority(running) THEN
      running :: schedule_p(n_runable,t_priority)
    END     
  END
END;

/*
SG->DD
Adicionei mais essa operação
falta apenas uma obrigação de prova sobre essa operação
*/

  t_setPriority (task, priority)=
  BEGIN
    ANY 
      n_priority
    WHERE
      n_priority= t_priority <+{task|->priority}
    THEN
      t_priority:=n_priority||
      t_bpriority(task) := priority||
      IF task:runable THEN
        IF t_priority(running) <= priority THEN
          IF task /= running THEN
            running :: schedule_p(runable, n_priority)
          END
        ELSE
          IF task = running THEN
            running :: schedule_p(runable, n_priority)
          END
        END
      END
    END
  END;
  


t_priorityInherit(holderTask,xTicksToWait)=
BEGIN
  ANY 
    n_runable,
    n_priority
  WHERE
    n_runable <: tasks &
    n_runable = runable-{running} & 
    n_runable /={} &
    n_priority:TASK +-> PRIORITY & 
    n_priority = t_priority <+ {holderTask|->t_priority(running)} 
  THEN
    runable := n_runable ||
    blocked := blocked \/ {running}||
    IF t_priority(running) > t_priority(holderTask) 
    THEN
      t_priority:= n_priority||
      t_bpriority(holderTask):= t_priority(holderTask)||
      running::schedule_p(n_runable,n_priority)
    ELSE
      running::schedule_p(n_runable,t_priority)
    END
  END
END;


t_returnPriority(btask)=
BEGIN
  IF 
    btask: blocked 
  THEN
    blocked:= blocked - {btask}
  END||
  IF
    btask:suspended
  THEN
    suspended:= suspended - {btask}
  END||
  ANY
    n_runable,
    n_priority
  WHERE
    n_runable<:tasks &
    n_runable = runable \/ {btask} &
    n_priority :TASK +-> PRIORITY &
    n_priority = t_priority <+ {running|->t_bpriority(running)}
  THEN
    runable := n_runable||
    IF t_bpriority(running)/= t_priority(running) THEN
      t_priority := n_priority||
      running :: schedule_p(n_runable,n_priority)
    ELSIF t_priority(btask) >= t_priority(running) THEN
        running :: schedule_p(n_runable,t_priority)
    END
  END
END

END

