THEORY OPOBalanceX IS
  Task,614;
  InstanciatedConstraintsLemmas,0;
  Initialisation,6;
  xTaskCreate,115;
  vTaskDelete,31;
  prvIdleTask,14;
  vTaskSuspend,65;
  vTaskResume,29;
  uxTaskPriorityGet,34;
  vTaskStartScheduler,25;
  vTaskEndScheduler,34;
  vTaskSuspendAll,32;
  xTaskResumeAll,61;
  xTaskGetCurrentTaskHandle,34;
  uxTaskGetNumberOfTasks,34;
  xTaskGetSchedulerState,100
END
&
THEORY OPOProofList IS
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.100,(_of(144) & _of(121) => _of(91));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.99,(_of(144) & _of(119) => _of(89));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.98,(_of(144) & _of(118) => _of(87));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.97,(_of(144) & _of(134) => _of(85));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.96,(_of(144) & _of(130) => _of(83));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.95,(_of(144) & _of(117) => _of(45));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.94,(_of(144) & _of(116) => _of(43));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.93,(_of(144) & _of(114) => _of(41));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.92,(_of(144) & _of(133) => _of(81));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.91,(_of(144) & _of(122) => _of(79));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.90,(_of(144) & _of(113) => _of(49));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.89,(_of(144) & _of(112) => _of(39));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.88,(_of(144) & _of(112) => _of(38));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.87,(_of(144) & _of(111) => _of(36));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.86,(_of(144) & _of(111) => _of(35));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.85,(_of(144) & _of(110) => _of(33));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.84,(_of(144) & _of(109) => _of(31));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.83,(_of(144) & _of(109) => _of(30));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.82,(_of(144) & _of(128) => _of(28));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.81,(_of(144) & _of(128) => _of(27));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.80,(_of(144) & _of(108) => _of(51));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.79,(_of(144) & _of(107) => _of(77));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.78,(_of(144) & _of(106) => _of(75));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.77,(_of(144) & _of(106) => _of(74));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.76,(_of(144) & _of(105) => _of(72));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.75,(_of(144) & _of(104) => _of(70));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.74,(_of(144) & _of(103) => _of(68));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.73,(_of(144) & _of(102) => _of(66));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.72,(_of(144) & _of(101) => _of(64));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.71,(_of(144) & _of(100) => _of(62));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.70,(_of(144) & _of(99) => _of(60));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.69,(_of(144) & _of(98) => _of(58));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.68,(_of(144) & _of(97) => _of(23));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.67,(_of(143) & _of(121) => _of(91));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.66,(_of(143) & _of(119) => _of(89));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.65,(_of(143) & _of(118) => _of(87));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.64,(_of(143) & _of(134) => _of(85));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.63,(_of(143) & _of(130) => _of(83));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.62,(_of(143) & _of(117) => _of(45));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.61,(_of(143) & _of(116) => _of(43));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.60,(_of(143) & _of(114) => _of(41));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.59,(_of(143) & _of(133) => _of(81));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.58,(_of(143) & _of(122) => _of(79));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.57,(_of(143) & _of(113) => _of(49));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.56,(_of(143) & _of(112) => _of(39));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.55,(_of(143) & _of(112) => _of(38));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.54,(_of(143) & _of(111) => _of(36));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.53,(_of(143) & _of(111) => _of(35));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.52,(_of(143) & _of(110) => _of(33));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.51,(_of(143) & _of(109) => _of(31));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.50,(_of(143) & _of(109) => _of(30));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.49,(_of(143) & _of(128) => _of(28));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.48,(_of(143) & _of(128) => _of(27));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.47,(_of(143) & _of(108) => _of(51));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.46,(_of(143) & _of(107) => _of(77));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.45,(_of(143) & _of(106) => _of(75));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.44,(_of(143) & _of(106) => _of(74));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.43,(_of(143) & _of(105) => _of(72));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.42,(_of(143) & _of(104) => _of(70));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.41,(_of(143) & _of(103) => _of(68));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.40,(_of(143) & _of(102) => _of(66));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.39,(_of(143) & _of(101) => _of(64));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.38,(_of(143) & _of(100) => _of(62));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.37,(_of(143) & _of(99) => _of(60));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.36,(_of(143) & _of(98) => _of(58));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.35,(_of(143) & _of(97) => _of(23));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.34,(_of(142) & _of(121) => _of(91));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.33,(_of(142) & _of(119) => _of(89));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.32,(_of(142) & _of(118) => _of(87));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.31,(_of(142) & _of(134) => _of(85));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.30,(_of(142) & _of(130) => _of(83));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.29,(_of(142) & _of(117) => _of(45));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.28,(_of(142) & _of(116) => _of(43));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.27,(_of(142) & _of(114) => _of(41));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.26,(_of(142) & _of(133) => _of(81));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.25,(_of(142) & _of(122) => _of(79));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.24,(_of(142) & _of(113) => _of(49));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.23,(_of(142) & _of(112) => _of(39));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.22,(_of(142) & _of(112) => _of(38));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.21,(_of(142) & _of(111) => _of(36));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.20,(_of(142) & _of(111) => _of(35));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.19,(_of(142) & _of(110) => _of(33));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.18,(_of(142) & _of(109) => _of(31));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.17,(_of(142) & _of(109) => _of(30));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.16,(_of(142) & _of(128) => _of(28));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.15,(_of(142) & _of(128) => _of(27));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.14,(_of(142) & _of(108) => _of(51));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.13,(_of(142) & _of(107) => _of(77));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.12,(_of(142) & _of(106) => _of(75));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.11,(_of(142) & _of(106) => _of(74));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.10,(_of(142) & _of(105) => _of(72));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.9,(_of(142) & _of(104) => _of(70));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.8,(_of(142) & _of(103) => _of(68));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.7,(_of(142) & _of(102) => _of(66));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.6,(_of(142) & _of(101) => _of(64));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.5,(_of(142) & _of(100) => _of(62));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.4,(_of(142) & _of(99) => _of(60));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.3,(_of(142) & _of(98) => _of(58));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.2,(_of(142) & _of(97) => _of(23));
  _f(1) & _f(2) & _f(27) & _f(214) & xTaskGetSchedulerState.1,(_of(92) => _of(14));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.34,(_of(121) => _of(91));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.33,(_of(119) => _of(89));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.32,(_of(118) => _of(87));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.31,(_of(134) => _of(85));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.30,(_of(130) => _of(83));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.29,(_of(117) => _of(45));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.28,(_of(116) => _of(43));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.27,(_of(114) => _of(41));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.26,(_of(133) => _of(81));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.25,(_of(122) => _of(79));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.24,(_of(113) => _of(49));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.23,(_of(112) => _of(39));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.22,(_of(112) => _of(38));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.21,(_of(111) => _of(36));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.20,(_of(111) => _of(35));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.19,(_of(110) => _of(33));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.18,(_of(109) => _of(31));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.17,(_of(109) => _of(30));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.16,(_of(128) => _of(28));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.15,(_of(128) => _of(27));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.14,(_of(108) => _of(51));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.13,(_of(107) => _of(77));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.12,(_of(106) => _of(75));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.11,(_of(106) => _of(74));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.10,(_of(105) => _of(72));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.9,(_of(104) => _of(70));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.8,(_of(103) => _of(68));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.7,(_of(102) => _of(66));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.6,(_of(101) => _of(64));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.5,(_of(100) => _of(62));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.4,(_of(99) => _of(60));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.3,(_of(98) => _of(58));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.2,(_of(97) => _of(23));
  _f(1) & _f(2) & _f(27) & uxTaskGetNumberOfTasks.1,(_of(92) => _of(14));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.34,(_of(121) => _of(91));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.33,(_of(119) => _of(89));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.32,(_of(118) => _of(87));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.31,(_of(134) => _of(85));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.30,(_of(130) => _of(83));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.29,(_of(117) => _of(45));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.28,(_of(116) => _of(43));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.27,(_of(114) => _of(41));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.26,(_of(133) => _of(81));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.25,(_of(122) => _of(79));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.24,(_of(113) => _of(49));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.23,(_of(112) => _of(39));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.22,(_of(112) => _of(38));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.21,(_of(111) => _of(36));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.20,(_of(111) => _of(35));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.19,(_of(110) => _of(33));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.18,(_of(109) => _of(31));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.17,(_of(109) => _of(30));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.16,(_of(128) => _of(28));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.15,(_of(128) => _of(27));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.14,(_of(108) => _of(51));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.13,(_of(107) => _of(77));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.12,(_of(106) => _of(75));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.11,(_of(106) => _of(74));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.10,(_of(105) => _of(72));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.9,(_of(104) => _of(70));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.8,(_of(103) => _of(68));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.7,(_of(102) => _of(66));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.6,(_of(101) => _of(64));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.5,(_of(100) => _of(62));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.4,(_of(99) => _of(60));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.3,(_of(98) => _of(58));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.2,(_of(97) => _of(23));
  _f(1) & _f(2) & _f(27) & xTaskGetCurrentTaskHandle.1,(_of(92) => _of(14));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.61,(_f(213) & _of(121) => _of(91));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.60,(_f(213) & _of(119) => _of(89));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.59,(_f(213) & _of(118) => _of(87));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.58,(_f(213) & _of(134) => _of(85));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.57,(_f(213) & _of(130) => _of(83));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.56,(_f(213) & _of(117) => _of(45));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.55,(_f(213) & _of(116) => _of(43));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.54,(_f(213) & _of(114) => _of(41));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.53,(_f(213) & _of(133) => _of(81));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.52,(_f(213) & _of(122) => _of(79));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.51,(_f(213) & _of(113) => _of(49));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.50,(_f(213) & _of(112) => _of(39));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.49,(_f(213) & _of(112) => _of(38));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.48,(_of(141) & _of(110) => _of(33));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.47,(_of(141) & _of(109) => _of(31));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.46,(_of(141) & _of(109) => _of(30));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.45,(_of(141) & _of(128) => _of(28));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.44,(_of(141) & _of(128) => _of(27));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.43,(_of(141) & _of(108) => _of(51));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.42,(_of(141) & _of(107) => _of(77));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.41,(_of(141) & _of(106) => _of(75));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.40,(_of(141) & _of(106) => _of(74));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.39,(_of(141) & _of(105) => _of(72));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.38,(_of(141) & _of(104) => _of(70));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.37,(_of(141) & _of(103) => _of(68));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.36,(_of(141) & _of(102) => _of(66));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.35,(_of(141) & _of(101) => _of(64));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.34,(_of(141) & _of(100) => _of(62));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.33,(_of(141) & _of(99) => _of(60));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.32,(_of(141) & _of(98) => _of(58));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.31,(_of(141) & _of(97) => _of(23));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.30,(_f(207) & _of(121) => _of(91));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.29,(_f(207) & _of(119) => _of(89));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.28,(_f(207) & _of(118) => _of(87));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.27,(_f(207) & _of(134) => _of(85));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.26,(_f(207) & _of(130) => _of(83));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.25,(_f(207) & _of(117) => _of(45));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.24,(_f(207) & _of(116) => _of(43));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.23,(_f(207) & _of(114) => _of(41));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.22,(_f(207) & _of(133) => _of(81));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.21,(_f(207) & _of(122) => _of(79));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.20,(_f(207) & _of(113) => _of(49));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.19,(_f(207) & _of(112) => _of(39));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.18,(_f(207) & _of(112) => _of(38));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.17,(_f(207) & _of(110) => _of(33));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.16,(_of(140) & _of(128) => _of(28));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.15,(_of(140) & _of(128) => _of(27));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.14,(_of(140) & _of(108) => _of(51));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.13,(_of(140) & _of(107) => _of(77));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.12,(_of(140) & _of(106) => _of(75));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.11,(_of(140) & _of(106) => _of(74));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.10,(_of(140) & _of(105) => _of(72));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.9,(_of(140) & _of(104) => _of(70));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.8,(_of(140) & _of(103) => _of(68));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.7,(_of(140) & _of(102) => _of(66));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.6,(_of(140) & _of(101) => _of(64));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.5,(_of(140) & _of(100) => _of(62));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.4,(_of(140) & _of(99) => _of(60));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.3,(_of(140) & _of(98) => _of(58));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.2,(_of(140) & _of(97) => _of(23));
  _f(1) & _f(2) & _f(27) & _f(206) & xTaskResumeAll.1,(_of(92) => _of(14));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.32,(_of(121) => _of(91));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.31,(_of(119) => _of(89));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.30,(_of(118) => _of(87));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.29,(_of(134) => _of(85));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.28,(_of(130) => _of(83));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.27,(_of(117) => _of(45));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.26,(_of(116) => _of(43));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.25,(_of(114) => _of(41));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.24,(_of(133) => _of(81));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.23,(_of(122) => _of(79));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.22,(_of(113) => _of(49));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.21,(_of(112) => _of(39));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.20,(_of(112) => _of(38));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.19,(_of(110) => _of(33));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.18,(_of(109) => _of(31));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.17,(_of(109) => _of(30));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.16,(_of(128) => _of(28));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.15,(_of(128) => _of(27));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.14,(_of(108) => _of(51));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.13,(_of(107) => _of(77));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.12,(_of(106) => _of(75));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.11,(_of(106) => _of(74));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.10,(_of(105) => _of(72));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.9,(_of(104) => _of(70));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.8,(_of(103) => _of(68));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.7,(_of(102) => _of(66));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.6,(_of(101) => _of(64));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.5,(_of(100) => _of(62));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.4,(_of(99) => _of(60));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.3,(_of(98) => _of(58));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.2,(_of(97) => _of(23));
  _f(1) & _f(2) & _f(27) & vTaskSuspendAll.1,(_of(92) => _of(14));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.34,(_of(121) => _of(91));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.33,(_of(119) => _of(89));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.32,(_of(118) => _of(87));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.31,(_of(134) => _of(85));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.30,(_of(130) => _of(83));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.29,(_of(117) => _of(45));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.28,(_of(116) => _of(43));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.27,(_of(114) => _of(41));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.26,(_of(133) => _of(81));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.25,(_of(122) => _of(79));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.24,(_of(113) => _of(49));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.23,(_of(112) => _of(39));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.22,(_of(112) => _of(38));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.21,(_of(111) => _of(36));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.20,(_of(111) => _of(35));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.19,(_of(110) => _of(5));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.18,(_of(109) => _of(31));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.17,(_of(109) => _of(30));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.16,(_of(128) => _of(28));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.15,(_of(128) => _of(27));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.14,(_of(108) => _of(51));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.13,(_of(107) => _of(77));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.12,(_of(106) => _of(75));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.11,(_of(106) => _of(74));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.10,(_of(105) => _of(72));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.9,(_of(104) => _of(70));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.8,(_of(103) => _of(68));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.7,(_of(102) => _of(66));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.6,(_of(101) => _of(64));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.5,(_of(100) => _of(62));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.4,(_of(99) => _of(60));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.3,(_of(98) => _of(58));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.2,(_of(97) => _of(23));
  _f(1) & _f(2) & _f(27) & _f(202) & vTaskEndScheduler.1,(_of(92) => _of(14));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.25,(_f(191) & _of(121) => _of(91));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.24,(_f(191) & _of(119) => _of(89));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.23,(_f(191) & _of(118) => _of(87));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.22,(_f(191) & _of(134) => _of(85));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.21,(_f(191) & _of(130) => _of(83));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.20,(_f(191) & _of(117) => _of(45));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.19,(_f(191) & _of(116) => _of(43));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.18,(_f(191) & _of(114) => _of(41));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.17,(_f(191) & _of(122) => _of(79));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.16,(_f(191) & _of(113) => _of(49));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.15,(_f(191) & _of(112) => _of(39));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.14,(_f(191) & _of(112) => _of(38));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.13,(_f(191) & _of(111) => _of(36));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.12,(_f(191) & _of(111) => _of(35));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.11,(_f(191) & _of(110) => _of(139));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.10,(_f(191) & _of(109) => _of(3));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.9,(_f(191) & _of(109) => _of(2));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.8,(_f(191) & _of(128) => _of(28));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.7,(_f(191) & _of(128) => _of(27));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.6,(_f(191) & _of(108) => _of(51));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.5,(_f(191) & _of(107) => _of(77));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.4,(_f(191) & _of(106) => _of(75));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.3,(_f(191) & _of(106) => _of(74));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.2,(_of(138) & _of(97) => _of(23));
  _f(1) & _f(2) & _f(27) & _f(190) & vTaskStartScheduler.1,(_of(92) => _of(14));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.34,(_of(121) => _of(91));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.33,(_of(119) => _of(89));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.32,(_of(118) => _of(87));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.31,(_of(134) => _of(85));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.30,(_of(130) => _of(83));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.29,(_of(117) => _of(45));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.28,(_of(116) => _of(43));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.27,(_of(114) => _of(41));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.26,(_of(133) => _of(81));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.25,(_of(122) => _of(79));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.24,(_of(113) => _of(49));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.23,(_of(112) => _of(39));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.22,(_of(112) => _of(38));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.21,(_of(111) => _of(36));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.20,(_of(111) => _of(35));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.19,(_of(110) => _of(33));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.18,(_of(109) => _of(31));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.17,(_of(109) => _of(30));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.16,(_of(128) => _of(28));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.15,(_of(128) => _of(27));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.14,(_of(108) => _of(51));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.13,(_of(107) => _of(77));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.12,(_of(106) => _of(75));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.11,(_of(106) => _of(74));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.10,(_of(105) => _of(72));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.9,(_of(104) => _of(70));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.8,(_of(103) => _of(68));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.7,(_of(102) => _of(66));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.6,(_of(101) => _of(64));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.5,(_of(100) => _of(62));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.4,(_of(99) => _of(60));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.3,(_of(98) => _of(58));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.2,(_of(97) => _of(23));
  _f(1) & _f(2) & _f(27) & _f(189) & uxTaskPriorityGet.1,(_of(92) => _of(14));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.29,(_f(175) & _of(119) => _of(89));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.28,(_f(175) & _of(118) => _of(87));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.27,(_f(175) & _of(117) => _of(45));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.26,(_f(175) & _of(114) => _of(41));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.25,(_of(137) & _of(113) => _of(49));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.24,(_of(137) & _of(112) => _of(39));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.23,(_of(137) & _of(112) => _of(38));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.22,(_of(137) & _of(111) => _of(36));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.21,(_of(137) & _of(111) => _of(35));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.20,(_of(137) & _of(110) => _of(33));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.19,(_of(137) & _of(109) => _of(31));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.18,(_of(137) & _of(109) => _of(30));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.17,(_of(137) & _of(128) => _of(28));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.16,(_of(137) & _of(128) => _of(27));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.15,(_of(137) & _of(108) => _of(51));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.14,(_of(137) & _of(107) => _of(77));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.13,(_of(137) & _of(106) => _of(75));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.12,(_of(137) & _of(106) => _of(74));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.11,(_of(137) & _of(105) => _of(72));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.10,(_of(137) & _of(104) => _of(70));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.9,(_of(137) & _of(103) => _of(68));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.8,(_of(137) & _of(102) => _of(66));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.7,(_of(137) & _of(101) => _of(64));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.6,(_of(137) & _of(100) => _of(62));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.5,(_of(137) & _of(99) => _of(60));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.4,(_of(137) & _of(98) => _of(58));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.3,(_of(137) & _of(97) => _of(23));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.2,(_of(135) & _of(94) => _of(136));
  _f(1) & _f(2) & _f(27) & _f(174) & vTaskResume.1,(_of(92) => _of(14));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.65,(_of(132) & _of(121) => _of(91));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.64,(_of(132) & _of(119) => _of(89));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.63,(_of(132) & _of(118) => _of(87));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.62,(_of(132) & _of(134) => _of(85));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.61,(_of(132) & _of(130) => _of(83));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.60,(_of(132) & _of(117) => _of(45));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.59,(_of(132) & _of(116) => _of(43));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.58,(_of(132) & _of(114) => _of(41));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.57,(_of(132) & _of(133) => _of(81));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.56,(_of(132) & _of(122) => _of(79));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.55,(_of(132) & _of(113) => _of(49));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.54,(_of(132) & _of(112) => _of(39));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.53,(_of(132) & _of(112) => _of(38));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.52,(_of(132) & _of(111) => _of(36));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.51,(_of(132) & _of(111) => _of(35));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.50,(_of(132) & _of(110) => _of(33));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.49,(_of(132) & _of(109) => _of(31));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.48,(_of(132) & _of(109) => _of(30));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.47,(_of(132) & _of(128) => _of(28));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.46,(_of(132) & _of(128) => _of(27));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.45,(_of(132) & _of(108) => _of(51));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.44,(_of(132) & _of(107) => _of(77));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.43,(_of(132) & _of(106) => _of(75));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.42,(_of(132) & _of(106) => _of(74));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.41,(_of(132) & _of(105) => _of(72));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.40,(_of(132) & _of(104) => _of(70));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.39,(_of(132) & _of(103) => _of(68));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.38,(_of(132) & _of(102) => _of(66));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.37,(_of(132) & _of(101) => _of(64));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.36,(_of(132) & _of(100) => _of(62));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.35,(_of(132) & _of(99) => _of(60));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.34,(_of(132) & _of(98) => _of(58));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.33,(_of(132) & _of(97) => _of(23));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.32,(_f(159) & _of(121) => _of(91));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.31,(_f(159) & _of(121) => _of(131));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.30,(_f(159) & _of(119) => _of(89));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.29,(_f(164) & _of(130) => _of(14));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.28,(_f(159) & _of(116) => _of(43));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.27,(_f(159) & _of(116) => _of(129));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.26,(_f(159) & _of(114) => _of(41));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.25,(_of(127) & _of(113) => _of(49));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.24,(_of(127) & _of(112) => _of(39));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.23,(_of(127) & _of(112) => _of(38));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.22,(_of(127) & _of(111) => _of(36));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.21,(_of(127) & _of(111) => _of(35));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.20,(_of(127) & _of(110) => _of(33));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.19,(_of(127) & _of(109) => _of(31));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.18,(_of(127) & _of(109) => _of(30));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.17,(_of(127) & _of(128) => _of(28));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.16,(_of(127) & _of(128) => _of(27));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.15,(_of(127) & _of(108) => _of(51));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.14,(_of(127) & _of(107) => _of(77));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.13,(_of(127) & _of(106) => _of(75));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.12,(_of(127) & _of(106) => _of(74));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.11,(_of(127) & _of(105) => _of(72));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.10,(_of(127) & _of(104) => _of(70));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.9,(_of(127) & _of(103) => _of(68));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.8,(_of(127) & _of(102) => _of(66));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.7,(_of(127) & _of(101) => _of(64));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.6,(_of(127) & _of(100) => _of(62));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.5,(_of(127) & _of(99) => _of(60));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.4,(_of(127) & _of(98) => _of(58));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.3,(_of(127) & _of(97) => _of(23));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.2,(_of(125) & _of(94) => _of(126));
  _f(1) & _f(2) & _f(27) & _f(158) & vTaskSuspend.1,(_of(92) => _of(14));
  _f(1) & _f(2) & _f(27) & _f(110) & prvIdleTask.14,(_of(123) & _of(94) => _of(124));
  _f(1) & _f(2) & _f(27) & _f(110) & prvIdleTask.13,(_f(116) & _of(117) => _of(45));
  _f(1) & _f(2) & _f(27) & _f(110) & prvIdleTask.12,(_f(116) & _of(116) => _of(43));
  _f(1) & _f(2) & _f(27) & _f(110) & prvIdleTask.11,(_f(116) & _of(122) => _of(79));
  _f(1) & _f(2) & _f(27) & _f(110) & prvIdleTask.10,(_f(116) & _of(113) => _of(49));
  _f(1) & _f(2) & _f(27) & _f(110) & prvIdleTask.9,(_f(116) & _of(112) => _of(39));
  _f(1) & _f(2) & _f(27) & _f(110) & prvIdleTask.8,(_f(116) & _of(112) => _of(38));
  _f(1) & _f(2) & _f(27) & _f(110) & prvIdleTask.7,(_f(116) & _of(111) => _of(36));
  _f(1) & _f(2) & _f(27) & _f(110) & prvIdleTask.6,(_f(116) & _of(111) => _of(35));
  _f(1) & _f(2) & _f(27) & _f(110) & prvIdleTask.5,(_f(116) & _of(110) => _of(33));
  _f(1) & _f(2) & _f(27) & _f(110) & prvIdleTask.4,(_f(116) & _of(109) => _of(31));
  _f(1) & _f(2) & _f(27) & _f(110) & prvIdleTask.3,(_f(116) & _of(109) => _of(30));
  _f(1) & _f(2) & _f(27) & _f(110) & prvIdleTask.2,(_f(116) & _of(108) => _of(51));
  _f(1) & _f(2) & _f(27) & _f(110) & prvIdleTask.1,(_of(92) => _of(14));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.31,(_f(90) & _of(121) => _of(91));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.30,(_f(90) & _of(119) => _of(89));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.29,(_f(90) & _of(119) => _of(120));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.28,(_f(90) & _of(118) => _of(87));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.27,(_f(90) & _of(117) => _of(45));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.26,(_f(90) & _of(116) => _of(43));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.25,(_f(90) & _of(114) => _of(41));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.24,(_f(90) & _of(114) => _of(115));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.23,(_f(90) & _of(113) => _of(49));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.22,(_f(90) & _of(112) => _of(39));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.21,(_f(90) & _of(112) => _of(38));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.20,(_f(90) & _of(111) => _of(36));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.19,(_f(90) & _of(111) => _of(35));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.18,(_f(90) & _of(110) => _of(33));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.17,(_f(90) & _of(109) => _of(31));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.16,(_f(90) & _of(109) => _of(30));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.15,(_of(96) & _of(108) => _of(51));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.14,(_of(96) & _of(107) => _of(77));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.13,(_of(96) & _of(106) => _of(75));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.12,(_of(96) & _of(106) => _of(74));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.11,(_of(96) & _of(105) => _of(72));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.10,(_of(96) & _of(104) => _of(70));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.9,(_of(96) & _of(103) => _of(68));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.8,(_of(96) & _of(102) => _of(66));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.7,(_of(96) & _of(101) => _of(64));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.6,(_of(96) & _of(100) => _of(62));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.5,(_of(96) & _of(99) => _of(60));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.4,(_of(96) & _of(98) => _of(58));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.3,(_of(96) & _of(97) => _of(23));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.2,(_of(93) & _of(94) => _of(95));
  _f(1) & _f(2) & _f(27) & _f(89) & vTaskDelete.1,(_of(92) => _of(14));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.115,(_of(56) & _of(90) => _of(91));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.114,(_of(56) & _of(88) => _of(89));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.113,(_of(56) & _of(86) => _of(87));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.112,(_of(56) & _of(84) => _of(85));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.111,(_of(56) & _of(82) => _of(83));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.110,(_of(56) & _of(44) => _of(45));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.109,(_of(56) & _of(42) => _of(43));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.108,(_of(56) & _of(40) => _of(41));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.107,(_of(56) & _of(80) => _of(81));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.106,(_of(56) & _of(78) => _of(79));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.105,(_of(56) & _of(48) => _of(49));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.104,(_of(56) & _of(37) => _of(39));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.103,(_of(56) & _of(37) => _of(38));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.102,(_of(56) & _of(34) => _of(36));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.101,(_of(56) & _of(34) => _of(35));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.100,(_of(56) & _of(32) => _of(33));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.99,(_of(56) & _of(29) => _of(31));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.98,(_of(56) & _of(29) => _of(30));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.97,(_of(56) & _of(26) => _of(28));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.96,(_of(56) & _of(26) => _of(27));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.95,(_of(56) & _of(24) => _of(51));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.94,(_of(56) & _of(76) => _of(77));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.93,(_of(56) & _of(73) => _of(75));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.92,(_of(56) & _of(73) => _of(74));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.91,(_of(56) & _of(71) => _of(72));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.90,(_of(56) & _of(69) => _of(70));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.89,(_of(56) & _of(67) => _of(68));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.88,(_of(56) & _of(65) => _of(66));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.87,(_of(56) & _of(63) => _of(64));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.86,(_of(56) & _of(61) => _of(62));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.85,(_of(56) & _of(59) => _of(60));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.84,(_of(56) & _of(57) => _of(58));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.83,(_of(56) & _of(22) => _of(23));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.82,(_f(85) & _of(44) => _of(45));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.81,(_f(85) & _of(42) => _of(43));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.80,(_f(85) & _of(40) => _of(41));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.79,(_f(85) & _of(48) => _of(49));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.78,(_f(85) & _of(37) => _of(39));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.77,(_f(85) & _of(37) => _of(38));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.76,(_f(85) & _of(34) => _of(36));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.75,(_f(85) & _of(34) => _of(35));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.74,(_f(85) & _of(32) => _of(33));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.73,(_f(85) & _of(29) => _of(31));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.72,(_f(85) & _of(29) => _of(30));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.71,(_f(85) & _of(26) => _of(28));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.70,(_f(85) & _of(26) => _of(27));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.69,(_f(85) & _of(24) => _of(51));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.68,(_of(55) & _of(22) => _of(23));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.67,(_of(55) & _of(22) => _of(21));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.66,(_of(52) & _of(53) => _of(54));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.65,(_f(81) & _of(44) => _of(45));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.64,(_f(81) & _of(42) => _of(43));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.63,(_f(81) & _of(40) => _of(41));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.62,(_f(81) & _of(37) => _of(39));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.61,(_f(81) & _of(37) => _of(38));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.60,(_f(81) & _of(34) => _of(36));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.59,(_f(81) & _of(34) => _of(35));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.58,(_f(81) & _of(32) => _of(33));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.57,(_f(81) & _of(29) => _of(31));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.56,(_f(81) & _of(29) => _of(30));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.55,(_f(81) & _of(26) => _of(28));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.54,(_f(81) & _of(26) => _of(27));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.53,(_f(81) & _of(24) => _of(51));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.52,(_of(50) & _of(22) => _of(23));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.51,(_of(50) & _of(20) => _of(21));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.50,(_f(77) & _of(44) => _of(45));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.49,(_f(77) & _of(42) => _of(43));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.48,(_f(77) & _of(40) => _of(41));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.47,(_f(77) & _of(48) => _of(49));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.46,(_f(77) & _of(37) => _of(39));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.45,(_f(77) & _of(37) => _of(38));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.44,(_f(77) & _of(34) => _of(36));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.43,(_f(77) & _of(34) => _of(35));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.42,(_f(77) & _of(32) => _of(33));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.41,(_f(77) & _of(29) => _of(31));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.40,(_f(77) & _of(29) => _of(30));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.39,(_f(77) & _of(26) => _of(28));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.38,(_f(77) & _of(26) => _of(27));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.37,(_f(77) & _of(24) => _of(25));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.36,(_of(47) & _of(22) => _of(23));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.35,(_of(47) & _of(22) => _of(21));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.34,(_f(73) & _of(44) => _of(45));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.33,(_f(73) & _of(42) => _of(43));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.32,(_f(73) & _of(40) => _of(41));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.31,(_f(73) & _of(37) => _of(39));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.30,(_f(73) & _of(37) => _of(38));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.29,(_f(73) & _of(34) => _of(36));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.28,(_f(73) & _of(34) => _of(35));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.27,(_f(73) & _of(32) => _of(33));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.26,(_f(73) & _of(29) => _of(31));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.25,(_f(73) & _of(29) => _of(30));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.24,(_f(73) & _of(26) => _of(28));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.23,(_f(73) & _of(26) => _of(27));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.22,(_f(73) & _of(24) => _of(25));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.21,(_of(46) & _of(22) => _of(23));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.20,(_of(46) & _of(20) => _of(21));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.19,(_f(29) & _of(44) => _of(45));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.18,(_f(29) & _of(42) => _of(43));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.17,(_f(29) & _of(40) => _of(41));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.16,(_f(29) & _of(37) => _of(39));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.15,(_f(29) & _of(37) => _of(38));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.14,(_f(29) & _of(34) => _of(36));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.13,(_f(29) & _of(34) => _of(35));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.12,(_f(29) & _of(32) => _of(33));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.11,(_f(29) & _of(29) => _of(31));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.10,(_f(29) & _of(29) => _of(30));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.9,(_f(29) & _of(26) => _of(28));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.8,(_f(29) & _of(26) => _of(27));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.7,(_f(29) & _of(24) => _of(25));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.6,(_of(19) & _of(22) => _of(23));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.5,(_of(19) & _of(20) => _of(21));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.4,(_of(15) & _of(13) => _of(18));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.3,(_of(15) & _of(13) => _of(17));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.2,(_of(15) & _of(13) => _of(16));
  _f(1) & _f(2) & _f(27) & _f(28) & xTaskCreate.1,(_of(13) => _of(14));
  _f(1) & _f(2) & Initialisation.6,(_of(8) & _of(11) => _of(12));
  _f(1) & _f(2) & Initialisation.5,(_of(8) & _of(9) => _of(10));
  _f(1) & _f(2) & Initialisation.4,(_f(3) & _of(6) => _of(7));
  _f(1) & _f(2) & Initialisation.3,(_f(3) & _of(4) => _of(5));
  _f(1) & _f(2) & Initialisation.2,(_f(3) & _of(1) => _of(3));
  _f(1) & _f(2) & Initialisation.1,(_f(3) & _of(1) => _of(2))
END
&
THEORY OPOFormulas IS
  "`Check that the invariant (uxCurrentNumberOfTasks: NATURAL) is established by the initialisation - ref 3.3'" & "`Check that the invariant (uxTasksDeleted: NATURAL) is established by the initialisation - ref 3.3'" & "`Check that the invariant (xTickCount: NATURAL) is established by the initialisation - ref 3.3'" & "`Check that the invariant (uxSchedulerSuspended: NATURAL) is established by the initialisation - ref 3.3'" & "`Check that the invariant (uxMissedTicks: NATURAL) is established by the initialisation - ref 3.3'";
  (0: INTEGER);
  (0<=0);
  "`Check that the invariant (xSchedulerRunning: BIT) is established by the initialisation - ref 3.3'";
  (pdFALSE: BIT);
  "`Check that the invariant (pxCurrentTCB: TASK) is established by the initialisation - ref 3.3'";
  (pxCurrentTCB$0: TASK);
  ("`Local hypotheses'" & pxCurrentTCB$0: TASK & configTOTAL_HEAP_SIZE<=configTOTAL_HEAP_SIZE & bfalse);
  "`Check that the invariant (!(indx,tk).(indx: PRIORITYS & tk: TASK & tk: pxReadyTasksLists(indx) & pxReadyTasksLists(indx)/={} & task_priority/={} => task_priority(tk) = indx)) is established by the initialisation - ref 3.3'";
  (!(indx,tk).(indx: PRIORITYS & tk: TASK & tk: (PRIORITYS*{})(indx) & not((PRIORITYS*{})(indx) = {}) => {}(tk) = indx));
  "`Check that the invariant (!indx.(indx: PRIORITYS & tasks/={} & pxReadyTasksLists(indx)/={} => pxReadyTasksLists(indx) <: tasks)) is established by the initialisation - ref 3.3'";
  (!indx.(indx: PRIORITYS & not((PRIORITYS*{})(indx) = {}) => (PRIORITYS*{})(indx): POW({})));
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (btrue);
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & uxPriority = {task|->uxPriority}(task) & 0<=mem-usStackDepth);
  (usStackDepth: INTEGER);
  (0<=usStackDepth);
  (0<=mem-usStackDepth);
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & uxPriority = {task|->uxPriority}(task) & 0<=mem-usStackDepth & uxTopUsedPriority<=uxPriority & uxCurrentNumberOfTasks = 0 & mem-usStackDepth: INTEGER & mem-usStackDepth<=configTOTAL_HEAP_SIZE);
  "`Check that the invariant (tasks <: TASK) is preserved by the operation - ref 3.4'" & "`Check that the invariant (pxCurrentTCB: TASK) is preserved by the operation - ref 3.4'";
  (task: TASK);
  "`Check that the invariant (tasks <: TASK) is preserved by the operation - ref 3.4'";
  (tasks: POW(TASK));
  "`Check that the invariant (uxTopUsedPriority: PRIORITYS) is preserved by the operation - ref 3.4'";
  (uxPriority: PRIORITYS);
  "`Check that the invariant (uxTasksDeleted: NATURAL) is preserved by the operation - ref 3.4'";
  (uxTasksDeleted: INTEGER);
  (0<=uxTasksDeleted);
  "`Check that the invariant (xTickCount: NATURAL) is preserved by the operation - ref 3.4'";
  (xTickCount: INTEGER);
  (0<=xTickCount);
  "`Check that the invariant (xSchedulerRunning: BIT) is preserved by the operation - ref 3.4'";
  (xSchedulerRunning: BIT);
  "`Check that the invariant (uxSchedulerSuspended: NATURAL) is preserved by the operation - ref 3.4'";
  (uxSchedulerSuspended: INTEGER);
  (0<=uxSchedulerSuspended);
  "`Check that the invariant (uxMissedTicks: NATURAL) is preserved by the operation - ref 3.4'";
  (uxMissedTicks: INTEGER);
  (0<=uxMissedTicks);
  "`Check that the invariant (xTasksWaitingTermination <: TASK) is preserved by the operation - ref 3.4'";
  (xTasksWaitingTermination: POW(TASK));
  "`Check that the invariant (xSuspendedTaskList <: TASK) is preserved by the operation - ref 3.4'";
  (xSuspendedTaskList: POW(TASK));
  "`Check that the invariant (pxDelayedTaskList <: TASK) is preserved by the operation - ref 3.4'";
  (pxDelayedTaskList: POW(TASK));
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & uxPriority = {task|->uxPriority}(task) & 0<=mem-usStackDepth & uxTopUsedPriority<=uxPriority & not(uxCurrentNumberOfTasks = 0) & xSchedulerRunning = pdFALSE & mem-usStackDepth: INTEGER & mem-usStackDepth<=configTOTAL_HEAP_SIZE);
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & uxPriority = {task|->uxPriority}(task) & 0<=mem-usStackDepth & uxTopUsedPriority<=uxPriority & not(uxCurrentNumberOfTasks = 0) & not(uxTopUsedPriority<=uxPriority & xSchedulerRunning = pdFALSE) & mem-usStackDepth: INTEGER & mem-usStackDepth<=configTOTAL_HEAP_SIZE);
  "`Check that the invariant (pxCurrentTCB: TASK) is preserved by the operation - ref 3.4'";
  (pxCurrentTCB: TASK);
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & uxPriority = {task|->uxPriority}(task) & 0<=mem-usStackDepth & not(uxTopUsedPriority<=uxPriority) & uxCurrentNumberOfTasks = 0 & mem-usStackDepth: INTEGER & mem-usStackDepth<=configTOTAL_HEAP_SIZE);
  (uxTopUsedPriority: PRIORITYS);
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & uxPriority = {task|->uxPriority}(task) & 0<=mem-usStackDepth & not(uxTopUsedPriority<=uxPriority) & not(uxCurrentNumberOfTasks = 0) & uxTopUsedPriority<=uxPriority & xSchedulerRunning = pdFALSE);
  "`Check that the invariant (tasks <: TASK & task_priority: TASK +-> PRIORITYS & task_stack: TASK +-> NATURAL & task_tc: TASK +-> TASK_CODE & task_name: TASK +-> NAME & dom(task_priority) <: tasks & dom(task_stack) <: tasks & dom(task_tc) <: tasks & dom(task_name) <: tasks & uxCurrentNumberOfTasks: NATURAL & uxCurrentNumberOfTasks = card(tasks) & uxTopUsedPriority: PRIORITYS & uxTasksDeleted: NATURAL & xTickCount: NATURAL & xSchedulerRunning: BIT & uxSchedulerSuspended: NATURAL & uxMissedTicks: NATURAL & pxCurrentTCB: TASK & pxReadyTasksLists: PRIORITYS +-> POW(TASK) & !(indx,tk).(indx: PRIORITYS & tk: TASK & tk: pxReadyTasksLists(indx) & pxReadyTasksLists(indx)/={} & task_priority/={} => task_priority(tk) = indx) & xTasksWaitingTermination <: TASK & xSuspendedTaskList <: TASK & pxDelayedTaskList <: TASK & !indx.(indx: PRIORITYS => pxReadyTasksLists(indx)/\xTasksWaitingTermination = {} & xSuspendedTaskList/\pxReadyTasksLists(indx) = {} & xSuspendedTaskList/\xTasksWaitingTermination = {} & pxDelayedTaskList/\xTasksWaitingTermination = {} & pxDelayedTaskList/\xSuspendedTaskList = {} & pxDelayedTaskList/\pxReadyTasksLists(indx) = {}) & !indx.(indx: PRIORITYS & tasks/={} & pxReadyTasksLists(indx)/={} => pxReadyTasksLists(indx) <: tasks) & pxDelayedTaskList <: tasks & xTasksWaitingTermination <: tasks & xSuspendedTaskList <: tasks) is preserved by the operation - ref 3.4'";
  ([mem:=mem-usStackDepth || tasks:=tasks\/{task} || task_priority:=task_priority\/{task|->uxPriority} || task_name:=task_name\/{task|->pcName} || task_tc:=task_tc\/{task|->pvTaskCode} || task_stack:=task_stack\/{task|->usStackDepth} || pxCurrentTCB:=task || zz,pxReadyTasksLists,uxCurrentNumberOfTasks,handle:=pdPASS,pxReadyTasksLists<+{uxPriority|->(pxReadyTasksLists(uxPriority)\/{task})},uxCurrentNumberOfTasks+1,task](btrue & mem: INTEGER & 0<=mem & mem<=configTOTAL_HEAP_SIZE & btrue & btrue => tasks: POW(TASK) & task_priority: TASK +-> PRIORITYS & task_stack: TASK +-> NATURAL & task_tc: TASK +-> TASK_CODE & task_name: TASK +-> NAME & dom(task_priority): POW(tasks) & dom(task_stack): POW(tasks) & dom(task_tc): POW(tasks) & dom(task_name): POW(tasks) & uxCurrentNumberOfTasks: INTEGER & 0<=uxCurrentNumberOfTasks & uxCurrentNumberOfTasks = card(tasks) & uxTopUsedPriority: PRIORITYS & uxTasksDeleted: INTEGER & 0<=uxTasksDeleted & xTickCount: INTEGER & 0<=xTickCount & xSchedulerRunning: BIT & uxSchedulerSuspended: INTEGER & 0<=uxSchedulerSuspended & uxMissedTicks: INTEGER & 0<=uxMissedTicks & pxCurrentTCB: TASK & pxReadyTasksLists: PRIORITYS +-> POW(TASK) & (not(task_priority = {}) => !(indx,tk).(indx: PRIORITYS & tk: TASK & tk: pxReadyTasksLists(indx) & not(pxReadyTasksLists(indx) = {}) => task_priority(tk) = indx)) & xTasksWaitingTermination: POW(TASK) & xSuspendedTaskList: POW(TASK) & pxDelayedTaskList: POW(TASK) & !indx.(indx: PRIORITYS => pxReadyTasksLists(indx)/\xTasksWaitingTermination = {} & xSuspendedTaskList/\pxReadyTasksLists(indx) = {} & xSuspendedTaskList/\xTasksWaitingTermination = {} & pxDelayedTaskList/\xTasksWaitingTermination = {} & pxDelayedTaskList/\xSuspendedTaskList = {} & pxDelayedTaskList/\pxReadyTasksLists(indx) = {}) & (not(tasks = {}) => !indx.(indx: PRIORITYS & not(pxReadyTasksLists(indx) = {}) => pxReadyTasksLists(indx): POW(tasks))) & pxDelayedTaskList: POW(tasks) & xTasksWaitingTermination: POW(tasks) & xSuspendedTaskList: POW(tasks)));
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & uxPriority = {task|->uxPriority}(task) & 0<=mem-usStackDepth & not(uxTopUsedPriority<=uxPriority) & not(uxCurrentNumberOfTasks = 0) & not(uxTopUsedPriority<=uxPriority & xSchedulerRunning = pdFALSE) & mem-usStackDepth: INTEGER & mem-usStackDepth<=configTOTAL_HEAP_SIZE);
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & uxPriority = {task|->uxPriority}(task) & not(0<=mem-usStackDepth));
  "`Check that the invariant (task_priority: TASK +-> PRIORITYS) is preserved by the operation - ref 3.4'";
  (task_priority: TASK +-> PRIORITYS);
  "`Check that the invariant (task_stack: TASK +-> NATURAL) is preserved by the operation - ref 3.4'";
  (task_stack: TASK +-> NATURAL);
  "`Check that the invariant (task_tc: TASK +-> TASK_CODE) is preserved by the operation - ref 3.4'";
  (task_tc: TASK +-> TASK_CODE);
  "`Check that the invariant (task_name: TASK +-> NAME) is preserved by the operation - ref 3.4'";
  (task_name: TASK +-> NAME);
  "`Check that the invariant (dom(task_priority) <: tasks) is preserved by the operation - ref 3.4'";
  (dom(task_priority): POW(tasks));
  "`Check that the invariant (dom(task_stack) <: tasks) is preserved by the operation - ref 3.4'";
  (dom(task_stack): POW(tasks));
  "`Check that the invariant (dom(task_tc) <: tasks) is preserved by the operation - ref 3.4'";
  (dom(task_tc): POW(tasks));
  "`Check that the invariant (dom(task_name) <: tasks) is preserved by the operation - ref 3.4'";
  (dom(task_name): POW(tasks));
  "`Check that the invariant (uxCurrentNumberOfTasks: NATURAL) is preserved by the operation - ref 3.4'";
  (uxCurrentNumberOfTasks: INTEGER);
  (0<=uxCurrentNumberOfTasks);
  "`Check that the invariant (uxCurrentNumberOfTasks = card(tasks)) is preserved by the operation - ref 3.4'";
  (uxCurrentNumberOfTasks = card(tasks));
  "`Check that the invariant (pxReadyTasksLists: PRIORITYS +-> POW(TASK)) is preserved by the operation - ref 3.4'";
  (pxReadyTasksLists: PRIORITYS +-> POW(TASK));
  "`Check that the invariant (!(indx,tk).(indx: PRIORITYS & tk: TASK & tk: pxReadyTasksLists(indx) & pxReadyTasksLists(indx)/={} & task_priority/={} => task_priority(tk) = indx)) is preserved by the operation - ref 3.4'";
  (not(task_priority = {}) => !(indx,tk).(indx: PRIORITYS & tk: TASK & tk: pxReadyTasksLists(indx) & not(pxReadyTasksLists(indx) = {}) => task_priority(tk) = indx));
  "`Check that the invariant (!indx.(indx: PRIORITYS => pxReadyTasksLists(indx)/\xTasksWaitingTermination = {} & xSuspendedTaskList/\pxReadyTasksLists(indx) = {} & xSuspendedTaskList/\xTasksWaitingTermination = {} & pxDelayedTaskList/\xTasksWaitingTermination = {} & pxDelayedTaskList/\xSuspendedTaskList = {} & pxDelayedTaskList/\pxReadyTasksLists(indx) = {})) is preserved by the operation - ref 3.4'";
  (!indx.(indx: PRIORITYS => pxReadyTasksLists(indx)/\xTasksWaitingTermination = {} & xSuspendedTaskList/\pxReadyTasksLists(indx) = {} & xSuspendedTaskList/\xTasksWaitingTermination = {} & pxDelayedTaskList/\xTasksWaitingTermination = {} & pxDelayedTaskList/\xSuspendedTaskList = {} & pxDelayedTaskList/\pxReadyTasksLists(indx) = {}));
  "`Check that the invariant (!indx.(indx: PRIORITYS & tasks/={} & pxReadyTasksLists(indx)/={} => pxReadyTasksLists(indx) <: tasks)) is preserved by the operation - ref 3.4'";
  (not(tasks = {}) => !indx.(indx: PRIORITYS & not(pxReadyTasksLists(indx) = {}) => pxReadyTasksLists(indx): POW(tasks)));
  "`Check that the invariant (pxDelayedTaskList <: tasks) is preserved by the operation - ref 3.4'";
  (pxDelayedTaskList: POW(tasks));
  "`Check that the invariant (xTasksWaitingTermination <: tasks) is preserved by the operation - ref 3.4'";
  (xTasksWaitingTermination: POW(tasks));
  "`Check that the invariant (xSuspendedTaskList <: tasks) is preserved by the operation - ref 3.4'";
  (xSuspendedTaskList: POW(tasks));
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  ("`Local hypotheses'" & priority: PRIORITYS & priority = task_priority(pxTaskToDelete) & pxCurrentTCB = pxTaskToDelete & bfalse);
  "`Check that the invariant (tasks <: TASK & task_priority: TASK +-> PRIORITYS & task_stack: TASK +-> NATURAL & task_tc: TASK +-> TASK_CODE & task_name: TASK +-> NAME & dom(task_priority) <: tasks & dom(task_stack) <: tasks & dom(task_tc) <: tasks & dom(task_name) <: tasks & uxCurrentNumberOfTasks: NATURAL & uxCurrentNumberOfTasks = card(tasks) & uxTopUsedPriority: PRIORITYS & uxTasksDeleted: NATURAL & xTickCount: NATURAL & xSchedulerRunning: BIT & uxSchedulerSuspended: NATURAL & uxMissedTicks: NATURAL & pxCurrentTCB: TASK & pxReadyTasksLists: PRIORITYS +-> POW(TASK) & !(indx,tk).(indx: PRIORITYS & tk: TASK & tk: pxReadyTasksLists(indx) & pxReadyTasksLists(indx)/={} & task_priority/={} => task_priority(tk) = indx) & xTasksWaitingTermination <: TASK & xSuspendedTaskList <: TASK & pxDelayedTaskList <: TASK & !indx.(indx: PRIORITYS => pxReadyTasksLists(indx)/\xTasksWaitingTermination = {} & xSuspendedTaskList/\pxReadyTasksLists(indx) = {} & xSuspendedTaskList/\xTasksWaitingTermination = {} & pxDelayedTaskList/\xTasksWaitingTermination = {} & pxDelayedTaskList/\xSuspendedTaskList = {} & pxDelayedTaskList/\pxReadyTasksLists(indx) = {}) & !indx.(indx: PRIORITYS & tasks/={} & pxReadyTasksLists(indx)/={} => pxReadyTasksLists(indx) <: tasks) & pxDelayedTaskList <: tasks & xTasksWaitingTermination <: tasks & xSuspendedTaskList <: tasks) is preserved by the operation - ref 3.4'";
  ([pxReadyTasksLists,xTasksWaitingTermination,uxTasksDeleted:=pxReadyTasksLists<+{priority|->pxReadyTasksLists(priority)-{pxTaskToDelete}},xTasksWaitingTermination\/{pxTaskToDelete},uxTasksDeleted-1 || pxCurrentTCB:=pxCurrentTCB$0](btrue & mem: INTEGER & 0<=mem & mem<=configTOTAL_HEAP_SIZE & btrue & btrue => tasks: POW(TASK) & task_priority: TASK +-> PRIORITYS & task_stack: TASK +-> NATURAL & task_tc: TASK +-> TASK_CODE & task_name: TASK +-> NAME & dom(task_priority): POW(tasks) & dom(task_stack): POW(tasks) & dom(task_tc): POW(tasks) & dom(task_name): POW(tasks) & uxCurrentNumberOfTasks: INTEGER & 0<=uxCurrentNumberOfTasks & uxCurrentNumberOfTasks = card(tasks) & uxTopUsedPriority: PRIORITYS & uxTasksDeleted: INTEGER & 0<=uxTasksDeleted & xTickCount: INTEGER & 0<=xTickCount & xSchedulerRunning: BIT & uxSchedulerSuspended: INTEGER & 0<=uxSchedulerSuspended & uxMissedTicks: INTEGER & 0<=uxMissedTicks & pxCurrentTCB: TASK & pxReadyTasksLists: PRIORITYS +-> POW(TASK) & (not(task_priority = {}) => !(indx,tk).(indx: PRIORITYS & tk: TASK & tk: pxReadyTasksLists(indx) & not(pxReadyTasksLists(indx) = {}) => task_priority(tk) = indx)) & xTasksWaitingTermination: POW(TASK) & xSuspendedTaskList: POW(TASK) & pxDelayedTaskList: POW(TASK) & !indx.(indx: PRIORITYS => pxReadyTasksLists(indx)/\xTasksWaitingTermination = {} & xSuspendedTaskList/\pxReadyTasksLists(indx) = {} & xSuspendedTaskList/\xTasksWaitingTermination = {} & pxDelayedTaskList/\xTasksWaitingTermination = {} & pxDelayedTaskList/\xSuspendedTaskList = {} & pxDelayedTaskList/\pxReadyTasksLists(indx) = {}) & (not(tasks = {}) => !indx.(indx: PRIORITYS & not(pxReadyTasksLists(indx) = {}) => pxReadyTasksLists(indx): POW(tasks))) & pxDelayedTaskList: POW(tasks) & xTasksWaitingTermination: POW(tasks) & xSuspendedTaskList: POW(tasks)));
  ("`Local hypotheses'" & priority: PRIORITYS & priority = task_priority(pxTaskToDelete) & not(pxCurrentTCB = pxTaskToDelete));
  "`Check that the invariant (tasks <: TASK) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (task_priority: TASK +-> PRIORITYS) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (task_stack: TASK +-> NATURAL) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (task_tc: TASK +-> TASK_CODE) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (task_name: TASK +-> NAME) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (dom(task_priority) <: tasks) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (dom(task_stack) <: tasks) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (dom(task_tc) <: tasks) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (dom(task_name) <: tasks) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (uxCurrentNumberOfTasks: NATURAL) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (uxCurrentNumberOfTasks = card(tasks)) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (uxTopUsedPriority: PRIORITYS) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (xTickCount: NATURAL) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (xSchedulerRunning: BIT) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (uxSchedulerSuspended: NATURAL) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (uxMissedTicks: NATURAL) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (pxCurrentTCB: TASK) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (xTasksWaitingTermination <: TASK) is preserved by the operation - ref 3.4'";
  (pxTaskToDelete: TASK);
  "`Check that the invariant (xSuspendedTaskList <: TASK) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (pxDelayedTaskList <: TASK) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (pxDelayedTaskList <: tasks) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (xTasksWaitingTermination <: tasks) is preserved by the operation - ref 3.4'";
  (pxTaskToDelete: tasks);
  "`Check that the invariant (xSuspendedTaskList <: tasks) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (pxReadyTasksLists: PRIORITYS +-> POW(TASK)) is preserved by the operation - ref 3.4'";
  ("`Local hypotheses'" & tam: INTEGER & 0<=tam & tam = card(xTasksWaitingTermination) & task: TASK & task: xTasksWaitingTermination & not(1<=uxTasksDeleted & 1<=tam));
  (btrue & mem: INTEGER & 0<=mem & mem<=configTOTAL_HEAP_SIZE & btrue & btrue => tasks: POW(TASK) & task_priority: TASK +-> PRIORITYS & task_stack: TASK +-> NATURAL & task_tc: TASK +-> TASK_CODE & task_name: TASK +-> NAME & dom(task_priority): POW(tasks) & dom(task_stack): POW(tasks) & dom(task_tc): POW(tasks) & dom(task_name): POW(tasks) & uxCurrentNumberOfTasks: INTEGER & 0<=uxCurrentNumberOfTasks & uxCurrentNumberOfTasks = card(tasks) & uxTopUsedPriority: PRIORITYS & uxTasksDeleted: INTEGER & 0<=uxTasksDeleted & xTickCount: INTEGER & 0<=xTickCount & xSchedulerRunning: BIT & uxSchedulerSuspended: INTEGER & 0<=uxSchedulerSuspended & uxMissedTicks: INTEGER & 0<=uxMissedTicks & pxCurrentTCB: TASK & pxReadyTasksLists: PRIORITYS +-> POW(TASK) & (not(task_priority = {}) => !(indx,tk).(indx: PRIORITYS & tk: TASK & tk: pxReadyTasksLists(indx) & not(pxReadyTasksLists(indx) = {}) => task_priority(tk) = indx)) & xTasksWaitingTermination: POW(TASK) & xSuspendedTaskList: POW(TASK) & pxDelayedTaskList: POW(TASK) & !indx.(indx: PRIORITYS => pxReadyTasksLists(indx)/\xTasksWaitingTermination = {} & xSuspendedTaskList/\pxReadyTasksLists(indx) = {} & xSuspendedTaskList/\xTasksWaitingTermination = {} & pxDelayedTaskList/\xTasksWaitingTermination = {} & pxDelayedTaskList/\xSuspendedTaskList = {} & pxDelayedTaskList/\pxReadyTasksLists(indx) = {}) & (not(tasks = {}) => !indx.(indx: PRIORITYS & not(pxReadyTasksLists(indx) = {}) => pxReadyTasksLists(indx): POW(tasks))) & pxDelayedTaskList: POW(tasks) & xTasksWaitingTermination: POW(tasks) & xSuspendedTaskList: POW(tasks));
  ("`Local hypotheses'" & not(pxTaskToSuspend: xSuspendedTaskList) & pxCurrentTCB = pxTaskToSuspend & bfalse);
  ([pxReadyTasksLists,pxDelayedTaskList,xSuspendedTaskList:=pxReadyTasksLists<+{task_priority(pxTaskToSuspend)|->pxReadyTasksLists(task_priority(pxTaskToSuspend))-{pxTaskToSuspend}},pxDelayedTaskList-{pxTaskToSuspend},xSuspendedTaskList\/{pxTaskToSuspend} || pxCurrentTCB:=pxCurrentTCB$0 || rr:=pdTRUE](btrue & mem: INTEGER & 0<=mem & mem<=configTOTAL_HEAP_SIZE & btrue & btrue => tasks: POW(TASK) & task_priority: TASK +-> PRIORITYS & task_stack: TASK +-> NATURAL & task_tc: TASK +-> TASK_CODE & task_name: TASK +-> NAME & dom(task_priority): POW(tasks) & dom(task_stack): POW(tasks) & dom(task_tc): POW(tasks) & dom(task_name): POW(tasks) & uxCurrentNumberOfTasks: INTEGER & 0<=uxCurrentNumberOfTasks & uxCurrentNumberOfTasks = card(tasks) & uxTopUsedPriority: PRIORITYS & uxTasksDeleted: INTEGER & 0<=uxTasksDeleted & xTickCount: INTEGER & 0<=xTickCount & xSchedulerRunning: BIT & uxSchedulerSuspended: INTEGER & 0<=uxSchedulerSuspended & uxMissedTicks: INTEGER & 0<=uxMissedTicks & pxCurrentTCB: TASK & pxReadyTasksLists: PRIORITYS +-> POW(TASK) & (not(task_priority = {}) => !(indx,tk).(indx: PRIORITYS & tk: TASK & tk: pxReadyTasksLists(indx) & not(pxReadyTasksLists(indx) = {}) => task_priority(tk) = indx)) & xTasksWaitingTermination: POW(TASK) & xSuspendedTaskList: POW(TASK) & pxDelayedTaskList: POW(TASK) & !indx.(indx: PRIORITYS => pxReadyTasksLists(indx)/\xTasksWaitingTermination = {} & xSuspendedTaskList/\pxReadyTasksLists(indx) = {} & xSuspendedTaskList/\xTasksWaitingTermination = {} & pxDelayedTaskList/\xTasksWaitingTermination = {} & pxDelayedTaskList/\xSuspendedTaskList = {} & pxDelayedTaskList/\pxReadyTasksLists(indx) = {}) & (not(tasks = {}) => !indx.(indx: PRIORITYS & not(pxReadyTasksLists(indx) = {}) => pxReadyTasksLists(indx): POW(tasks))) & pxDelayedTaskList: POW(tasks) & xTasksWaitingTermination: POW(tasks) & xSuspendedTaskList: POW(tasks)));
  ("`Local hypotheses'" & not(pxTaskToSuspend: xSuspendedTaskList) & not(pxCurrentTCB = pxTaskToSuspend));
  "`Check that the invariant (uxTasksDeleted: NATURAL) is preserved by the operation - ref 3.4'";
  (pxTaskToSuspend: TASK);
  "`Check that the invariant (!indx.(indx: PRIORITYS => pxReadyTasksLists(indx)/\xTasksWaitingTermination = {} & xSuspendedTaskList/\pxReadyTasksLists(indx) = {} & xSuspendedTaskList/\xTasksWaitingTermination = {} & pxDelayedTaskList/\xTasksWaitingTermination = {} & pxDelayedTaskList/\xSuspendedTaskList = {} & pxDelayedTaskList/\pxReadyTasksLists(indx) = {})) is preserved by the operation - ref 3.4'";
  (pxTaskToSuspend: tasks);
  ("`Local hypotheses'" & pxTaskToSuspend: xSuspendedTaskList);
  "`Check that the invariant (!(indx,tk).(indx: PRIORITYS & tk: TASK & tk: pxReadyTasksLists(indx) & pxReadyTasksLists(indx)/={} & task_priority/={} => task_priority(tk) = indx)) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (!indx.(indx: PRIORITYS & tasks/={} & pxReadyTasksLists(indx)/={} => pxReadyTasksLists(indx) <: tasks)) is preserved by the operation - ref 3.4'";
  ("`Local hypotheses'" & task_priority(pxCurrentTCB)<=task_priority(pxTaskToResume) & bfalse);
  ([xSuspendedTaskList,pxReadyTasksLists:=xSuspendedTaskList-{pxTaskToResume},pxReadyTasksLists<+{task_priority(pxTaskToResume)|->(pxReadyTasksLists(task_priority(pxTaskToResume))\/{pxTaskToResume})} || pxCurrentTCB:=pxCurrentTCB$0](btrue & mem: INTEGER & 0<=mem & mem<=configTOTAL_HEAP_SIZE & btrue & btrue => tasks: POW(TASK) & task_priority: TASK +-> PRIORITYS & task_stack: TASK +-> NATURAL & task_tc: TASK +-> TASK_CODE & task_name: TASK +-> NAME & dom(task_priority): POW(tasks) & dom(task_stack): POW(tasks) & dom(task_tc): POW(tasks) & dom(task_name): POW(tasks) & uxCurrentNumberOfTasks: INTEGER & 0<=uxCurrentNumberOfTasks & uxCurrentNumberOfTasks = card(tasks) & uxTopUsedPriority: PRIORITYS & uxTasksDeleted: INTEGER & 0<=uxTasksDeleted & xTickCount: INTEGER & 0<=xTickCount & xSchedulerRunning: BIT & uxSchedulerSuspended: INTEGER & 0<=uxSchedulerSuspended & uxMissedTicks: INTEGER & 0<=uxMissedTicks & pxCurrentTCB: TASK & pxReadyTasksLists: PRIORITYS +-> POW(TASK) & (not(task_priority = {}) => !(indx,tk).(indx: PRIORITYS & tk: TASK & tk: pxReadyTasksLists(indx) & not(pxReadyTasksLists(indx) = {}) => task_priority(tk) = indx)) & xTasksWaitingTermination: POW(TASK) & xSuspendedTaskList: POW(TASK) & pxDelayedTaskList: POW(TASK) & !indx.(indx: PRIORITYS => pxReadyTasksLists(indx)/\xTasksWaitingTermination = {} & xSuspendedTaskList/\pxReadyTasksLists(indx) = {} & xSuspendedTaskList/\xTasksWaitingTermination = {} & pxDelayedTaskList/\xTasksWaitingTermination = {} & pxDelayedTaskList/\xSuspendedTaskList = {} & pxDelayedTaskList/\pxReadyTasksLists(indx) = {}) & (not(tasks = {}) => !indx.(indx: PRIORITYS & not(pxReadyTasksLists(indx) = {}) => pxReadyTasksLists(indx): POW(tasks))) & pxDelayedTaskList: POW(tasks) & xTasksWaitingTermination: POW(tasks) & xSuspendedTaskList: POW(tasks)));
  ("`Local hypotheses'" & not(task_priority(pxCurrentTCB)<=task_priority(pxTaskToResume)));
  ("`Local hypotheses'" & task: TASK & idle_name: NAME & idle_tc: TASK_CODE);
  (pdTRUE: BIT);
  ("`Local hypotheses'" & 1<=uxMissedTicks);
  ("`Local hypotheses'" & not(1<=uxMissedTicks));
  ("`Local hypotheses'" & xSchedulerRunning = pdFALSE);
  ("`Local hypotheses'" & not(xSchedulerRunning = pdFALSE) & uxSchedulerSuspended = pdFALSE);
  ("`Local hypotheses'" & not(xSchedulerRunning = pdFALSE) & not(uxSchedulerSuspended = pdFALSE))
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(local_op == OK)
END
