THEORY ProofList IS
  _f(1) & _f(2) & _f(11) & _f(52) & removeFromEventListQueue.4,(_f(53) & _f(24) => _f(57));
  _f(1) & _f(2) & _f(11) & _f(52) & removeFromEventListQueue.3,(_f(53) & _f(22) => _f(56));
  _f(1) & _f(2) & _f(11) & _f(52) & removeFromEventListQueue.2,(_f(53) & _f(18) => _f(55));
  _f(1) & _f(2) & _f(11) & _f(52) & removeFromEventListQueue.1,(_f(53) & _f(16) => _f(54));
  _f(1) & _f(2) & _f(11) & _f(46) & receivedItem.4,(_f(47) & _f(24) => _f(51));
  _f(1) & _f(2) & _f(11) & _f(46) & receivedItem.3,(_f(47) & _f(20) => _f(50));
  _f(1) & _f(2) & _f(11) & _f(46) & receivedItem.2,(_f(47) & _f(18) => _f(49));
  _f(1) & _f(2) & _f(11) & _f(46) & receivedItem.1,(_f(47) & _f(14) => _f(48));
  _f(1) & _f(2) & _f(11) & _f(43) & insertTaskWaitingToRecived.2,(_f(22) => _f(45));
  _f(1) & _f(2) & _f(11) & _f(43) & insertTaskWaitingToRecived.1,(_f(16) => _f(44));
  _f(1) & _f(2) & _f(11) & _f(40) & insertTaskWaitingToSend.2,(_f(24) => _f(42));
  _f(1) & _f(2) & _f(11) & _f(40) & insertTaskWaitingToSend.1,(_f(18) => _f(41));
  _f(1) & _f(2) & _f(11) & _f(35) & sendItem.4,(_f(22) => _f(39));
  _f(1) & _f(2) & _f(11) & _f(35) & sendItem.3,(_f(20) => _f(38));
  _f(1) & _f(2) & _f(11) & _f(35) & sendItem.2,(_f(16) => _f(37));
  _f(1) & _f(2) & _f(11) & _f(35) & sendItem.1,(_f(14) => _f(36));
  _f(1) & _f(2) & _f(11) & _f(26) & queueDelete.7,(_f(24) => _f(34));
  _f(1) & _f(2) & _f(11) & _f(26) & queueDelete.6,(_f(22) => _f(33));
  _f(1) & _f(2) & _f(11) & _f(26) & queueDelete.5,(_f(20) => _f(32));
  _f(1) & _f(2) & _f(11) & _f(26) & queueDelete.4,(_f(18) => _f(31));
  _f(1) & _f(2) & _f(11) & _f(26) & queueDelete.3,(_f(16) => _f(30));
  _f(1) & _f(2) & _f(11) & _f(26) & queueDelete.2,(_f(14) => _f(29));
  _f(1) & _f(2) & _f(11) & _f(26) & queueDelete.1,(_f(27) => _f(28));
  _f(1) & _f(2) & _f(11) & _f(12) & xQueueCreate.6,(_f(13) & _f(24) => _f(25));
  _f(1) & _f(2) & _f(11) & _f(12) & xQueueCreate.5,(_f(13) & _f(22) => _f(23));
  _f(1) & _f(2) & _f(11) & _f(12) & xQueueCreate.4,(_f(13) & _f(20) => _f(21));
  _f(1) & _f(2) & _f(11) & _f(12) & xQueueCreate.3,(_f(13) & _f(18) => _f(19));
  _f(1) & _f(2) & _f(11) & _f(12) & xQueueCreate.2,(_f(13) & _f(16) => _f(17));
  _f(1) & _f(2) & _f(11) & _f(12) & xQueueCreate.1,(_f(13) & _f(14) => _f(15));
  _f(1) & _f(2) & Initialisation.4,(_f(9) => _f(10));
  _f(1) & _f(2) & Initialisation.3,(_f(7) => _f(8));
  _f(1) & _f(2) & Initialisation.2,(_f(5) => _f(6));
  _f(1) & _f(2) & Initialisation.1,(_f(3) => _f(4))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & BIT = 0..1 & pdTRUE: BIT & pdTRUE = 1 & pdFALSE: BIT & pdFALSE = 0 & pdPASS: BIT & pdPASS = 1 & pdFAIL: BIT & pdFAIL = 0 & errQUEUE_EMPTY: BIT & errQUEUE_EMPTY = 0 & errQUEUE_FULL: BIT & errQUEUE_FULL = 0 & ERROR_DEFINITION = -5.. -1 & errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY: ERROR_DEFINITION & errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY = -1 & errNO_TASK_TO_RUN: ERROR_DEFINITION & errNO_TASK_TO_RUN = -2 & errQUEUE_BLOCKED: ERROR_DEFINITION & errQUEUE_BLOCKED = -4 & errQUEUE_YIELD: ERROR_DEFINITION & errQUEUE_YIELD = -5 & MAX_DELAY: 0..2147483647 & 1<=MAX_DELAY & NULL_PARAMETER: PARAMETER & PRIORITY: POW(NAT) & TICK: POW(NAT) & TICK = 0..MAX_DELAY & TICK_INCREMENT: TICK*TICK +-> TICK & dom(TICK_INCREMENT) = TICK*TICK & TICK_INCREMENT = %(tick,inc).(tick: TICK & inc: TICK | (tick+inc) mod MAX_DELAY) & NAME: FIN(INTEGER) & not(NAME = {}) & PARAMETER: FIN(INTEGER) & not(PARAMETER = {}) & TASK: FIN(INTEGER) & not(TASK = {}) & STACK: FIN(INTEGER) & not(STACK = {}) & TASK_CODE: FIN(INTEGER) & not(TASK_CODE = {}) & (1..3)*{SCHEDULER_STATE}: FIN(NATURAL*{SCHEDULER_STATE}) & not((1..3)*{SCHEDULER_STATE} = {}) & QUEUE_NULL: QUEUE & ITEM_NULL: ITEM & REMOVE_EVENT: TASK*POW(QUEUE)*(QUEUE +-> POW(TASK)) +-> (QUEUE +-> POW(TASK)) & REMOVE_EVENT = %(task,queues,pending).(task: TASK & queues: POW(QUEUE) & pending: QUEUE +-> POW(TASK) | %queue.(queue: queues & queue: dom(pending) | pending(queue)-{task})) & ITEM: FIN(INTEGER) & not(ITEM = {}) & COPY_POSITION: FIN(INTEGER) & not(COPY_POSITION = {}) & QUEUE: FIN(INTEGER) & not(QUEUE = {}));
  ("`Seen and used machines assertions'" & ERROR_DEFINITION: POW(INTEGER) & BIT: POW(NATURAL));
  "`Check that the invariant (queues: POW(QUEUE)) is established by the initialisation - ref 3.3'";
  ({}: POW(QUEUE));
  "`Check that the invariant (queue_items: QUEUE +-> POW(ITEM)) is established by the initialisation - ref 3.3'";
  ({}: QUEUE +-> POW(ITEM));
  "`Check that the invariant (queue_receiving: QUEUE +-> POW(TASK)) is established by the initialisation - ref 3.3'";
  ({}: QUEUE +-> POW(TASK));
  "`Check that the invariant (queues = dom(queue_items)) is established by the initialisation - ref 3.3'";
  (dom({}) = {});
  ("`Component invariant'" & queues: POW(QUEUE) & queue_items: QUEUE +-> POW(ITEM) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & queues = dom(queue_items) & queues = dom(queue_receiving) & queues = dom(queue_sending));
  ("`xQueueCreate preconditions in this component'" & uxQueueLength: INTEGER & 0<=uxQueueLength & uxQueueLength<=2147483647 & uxItemSize: INTEGER & 0<=uxItemSize & uxItemSize<=2147483647);
  ("`Local hypotheses'" & queue: QUEUE & not(queue: queues));
  "`Check that the invariant (queue_items: QUEUE +-> POW(ITEM)) is preserved by the operation - ref 3.4'";
  (queue_items\/{queue|->{}}: QUEUE +-> POW(ITEM));
  "`Check that the invariant (queue_receiving: QUEUE +-> POW(TASK)) is preserved by the operation - ref 3.4'";
  (queue_receiving\/{queue|->{}}: QUEUE +-> POW(TASK));
  "`Check that the invariant (queue_sending: QUEUE +-> POW(TASK)) is preserved by the operation - ref 3.4'";
  (queue_sending\/{queue|->{}}: QUEUE +-> POW(TASK));
  "`Check that the invariant (queues = dom(queue_items)) is preserved by the operation - ref 3.4'";
  (queues\/{queue} = dom(queue_items\/{queue|->{}}));
  "`Check that the invariant (queues = dom(queue_receiving)) is preserved by the operation - ref 3.4'";
  (queues\/{queue} = dom(queue_receiving\/{queue|->{}}));
  "`Check that the invariant (queues = dom(queue_sending)) is preserved by the operation - ref 3.4'";
  (queues\/{queue} = dom(queue_sending\/{queue|->{}}));
  ("`queueDelete preconditions in this component'" & queue: queues);
  "`Check that the invariant (queues: POW(QUEUE)) is preserved by the operation - ref 3.4'";
  (queues-{queue}: POW(QUEUE));
  ({queue}<<|queue_items: QUEUE +-> POW(ITEM));
  ({queue}<<|queue_receiving: QUEUE +-> POW(TASK));
  ({queue}<<|queue_sending: QUEUE +-> POW(TASK));
  (queues-{queue} = dom({queue}<<|queue_items));
  (queues-{queue} = dom({queue}<<|queue_receiving));
  (queues-{queue} = dom({queue}<<|queue_sending));
  ("`sendItem preconditions in this component'" & pxQueue: queues & pxItem: ITEM & task: TASK & copy_position: COPY_POSITION & task: queue_receiving(pxQueue));
  (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pxItem})}: QUEUE +-> POW(ITEM));
  (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}: QUEUE +-> POW(TASK));
  (queues = dom(queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pxItem})}));
  (queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}));
  ("`insertTaskWaitingToSend preconditions in this component'" & pxQueue: queues & pxTask: TASK);
  (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})}: QUEUE +-> POW(TASK));
  (queues = dom(queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})}));
  ("`insertTaskWaitingToRecived preconditions in this component'" & pxQueue: queues & pxTask: TASK);
  (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})}: QUEUE +-> POW(TASK));
  (queues = dom(queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})}));
  ("`receivedItem preconditions in this component'" & pxQueue: queues & justPeeking: BIT & task: TASK & task: queue_sending(pxQueue));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = pdFALSE);
  (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}: QUEUE +-> POW(ITEM));
  (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK));
  (queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}));
  (queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}));
  ("`removeFromEventListQueue preconditions in this component'" & task: TASK);
  ("`Local hypotheses'" & receiving = REMOVE_EVENT(task,queues,queue_receiving) & sending = REMOVE_EVENT(task,queues,queue_sending));
  (queue_receiving<+receiving: QUEUE +-> POW(TASK));
  (queue_sending<+sending: QUEUE +-> POW(TASK));
  (queues = dom(queue_receiving<+receiving));
  (queues = dom(queue_sending<+sending))
END
&
THEORY EnumerateX IS
  SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK)
END
