THEORY BalanceX IS
  Task_r,237,55,0,177,4,0,1;
  AssertionLemmas,11,7,0,3,1,0,0;
  Initialisation,2,0,0,2,0,0,0;
  t_create,29,0,0,29,0,0,0;
  t_delete,38,4,0,34,0,0,0;
  t_yield,4,2,0,2,0,0,0;
  t_suspend,6,4,0,2,0,0,0;
  t_resume,5,3,0,2,0,0,0;
  t_getPriority,1,0,0,1,0,0,0;
  t_getCurrent,0,0,0,0,0,0,0;
  t_getNumberOfTasks,0,0,0,0,0,0,0;
  t_delayTask,4,3,0,1,0,0,0;
  t_startScheduler,7,0,0,7,0,0,0;
  t_endScheduler,2,0,0,2,0,0,0;
  t_resumeAll,3,2,0,1,0,0,0;
  t_unblock,5,3,0,2,0,0,0;
  t_removeFromEventList,20,6,0,14,0,0,0;
  t_setPriority,37,5,0,28,3,0,1;
  t_priorityInherit,15,6,0,9,0,0,0;
  t_returnPriority,48,10,0,38,0,0,0;
  t_suspendAll,0,0,0,0,0,0,0
END
&
THEORY ProofState IS
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(3);
  Proved(0);
  Proved(Util);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(1);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0)
END
&
THEORY MethodList IS
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & eh(n_runable,_h,Goal) & ah(!(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & atask/:tasks & t_priority(atask)<t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}]))) & pr & dd & ph(runable$1,t_priority$1,running$1,btask,!(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & atask/:tasks & t_priority(atask)<t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}]))) & pr & pr & pr & pr & pr & pr & pr & pr & pr & pp(rp.1) & pp(rp.1);
  pr;
  pr;
  dd & ph(n_runable,t_priority$1,running$2,!(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks]))) & pr & pr & eh(n_runable,_h,Goal) & pr & pr & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & pr;
  pr;
  dd & ss & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr;
  pr;
  dd & ph(n_runable,n_priority,running$2,!(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks]))) & pr & pr & pr & pr & pr & ah(running$2: schedule_p(n_runable,n_priority)) & eh(schedule_p,_h,Goal) & pr & ah(running$2: schedule_p(n_runable,n_priority)) & eh(schedule_p,_h,Goal) & pr & pr;
  pr;
  pr;
  dd & ss & ah(running$2: schedule_p(n_runable,n_priority)) & eh(schedule_p,_h,Goal) & pr;
  pr;
  dd & eh(n_runable,_h,Goal) & ah(!(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & atask/:tasks & t_priority(atask)<t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}]))) & pr & dd & ph(runable$1,t_priority$1,running$1,btask,!(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & atask/:tasks & t_priority(atask)<t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}]))) & pr & pr & ah(active$1 = TRUE & active$1 = TRUE => running$1: runable$1) & pr & pr & ah(active$1 = TRUE & active$1 = TRUE => running$1: runable$1) & pr & pr & pr & pp(rp.1);
  pr;
  pr;
  dd & ph(n_runable,t_priority$1,running$2,!(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks]))) & pr & pr & pr & pr & pr & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & pr;
  pr;
  dd & ss & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr;
  pr;
  dd & ah(!(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks]))) & dd & ph(n_runable,n_priority,running$2,!(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks]))) & pr & pr & pr & pr & pr & pr & ah(running$2: schedule_p(n_runable,n_priority)) & eh(schedule_p,_h,Goal) & pr & ah(running$2: schedule_p(n_runable,n_priority)) & eh(schedule_p,_h,Goal) & pr & pr;
  pr;
  pr;
  dd & ss & ah(running$2: schedule_p(n_runable,n_priority)) & eh(schedule_p,_h,Goal) & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & ph(n_runable,t_priority$1,running$2,!(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks]))) & pr & pr & pr & pr & pr & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & pr;
  pr;
  dd & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr;
  dd & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr;
  pr;
  pr;
  dd & ph(n_runable,n_priority,running$2,!(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks]))) & pr & pr & pr & pr & pr & ah(running$2: schedule_p(n_runable,n_priority)) & eh(schedule_p,_h,Goal) & pr & ah(running$2: schedule_p(n_runable,n_priority)) & eh(schedule_p,_h,Goal) & pr & pr;
  pr;
  pr;
  pr;
  pr;
  dd & ah(running$2: schedule_p(n_runable,n_priority)) & eh(schedule_p,_h,Goal) & pr;
  dd & ah(running$2: schedule_p(n_runable,n_priority)) & eh(schedule_p,_h,Goal) & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & eh(n_priority,_h,Goal) & ss & ah(!(tasks,t_priority,rtask,priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks <: dom(t_priority) & tasks/={} & rtask: TASK & rtask: tasks & tasks/={rtask} & priority: PRIORITY & priority+1<=max(t_priority[tasks]) & max(t_priority[tasks-{rtask}]) = max(t_priority[tasks]) => max(t_priority[tasks]) = max(t_priority[tasks-{rtask}]\/{priority}))) & pr & dd & ph(runable$1,t_priority$1,task,priority,!(tasks,t_priority,rtask,priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks <: dom(t_priority) & tasks/={} & rtask: TASK & rtask: tasks & tasks/={rtask} & priority: PRIORITY & priority+1<=max(t_priority[tasks]) & max(t_priority[tasks-{rtask}]) = max(t_priority[tasks]) => max(t_priority[tasks]) = max(t_priority[tasks-{rtask}]\/{priority}))) & pr & pr & pr & pr & pr & pr & pr & pr & eh(max(t_priority$1[runable$1]),_h,Goal) & pp(rp.1) & eh(max(t_priority$1[runable$1]),_h,Goal) & ah(!(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & rtask/=dtask => t_priority(rtask) = max(t_priority[tasks-{dtask}]))) & dd & ph(runable$1,t_priority$1,running$1,task,!(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & rtask/=dtask => t_priority(rtask) = max(t_priority[tasks-{dtask}]))) & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & ph(runable$1,n_priority,running$2,!(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks]))) & pr & pr & pr & pr & pr & ah(running$2: schedule_p(runable$1,n_priority)) & eh(schedule_p,_h,Goal) & pr & ah(running$2: schedule_p(runable$1,n_priority)) & eh(schedule_p,_h,Goal) & pr & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & eh(n_priority,_h,Goal) & eh(task,_h,Goal) & ss & pr & ah((t_priority$1<+{task|->priority})(task) = priority) & pr & dd & eh(priority,_h,Goal) & ss & ah(!(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks <: dom(t_priority) & tasks/={} & rtask: TASK & rtask: tasks & tasks/={rtask} => max(t_priority[tasks-{rtask}])<=max(t_priority[tasks]))) & dd & ph(runable$1,t_priority$1,running$1,!(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks <: dom(t_priority) & tasks/={} & rtask: TASK & rtask: tasks & tasks/={rtask} => max(t_priority[tasks-{rtask}])<=max(t_priority[tasks]))) & pr & pr & pr & pr & pr & pr & pr & dd & ah(!(tasks,t_priority,rtask,priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks <: dom(t_priority) & tasks/={} & rtask: TASK & rtask: tasks & tasks/={rtask} & priority: PRIORITY & max(t_priority[tasks])<=priority & max(t_priority[tasks-{rtask}])<=max(t_priority[tasks]) => priority = max(t_priority[tasks-{rtask}]\/{priority}))) & dd & ph(runable$1,t_priority$1,running$1,priority,!(tasks,t_priority,rtask,priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks <: dom(t_priority) & tasks/={} & rtask: TASK & rtask: tasks & tasks/={rtask} & priority: PRIORITY & max(t_priority[tasks])<=priority & max(t_priority[tasks-{rtask}])<=max(t_priority[tasks]) => priority = max(t_priority[tasks-{rtask}]\/{priority}))) & pr & pr & pr & pr & pr & pr & pr & pr & pr & eh(max(t_priority$1[runable$1]),_h,Goal) & pr & pr & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & ph(runable$1,n_priority,running$2,!(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks]))) & pr & pr & pr & pr & pr & ah(running$2: schedule_p(runable$1,n_priority)) & eh(schedule_p,_h,Goal) & pr & ah(running$2: schedule_p(runable$1,n_priority)) & eh(schedule_p,_h,Goal) & pr & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & ss & ah(running$2: schedule_p(runable$1,n_priority)) & eh(schedule_p,_h,Goal) & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & ah(!(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & atask/:tasks & t_priority(atask)<t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}]))) & pr & dd & eh(n_runable,_h,Goal) & ph(runable$1,t_priority$1,running$1,task,!(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & atask/:tasks & t_priority(atask)<t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}]))) & pr & pr & ah(active$1 = TRUE & active$1 = TRUE => not(runable$1 = {})) & pr & pr & pr & ah(active$1 = TRUE & active$1 = TRUE => running$1: runable$1) & pr & ah(active$1 = TRUE & active$1 = TRUE => t_priority$1(idle$1) = 0 & t_priority$1(running$1) = max(t_priority$1[runable$1]) & 0<=min(t_priority$1[tasks$1])) & pr & pr & pr & pr & pp(rp.1) & pp(rp.1);
  pr;
  dd & ph(n_runable,t_priority$1,running$2,!(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks]))) & pr & pr & pr & ah(n_runable = runable$1\/{task}) & pr & pr & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & pr;
  dd & ss & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr;
  pr;
  dd & ah(!(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & atask/:tasks & t_priority(atask)<t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}]))) & pr & dd & eh(n_runable,_h,Goal) & ph(runable$1,t_priority$1,running$1,task,!(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & atask/:tasks & t_priority(atask)<t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}]))) & pr & pr & pr & ah(active$1 = TRUE & active$1 = TRUE => not(runable$1 = {})) & pr & pr & pr & ah(active$1 = TRUE & active$1 = TRUE => running$1: runable$1) & pr & ah(active$1 = TRUE & active$1 = TRUE => t_priority$1(idle$1) = 0 & t_priority$1(running$1) = max(t_priority$1[runable$1]) & 0<=min(t_priority$1[tasks$1])) & pr & pr & pr & pr & pp(rp.1);
  pr;
  dd & ph(n_runable,t_priority$1,running$2,!(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks]))) & pr & pr & pr & ah(n_runable = runable$1\/{task}) & pr & pr & pr & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & pr;
  dd & ss & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & ah(!(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & atask/:tasks & t_priority(atask)<t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}]))) & pr & dd & eh(n_runable,_h,Goal) & ph(runable$1,t_priority$1,running$1,task,!(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & atask/:tasks & t_priority(atask)<t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}]))) & pr & pr & pr & ah(active$1 = TRUE & active$1 = TRUE => not(runable$1 = {})) & pr & pr & pr & ah(active$1 = TRUE & active$1 = TRUE => running$1: runable$1) & pr & ah(active$1 = TRUE & active$1 = TRUE => t_priority$1(idle$1) = 0 & t_priority$1(running$1) = max(t_priority$1[runable$1]) & 0<=min(t_priority$1[tasks$1])) & pr & pr & pr & pr & pp(rp.1);
  pr;
  dd & ph(n_runable,t_priority$1,running$2,!(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks]))) & pr & pr & pr & pr & pr & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & pr;
  dd & ss & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr;
  pr;
  dd & ph(n_runable,t_priority$1,running$2,!(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks]))) & pr & pr & pr & pr & pr & pr & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & pr;
  dd & ss & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & ph(n_runable,t_priority$1,running$2,!(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks]))) & pr & pr & pr & pr & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & pr;
  dd & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr;
  dd & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr;
  pr;
  pr;
  dd & ah(!(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & atask/:tasks & t_priority(atask)<t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}]))) & pr & dd & ph(runable$1,t_priority$1,running$1,rtask,!(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & atask/:tasks & t_priority(atask)<t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}]))) & pr & pr & pr & eh(runable$1,_h,Goal) & eh(runable,_h,Goal) & ah(active$1 = TRUE & active$1 = TRUE => not(runable$1 = {})) & pr & pr & pr & pr & ah(active$1 = TRUE & active$1 = TRUE => running$1: runable$1) & pr & ah(active$1 = TRUE & active$1 = TRUE => t_priority$1(idle$1) = 0 & t_priority$1(running$1) = max(t_priority$1[runable$1]) & 0<=min(t_priority$1[tasks$1])) & pr & pr & pr & pr & pp(rp.1) & pp(rp.1) & eh(n_runable,_h,Goal);
  pr;
  dd & ph(n_runable,t_priority$1,running$2,!(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks]))) & pr & pr & pr & pr & pr & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & pr;
  dd & ss & pr & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & pr & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr;
  pr;
  dd & pr & ph(runable$1,t_priority$1,running$1,stask,!(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & rtask/=dtask => t_priority(rtask) = max(t_priority[tasks-{dtask}]))) & pr & pr & pr & pr & pr & pr & ah(active$1 = TRUE & active$1 = TRUE => running$1: runable$1) & pr & pr & ah(active$1 = TRUE & active$1 = TRUE => not(runable$1 = {}) & running$1: runable$1 & idle$1: runable$1 & not(TASK_NULL: tasks$1)) & pr & pr & ah(active$1 = TRUE & active$1 = TRUE => t_priority$1(idle$1) = 0 & t_priority$1(running$1) = max(t_priority$1[runable$1]) & 0<=min(t_priority$1[tasks$1])) & pr & pr & pr & pr & pr & pr & pr;
  pr;
  dd & ph(n_runable,t_priority$1,running$2,!(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks]))) & pr & pr & pr & pr & pr & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & pr;
  dd & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr;
  dd & ah(running$2: schedule_p(n_runable,t_priority$1)) & eh(schedule_p,_h,Goal) & pr;
  pr;
  pr;
  dd & ph(runable$1,t_priority$1,running$2,!(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks]))) & pr & pr & pr & pr & pr & ah(running$2: schedule_p(runable$1,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & pr & ah(running$2: schedule_p(runable$1,t_priority$1)) & eh(schedule_p,_h,Goal) & ss & pr & pr;
  pr;
  eh(schedule_p,_h,Goal) & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & eh(n_priority,_h,Goal) & pr & ph(runable$1,t_priority$1,running$1,atask,!(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & rtask/=dtask => t_priority(rtask) = max(t_priority[tasks-{dtask}]))) & pr & pr & pr & pr & pr & pr & ah(active$1 = TRUE & active$1 = TRUE => running$1: runable$1) & pr & pr & ah(active$1 = TRUE & active$1 = TRUE => t_priority$1(idle$1) = 0 & t_priority$1(running$1) = max(t_priority$1[runable$1]) & 0<=min(t_priority$1[tasks$1])) & pr & pr & pr & pr & pr & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & ph(n_runable,n_priority,running$2,!(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks]))) & pr & pr & pr & pr & pr & pr & ah(running$2: schedule_p(n_runable,n_priority)) & eh(schedule_p,_h,Goal) & pr & pr & ah(running$2: schedule_p(n_runable,n_priority)) & eh(schedule_p,_h,Goal) & pr & pr & ah(running$2: schedule_p(n_runable,n_priority)) & eh(n_runable,_h,Goal) & eh(n_priority,_h,Goal) & eh(schedule_p,_h,Goal) & pr & pr;
  pr;
  pr;
  pr;
  pr;
  dd & ah(running$2: schedule_p(n_runable,n_priority)) & eh(schedule_p,_h,Goal) & pr;
  dd & ah(running$2: schedule_p(n_runable,n_priority)) & eh(schedule_p,_h,Goal) & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & pr & pp(rp.1) & pr;
  dd & pr & pp(rp.1) & pr;
  dd & pp(rp.1);
  dd & pp(rp.1);
  dd & pr & pp(rp.1);
  dd & ah(rtask$0: schedule_p(tasks$0,t_priority$0)) & eh(schedule_p,_h,Goal) & pr;
  pr;
  dd & ah(idle$1: runable$1) & ah(active$1 = TRUE & active$1 = TRUE => idle$1: runable$1) & pr & dd & ah(idle$1/:{atask}) & pr & dd & pr;
  pr;
  pr;
  pr;
  pr;
  pr
END
&
THEORY PassList IS
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(2),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(2),?;
  Force(0),?;
  Force(2),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(3),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(2),?;
  Force(2),?;
  Force(0),?;
  Force(0),?;
  Force(2),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(3),?;
  Force(2),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?
END
&
THEORY ManForms 
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK);
  PRVersion("V3.3.3.p39")(CLT == "V3.7.6")
END
