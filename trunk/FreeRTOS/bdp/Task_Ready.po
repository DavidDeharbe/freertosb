THEORY ProofList IS
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.32,(_f(129) & _f(126) => _f(97));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.31,(_f(129) & _f(125) => _f(96));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.30,(_f(129) & _f(124) => _f(95));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.29,(_f(129) & _f(126) => _f(69));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.28,(_f(129) & _f(125) => _f(68));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.27,(_f(129) & _f(125) => _f(67));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.26,(_f(129) & _f(124) => _f(66));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.25,(_f(129) & _f(122) => _f(123));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.24,(_f(128) & _f(126) => _f(97));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.23,(_f(128) & _f(125) => _f(96));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.22,(_f(128) & _f(124) => _f(95));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.21,(_f(128) & _f(126) => _f(69));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.20,(_f(128) & _f(125) => _f(68));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.19,(_f(128) & _f(125) => _f(67));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.18,(_f(128) & _f(124) => _f(66));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.17,(_f(128) & _f(122) => _f(123));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.16,(_f(127) & _f(126) => _f(97));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.15,(_f(127) & _f(125) => _f(96));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.14,(_f(127) & _f(124) => _f(95));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.13,(_f(127) & _f(126) => _f(69));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.12,(_f(127) & _f(125) => _f(68));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.11,(_f(127) & _f(125) => _f(67));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.10,(_f(127) & _f(124) => _f(66));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.9,(_f(127) & _f(122) => _f(123));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.8,(_f(121) & _f(126) => _f(97));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.7,(_f(121) & _f(125) => _f(96));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.6,(_f(121) & _f(124) => _f(95));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.5,(_f(121) & _f(126) => _f(69));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.4,(_f(121) & _f(125) => _f(68));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.3,(_f(121) & _f(125) => _f(67));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.2,(_f(121) & _f(124) => _f(66));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(120) & t_returnPriority.1,(_f(121) & _f(122) => _f(123));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(118) & t_priorityInherit.6,(_f(119) & _f(22) => _f(81));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(118) & t_priorityInherit.5,(_f(119) & _f(20) => _f(80));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(118) & t_priorityInherit.4,(_f(119) & _f(18) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(118) & t_priorityInherit.3,(_f(119) & _f(14) => _f(79));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(118) & t_priorityInherit.2,(_f(119) & _f(14) => _f(33));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(118) & t_priorityInherit.1,(_f(119) & _f(14) => _f(78));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(112) & t_setPriority.4,(_f(113) & _f(22) => _f(117));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(112) & t_setPriority.3,(_f(113) & _f(20) => _f(116));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(112) & t_setPriority.2,(_f(113) & _f(18) => _f(115));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(112) & t_setPriority.1,(_f(113) & _f(24) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.40,(_f(111) & _f(22) => _f(97));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.39,(_f(111) & _f(20) => _f(96));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.38,(_f(111) & _f(18) => _f(95));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.37,(_f(111) & _f(105) => _f(15));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.36,(_f(110) & _f(22) => _f(69));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.35,(_f(110) & _f(20) => _f(68));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.34,(_f(110) & _f(20) => _f(67));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.33,(_f(110) & _f(18) => _f(66));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.32,(_f(110) & _f(24) => _f(100));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.31,(_f(110) & _f(105) => _f(15));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.30,(_f(109) & _f(22) => _f(97));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.29,(_f(109) & _f(20) => _f(96));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.28,(_f(109) & _f(18) => _f(95));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.27,(_f(109) & _f(105) => _f(15));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.26,(_f(108) & _f(22) => _f(69));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.25,(_f(108) & _f(20) => _f(68));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.24,(_f(108) & _f(20) => _f(67));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.23,(_f(108) & _f(18) => _f(66));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.22,(_f(108) & _f(24) => _f(100));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.21,(_f(108) & _f(105) => _f(15));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.20,(_f(107) & _f(22) => _f(97));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.19,(_f(107) & _f(20) => _f(96));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.18,(_f(107) & _f(18) => _f(95));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.17,(_f(107) & _f(105) => _f(15));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.16,(_f(106) & _f(22) => _f(69));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.15,(_f(106) & _f(20) => _f(68));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.14,(_f(106) & _f(20) => _f(67));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.13,(_f(106) & _f(18) => _f(66));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.12,(_f(106) & _f(24) => _f(100));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.11,(_f(106) & _f(105) => _f(15));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.10,(_f(104) & _f(22) => _f(97));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.9,(_f(104) & _f(20) => _f(96));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.8,(_f(104) & _f(18) => _f(95));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.7,(_f(104) & _f(105) => _f(15));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.6,(_f(103) & _f(22) => _f(69));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.5,(_f(103) & _f(20) => _f(68));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.4,(_f(103) & _f(20) => _f(67));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.3,(_f(103) & _f(18) => _f(66));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.2,(_f(103) & _f(24) => _f(100));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(102) & t_removeFromEventList.1,(_f(103) & _f(14) => _f(15));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(98) & t_unblock.10,(_f(101) & _f(22) => _f(97));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(98) & t_unblock.9,(_f(101) & _f(20) => _f(96));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(98) & t_unblock.8,(_f(101) & _f(18) => _f(95));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(98) & t_unblock.7,(_f(101) & _f(31) => _f(15));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(98) & t_unblock.6,(_f(99) & _f(22) => _f(69));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(98) & t_unblock.5,(_f(99) & _f(20) => _f(68));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(98) & t_unblock.4,(_f(99) & _f(20) => _f(67));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(98) & t_unblock.3,(_f(99) & _f(18) => _f(66));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(98) & t_unblock.2,(_f(99) & _f(24) => _f(100));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(98) & t_unblock.1,(_f(99) & _f(14) => _f(15));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(90) & t_resumeAll.10,(_f(94) & _f(22) => _f(97));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(90) & t_resumeAll.9,(_f(94) & _f(20) => _f(96));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(90) & t_resumeAll.8,(_f(94) & _f(18) => _f(95));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(90) & t_resumeAll.7,(_f(94) & _f(71) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(90) & t_resumeAll.6,(_f(91) & _f(22) => _f(69));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(90) & t_resumeAll.5,(_f(91) & _f(20) => _f(68));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(90) & t_resumeAll.4,(_f(91) & _f(20) => _f(67));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(90) & t_resumeAll.3,(_f(91) & _f(18) => _f(66));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(90) & t_resumeAll.2,(_f(91) & _f(24) => _f(93));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(90) & t_resumeAll.1,(_f(91) & _f(14) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(88) & t_endScheduler.2,(_f(89) & _f(20) => _f(7));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(88) & t_endScheduler.1,(_f(89) & _f(18) => _f(5));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(82) & t_startScheduler.3,(_f(83) & _f(22) => _f(87));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(82) & t_startScheduler.2,(_f(83) & _f(85) => _f(86));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(82) & t_startScheduler.1,(_f(83) & _f(14) => _f(84));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(76) & t_delayTask.6,(_f(77) & _f(22) => _f(81));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(76) & t_delayTask.5,(_f(77) & _f(20) => _f(80));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(76) & t_delayTask.4,(_f(77) & _f(18) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(76) & t_delayTask.3,(_f(77) & _f(16) => _f(79));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(76) & t_delayTask.2,(_f(77) & _f(16) => _f(33));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(76) & t_delayTask.1,(_f(77) & _f(14) => _f(78));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(62) & t_resume.11,(_f(70) & _f(22) => _f(75));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(62) & t_resume.10,(_f(70) & _f(20) => _f(74));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(62) & t_resume.9,(_f(70) & _f(20) => _f(73));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(62) & t_resume.8,(_f(70) & _f(18) => _f(72));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(62) & t_resume.7,(_f(70) & _f(71) => _f(64));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(62) & t_resume.6,(_f(63) & _f(22) => _f(69));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(62) & t_resume.5,(_f(63) & _f(20) => _f(68));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(62) & t_resume.4,(_f(63) & _f(20) => _f(67));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(62) & t_resume.3,(_f(63) & _f(18) => _f(66));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(62) & t_resume.2,(_f(63) & _f(24) => _f(65));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(62) & t_resume.1,(_f(63) & _f(14) => _f(64));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(51) & t_suspend.10,(_f(58) & _f(22) => _f(61));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(51) & t_suspend.9,(_f(58) & _f(20) => _f(60));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(51) & t_suspend.8,(_f(58) & _f(18) => _f(59));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(51) & t_suspend.7,(_f(58) & _f(31) => _f(53));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(51) & t_suspend.6,(_f(52) & _f(22) => _f(57));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(51) & t_suspend.5,(_f(52) & _f(20) => _f(56));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(51) & t_suspend.4,(_f(52) & _f(18) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(51) & t_suspend.3,(_f(52) & _f(16) => _f(54));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(51) & t_suspend.2,(_f(52) & _f(16) => _f(33));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(51) & t_suspend.1,(_f(52) & _f(31) => _f(53));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(45) & t_yield.5,(_f(46) & _f(22) => _f(50));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(45) & t_yield.4,(_f(46) & _f(20) => _f(49));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(45) & t_yield.3,(_f(46) & _f(20) => _f(48));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(45) & t_yield.2,(_f(46) & _f(18) => _f(47));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(45) & t_yield.1,(_f(46) & _f(14) => _f(33));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(29) & t_delete.13,(_f(41) & _f(22) => _f(44));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(29) & t_delete.12,(_f(41) & _f(20) => _f(43));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(29) & t_delete.11,(_f(41) & _f(18) => _f(42));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(29) & t_delete.10,(_f(41) & _f(31) => _f(32));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(29) & t_delete.9,(_f(38) & _f(22) => _f(40));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(29) & t_delete.8,(_f(38) & _f(20) => _f(39));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(29) & t_delete.7,(_f(38) & _f(31) => _f(32));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(29) & t_delete.6,(_f(30) & _f(22) => _f(37));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(29) & t_delete.5,(_f(30) & _f(20) => _f(36));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(29) & t_delete.4,(_f(30) & _f(18) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(29) & t_delete.3,(_f(30) & _f(16) => _f(34));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(29) & t_delete.2,(_f(30) & _f(16) => _f(33));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(29) & t_delete.1,(_f(30) & _f(31) => _f(32));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(12) & t_create.9,(_f(13) & _f(22) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(12) & t_create.8,(_f(13) & _f(20) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(12) & t_create.7,(_f(13) & _f(18) => _f(26));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(12) & t_create.6,(_f(13) & _f(24) => _f(25));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(12) & t_create.5,(_f(13) & _f(22) => _f(23));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(12) & t_create.4,(_f(13) & _f(20) => _f(21));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(12) & t_create.3,(_f(13) & _f(18) => _f(19));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(12) & t_create.2,(_f(13) & _f(16) => _f(17));
  _f(1) & _f(2) & _f(8) & _f(11) & _f(12) & t_create.1,(_f(13) & _f(14) => _f(15));
  _f(1) & _f(2) & _f(8) & AssertionLemmas.1,(_f(9) => _f(10));
  _f(1) & _f(2) & Initialisation.2,(_f(3) & _f(6) => _f(7));
  _f(1) & _f(2) & Initialisation.1,(_f(3) & _f(4) => _f(5))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES & configMAX_PRIORITIES<=2147483647 & 1<=configMAX_PRIORITIES & configTOTAL_HEAP_SIZE: INTEGER & 0<=configTOTAL_HEAP_SIZE & configTOTAL_HEAP_SIZE<=2147483647 & configMINIMAL_STACK_SIZE: INTEGER & 0<=configMINIMAL_STACK_SIZE & configMINIMAL_STACK_SIZE<=2147483647 & INCLUDE_uxTaskPriorityGet: BIT & INCLUDE_vTaskDelete: BIT & INCLUDE_vTaskSuspend: BIT & INCLUDE_xTaskGetSchedulerState: BIT & INCLUDE_vTaskPrioritySet: BIT & INCLUDE_xTaskGetCurrentTaskHandle: BIT & INCLUDE_vTaskDelayUntil: BIT & INCLUDE_vTaskDelay: BIT & PRIORITY = 0..configMAX_PRIORITIES-1 & BIT = 0..1 & MAX_DELAY: 0..2147483647 & 1<=MAX_DELAY & NULL_PARAMETER: PARAMETER & PRIORITY: POW(NAT) & TICK: POW(NAT) & TICK = 0..MAX_DELAY & TICK_INCREMENT: TICK*TICK +-> TICK & dom(TICK_INCREMENT) = TICK*TICK & TICK_INCREMENT = %(tick,inc).(tick: TICK & inc: TICK | (tick+inc) mod MAX_DELAY) & QUEUE_NULL: QUEUE & ITEM_NULL: ITEM & ITEM_EMPTY: ITEM & TASK_NULL: TASK & REMOVE_EVENT: TASK*POW(QUEUE)*(QUEUE +-> POW(TASK)) +-> (QUEUE +-> POW(TASK)) & REMOVE_EVENT = %(task,queues,pending).(task: TASK & queues: POW(QUEUE) & pending: QUEUE +-> POW(TASK) | %queue.(queue: queues & queue: dom(pending) | pending(queue)-{task})) & semGIVE_BLOCK_TIME: TICK & IDLE_PRIORITY: PRIORITY & IDLE_PRIORITY = 0 & QUEUE_LENGTH: POW(NAT) & QUEUE_LENGTH = 1..2147483647 & QUEUE_QUANT: POW(NAT) & QUEUE_QUANT = 0..2147483647 & NAME: FIN(INTEGER) & not(NAME = {}) & PARAMETER: FIN(INTEGER) & not(PARAMETER = {}) & TASK: FIN(INTEGER) & not(TASK = {}) & STACK: FIN(INTEGER) & not(STACK = {}) & TASK_CODE: FIN(INTEGER) & not(TASK_CODE = {}) & ITEM: FIN(INTEGER) & not(ITEM = {}) & QUEUE: FIN(INTEGER) & not(QUEUE = {}) & (1..3)*{SCHEDULER_STATE}: FIN(NATURAL*{SCHEDULER_STATE}) & not((1..3)*{SCHEDULER_STATE} = {}) & (1..2)*{COPY_POSITION}: FIN(NATURAL*{COPY_POSITION}) & not((1..2)*{COPY_POSITION} = {}) & (1..3)*{QUEUE_TYPE}: FIN(NATURAL*{QUEUE_TYPE}) & not((1..3)*{QUEUE_TYPE} = {}) & (1..10)*{ERROR_DEFINITION}: FIN(NATURAL*{ERROR_DEFINITION}) & not((1..10)*{ERROR_DEFINITION} = {}));
  ("`Seen and used machines invariants'" & schedulerRunning: BOOL & schedulerSuspended: INTEGER & 0<=schedulerSuspended & "`Seen and used machines assertions'" & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES & BIT: POW(NATURAL) & QUEUE_LENGTH: POW(QUEUE_QUANT));
  ("`Local hypotheses'" & idle$2: TASK & running$2: TASK);
  "`Check that the invariant (ready$1: FIN(TASK)) is established by the initialisation - ref 4.3, 5.4'";
  ({}: FIN(TASK));
  "`Check that the invariant (ready$1 <: runable$1) is established by the initialisation - ref 4.3, 5.4'";
  ({}: POW({}));
  ("`Previous components invariants'" & active$1: BOOL & tasks$1: FIN(TASK) & blocked$1: FIN(TASK) & blocked$1: POW(tasks$1) & runable$1: FIN(TASK) & runable$1: POW(tasks$1) & suspended$1: FIN(TASK) & suspended$1: POW(tasks$1) & runable$1/\blocked$1 = {} & blocked$1/\suspended$1 = {} & suspended$1/\runable$1 = {} & tasks$1 = suspended$1\/blocked$1\/runable$1 & running$1: TASK & idle$1: TASK & (active$1 = TRUE => not(runable$1 = {}) & running$1: runable$1 & idle$1: runable$1 & not(TASK_NULL: tasks$1)) & "`Previous components assertions'" & (active$1 = TRUE => not(runable$1 = {})) & (active$1 = TRUE => not(tasks$1 = {})) & (active$1 = TRUE => idle$1: runable$1) & (active$1 = TRUE => not(idle$1: blocked$1)) & (active$1 = TRUE => not(idle$1: suspended$1)) & (active$1 = TRUE => not(idle$1 = TASK_NULL)) & (active$1 = TRUE => running$1: runable$1) & (active$1 = TRUE => not(running$1: blocked$1)) & (active$1 = TRUE => not(running$1: suspended$1)) & "`Component invariant'" & ready$1: FIN(TASK) & ready$1: POW(runable$1) & ready$1 = runable$1-{running$1} & active = active$1 & tasks = tasks$1 & blocked = blocked$1 & runable = runable$1 & suspended = suspended$1 & running = running$1 & idle = idle$1);
  "`Check assertion (running/:ready) deduction - ref 3.2, 4.2, 5.3'";
  (not(running$1: ready$1));
  ("`Component assertions'" & not(running$1: ready$1));
  ("`t_create preconditions in previous components'" & priority: PRIORITY);
  ("`t_create preconditions in this component'" & priority: PRIORITY & "`Local hypotheses'" & task: TASK & not(task: tasks$1) & n_ready: POW(tasks$1) & n_ready = runable$1\/{task} & not(task = TASK_NULL) & nrunning: n_ready);
  "`Check operation refinement - ref 4.4, 5.5'";
  (task: tasks$1);
  "`Check that the invariant (runable = runable$1) is preserved by the operation - ref 4.4, 5.5'";
  (runable$1 = runable$1\/{task});
  "`Check that the invariant (ready$1: FIN(TASK)) is preserved by the operation - ref 4.4, 5.5'";
  (n_ready: FIN(TASK));
  "`Check that the invariant (ready$1 <: runable$1) is preserved by the operation - ref 4.4, 5.5'";
  (n_ready: POW(runable$1));
  "`Check that the invariant (ready$1 = runable$1-{running$1}) is preserved by the operation - ref 4.4, 5.5'";
  (n_ready = runable$1-{running$1});
  "`Check that the invariant (running = running$1 & running = running$1) is preserved by the operation - ref 4.4, 5.5'";
  (nrunning = running$1 or #(running$0).(running$0: runable$1\/{task} & nrunning = running$0));
  (n_ready-{nrunning}: FIN(TASK));
  (n_ready-{nrunning}: POW(runable$1));
  (n_ready-{nrunning} = runable$1-{nrunning});
  ("`t_delete preconditions in previous components'" & atask: TASK & atask: tasks$1 & not(atask = idle$1));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & atask: runable$1 & atask = running$1 & nrunning: ready$1 & active$1 = TRUE);
  "`Check that the invariant (blocked = blocked$1) is preserved by the operation - ref 4.4, 5.5'";
  (runable$1-{atask}: POW(tasks$1));
  (nrunning: runable$1);
  (not(nrunning = atask));
  (ready$1-{nrunning}: FIN(TASK));
  (ready$1-{nrunning}: POW(runable$1-{atask}));
  (ready$1-{nrunning} = runable$1-{atask}-{nrunning});
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & atask: runable$1 & atask = running$1 & not(active$1 = TRUE));
  (ready$1: POW(runable$1-{atask}));
  (ready$1 = runable$1-{atask}-{running$1});
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & atask: runable$1 & not(atask = running$1));
  (ready$1-{atask}: FIN(TASK));
  (ready$1-{atask}: POW(runable$1-{atask}));
  (ready$1-{atask} = runable$1-{atask}-{running$1});
  ("`t_yield preconditions in previous components'" & active$1 = TRUE);
  ("`t_yield preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & nrunning: ready$1);
  (ready$1-{nrunning}\/{running$1}: FIN(TASK));
  (running$1: runable$1);
  (ready$1-{nrunning}: POW(runable$1));
  (ready$1-{nrunning}\/{running$1} = runable$1-{nrunning});
  ("`t_suspend preconditions in previous components'" & stask: TASK & stask: tasks$1 & not(stask = idle$1));
  ("`t_suspend preconditions in this component'" & stask: TASK & stask: tasks$1 & not(stask = idle$1) & "`Local hypotheses'" & stask: runable$1 & n_runable: POW(tasks$1) & n_runable = runable$1-{stask} & stask = running$1 & nrunning: ready$1);
  (runable$1-{stask}: POW(tasks$1));
  (not(nrunning = stask));
  (ready$1-{nrunning}-{stask}: FIN(TASK));
  (ready$1-{nrunning}-{stask}: POW(n_runable));
  (ready$1-{nrunning}-{stask} = n_runable-{nrunning});
  ("`t_suspend preconditions in this component'" & stask: TASK & stask: tasks$1 & not(stask = idle$1) & "`Local hypotheses'" & stask: runable$1 & n_runable: POW(tasks$1) & n_runable = runable$1-{stask} & not(stask = running$1));
  (ready$1-{stask}: FIN(TASK));
  (ready$1-{stask}: POW(n_runable));
  (ready$1-{stask} = n_runable-{running$1});
  ("`t_resume preconditions in previous components'" & rtask: TASK & rtask: suspended$1 & active$1 = TRUE);
  ("`t_resume preconditions in this component'" & rtask: TASK & rtask: suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{rtask} & nready: POW(tasks$1) & nready = ready$1\/{rtask} & nrunning: nready);
  (rtask: tasks$1);
  (#(running$0).(running$0: runable$1\/{rtask} & nrunning = running$0) or nrunning = running$1);
  (nready-{nrunning}\/{running$1}: FIN(TASK));
  (running$1: n_runable);
  (nready-{nrunning}: POW(n_runable));
  (nready-{nrunning}\/{running$1} = n_runable-{nrunning});
  ("`t_resume preconditions in this component'" & rtask: TASK & rtask: suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{rtask});
  "`Check that the invariant (idle = idle$1) is preserved by the operation - ref 4.4, 5.5'";
  (ready$1\/{rtask}: FIN(TASK));
  (rtask: n_runable);
  (ready$1: POW(n_runable));
  (ready$1\/{rtask} = n_runable-{running$1});
  ("`t_delayTask preconditions in previous components'" & task: TASK & task = running$1 & running$1: runable$1 & not(running$1 = idle$1) & ticks: TICK);
  ("`t_delayTask preconditions in this component'" & task: TASK & task = running$1 & running$1: runable$1 & not(running$1 = idle$1) & ticks: TICK & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & nrunning: ready$1);
  (runable$1-{running$1}: POW(tasks$1));
  (not(nrunning = running$1));
  (ready$1-{nrunning}: POW(n_runable));
  (ready$1-{nrunning} = n_runable-{nrunning});
  ("`t_startScheduler preconditions in previous components'" & active$1 = FALSE);
  ("`t_startScheduler preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & idle_task: TASK & not(idle_task: tasks$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{idle_task} & running$2: n_runable);
  (idle_task: tasks$1);
  "`Check that the invariant (tasks = tasks$1) is preserved by the operation - ref 4.4, 5.5'";
  (running$2: runable$1\/{idle_task});
  (ready$1 = runable$1-{running$2});
  ("`t_endScheduler preconditions in previous components'" & active$1 = TRUE);
  ("`t_endScheduler preconditions in this component'" & active$1 = TRUE);
  ("`t_resumeAll preconditions in previous components'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & running$1: runable$1);
  ("`t_resumeAll preconditions in this component'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & running$1: runable$1 & "`Local hypotheses'" & not(unblocked = {}) & n_runable: POW(tasks$1) & nready: POW(tasks$1) & n_runable = runable$1\/unblocked & nready = ready$1\/unblocked & nrunning: nready);
  (runable$1\/unblocked: POW(tasks$1));
  (#(running$0).(running$0: runable$1\/unblocked & nrunning = running$0) or nrunning = running$1);
  ("`t_resumeAll preconditions in this component'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & running$1: runable$1 & "`Local hypotheses'" & not(unblocked = {}) & n_runable: POW(tasks$1) & nready: POW(tasks$1) & n_runable = runable$1\/unblocked & nready = ready$1\/unblocked);
  (nready: FIN(TASK));
  (nready: POW(n_runable));
  (nready = n_runable-{running$1});
  ("`t_unblock preconditions in previous components'" & task: TASK & task: blocked$1 & active$1 = TRUE);
  ("`t_unblock preconditions in this component'" & task: TASK & task: blocked$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & nready: POW(tasks$1) & n_runable = runable$1\/{task} & nready = ready$1\/{task} & nrunning: nready);
  (#(running$0).(running$0: runable$1\/{task} & nrunning = running$0) or nrunning = running$1);
  ("`t_unblock preconditions in this component'" & task: TASK & task: blocked$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & nready: POW(tasks$1) & n_runable = runable$1\/{task} & nready = ready$1\/{task});
  ("`t_removeFromEventList preconditions in previous components'" & task: TASK & task: blocked$1\/suspended$1 & active$1 = TRUE);
  ("`t_removeFromEventList preconditions in this component'" & task: TASK & task: blocked$1\/suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & nready: POW(tasks$1) & n_runable = runable$1\/{task} & nready = ready$1\/{task} & task: blocked$1 & task: suspended$1 & nrunning: nready);
  ("`t_removeFromEventList preconditions in this component'" & task: TASK & task: blocked$1\/suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & nready: POW(tasks$1) & n_runable = runable$1\/{task} & nready = ready$1\/{task} & task: blocked$1 & task: suspended$1);
  "`Check that the invariant (suspended = suspended$1) is preserved by the operation - ref 4.4, 5.5'";
  ("`t_removeFromEventList preconditions in this component'" & task: TASK & task: blocked$1\/suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & nready: POW(tasks$1) & n_runable = runable$1\/{task} & nready = ready$1\/{task} & task: blocked$1 & not(task: suspended$1) & nrunning: nready);
  ("`t_removeFromEventList preconditions in this component'" & task: TASK & task: blocked$1\/suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & nready: POW(tasks$1) & n_runable = runable$1\/{task} & nready = ready$1\/{task} & task: blocked$1 & not(task: suspended$1));
  ("`t_removeFromEventList preconditions in this component'" & task: TASK & task: blocked$1\/suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & nready: POW(tasks$1) & n_runable = runable$1\/{task} & nready = ready$1\/{task} & not(task: blocked$1) & task: suspended$1 & nrunning: nready);
  ("`t_removeFromEventList preconditions in this component'" & task: TASK & task: blocked$1\/suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & nready: POW(tasks$1) & n_runable = runable$1\/{task} & nready = ready$1\/{task} & not(task: blocked$1) & task: suspended$1);
  ("`t_removeFromEventList preconditions in this component'" & task: TASK & task: blocked$1\/suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & nready: POW(tasks$1) & n_runable = runable$1\/{task} & nready = ready$1\/{task} & not(task: blocked$1) & not(task: suspended$1) & nrunning: nready);
  ("`t_removeFromEventList preconditions in this component'" & task: TASK & task: blocked$1\/suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & nready: POW(tasks$1) & n_runable = runable$1\/{task} & nready = ready$1\/{task} & not(task: blocked$1) & not(task: suspended$1));
  ("`t_setPriority preconditions in previous components'" & task: tasks$1 & priority: PRIORITY & not(task = idle$1) & active$1 = TRUE);
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & not(task = idle$1) & active$1 = TRUE & "`Local hypotheses'" & nrunning: ready$1);
  (#(running$0).(running$0: runable$1 & nrunning = running$0) or nrunning = running$1);
  ((ready$1\/{running$1})-{nrunning}: FIN(TASK));
  ((ready$1\/{running$1})-{nrunning}: POW(runable$1));
  ((ready$1\/{running$1})-{nrunning} = runable$1-{nrunning});
  ("`t_priorityInherit preconditions in previous components'" & xTicksToWait: TICK & holderTask: tasks$1 & not(holderTask = idle$1) & not(running$1 = idle$1) & running$1: runable$1 & active$1 = TRUE);
  ("`t_priorityInherit preconditions in this component'" & xTicksToWait: TICK & holderTask: tasks$1 & not(holderTask = idle$1) & not(running$1 = idle$1) & running$1: runable$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & nrunning: ready$1);
  ("`t_returnPriority preconditions in previous components'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1));
  ("`t_returnPriority preconditions in this component'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & nready: POW(tasks$1) & n_runable = runable$1\/{btask} & nready = ready$1\/{btask} & nrunning: nready & btask: blocked$1 & btask: suspended$1);
  "`Check that the invariant (running = running$1 & running = running$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(running$0).(running$0: runable$1\/{btask} & nrunning = running$0) or nrunning = running$1);
  "`Check that the invariant (ready$1: FIN(TASK)) is preserved by the operation - ref 4.4, 5.5'";
  "`Check that the invariant (ready$1 <: runable$1) is preserved by the operation - ref 4.4, 5.5'";
  "`Check that the invariant (ready$1 = runable$1-{running$1}) is preserved by the operation - ref 4.4, 5.5'";
  ("`t_returnPriority preconditions in this component'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & nready: POW(tasks$1) & n_runable = runable$1\/{btask} & nready = ready$1\/{btask} & nrunning: nready & btask: blocked$1 & not(btask: suspended$1));
  ("`t_returnPriority preconditions in this component'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & nready: POW(tasks$1) & n_runable = runable$1\/{btask} & nready = ready$1\/{btask} & nrunning: nready & not(btask: blocked$1) & btask: suspended$1);
  ("`t_returnPriority preconditions in this component'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & nready: POW(tasks$1) & n_runable = runable$1\/{btask} & nready = ready$1\/{btask} & nrunning: nready & not(btask: blocked$1) & not(btask: suspended$1))
END
&
THEORY EnumerateX IS
  SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED};
  COPY_POSITION == {queueSEND_TO_BACK,queueSEND_TO_FRONT};
  QUEUE_TYPE == {TQUE,TSEMAPH,TMUT};
  ERROR_DEFINITION == {errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY,errNO_TASK_TO_RUN,errQUEUE_BLOCKED,errQUEUE_YIELD,errQUEUE_EMPTY,errQUEUE_FULL,pdPASS,pdFAIL,pdTRUE,pdFALSE}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK)
END
