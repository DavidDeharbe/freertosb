THEORY ProofList IS
  _f(1) & _f(2) & _f(15) & _f(27) & _f(309) & q_resumeAll.18,(_f(329) & _f(62) => _f(316));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(309) & q_resumeAll.17,(_f(328) & _f(56) => _f(152));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(309) & q_resumeAll.16,(_f(327) & _f(53) => _f(316));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(309) & q_resumeAll.15,(_f(326) & _f(36) => _f(314));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(309) & q_resumeAll.14,(_f(326) & _f(32) => _f(312));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(309) & q_resumeAll.13,(_f(325) & _f(59) => _f(320));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(309) & q_resumeAll.12,(_f(324) & _f(56) => _f(318));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(309) & q_resumeAll.11,(_f(323) & _f(53) => _f(124));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(309) & q_resumeAll.10,(_f(322) & _f(34) => _f(313));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(309) & q_resumeAll.9,(_f(322) & _f(30) => _f(311));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(309) & q_resumeAll.8,(_f(321) & _f(62) => _f(316));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(309) & q_resumeAll.7,(_f(319) & _f(59) => _f(320));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(309) & q_resumeAll.6,(_f(317) & _f(56) => _f(318));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(309) & q_resumeAll.5,(_f(315) & _f(53) => _f(316));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(309) & q_resumeAll.4,(_f(310) & _f(36) => _f(314));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(309) & q_resumeAll.3,(_f(310) & _f(34) => _f(313));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(309) & q_resumeAll.2,(_f(310) & _f(32) => _f(312));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(309) & q_resumeAll.1,(_f(310) & _f(30) => _f(311));
  _f(1) & _f(2) & _f(15) & _f(27) & q_endScheduler.6,(_f(274) => _f(14));
  _f(1) & _f(2) & _f(15) & _f(27) & q_endScheduler.5,(_f(48) => _f(12));
  _f(1) & _f(2) & _f(15) & _f(27) & q_endScheduler.4,(_f(38) => _f(10));
  _f(1) & _f(2) & _f(15) & _f(27) & q_endScheduler.3,(_f(34) => _f(8));
  _f(1) & _f(2) & _f(15) & _f(27) & q_endScheduler.2,(_f(30) => _f(6));
  _f(1) & _f(2) & _f(15) & _f(27) & q_endScheduler.1,(_f(73) => _f(4));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(295) & q_giveMutex.10,(_f(307) & _f(284) => _f(308));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(295) & q_giveMutex.9,(_f(305) & _f(281) => _f(306));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(295) & q_giveMutex.8,(_f(278) => _f(304));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(295) & q_giveMutex.7,(_f(276) => _f(303));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(295) & q_giveMutex.6,(_f(274) => _f(302));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(295) & q_giveMutex.5,(_f(300) & _f(59) => _f(301));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(295) & q_giveMutex.4,(_f(169) & _f(56) => _f(299));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(295) & q_giveMutex.3,(_f(298) & _f(53) => _f(124));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(295) & q_giveMutex.2,(_f(34) => _f(297));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(295) & q_giveMutex.1,(_f(30) => _f(296));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(288) & q_takeMutex.4,(_f(293) & _f(284) => _f(294));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(288) & q_takeMutex.3,(_f(291) & _f(281) => _f(292));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(288) & q_takeMutex.2,(_f(276) => _f(290));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(288) & q_takeMutex.1,(_f(274) => _f(289));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.19,(_f(258) & _f(204) => _f(287));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.18,(_f(258) & _f(69) => _f(286));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.17,(_f(283) & _f(284) => _f(285));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.16,(_f(280) & _f(281) => _f(282));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.15,(_f(258) & _f(278) => _f(279));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.14,(_f(258) & _f(276) => _f(277));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.13,(_f(258) & _f(274) => _f(275));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.12,(_f(258) & _f(65) => _f(273));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.11,(_f(258) & _f(65) => _f(272));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.10,(_f(258) & _f(63) => _f(271));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.9,(_f(270) & _f(62) => _f(265));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.8,(_f(268) & _f(59) => _f(269));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.7,(_f(266) & _f(56) => _f(267));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.6,(_f(264) & _f(53) => _f(265));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.5,(_f(258) & _f(38) => _f(263));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.4,(_f(258) & _f(36) => _f(262));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.3,(_f(258) & _f(34) => _f(261));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.2,(_f(258) & _f(32) => _f(260));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.1,(_f(258) & _f(30) => _f(259));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(240) & q_giveSemaphore.11,(_f(257) & _f(251) => _f(252));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(240) & q_giveSemaphore.10,(_f(256) & _f(248) => _f(249));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(240) & q_giveSemaphore.9,(_f(255) & _f(246) => _f(124));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(240) & q_giveSemaphore.8,(_f(228) & _f(243) => _f(244));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(240) & q_giveSemaphore.7,(_f(228) & _f(241) => _f(242));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(240) & q_giveSemaphore.6,(_f(207) & _f(253) => _f(254));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(240) & q_giveSemaphore.5,(_f(250) & _f(251) => _f(252));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(240) & q_giveSemaphore.4,(_f(247) & _f(248) => _f(249));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(240) & q_giveSemaphore.3,(_f(245) & _f(246) => _f(124));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(240) & q_giveSemaphore.2,(_f(207) & _f(243) => _f(244));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(240) & q_giveSemaphore.1,(_f(207) & _f(241) => _f(242));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(234) & q_takeSemaphore.5,(_f(239) & _f(62) => _f(237));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(234) & q_takeSemaphore.4,(_f(238) & _f(56) => _f(152));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(234) & q_takeSemaphore.3,(_f(161) & _f(53) => _f(237));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(234) & q_takeSemaphore.2,(_f(36) => _f(236));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(234) & q_takeSemaphore.1,(_f(32) => _f(235));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.32,(_f(228) & _f(204) => _f(227));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.31,(_f(228) & _f(67) => _f(226));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.30,(_f(228) & _f(65) => _f(225));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.29,(_f(228) & _f(199) => _f(233));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.28,(_f(228) & _f(63) => _f(223));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.27,(_f(228) & _f(221) => _f(222));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.26,(_f(232) & _f(62) => _f(215));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.25,(_f(231) & _f(59) => _f(219));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.24,(_f(230) & _f(56) => _f(217));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.23,(_f(229) & _f(53) => _f(215));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.22,(_f(228) & _f(38) => _f(213));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.21,(_f(228) & _f(36) => _f(212));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.20,(_f(228) & _f(34) => _f(211));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.19,(_f(228) & _f(32) => _f(210));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.18,(_f(228) & _f(30) => _f(209));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.17,(_f(228) & _f(73) => _f(208));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.16,(_f(207) & _f(204) => _f(227));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.15,(_f(207) & _f(67) => _f(226));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.14,(_f(207) & _f(65) => _f(225));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.13,(_f(207) & _f(199) => _f(224));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.12,(_f(207) & _f(63) => _f(223));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.11,(_f(207) & _f(221) => _f(222));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.10,(_f(220) & _f(62) => _f(215));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.9,(_f(218) & _f(59) => _f(219));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.8,(_f(216) & _f(56) => _f(217));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.7,(_f(214) & _f(53) => _f(215));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.6,(_f(207) & _f(38) => _f(213));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.5,(_f(207) & _f(36) => _f(212));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.4,(_f(207) & _f(34) => _f(211));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.3,(_f(207) & _f(32) => _f(210));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.2,(_f(207) & _f(30) => _f(209));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(206) & q_deleteSemaphore.1,(_f(207) & _f(73) => _f(208));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(183) & q_createSemaphore.16,(_f(184) & _f(204) => _f(205));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(183) & q_createSemaphore.15,(_f(184) & _f(67) => _f(203));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(183) & q_createSemaphore.14,(_f(184) & _f(65) => _f(202));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(183) & q_createSemaphore.13,(_f(184) & _f(199) => _f(201));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(183) & q_createSemaphore.12,(_f(184) & _f(199) => _f(200));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(183) & q_createSemaphore.11,(_f(184) & _f(63) => _f(198));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(183) & q_createSemaphore.10,(_f(184) & _f(63) => _f(197));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(183) & q_createSemaphore.9,(_f(196) & _f(62) => _f(191));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(183) & q_createSemaphore.8,(_f(194) & _f(59) => _f(195));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(183) & q_createSemaphore.7,(_f(192) & _f(56) => _f(193));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(183) & q_createSemaphore.6,(_f(190) & _f(53) => _f(191));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(183) & q_createSemaphore.5,(_f(184) & _f(38) => _f(189));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(183) & q_createSemaphore.4,(_f(184) & _f(36) => _f(188));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(183) & q_createSemaphore.3,(_f(184) & _f(34) => _f(187));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(183) & q_createSemaphore.2,(_f(184) & _f(32) => _f(186));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(183) & q_createSemaphore.1,(_f(184) & _f(30) => _f(185));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(173) & q_removeFromEventListQueue.8,(_f(182) & _f(62) => _f(150));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(173) & q_removeFromEventListQueue.7,(_f(180) & _f(59) => _f(181));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(173) & q_removeFromEventListQueue.6,(_f(178) & _f(56) => _f(179));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(173) & q_removeFromEventListQueue.5,(_f(177) & _f(53) => _f(150));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(173) & q_removeFromEventListQueue.4,(_f(174) & _f(36) => _f(145));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(173) & q_removeFromEventListQueue.3,(_f(174) & _f(34) => _f(176));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(173) & q_removeFromEventListQueue.2,(_f(174) & _f(32) => _f(144));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(173) & q_removeFromEventListQueue.1,(_f(174) & _f(30) => _f(175));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(165) & q_insertTaskWaitingToReceive.5,(_f(171) & _f(59) => _f(172));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(165) & q_insertTaskWaitingToReceive.4,(_f(169) & _f(56) => _f(170));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(165) & q_insertTaskWaitingToReceive.3,(_f(168) & _f(53) => _f(124));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(165) & q_insertTaskWaitingToReceive.2,(_f(34) => _f(167));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(165) & q_insertTaskWaitingToReceive.1,(_f(30) => _f(166));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(158) & q_insertTaskWaitingToSend.5,(_f(164) & _f(62) => _f(162));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(158) & q_insertTaskWaitingToSend.4,(_f(163) & _f(56) => _f(152));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(158) & q_insertTaskWaitingToSend.3,(_f(161) & _f(53) => _f(162));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(158) & q_insertTaskWaitingToSend.2,(_f(36) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(158) & q_insertTaskWaitingToSend.1,(_f(32) => _f(159));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(142) & q_receivedItem.16,(_f(157) & _f(62) => _f(150));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(142) & q_receivedItem.15,(_f(156) & _f(56) => _f(152));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(142) & q_receivedItem.14,(_f(155) & _f(53) => _f(150));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(142) & q_receivedItem.13,(_f(154) & _f(50) => _f(148));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(142) & q_receivedItem.12,(_f(154) & _f(48) => _f(147));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(142) & q_receivedItem.11,(_f(154) & _f(36) => _f(145));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(142) & q_receivedItem.10,(_f(154) & _f(32) => _f(144));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(142) & q_receivedItem.9,(_f(153) & _f(62) => _f(150));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(142) & q_receivedItem.8,(_f(151) & _f(56) => _f(152));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(142) & q_receivedItem.7,(_f(149) & _f(53) => _f(150));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(142) & q_receivedItem.6,(_f(143) & _f(50) => _f(148));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(142) & q_receivedItem.5,(_f(143) & _f(48) => _f(147));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(142) & q_receivedItem.4,(_f(143) & _f(46) => _f(98));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(142) & q_receivedItem.3,(_f(143) & _f(41) => _f(146));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(142) & q_receivedItem.2,(_f(143) & _f(36) => _f(145));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(142) & q_receivedItem.1,(_f(143) & _f(32) => _f(144));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.36,(_f(141) & _f(59) => _f(128));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.35,(_f(140) & _f(56) => _f(126));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.34,(_f(139) & _f(53) => _f(124));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.33,(_f(138) & _f(50) => _f(122));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.32,(_f(138) & _f(48) => _f(121));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.31,(_f(138) & _f(46) => _f(134));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.30,(_f(138) & _f(34) => _f(118));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.29,(_f(138) & _f(30) => _f(117));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.28,(_f(137) & _f(59) => _f(128));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.27,(_f(136) & _f(56) => _f(126));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.26,(_f(135) & _f(53) => _f(124));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.25,(_f(133) & _f(50) => _f(122));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.24,(_f(133) & _f(48) => _f(121));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.23,(_f(133) & _f(46) => _f(134));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.22,(_f(133) & _f(34) => _f(118));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.21,(_f(133) & _f(30) => _f(117));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.20,(_f(129) & _f(46) => _f(105));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.19,(_f(116) & _f(46) => _f(105));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.18,(_f(132) & _f(59) => _f(128));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.17,(_f(131) & _f(56) => _f(126));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.16,(_f(130) & _f(53) => _f(124));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.15,(_f(129) & _f(50) => _f(122));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.14,(_f(129) & _f(48) => _f(121));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.13,(_f(129) & _f(46) => _f(120));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.12,(_f(129) & _f(43) => _f(119));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.11,(_f(129) & _f(34) => _f(118));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.10,(_f(129) & _f(30) => _f(117));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.9,(_f(127) & _f(59) => _f(128));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.8,(_f(125) & _f(56) => _f(126));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.7,(_f(123) & _f(53) => _f(124));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.6,(_f(116) & _f(50) => _f(122));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.5,(_f(116) & _f(48) => _f(121));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.4,(_f(116) & _f(46) => _f(120));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.3,(_f(116) & _f(43) => _f(119));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.2,(_f(116) & _f(34) => _f(118));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(115) & q_sendItem.1,(_f(116) & _f(30) => _f(117));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.75,(_f(110) & _f(69) => _f(95));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.74,(_f(110) & _f(67) => _f(94));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.73,(_f(110) & _f(65) => _f(93));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.72,(_f(110) & _f(63) => _f(92));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.71,(_f(114) & _f(62) => _f(86));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.70,(_f(113) & _f(59) => _f(90));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.69,(_f(112) & _f(56) => _f(88));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.68,(_f(111) & _f(53) => _f(86));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.67,(_f(110) & _f(50) => _f(84));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.66,(_f(110) & _f(48) => _f(83));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.65,(_f(110) & _f(43) => _f(97));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.64,(_f(110) & _f(41) => _f(104));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.63,(_f(110) & _f(38) => _f(79));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.62,(_f(110) & _f(36) => _f(78));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.61,(_f(110) & _f(34) => _f(77));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.60,(_f(110) & _f(32) => _f(76));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.59,(_f(110) & _f(30) => _f(75));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.58,(_f(110) & _f(73) => _f(74));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.57,(_f(103) & _f(69) => _f(95));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.56,(_f(103) & _f(67) => _f(94));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.55,(_f(103) & _f(65) => _f(93));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.54,(_f(103) & _f(63) => _f(92));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.53,(_f(109) & _f(62) => _f(86));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.52,(_f(108) & _f(59) => _f(90));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.51,(_f(107) & _f(56) => _f(88));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.50,(_f(106) & _f(53) => _f(86));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.49,(_f(103) & _f(50) => _f(84));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.48,(_f(103) & _f(48) => _f(83));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.47,(_f(103) & _f(46) => _f(105));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.46,(_f(103) & _f(43) => _f(81));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.45,(_f(103) & _f(41) => _f(104));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.44,(_f(103) & _f(38) => _f(79));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.43,(_f(103) & _f(36) => _f(78));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.42,(_f(103) & _f(34) => _f(77));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.41,(_f(103) & _f(32) => _f(76));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.40,(_f(103) & _f(30) => _f(75));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.39,(_f(103) & _f(73) => _f(74));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.38,(_f(96) & _f(69) => _f(95));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.37,(_f(96) & _f(67) => _f(94));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.36,(_f(96) & _f(65) => _f(93));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.35,(_f(96) & _f(63) => _f(92));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.34,(_f(102) & _f(62) => _f(86));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.33,(_f(101) & _f(59) => _f(90));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.32,(_f(100) & _f(56) => _f(88));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.31,(_f(99) & _f(53) => _f(86));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.30,(_f(96) & _f(50) => _f(84));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.29,(_f(96) & _f(48) => _f(83));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.28,(_f(96) & _f(46) => _f(98));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.27,(_f(96) & _f(43) => _f(97));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.26,(_f(96) & _f(41) => _f(80));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.25,(_f(96) & _f(38) => _f(79));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.24,(_f(96) & _f(36) => _f(78));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.23,(_f(96) & _f(34) => _f(77));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.22,(_f(96) & _f(32) => _f(76));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.21,(_f(96) & _f(30) => _f(75));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.20,(_f(96) & _f(73) => _f(74));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.19,(_f(72) & _f(69) => _f(95));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.18,(_f(72) & _f(67) => _f(94));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.17,(_f(72) & _f(65) => _f(93));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.16,(_f(72) & _f(63) => _f(92));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.15,(_f(91) & _f(62) => _f(86));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.14,(_f(89) & _f(59) => _f(90));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.13,(_f(87) & _f(56) => _f(88));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.12,(_f(85) & _f(53) => _f(86));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.11,(_f(72) & _f(50) => _f(84));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.10,(_f(72) & _f(48) => _f(83));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.9,(_f(72) & _f(46) => _f(82));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.8,(_f(72) & _f(43) => _f(81));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.7,(_f(72) & _f(41) => _f(80));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.6,(_f(72) & _f(38) => _f(79));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.5,(_f(72) & _f(36) => _f(78));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.4,(_f(72) & _f(34) => _f(77));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.3,(_f(72) & _f(32) => _f(76));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.2,(_f(72) & _f(30) => _f(75));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(71) & q_queueDelete.1,(_f(72) & _f(73) => _f(74));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.20,(_f(29) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.19,(_f(29) & _f(67) => _f(68));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.18,(_f(29) & _f(65) => _f(66));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.17,(_f(29) & _f(63) => _f(64));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.16,(_f(61) & _f(62) => _f(54));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.15,(_f(58) & _f(59) => _f(60));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.14,(_f(55) & _f(56) => _f(57));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.13,(_f(52) & _f(53) => _f(54));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.12,(_f(29) & _f(50) => _f(51));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.11,(_f(29) & _f(48) => _f(49));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.10,(_f(29) & _f(46) => _f(47));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.9,(_f(29) & _f(43) => _f(45));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.8,(_f(29) & _f(43) => _f(44));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.7,(_f(29) & _f(41) => _f(42));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.6,(_f(29) & _f(38) => _f(40));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.5,(_f(29) & _f(38) => _f(39));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.4,(_f(29) & _f(36) => _f(37));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.3,(_f(29) & _f(34) => _f(35));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.2,(_f(29) & _f(32) => _f(33));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.1,(_f(29) & _f(30) => _f(31));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.4,(_f(22) & _f(25) => _f(26));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.3,(_f(22) & _f(23) => _f(24));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.2,(_f(19) & _f(20) => _f(21));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.1,(_f(16) & _f(17) => _f(18));
  _f(1) & _f(2) & Initialisation.6,(_f(13) => _f(14));
  _f(1) & _f(2) & Initialisation.5,(_f(11) => _f(12));
  _f(1) & _f(2) & Initialisation.4,(_f(9) => _f(10));
  _f(1) & _f(2) & Initialisation.3,(_f(7) => _f(8));
  _f(1) & _f(2) & Initialisation.2,(_f(5) => _f(6));
  _f(1) & _f(2) & Initialisation.1,(_f(3) => _f(4))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & BIT = 0..1 & MAX_DELAY: 0..2147483647 & 1<=MAX_DELAY & NULL_PARAMETER: PARAMETER & PRIORITY: POW(NAT) & TICK: POW(NAT) & TICK = 0..MAX_DELAY & TICK_INCREMENT: TICK*TICK +-> TICK & dom(TICK_INCREMENT) = TICK*TICK & TICK_INCREMENT = %(tick,inc).(tick: TICK & inc: TICK | (tick+inc) mod MAX_DELAY) & QUEUE_NULL: QUEUE & ITEM_NULL: ITEM & ITEM_EMPTY: ITEM & TASK_NULL: TASK & REMOVE_EVENT: TASK*POW(QUEUE)*(QUEUE +-> POW(TASK)) +-> (QUEUE +-> POW(TASK)) & REMOVE_EVENT = %(task,queues,pending).(task: TASK & queues: POW(QUEUE) & pending: QUEUE +-> POW(TASK) | %queue.(queue: queues & queue: dom(pending) | pending(queue)-{task})) & semGIVE_BLOCK_TIME: TICK & IDLE_PRIORITY: PRIORITY & IDLE_PRIORITY = 0 & QUEUE_LENGTH: POW(NAT) & QUEUE_LENGTH = 1..2147483647 & QUEUE_QUANT: POW(NAT) & QUEUE_QUANT = 0..2147483647 & NAME: FIN(INTEGER) & not(NAME = {}) & PARAMETER: FIN(INTEGER) & not(PARAMETER = {}) & TASK: FIN(INTEGER) & not(TASK = {}) & STACK: FIN(INTEGER) & not(STACK = {}) & TASK_CODE: FIN(INTEGER) & not(TASK_CODE = {}) & ITEM: FIN(INTEGER) & not(ITEM = {}) & QUEUE: FIN(INTEGER) & not(QUEUE = {}) & (1..3)*{SCHEDULER_STATE}: FIN(NATURAL*{SCHEDULER_STATE}) & not((1..3)*{SCHEDULER_STATE} = {}) & (1..2)*{COPY_POSITION}: FIN(NATURAL*{COPY_POSITION}) & not((1..2)*{COPY_POSITION} = {}) & (1..3)*{QUEUE_TYPE}: FIN(NATURAL*{QUEUE_TYPE}) & not((1..3)*{QUEUE_TYPE} = {}) & (1..10)*{ERROR_DEFINITION}: FIN(NATURAL*{ERROR_DEFINITION}) & not((1..10)*{ERROR_DEFINITION} = {}) & "`Component properties'" & remove_task: (QUEUE +-> POW(TASK))*POW(TASK) +-> (QUEUE +-> POW(TASK)) & dom(remove_task) = (QUEUE +-> POW(TASK))*POW(TASK) & remove_task = %(q_task,unblocked).(q_task: QUEUE +-> POW(TASK) & unblocked: POW(TASK) | %q1.(q1: QUEUE & q1: dom(q_task) | q_task(q1)-unblocked)));
  ("`Seen and used machines invariants'" & schedulerRunning: BOOL & schedulerSuspended: INTEGER & 0<=schedulerSuspended & "`Seen and used machines assertions'" & BIT: POW(NATURAL) & QUEUE_LENGTH: POW(QUEUE_QUANT));
  "`Check that the invariant (queues: POW(QUEUE)) is established by the initialisation - ref 3.3'";
  ({}: POW(QUEUE));
  "`Check that the invariant (queue_receiving: QUEUE +-> POW(TASK)) is established by the initialisation - ref 3.3'";
  ({}: QUEUE +-> POW(TASK));
  "`Check that the invariant (queues = dom(queue_receiving)) is established by the initialisation - ref 3.3'";
  (dom({}) = {});
  "`Check that the invariant (queues_msg <: queues) is established by the initialisation - ref 3.3'";
  ({}: POW({}));
  "`Check that the invariant (queue_items: QUEUE +-> POW(ITEM)) is established by the initialisation - ref 3.3'";
  ({}: QUEUE +-> POW(ITEM));
  "`Check that the invariant (mutex_holder: QUEUE +-> TASK) is established by the initialisation - ref 3.3'";
  ({}: QUEUE +-> TASK);
  ("`Component invariant'" & queues: POW(QUEUE) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & queues = dom(queue_receiving) & queues = dom(queue_sending) & queues_msg: POW(queues) & queues_msg_full: POW(queues_msg) & queues_msg_empty: POW(queues_msg) & queues_msg_full/\queues_msg_empty = {} & queue_items: QUEUE +-> POW(ITEM) & queues_msg = dom(queue_items) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_receiving(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_sending(q1) => not(tk: queue_sending(q2))) & semaphores: POW(QUEUE) & semaphores: POW(queues) & semaphores_busy: POW(semaphores) & mutexes: POW(queues) & mutex_holder: QUEUE +-> TASK & mutexes = dom(mutex_holder) & mutexes_busy: POW(mutexes) & !mt.(mt: mutexes_busy => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(mt: mutexes_busy) => mutex_holder(mt) = TASK_NULL) & queues_msg/\semaphores = {} & queues_msg/\mutexes = {} & mutexes/\semaphores = {});
  ("`Local hypotheses'" & que: queues_msg & que: queues_msg_empty);
  "`Check assertion (!que.(que: queues_msg & que: queues_msg_empty => que/:queues_msg_full)) deduction - ref 3.2, 4.2, 5.3'";
  (not(que: queues_msg_full));
  ("`Local hypotheses'" & que: queues_msg & que: queues_msg_full);
  "`Check assertion (!que.(que: queues_msg & que: queues_msg_full => que/:queues_msg_empty)) deduction - ref 3.2, 4.2, 5.3'";
  (not(que: queues_msg_empty));
  ("`Local hypotheses'" & que: QUEUE & not(que: queues));
  "`Check assertion (!que.(que: QUEUE & que/:queues => que/:semaphores)) deduction - ref 3.2, 4.2, 5.3'";
  (not(que: semaphores));
  "`Check assertion (!que.(que: QUEUE & que/:queues => que/:mutexes)) deduction - ref 3.2, 4.2, 5.3'";
  (not(que: mutexes));
  ("`Component assertions'" & !que.(que: QUEUE & not(que: queues) => not(que: mutexes)) & !que.(que: QUEUE & not(que: queues) => not(que: semaphores)) & !que.(que: queues_msg & que: queues_msg_full => not(que: queues_msg_empty)) & !que.(que: queues_msg & que: queues_msg_empty => not(que: queues_msg_full)));
  ("`q_queueCreate preconditions in this component'" & uxQueueLength: QUEUE_LENGTH & uxItemSize: QUEUE_LENGTH & 1<=uxQueueLength);
  ("`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues));
  "`Check that the invariant (queue_receiving: QUEUE +-> POW(TASK)) is preserved by the operation - ref 3.4'";
  (queue_receiving\/{pxQueue|->{}}: QUEUE +-> POW(TASK));
  "`Check that the invariant (queue_sending: QUEUE +-> POW(TASK)) is preserved by the operation - ref 3.4'";
  (queue_sending\/{pxQueue|->{}}: QUEUE +-> POW(TASK));
  "`Check that the invariant (queues = dom(queue_receiving)) is preserved by the operation - ref 3.4'";
  (queues\/{pxQueue} = dom(queue_receiving\/{pxQueue|->{}}));
  "`Check that the invariant (queues = dom(queue_sending)) is preserved by the operation - ref 3.4'";
  (queues\/{pxQueue} = dom(queue_sending\/{pxQueue|->{}}));
  "`Check that the invariant (queues_msg <: queues) is preserved by the operation - ref 3.4'";
  (pxQueue: queues\/{pxQueue});
  (queues_msg: POW(queues\/{pxQueue}));
  "`Check that the invariant (queues_msg_full <: queues_msg) is preserved by the operation - ref 3.4'";
  (queues_msg_full: POW(queues_msg\/{pxQueue}));
  "`Check that the invariant (queues_msg_empty <: queues_msg) is preserved by the operation - ref 3.4'";
  (pxQueue: queues_msg\/{pxQueue});
  (queues_msg_empty: POW(queues_msg\/{pxQueue}));
  "`Check that the invariant (queues_msg_full/\queues_msg_empty = {}) is preserved by the operation - ref 3.4'";
  (not(pxQueue: queues_msg_full));
  "`Check that the invariant (queue_items: QUEUE +-> POW(ITEM)) is preserved by the operation - ref 3.4'";
  (queue_items\/{pxQueue|->{}}: QUEUE +-> POW(ITEM));
  "`Check that the invariant (queues_msg = dom(queue_items)) is preserved by the operation - ref 3.4'";
  (queues_msg\/{pxQueue} = dom(queue_items\/{pxQueue|->{}}));
  ("`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues) & q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & tk: TASK & tk: (queue_receiving\/{pxQueue|->{}})(q1));
  "`Check that the invariant (!(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => tk/:queue_sending(q2))) is preserved by the operation - ref 3.4'";
  (not(tk: (queue_sending\/{pxQueue|->{}})(q2)));
  ("`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues) & q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & tk: TASK & tk: (queue_sending\/{pxQueue|->{}})(q2));
  "`Check that the invariant (!(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => tk/:queue_receiving(q1))) is preserved by the operation - ref 3.4'";
  (not(tk: (queue_receiving\/{pxQueue|->{}})(q1)));
  ("`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues) & q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & not(q1 = q2) & tk: TASK & tk: (queue_receiving\/{pxQueue|->{}})(q1));
  "`Check that the invariant (!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_receiving(q1) => tk/:queue_receiving(q2))) is preserved by the operation - ref 3.4'";
  (not(tk: (queue_receiving\/{pxQueue|->{}})(q2)));
  ("`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues) & q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & not(q1 = q2) & tk: TASK & tk: (queue_sending\/{pxQueue|->{}})(q1));
  "`Check that the invariant (!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_sending(q1) => tk/:queue_sending(q2))) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (semaphores <: queues) is preserved by the operation - ref 3.4'";
  (semaphores: POW(queues\/{pxQueue}));
  "`Check that the invariant (mutexes <: queues) is preserved by the operation - ref 3.4'";
  (mutexes: POW(queues\/{pxQueue}));
  "`Check that the invariant (queues_msg/\semaphores = {}) is preserved by the operation - ref 3.4'";
  (queues_msg\/{pxQueue}/\semaphores = {});
  "`Check that the invariant (queues_msg/\mutexes = {}) is preserved by the operation - ref 3.4'";
  (queues_msg\/{pxQueue}/\mutexes = {});
  ("`q_queueDelete preconditions in this component'" & pxQueue: queues & not(pxQueue: semaphores) & not(pxQueue: mutexes) & queue_receiving(pxQueue) = {} & queue_sending(pxQueue) = {});
  ("`Local hypotheses'" & pxQueue: queues_msg_full & pxQueue: queues_msg_empty);
  "`Check that the invariant (queues: POW(QUEUE)) is preserved by the operation - ref 3.4'";
  (queues-{pxQueue}: POW(QUEUE));
  ({pxQueue}<<|queue_receiving: QUEUE +-> POW(TASK));
  ({pxQueue}<<|queue_sending: QUEUE +-> POW(TASK));
  (queues-{pxQueue} = dom({pxQueue}<<|queue_receiving));
  (queues-{pxQueue} = dom({pxQueue}<<|queue_sending));
  (queues_msg-{pxQueue}: POW(queues-{pxQueue}));
  (queues_msg_full-{pxQueue}: POW(queues_msg-{pxQueue}));
  (queues_msg_empty-{pxQueue}: POW(queues_msg-{pxQueue}));
  (queues_msg_full-{pxQueue}/\queues_msg_empty-{pxQueue} = {});
  ({pxQueue}<<|queue_items: QUEUE +-> POW(ITEM));
  (queues_msg-{pxQueue} = dom({pxQueue}<<|queue_items));
  ("`Local hypotheses'" & pxQueue: queues_msg_full & pxQueue: queues_msg_empty & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  (not(tk: ({pxQueue}<<|queue_sending)(q2)));
  ("`Local hypotheses'" & pxQueue: queues_msg_full & pxQueue: queues_msg_empty & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2));
  (not(tk: ({pxQueue}<<|queue_receiving)(q1)));
  ("`Local hypotheses'" & pxQueue: queues_msg_full & pxQueue: queues_msg_empty & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  (not(tk: ({pxQueue}<<|queue_receiving)(q2)));
  ("`Local hypotheses'" & pxQueue: queues_msg_full & pxQueue: queues_msg_empty & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1));
  (semaphores: POW(queues-{pxQueue}));
  (mutexes: POW(queues-{pxQueue}));
  (queues_msg-{pxQueue}/\semaphores = {});
  (queues_msg-{pxQueue}/\mutexes = {});
  ("`Local hypotheses'" & pxQueue: queues_msg_full & not(pxQueue: queues_msg_empty));
  (queues_msg_empty: POW(queues_msg-{pxQueue}));
  (queues_msg_full-{pxQueue}/\queues_msg_empty = {});
  ("`Local hypotheses'" & pxQueue: queues_msg_full & not(pxQueue: queues_msg_empty) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & pxQueue: queues_msg_full & not(pxQueue: queues_msg_empty) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2));
  ("`Local hypotheses'" & pxQueue: queues_msg_full & not(pxQueue: queues_msg_empty) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & pxQueue: queues_msg_full & not(pxQueue: queues_msg_empty) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & pxQueue: queues_msg_empty);
  (queues_msg_full: POW(queues_msg-{pxQueue}));
  (queues_msg_full/\queues_msg_empty-{pxQueue} = {});
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & pxQueue: queues_msg_empty & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & pxQueue: queues_msg_empty & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & pxQueue: queues_msg_empty & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & pxQueue: queues_msg_empty & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(pxQueue: queues_msg_empty));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(pxQueue: queues_msg_empty) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(pxQueue: queues_msg_empty) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(pxQueue: queues_msg_empty) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(pxQueue: queues_msg_empty) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1));
  ("`q_sendItem preconditions in this component'" & pxQueue: queues_msg & pxItem: ITEM & not(pxItem: queue_items(pxQueue)) & task: TASK & copy_position: (1..2)*{COPY_POSITION} & task: queue_receiving(pxQueue) & not(pxQueue: queues_msg_full));
  ("`Local hypotheses'" & pxQueue: queues_msg_empty & copy_position = 1|->COPY_POSITION);
  (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}: QUEUE +-> POW(TASK));
  (queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}));
  (queues_msg_empty-{pxQueue}: POW(queues_msg));
  (queues_msg_full\/{pxQueue}/\queues_msg_empty-{pxQueue} = {});
  (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pxItem})}: QUEUE +-> POW(ITEM));
  (queues_msg = dom(queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pxItem})}));
  ("`Local hypotheses'" & pxQueue: queues_msg_empty & copy_position = 1|->COPY_POSITION & q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1));
  (not(tk: queue_sending(q2)));
  ("`Local hypotheses'" & pxQueue: queues_msg_empty & copy_position = 1|->COPY_POSITION & q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2));
  (not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1)));
  ("`Local hypotheses'" & pxQueue: queues_msg_empty & copy_position = 1|->COPY_POSITION & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1));
  (not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q2)));
  ("`Local hypotheses'" & pxQueue: queues_msg_empty & not(copy_position = 1|->COPY_POSITION));
  ("`Local hypotheses'" & pxQueue: queues_msg_empty & not(copy_position = 1|->COPY_POSITION) & q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1));
  ("`Local hypotheses'" & pxQueue: queues_msg_empty & not(copy_position = 1|->COPY_POSITION) & q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2));
  ("`Local hypotheses'" & pxQueue: queues_msg_empty & not(copy_position = 1|->COPY_POSITION) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & copy_position = 1|->COPY_POSITION);
  (queues_msg_full\/{pxQueue}/\queues_msg_empty = {});
  ("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & copy_position = 1|->COPY_POSITION & q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & copy_position = 1|->COPY_POSITION & q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & copy_position = 1|->COPY_POSITION & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & not(copy_position = 1|->COPY_POSITION));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & not(copy_position = 1|->COPY_POSITION) & q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & not(copy_position = 1|->COPY_POSITION) & q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & not(copy_position = 1|->COPY_POSITION) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1));
  ("`q_receivedItem preconditions in this component'" & pxQueue: queues_msg & justPeeking: BOOL & task: TASK & task: queue_sending(pxQueue) & not(queue_items(pxQueue) = {}) & not(pxQueue: queues_msg_empty));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & pxQueue: queues_msg_full);
  (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK));
  (queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}));
  (queues_msg_full-{pxQueue}: POW(queues_msg));
  (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}: QUEUE +-> POW(ITEM));
  (queues_msg = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & pxQueue: queues_msg_full & q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1));
  (not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2)));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & pxQueue: queues_msg_full & q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2));
  (not(tk: queue_receiving(q1)));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & pxQueue: queues_msg_full & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(pxQueue: queues_msg_full));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(pxQueue: queues_msg_full) & q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(pxQueue: queues_msg_full) & q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(pxQueue: queues_msg_full) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1));
  ("`q_insertTaskWaitingToSend preconditions in this component'" & pxQueue: queues & pxTask: TASK & !q1.(q1: queues => not(pxTask: queue_sending(q1)) & not(pxTask: queue_receiving(q1))));
  (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})}: QUEUE +-> POW(TASK));
  (queues = dom(queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})}));
  ("`Local hypotheses'" & q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1));
  (not(tk: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})})(q2)));
  ("`Local hypotheses'" & q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})})(q2));
  ("`Local hypotheses'" & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})})(q1));
  ("`q_insertTaskWaitingToReceive preconditions in this component'" & pxQueue: queues & pxTask: TASK & !q1.(q1: queues => not(pxTask: queue_sending(q1)) & not(pxTask: queue_receiving(q1))));
  (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})}: QUEUE +-> POW(TASK));
  (queues = dom(queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})}));
  ("`Local hypotheses'" & q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})})(q1));
  ("`Local hypotheses'" & q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2));
  (not(tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})})(q1)));
  ("`Local hypotheses'" & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})})(q1));
  (not(tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})})(q2)));
  ("`q_removeFromEventListQueue preconditions in this component'" & task: TASK);
  ("`Local hypotheses'" & pxQueue: queues & task: queue_sending(pxQueue) & pxQueue$0: queues & task: queue_receiving(pxQueue$0));
  (queue_receiving<+{pxQueue$0|->queue_receiving(pxQueue$0)-{task}}: QUEUE +-> POW(TASK));
  (queues = dom(queue_receiving<+{pxQueue$0|->queue_receiving(pxQueue$0)-{task}}));
  ("`Local hypotheses'" & pxQueue: queues & task: queue_sending(pxQueue) & pxQueue$0: queues & task: queue_receiving(pxQueue$0) & q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue$0|->queue_receiving(pxQueue$0)-{task}})(q1));
  ("`Local hypotheses'" & pxQueue: queues & task: queue_sending(pxQueue) & pxQueue$0: queues & task: queue_receiving(pxQueue$0) & q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2));
  (not(tk: (queue_receiving<+{pxQueue$0|->queue_receiving(pxQueue$0)-{task}})(q1)));
  ("`Local hypotheses'" & pxQueue: queues & task: queue_sending(pxQueue) & pxQueue$0: queues & task: queue_receiving(pxQueue$0) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue$0|->queue_receiving(pxQueue$0)-{task}})(q1));
  (not(tk: (queue_receiving<+{pxQueue$0|->queue_receiving(pxQueue$0)-{task}})(q2)));
  ("`Local hypotheses'" & pxQueue: queues & task: queue_sending(pxQueue) & pxQueue$0: queues & task: queue_receiving(pxQueue$0) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1));
  ("`q_createSemaphore preconditions in this component'" & maxCount: QUEUE_LENGTH & initialCount: QUEUE_QUANT & initialCount<=maxCount);
  ("`Local hypotheses'" & semaphore: QUEUE & not(semaphore: queues));
  (queue_receiving\/{semaphore|->{}}: QUEUE +-> POW(TASK));
  (queue_sending\/{semaphore|->{}}: QUEUE +-> POW(TASK));
  (queues\/{semaphore} = dom(queue_receiving\/{semaphore|->{}}));
  (queues\/{semaphore} = dom(queue_sending\/{semaphore|->{}}));
  (queues_msg: POW(queues\/{semaphore}));
  ("`Local hypotheses'" & semaphore: QUEUE & not(semaphore: queues) & q1: queues\/{semaphore} & q2: queues\/{semaphore} & tk: TASK & tk: (queue_receiving\/{semaphore|->{}})(q1));
  (not(tk: (queue_sending\/{semaphore|->{}})(q2)));
  ("`Local hypotheses'" & semaphore: QUEUE & not(semaphore: queues) & q1: queues\/{semaphore} & q2: queues\/{semaphore} & tk: TASK & tk: (queue_sending\/{semaphore|->{}})(q2));
  (not(tk: (queue_receiving\/{semaphore|->{}})(q1)));
  ("`Local hypotheses'" & semaphore: QUEUE & not(semaphore: queues) & q1: queues\/{semaphore} & q2: queues\/{semaphore} & not(q1 = q2) & tk: TASK & tk: (queue_receiving\/{semaphore|->{}})(q1));
  (not(tk: (queue_receiving\/{semaphore|->{}})(q2)));
  ("`Local hypotheses'" & semaphore: QUEUE & not(semaphore: queues) & q1: queues\/{semaphore} & q2: queues\/{semaphore} & not(q1 = q2) & tk: TASK & tk: (queue_sending\/{semaphore|->{}})(q1));
  (semaphore: queues\/{semaphore});
  (semaphores: POW(queues\/{semaphore}));
  "`Check that the invariant (semaphores_busy <: semaphores) is preserved by the operation - ref 3.4'";
  (semaphore: semaphores\/{semaphore});
  (semaphores_busy: POW(semaphores\/{semaphore}));
  (mutexes: POW(queues\/{semaphore}));
  (not(semaphore: queues_msg));
  "`Check that the invariant (mutexes/\semaphores = {}) is preserved by the operation - ref 3.4'";
  (not(semaphore: mutexes));
  ("`q_deleteSemaphore preconditions in this component'" & semaphore: semaphores);
  ("`Local hypotheses'" & semaphore: semaphores_busy);
  (queues-{semaphore}: POW(QUEUE));
  ({semaphore}<<|queue_receiving: QUEUE +-> POW(TASK));
  ({semaphore}<<|queue_sending: QUEUE +-> POW(TASK));
  (queues-{semaphore} = dom({semaphore}<<|queue_receiving));
  (queues-{semaphore} = dom({semaphore}<<|queue_sending));
  (queues_msg: POW(queues-{semaphore}));
  ("`Local hypotheses'" & semaphore: semaphores_busy & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & tk: TASK & tk: ({semaphore}<<|queue_receiving)(q1));
  (not(tk: ({semaphore}<<|queue_sending)(q2)));
  ("`Local hypotheses'" & semaphore: semaphores_busy & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & tk: TASK & tk: ({semaphore}<<|queue_sending)(q2));
  (not(tk: ({semaphore}<<|queue_receiving)(q1)));
  ("`Local hypotheses'" & semaphore: semaphores_busy & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & not(q1 = q2) & tk: TASK & tk: ({semaphore}<<|queue_receiving)(q1));
  (not(tk: ({semaphore}<<|queue_receiving)(q2)));
  ("`Local hypotheses'" & semaphore: semaphores_busy & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & not(q1 = q2) & tk: TASK & tk: ({semaphore}<<|queue_sending)(q1));
  "`Check that the invariant (semaphores: POW(QUEUE)) is preserved by the operation - ref 3.4'";
  (semaphores-{semaphore}: POW(QUEUE));
  (semaphores-{semaphore}: POW(queues-{semaphore}));
  (semaphores_busy-{semaphore}: POW(semaphores-{semaphore}));
  (mutexes: POW(queues-{semaphore}));
  (queues_msg/\semaphores-{semaphore} = {});
  (mutexes/\semaphores-{semaphore} = {});
  ("`Local hypotheses'" & not(semaphore: semaphores_busy));
  ("`Local hypotheses'" & not(semaphore: semaphores_busy) & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & tk: TASK & tk: ({semaphore}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & not(semaphore: semaphores_busy) & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & tk: TASK & tk: ({semaphore}<<|queue_sending)(q2));
  ("`Local hypotheses'" & not(semaphore: semaphores_busy) & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & not(q1 = q2) & tk: TASK & tk: ({semaphore}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & not(semaphore: semaphores_busy) & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & not(q1 = q2) & tk: TASK & tk: ({semaphore}<<|queue_sending)(q1));
  (semaphores_busy: POW(semaphores-{semaphore}));
  ("`q_takeSemaphore preconditions in this component'" & semaphore: semaphores & not(semaphore: semaphores_busy) & pxTask: TASK & pxTask: queue_sending(semaphore));
  (queue_sending<+{semaphore|->queue_sending(semaphore)-{pxTask}}: QUEUE +-> POW(TASK));
  (queues = dom(queue_sending<+{semaphore|->queue_sending(semaphore)-{pxTask}}));
  (not(tk: (queue_sending<+{semaphore|->queue_sending(semaphore)-{pxTask}})(q2)));
  ("`Local hypotheses'" & q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{semaphore|->queue_sending(semaphore)-{pxTask}})(q2));
  ("`Local hypotheses'" & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{semaphore|->queue_sending(semaphore)-{pxTask}})(q1));
  ("`q_giveSemaphore preconditions in this component'" & semaphore: semaphores & pxTask: TASK & pxTask: queue_receiving(semaphore));
  "`Check that the invariant (queue_receiving: QUEUE +-> POW(TASK)) is preserved by the operation - ref 3.4'";
  (queue_receiving<+{semaphore|->queue_receiving(semaphore)-{pxTask}}: QUEUE +-> POW(TASK));
  "`Check that the invariant (queues = dom(queue_receiving)) is preserved by the operation - ref 3.4'";
  (queues = dom(queue_receiving<+{semaphore|->queue_receiving(semaphore)-{pxTask}}));
  ("`Local hypotheses'" & semaphore: semaphores_busy & q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{semaphore|->queue_receiving(semaphore)-{pxTask}})(q1));
  "`Check that the invariant (!(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => tk/:queue_sending(q2))) is preserved by the operation - ref 3.4'";
  ("`Local hypotheses'" & semaphore: semaphores_busy & q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2));
  "`Check that the invariant (!(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => tk/:queue_receiving(q1))) is preserved by the operation - ref 3.4'";
  (not(tk: (queue_receiving<+{semaphore|->queue_receiving(semaphore)-{pxTask}})(q1)));
  ("`Local hypotheses'" & semaphore: semaphores_busy & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{semaphore|->queue_receiving(semaphore)-{pxTask}})(q1));
  "`Check that the invariant (!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_receiving(q1) => tk/:queue_receiving(q2))) is preserved by the operation - ref 3.4'";
  (not(tk: (queue_receiving<+{semaphore|->queue_receiving(semaphore)-{pxTask}})(q2)));
  "`Check that the invariant (semaphores_busy <: semaphores) is preserved by the operation - ref 3.4'";
  (semaphores_busy-{semaphore}: POW(semaphores));
  ("`Local hypotheses'" & not(semaphore: semaphores_busy) & q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{semaphore|->queue_receiving(semaphore)-{pxTask}})(q1));
  ("`Local hypotheses'" & not(semaphore: semaphores_busy) & q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2));
  ("`Local hypotheses'" & not(semaphore: semaphores_busy) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{semaphore|->queue_receiving(semaphore)-{pxTask}})(q1));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues));
  (queue_receiving\/{mutex|->{}}: QUEUE +-> POW(TASK));
  (queue_sending\/{mutex|->{}}: QUEUE +-> POW(TASK));
  (queues\/{mutex} = dom(queue_receiving\/{mutex|->{}}));
  (queues\/{mutex} = dom(queue_sending\/{mutex|->{}}));
  (queues_msg: POW(queues\/{mutex}));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & q1: queues\/{mutex} & q2: queues\/{mutex} & tk: TASK & tk: (queue_receiving\/{mutex|->{}})(q1));
  (not(tk: (queue_sending\/{mutex|->{}})(q2)));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & q1: queues\/{mutex} & q2: queues\/{mutex} & tk: TASK & tk: (queue_sending\/{mutex|->{}})(q2));
  (not(tk: (queue_receiving\/{mutex|->{}})(q1)));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & q1: queues\/{mutex} & q2: queues\/{mutex} & not(q1 = q2) & tk: TASK & tk: (queue_receiving\/{mutex|->{}})(q1));
  (not(tk: (queue_receiving\/{mutex|->{}})(q2)));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & q1: queues\/{mutex} & q2: queues\/{mutex} & not(q1 = q2) & tk: TASK & tk: (queue_sending\/{mutex|->{}})(q1));
  (semaphores: POW(queues\/{mutex}));
  (mutex: queues\/{mutex});
  (mutexes: POW(queues\/{mutex}));
  "`Check that the invariant (mutex_holder: QUEUE +-> TASK) is preserved by the operation - ref 3.4'";
  (mutex_holder\/{mutex|->TASK_NULL}: QUEUE +-> TASK);
  "`Check that the invariant (mutexes = dom(mutex_holder)) is preserved by the operation - ref 3.4'";
  (mutexes\/{mutex} = dom(mutex_holder\/{mutex|->TASK_NULL}));
  "`Check that the invariant (mutexes_busy <: mutexes) is preserved by the operation - ref 3.4'";
  (mutexes_busy: POW(mutexes\/{mutex}));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & mt: mutexes_busy);
  "`Check that the invariant (!mt.(mt: mutexes_busy => mutex_holder(mt)/=TASK_NULL)) is preserved by the operation - ref 3.4'";
  (not((mutex_holder\/{mutex|->TASK_NULL})(mt) = TASK_NULL));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & mt: mutexes\/{mutex} & not(mt: mutexes_busy));
  "`Check that the invariant (!mt.(mt: mutexes & mt/:mutexes_busy => mutex_holder(mt) = TASK_NULL)) is preserved by the operation - ref 3.4'";
  ((mutex_holder\/{mutex|->TASK_NULL})(mt) = TASK_NULL);
  (not(mutex: queues_msg));
  (mutexes\/{mutex}/\semaphores = {});
  ("`q_takeMutex preconditions in this component'" & mutex: mutexes & not(mutex: mutexes_busy) & task: TASK & not(task = TASK_NULL));
  (mutex_holder<+{mutex|->task}: QUEUE +-> TASK);
  (mutexes = dom(mutex_holder<+{mutex|->task}));
  ("`Local hypotheses'" & mt: mutexes_busy\/{mutex});
  (not((mutex_holder<+{mutex|->task})(mt) = TASK_NULL));
  ("`Local hypotheses'" & mt: mutexes & not(mt: mutexes_busy) & not(mt = mutex));
  ((mutex_holder<+{mutex|->task})(mt) = TASK_NULL);
  ("`q_giveMutex preconditions in this component'" & mutex: mutexes & mutex: mutexes_busy & pxTask: TASK);
  (queue_receiving<+{mutex|->queue_receiving(mutex)-{pxTask}}: QUEUE +-> POW(TASK));
  (queues = dom(queue_receiving<+{mutex|->queue_receiving(mutex)-{pxTask}}));
  ("`Local hypotheses'" & q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{mutex|->queue_receiving(mutex)-{pxTask}})(q1));
  (not(tk: (queue_receiving<+{mutex|->queue_receiving(mutex)-{pxTask}})(q1)));
  ("`Local hypotheses'" & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{mutex|->queue_receiving(mutex)-{pxTask}})(q1));
  (not(tk: (queue_receiving<+{mutex|->queue_receiving(mutex)-{pxTask}})(q2)));
  (mutex_holder<+{mutex|->TASK_NULL}: QUEUE +-> TASK);
  (mutexes = dom(mutex_holder<+{mutex|->TASK_NULL}));
  (mutexes_busy-{mutex}: POW(mutexes));
  ("`Local hypotheses'" & mt: mutexes_busy & not(mt = mutex));
  (not((mutex_holder<+{mutex|->TASK_NULL})(mt) = TASK_NULL));
  ("`Local hypotheses'" & mt: mutexes & not(mt: mutexes_busy & not(mt = mutex)));
  ((mutex_holder<+{mutex|->TASK_NULL})(mt) = TASK_NULL);
  ("`q_resumeAll preconditions in this component'" & unblocked: POW(TASK));
  ("`Local hypotheses'" & not(queue_receiving = {}) & not(queue_sending = {}));
  (remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK));
  (remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK));
  (queues = dom(remove_task(queue_receiving,unblocked)));
  (queues = dom(remove_task(queue_sending,unblocked)));
  ("`Local hypotheses'" & not(queue_receiving = {}) & not(queue_sending = {}) & q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1));
  (not(tk: remove_task(queue_sending,unblocked)(q2)));
  ("`Local hypotheses'" & not(queue_receiving = {}) & not(queue_sending = {}) & q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2));
  (not(tk: remove_task(queue_receiving,unblocked)(q1)));
  ("`Local hypotheses'" & not(queue_receiving = {}) & not(queue_sending = {}) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1));
  (not(tk: remove_task(queue_receiving,unblocked)(q2)));
  ("`Local hypotheses'" & not(queue_receiving = {}) & not(queue_sending = {}) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1));
  ("`Local hypotheses'" & not(queue_receiving = {}) & queue_sending = {});
  ("`Local hypotheses'" & not(queue_receiving = {}) & queue_sending = {} & q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1));
  ("`Local hypotheses'" & not(queue_receiving = {}) & queue_sending = {} & q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2));
  ("`Local hypotheses'" & not(queue_receiving = {}) & queue_sending = {} & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1));
  ("`Local hypotheses'" & queue_receiving = {} & not(queue_sending = {}));
  ("`Local hypotheses'" & queue_receiving = {} & not(queue_sending = {}) & q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1));
  ("`Local hypotheses'" & queue_receiving = {} & not(queue_sending = {}) & q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2));
  ("`Local hypotheses'" & queue_receiving = {} & not(queue_sending = {}) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1))
END
&
THEORY EnumerateX IS
  SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED};
  COPY_POSITION == {queueSEND_TO_BACK,queueSEND_TO_FRONT};
  QUEUE_TYPE == {TQUE,TSEMAPH,TMUT};
  ERROR_DEFINITION == {errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY,errNO_TASK_TO_RUN,errQUEUE_BLOCKED,errQUEUE_YIELD,errQUEUE_EMPTY,errQUEUE_FULL,pdPASS,pdFAIL,pdTRUE,pdFALSE}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK)
END
