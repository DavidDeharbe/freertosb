THEORY ProofList IS
  _f(1) & _f(2) & _f(15) & _f(27) & _f(444) & q_resumeAll.18,(_f(473) & _f(464) => _f(456));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(444) & q_resumeAll.17,(_f(472) & _f(458) => _f(183));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(444) & q_resumeAll.16,(_f(471) & _f(455) => _f(456));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(444) & q_resumeAll.15,(_f(469) & _f(452) => _f(470));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(444) & q_resumeAll.14,(_f(469) & _f(448) => _f(449));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(444) & q_resumeAll.13,(_f(468) & _f(461) => _f(462));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(444) & q_resumeAll.12,(_f(467) & _f(458) => _f(459));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(444) & q_resumeAll.11,(_f(466) & _f(455) => _f(156));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(444) & q_resumeAll.10,(_f(465) & _f(450) => _f(451));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(444) & q_resumeAll.9,(_f(465) & _f(446) => _f(447));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(444) & q_resumeAll.8,(_f(463) & _f(464) => _f(456));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(444) & q_resumeAll.7,(_f(460) & _f(461) => _f(462));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(444) & q_resumeAll.6,(_f(457) & _f(458) => _f(459));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(444) & q_resumeAll.5,(_f(454) & _f(455) => _f(456));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(444) & q_resumeAll.4,(_f(445) & _f(452) => _f(453));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(444) & q_resumeAll.3,(_f(445) & _f(450) => _f(451));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(444) & q_resumeAll.2,(_f(445) & _f(448) => _f(449));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(444) & q_resumeAll.1,(_f(445) & _f(446) => _f(447));
  _f(1) & _f(2) & _f(15) & _f(27) & q_endScheduler.6,(_f(62) => _f(14));
  _f(1) & _f(2) & _f(15) & _f(27) & q_endScheduler.5,(_f(52) => _f(12));
  _f(1) & _f(2) & _f(15) & _f(27) & q_endScheduler.4,(_f(38) => _f(10));
  _f(1) & _f(2) & _f(15) & _f(27) & q_endScheduler.3,(_f(34) => _f(8));
  _f(1) & _f(2) & _f(15) & _f(27) & q_endScheduler.2,(_f(30) => _f(6));
  _f(1) & _f(2) & _f(15) & _f(27) & q_endScheduler.1,(_f(87) => _f(4));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(424) & q_giveMutex.13,(_f(442) & _f(413) => _f(443));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(424) & q_giveMutex.12,(_f(440) & _f(410) => _f(441));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(424) & q_giveMutex.11,(_f(425) & _f(407) => _f(439));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(424) & q_giveMutex.10,(_f(425) & _f(405) => _f(438));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(424) & q_giveMutex.9,(_f(425) & _f(403) => _f(437));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(424) & q_giveMutex.8,(_f(435) & _f(73) => _f(436));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(424) & q_giveMutex.7,(_f(433) & _f(70) => _f(434));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(424) & q_giveMutex.6,(_f(432) & _f(67) => _f(156));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(424) & q_giveMutex.5,(_f(430) & _f(47) => _f(431));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(424) & q_giveMutex.4,(_f(425) & _f(42) => _f(429));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(424) & q_giveMutex.3,(_f(425) & _f(38) => _f(428));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(424) & q_giveMutex.2,(_f(425) & _f(34) => _f(427));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(424) & q_giveMutex.1,(_f(425) & _f(30) => _f(426));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(417) & q_takeMutex.4,(_f(422) & _f(413) => _f(423));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(417) & q_takeMutex.3,(_f(420) & _f(410) => _f(421));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(417) & q_takeMutex.2,(_f(405) => _f(419));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(417) & q_takeMutex.1,(_f(403) => _f(418));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.25,(_f(379) & _f(277) => _f(416));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.24,(_f(379) & _f(83) => _f(415));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.23,(_f(412) & _f(413) => _f(414));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.22,(_f(409) & _f(410) => _f(411));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.21,(_f(379) & _f(407) => _f(408));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.20,(_f(379) & _f(405) => _f(406));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.19,(_f(379) & _f(403) => _f(404));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.18,(_f(379) & _f(79) => _f(402));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.17,(_f(379) & _f(79) => _f(401));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.16,(_f(379) & _f(77) => _f(400));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.15,(_f(399) & _f(76) => _f(394));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.14,(_f(397) & _f(73) => _f(398));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.13,(_f(395) & _f(70) => _f(396));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.12,(_f(393) & _f(67) => _f(394));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.11,(_f(379) & _f(52) => _f(392));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.10,(_f(390) & _f(50) => _f(391));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.9,(_f(388) & _f(47) => _f(389));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.8,(_f(379) & _f(44) => _f(387));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.7,(_f(379) & _f(42) => _f(386));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.6,(_f(379) & _f(40) => _f(385));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.5,(_f(379) & _f(38) => _f(384));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.4,(_f(379) & _f(36) => _f(383));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.3,(_f(379) & _f(34) => _f(382));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.2,(_f(379) & _f(32) => _f(381));
  _f(1) & _f(2) & _f(15) & _f(27) & q_createMutex.1,(_f(379) & _f(30) => _f(380));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.26,(_f(378) & _f(73) => _f(367));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.25,(_f(377) & _f(70) => _f(365));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.24,(_f(376) & _f(67) => _f(156));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.23,(_f(375) & _f(47) => _f(362));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.22,(_f(374) & _f(42) => _f(360));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.21,(_f(374) & _f(38) => _f(359));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.20,(_f(374) & _f(34) => _f(358));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.19,(_f(374) & _f(30) => _f(357));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.18,(_f(373) & _f(73) => _f(367));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.17,(_f(372) & _f(70) => _f(365));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.16,(_f(371) & _f(67) => _f(156));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.15,(_f(370) & _f(47) => _f(362));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.14,(_f(369) & _f(42) => _f(360));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.13,(_f(369) & _f(38) => _f(359));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.12,(_f(369) & _f(34) => _f(358));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.11,(_f(369) & _f(30) => _f(357));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.10,(_f(356) & _f(273) => _f(320));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.9,(_f(356) & _f(268) => _f(368));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.8,(_f(366) & _f(73) => _f(367));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.7,(_f(364) & _f(70) => _f(365));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.6,(_f(363) & _f(67) => _f(156));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.5,(_f(361) & _f(47) => _f(362));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.4,(_f(356) & _f(42) => _f(360));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.3,(_f(356) & _f(38) => _f(359));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.2,(_f(356) & _f(34) => _f(358));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(355) & q_giveSemaphore.1,(_f(356) & _f(30) => _f(357));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(337) & q_takeSemaphore.19,(_f(350) & _f(273) => _f(274));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(337) & q_takeSemaphore.18,(_f(354) & _f(76) => _f(346));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(337) & q_takeSemaphore.17,(_f(353) & _f(70) => _f(183));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(337) & q_takeSemaphore.16,(_f(352) & _f(67) => _f(346));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(337) & q_takeSemaphore.15,(_f(351) & _f(50) => _f(344));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(337) & q_takeSemaphore.14,(_f(350) & _f(44) => _f(342));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(337) & q_takeSemaphore.13,(_f(350) & _f(40) => _f(341));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(337) & q_takeSemaphore.12,(_f(350) & _f(36) => _f(340));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(337) & q_takeSemaphore.11,(_f(350) & _f(32) => _f(339));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(337) & q_takeSemaphore.10,(_f(338) & _f(273) => _f(329));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(337) & q_takeSemaphore.9,(_f(338) & _f(271) => _f(349));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(337) & q_takeSemaphore.8,(_f(348) & _f(76) => _f(346));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(337) & q_takeSemaphore.7,(_f(347) & _f(70) => _f(183));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(337) & q_takeSemaphore.6,(_f(345) & _f(67) => _f(346));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(337) & q_takeSemaphore.5,(_f(343) & _f(50) => _f(344));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(337) & q_takeSemaphore.4,(_f(338) & _f(44) => _f(342));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(337) & q_takeSemaphore.3,(_f(338) & _f(40) => _f(341));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(337) & q_takeSemaphore.2,(_f(338) & _f(36) => _f(340));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(337) & q_takeSemaphore.1,(_f(338) & _f(32) => _f(339));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.95,(_f(330) & _f(277) => _f(311));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.94,(_f(330) & _f(81) => _f(310));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.93,(_f(330) & _f(79) => _f(309));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.92,(_f(330) & _f(271) => _f(319));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.91,(_f(330) & _f(268) => _f(328));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.90,(_f(330) & _f(77) => _f(305));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.89,(_f(330) & _f(303) => _f(304));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.88,(_f(336) & _f(76) => _f(297));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.87,(_f(335) & _f(73) => _f(301));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.86,(_f(334) & _f(70) => _f(299));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.85,(_f(333) & _f(67) => _f(297));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.84,(_f(330) & _f(52) => _f(295));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.83,(_f(332) & _f(50) => _f(294));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.82,(_f(331) & _f(47) => _f(292));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.81,(_f(330) & _f(44) => _f(290));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.80,(_f(330) & _f(42) => _f(289));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.79,(_f(330) & _f(40) => _f(288));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.78,(_f(330) & _f(38) => _f(287));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.77,(_f(330) & _f(36) => _f(286));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.76,(_f(330) & _f(34) => _f(285));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.75,(_f(330) & _f(32) => _f(284));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.74,(_f(330) & _f(30) => _f(283));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.73,(_f(330) & _f(87) => _f(282));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.72,(_f(321) & _f(277) => _f(311));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.71,(_f(321) & _f(81) => _f(310));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.70,(_f(321) & _f(79) => _f(309));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.69,(_f(321) & _f(273) => _f(329));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.68,(_f(321) & _f(271) => _f(307));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.67,(_f(321) & _f(268) => _f(328));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.66,(_f(321) & _f(77) => _f(305));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.65,(_f(321) & _f(303) => _f(304));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.64,(_f(327) & _f(76) => _f(297));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.63,(_f(326) & _f(73) => _f(301));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.62,(_f(325) & _f(70) => _f(299));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.61,(_f(324) & _f(67) => _f(297));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.60,(_f(321) & _f(52) => _f(295));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.59,(_f(323) & _f(50) => _f(294));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.58,(_f(322) & _f(47) => _f(292));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.57,(_f(321) & _f(44) => _f(290));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.56,(_f(321) & _f(42) => _f(289));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.55,(_f(321) & _f(40) => _f(288));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.54,(_f(321) & _f(38) => _f(287));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.53,(_f(321) & _f(36) => _f(286));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.52,(_f(321) & _f(34) => _f(285));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.51,(_f(321) & _f(32) => _f(284));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.50,(_f(321) & _f(30) => _f(283));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.49,(_f(321) & _f(87) => _f(282));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.48,(_f(312) & _f(277) => _f(311));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.47,(_f(312) & _f(81) => _f(310));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.46,(_f(312) & _f(79) => _f(309));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.45,(_f(312) & _f(273) => _f(320));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.44,(_f(312) & _f(271) => _f(319));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.43,(_f(312) & _f(268) => _f(306));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.42,(_f(312) & _f(77) => _f(305));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.41,(_f(312) & _f(303) => _f(304));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.40,(_f(318) & _f(76) => _f(297));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.39,(_f(317) & _f(73) => _f(301));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.38,(_f(316) & _f(70) => _f(299));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.37,(_f(315) & _f(67) => _f(297));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.36,(_f(312) & _f(52) => _f(295));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.35,(_f(314) & _f(50) => _f(294));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.34,(_f(313) & _f(47) => _f(292));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.33,(_f(312) & _f(44) => _f(290));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.32,(_f(312) & _f(42) => _f(289));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.31,(_f(312) & _f(40) => _f(288));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.30,(_f(312) & _f(38) => _f(287));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.29,(_f(312) & _f(36) => _f(286));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.28,(_f(312) & _f(34) => _f(285));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.27,(_f(312) & _f(32) => _f(284));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.26,(_f(312) & _f(30) => _f(283));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.25,(_f(312) & _f(87) => _f(282));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.24,(_f(281) & _f(277) => _f(311));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.23,(_f(281) & _f(81) => _f(310));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.22,(_f(281) & _f(79) => _f(309));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.21,(_f(281) & _f(273) => _f(308));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.20,(_f(281) & _f(271) => _f(307));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.19,(_f(281) & _f(268) => _f(306));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.18,(_f(281) & _f(77) => _f(305));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.17,(_f(281) & _f(303) => _f(304));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.16,(_f(302) & _f(76) => _f(297));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.15,(_f(300) & _f(73) => _f(301));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.14,(_f(298) & _f(70) => _f(299));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.13,(_f(296) & _f(67) => _f(297));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.12,(_f(281) & _f(52) => _f(295));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.11,(_f(293) & _f(50) => _f(294));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.10,(_f(291) & _f(47) => _f(292));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.9,(_f(281) & _f(44) => _f(290));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.8,(_f(281) & _f(42) => _f(289));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.7,(_f(281) & _f(40) => _f(288));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.6,(_f(281) & _f(38) => _f(287));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.5,(_f(281) & _f(36) => _f(286));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.4,(_f(281) & _f(34) => _f(285));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.3,(_f(281) & _f(32) => _f(284));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.2,(_f(281) & _f(30) => _f(283));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(280) & q_deleteSemaphore.1,(_f(281) & _f(87) => _f(282));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.25,(_f(245) & _f(273) => _f(279));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.24,(_f(245) & _f(277) => _f(278));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.23,(_f(245) & _f(81) => _f(276));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.22,(_f(245) & _f(79) => _f(275));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.21,(_f(245) & _f(273) => _f(274));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.20,(_f(245) & _f(271) => _f(272));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.19,(_f(245) & _f(268) => _f(270));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.18,(_f(245) & _f(268) => _f(269));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.17,(_f(245) & _f(77) => _f(267));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.16,(_f(245) & _f(77) => _f(266));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.15,(_f(265) & _f(76) => _f(260));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.14,(_f(263) & _f(73) => _f(264));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.13,(_f(261) & _f(70) => _f(262));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.12,(_f(259) & _f(67) => _f(260));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.11,(_f(245) & _f(52) => _f(258));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.10,(_f(256) & _f(50) => _f(257));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.9,(_f(254) & _f(47) => _f(255));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.8,(_f(245) & _f(44) => _f(253));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.7,(_f(245) & _f(42) => _f(252));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.6,(_f(245) & _f(40) => _f(251));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.5,(_f(245) & _f(38) => _f(250));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.4,(_f(245) & _f(36) => _f(249));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.3,(_f(245) & _f(34) => _f(248));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.2,(_f(245) & _f(32) => _f(247));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(244) & q_createSemaphore.1,(_f(245) & _f(30) => _f(246));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(229) & q_removeFromEventListQueue.14,(_f(243) & _f(76) => _f(181));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(229) & q_removeFromEventListQueue.13,(_f(241) & _f(73) => _f(242));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(229) & q_removeFromEventListQueue.12,(_f(239) & _f(70) => _f(240));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(229) & q_removeFromEventListQueue.11,(_f(238) & _f(67) => _f(181));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(229) & q_removeFromEventListQueue.10,(_f(237) & _f(50) => _f(176));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(229) & q_removeFromEventListQueue.9,(_f(235) & _f(47) => _f(236));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(229) & q_removeFromEventListQueue.8,(_f(230) & _f(44) => _f(174));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(229) & q_removeFromEventListQueue.7,(_f(230) & _f(42) => _f(234));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(229) & q_removeFromEventListQueue.6,(_f(230) & _f(40) => _f(173));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(229) & q_removeFromEventListQueue.5,(_f(230) & _f(38) => _f(233));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(229) & q_removeFromEventListQueue.4,(_f(230) & _f(36) => _f(172));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(229) & q_removeFromEventListQueue.3,(_f(230) & _f(34) => _f(232));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(229) & q_removeFromEventListQueue.2,(_f(230) & _f(32) => _f(171));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(229) & q_removeFromEventListQueue.1,(_f(230) & _f(30) => _f(231));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(209) & q_insertTaskWaitingToReceive.15,(_f(228) & _f(73) => _f(221));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(209) & q_insertTaskWaitingToReceive.14,(_f(227) & _f(70) => _f(219));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(209) & q_insertTaskWaitingToReceive.13,(_f(226) & _f(67) => _f(156));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(209) & q_insertTaskWaitingToReceive.12,(_f(224) & _f(47) => _f(225));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(209) & q_insertTaskWaitingToReceive.11,(_f(222) & _f(42) => _f(223));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(209) & q_insertTaskWaitingToReceive.10,(_f(222) & _f(34) => _f(212));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(209) & q_insertTaskWaitingToReceive.9,(_f(222) & _f(30) => _f(211));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(209) & q_insertTaskWaitingToReceive.8,(_f(220) & _f(73) => _f(221));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(209) & q_insertTaskWaitingToReceive.7,(_f(218) & _f(70) => _f(219));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(209) & q_insertTaskWaitingToReceive.6,(_f(217) & _f(67) => _f(156));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(209) & q_insertTaskWaitingToReceive.5,(_f(215) & _f(47) => _f(216));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(209) & q_insertTaskWaitingToReceive.4,(_f(210) & _f(42) => _f(214));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(209) & q_insertTaskWaitingToReceive.3,(_f(210) & _f(38) => _f(213));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(209) & q_insertTaskWaitingToReceive.2,(_f(210) & _f(34) => _f(212));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(209) & q_insertTaskWaitingToReceive.1,(_f(210) & _f(30) => _f(211));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(190) & q_insertTaskWaitingToSend.15,(_f(208) & _f(76) => _f(199));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(190) & q_insertTaskWaitingToSend.14,(_f(207) & _f(70) => _f(183));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(190) & q_insertTaskWaitingToSend.13,(_f(206) & _f(67) => _f(199));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(190) & q_insertTaskWaitingToSend.12,(_f(204) & _f(50) => _f(205));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(190) & q_insertTaskWaitingToSend.11,(_f(202) & _f(44) => _f(203));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(190) & q_insertTaskWaitingToSend.10,(_f(202) & _f(36) => _f(193));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(190) & q_insertTaskWaitingToSend.9,(_f(202) & _f(32) => _f(192));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(190) & q_insertTaskWaitingToSend.8,(_f(201) & _f(76) => _f(199));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(190) & q_insertTaskWaitingToSend.7,(_f(200) & _f(70) => _f(183));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(190) & q_insertTaskWaitingToSend.6,(_f(198) & _f(67) => _f(199));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(190) & q_insertTaskWaitingToSend.5,(_f(196) & _f(50) => _f(197));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(190) & q_insertTaskWaitingToSend.4,(_f(191) & _f(44) => _f(195));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(190) & q_insertTaskWaitingToSend.3,(_f(191) & _f(40) => _f(194));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(190) & q_insertTaskWaitingToSend.2,(_f(191) & _f(36) => _f(193));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(190) & q_insertTaskWaitingToSend.1,(_f(191) & _f(32) => _f(192));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(169) & q_receivedItem.22,(_f(189) & _f(76) => _f(181));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(169) & q_receivedItem.21,(_f(188) & _f(70) => _f(183));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(169) & q_receivedItem.20,(_f(187) & _f(67) => _f(181));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(169) & q_receivedItem.19,(_f(185) & _f(64) => _f(179));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(169) & q_receivedItem.18,(_f(185) & _f(62) => _f(178));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(169) & q_receivedItem.17,(_f(186) & _f(50) => _f(176));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(169) & q_receivedItem.16,(_f(185) & _f(44) => _f(174));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(169) & q_receivedItem.15,(_f(185) & _f(40) => _f(173));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(169) & q_receivedItem.14,(_f(185) & _f(36) => _f(172));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(169) & q_receivedItem.13,(_f(185) & _f(32) => _f(171));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(169) & q_receivedItem.12,(_f(184) & _f(76) => _f(181));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(169) & q_receivedItem.11,(_f(182) & _f(70) => _f(183));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(169) & q_receivedItem.10,(_f(180) & _f(67) => _f(181));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(169) & q_receivedItem.9,(_f(170) & _f(64) => _f(179));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(169) & q_receivedItem.8,(_f(170) & _f(62) => _f(178));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(169) & q_receivedItem.7,(_f(170) & _f(60) => _f(122));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(169) & q_receivedItem.6,(_f(170) & _f(55) => _f(177));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(169) & q_receivedItem.5,(_f(175) & _f(50) => _f(176));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(169) & q_receivedItem.4,(_f(170) & _f(44) => _f(174));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(169) & q_receivedItem.3,(_f(170) & _f(40) => _f(173));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(169) & q_receivedItem.2,(_f(170) & _f(36) => _f(172));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(169) & q_receivedItem.1,(_f(170) & _f(32) => _f(171));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.32,(_f(168) & _f(64) => _f(154));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.31,(_f(168) & _f(62) => _f(153));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.30,(_f(168) & _f(60) => _f(164));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.29,(_f(167) & _f(73) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.28,(_f(166) & _f(70) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.27,(_f(165) & _f(67) => _f(156));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.26,(_f(162) & _f(64) => _f(154));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.25,(_f(162) & _f(62) => _f(153));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.24,(_f(162) & _f(60) => _f(164));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.23,(_f(163) & _f(47) => _f(150));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.22,(_f(162) & _f(42) => _f(148));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.21,(_f(162) & _f(38) => _f(147));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.20,(_f(162) & _f(34) => _f(146));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.19,(_f(162) & _f(30) => _f(145));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.18,(_f(161) & _f(60) => _f(131));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.17,(_f(144) & _f(60) => _f(131));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.16,(_f(161) & _f(64) => _f(154));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.15,(_f(161) & _f(62) => _f(153));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.14,(_f(161) & _f(60) => _f(152));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.13,(_f(161) & _f(57) => _f(151));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.12,(_f(159) & _f(73) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.11,(_f(157) & _f(70) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.10,(_f(155) & _f(67) => _f(156));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.9,(_f(144) & _f(64) => _f(154));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.8,(_f(144) & _f(62) => _f(153));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.7,(_f(144) & _f(60) => _f(152));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.6,(_f(144) & _f(57) => _f(151));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.5,(_f(149) & _f(47) => _f(150));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.4,(_f(144) & _f(42) => _f(148));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.3,(_f(144) & _f(38) => _f(147));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.2,(_f(144) & _f(34) => _f(146));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(143) & q_sendItem.1,(_f(144) & _f(30) => _f(145));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.99,(_f(136) & _f(83) => _f(117));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.98,(_f(136) & _f(81) => _f(116));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.97,(_f(136) & _f(79) => _f(115));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.96,(_f(136) & _f(77) => _f(114));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.95,(_f(142) & _f(76) => _f(108));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.94,(_f(141) & _f(73) => _f(112));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.93,(_f(140) & _f(70) => _f(110));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.92,(_f(139) & _f(67) => _f(108));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.91,(_f(136) & _f(64) => _f(106));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.90,(_f(136) & _f(62) => _f(105));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.89,(_f(136) & _f(57) => _f(121));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.88,(_f(136) & _f(55) => _f(130));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.87,(_f(136) & _f(52) => _f(101));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.86,(_f(138) & _f(50) => _f(100));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.85,(_f(137) & _f(47) => _f(98));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.84,(_f(136) & _f(44) => _f(96));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.83,(_f(136) & _f(42) => _f(95));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.82,(_f(136) & _f(40) => _f(94));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.81,(_f(136) & _f(38) => _f(93));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.80,(_f(136) & _f(36) => _f(92));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.79,(_f(136) & _f(34) => _f(91));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.78,(_f(136) & _f(32) => _f(90));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.77,(_f(136) & _f(30) => _f(89));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.76,(_f(136) & _f(87) => _f(88));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.75,(_f(127) & _f(83) => _f(117));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.74,(_f(127) & _f(81) => _f(116));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.73,(_f(127) & _f(79) => _f(115));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.72,(_f(127) & _f(77) => _f(114));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.71,(_f(135) & _f(76) => _f(108));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.70,(_f(134) & _f(73) => _f(112));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.69,(_f(133) & _f(70) => _f(110));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.68,(_f(132) & _f(67) => _f(108));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.67,(_f(127) & _f(64) => _f(106));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.66,(_f(127) & _f(62) => _f(105));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.65,(_f(127) & _f(60) => _f(131));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.64,(_f(127) & _f(57) => _f(103));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.63,(_f(127) & _f(55) => _f(130));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.62,(_f(127) & _f(52) => _f(101));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.61,(_f(129) & _f(50) => _f(100));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.60,(_f(128) & _f(47) => _f(98));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.59,(_f(127) & _f(44) => _f(96));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.58,(_f(127) & _f(42) => _f(95));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.57,(_f(127) & _f(40) => _f(94));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.56,(_f(127) & _f(38) => _f(93));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.55,(_f(127) & _f(36) => _f(92));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.54,(_f(127) & _f(34) => _f(91));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.53,(_f(127) & _f(32) => _f(90));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.52,(_f(127) & _f(30) => _f(89));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.51,(_f(127) & _f(87) => _f(88));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.50,(_f(118) & _f(83) => _f(117));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.49,(_f(118) & _f(81) => _f(116));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.48,(_f(118) & _f(79) => _f(115));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.47,(_f(118) & _f(77) => _f(114));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.46,(_f(126) & _f(76) => _f(108));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.45,(_f(125) & _f(73) => _f(112));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.44,(_f(124) & _f(70) => _f(110));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.43,(_f(123) & _f(67) => _f(108));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.42,(_f(118) & _f(64) => _f(106));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.41,(_f(118) & _f(62) => _f(105));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.40,(_f(118) & _f(60) => _f(122));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.39,(_f(118) & _f(57) => _f(121));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.38,(_f(118) & _f(55) => _f(102));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.37,(_f(118) & _f(52) => _f(101));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.36,(_f(120) & _f(50) => _f(100));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.35,(_f(119) & _f(47) => _f(98));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.34,(_f(118) & _f(44) => _f(96));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.33,(_f(118) & _f(42) => _f(95));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.32,(_f(118) & _f(40) => _f(94));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.31,(_f(118) & _f(38) => _f(93));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.30,(_f(118) & _f(36) => _f(92));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.29,(_f(118) & _f(34) => _f(91));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.28,(_f(118) & _f(32) => _f(90));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.27,(_f(118) & _f(30) => _f(89));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.26,(_f(118) & _f(87) => _f(88));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.25,(_f(86) & _f(83) => _f(117));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.24,(_f(86) & _f(81) => _f(116));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.23,(_f(86) & _f(79) => _f(115));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.22,(_f(86) & _f(77) => _f(114));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.21,(_f(113) & _f(76) => _f(108));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.20,(_f(111) & _f(73) => _f(112));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.19,(_f(109) & _f(70) => _f(110));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.18,(_f(107) & _f(67) => _f(108));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.17,(_f(86) & _f(64) => _f(106));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.16,(_f(86) & _f(62) => _f(105));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.15,(_f(86) & _f(60) => _f(104));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.14,(_f(86) & _f(57) => _f(103));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.13,(_f(86) & _f(55) => _f(102));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.12,(_f(86) & _f(52) => _f(101));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.11,(_f(99) & _f(50) => _f(100));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.10,(_f(97) & _f(47) => _f(98));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.9,(_f(86) & _f(44) => _f(96));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.8,(_f(86) & _f(42) => _f(95));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.7,(_f(86) & _f(40) => _f(94));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.6,(_f(86) & _f(38) => _f(93));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.5,(_f(86) & _f(36) => _f(92));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.4,(_f(86) & _f(34) => _f(91));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.3,(_f(86) & _f(32) => _f(90));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.2,(_f(86) & _f(30) => _f(89));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(85) & q_queueDelete.1,(_f(86) & _f(87) => _f(88));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.26,(_f(29) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.25,(_f(29) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.24,(_f(29) & _f(79) => _f(80));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.23,(_f(29) & _f(77) => _f(78));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.22,(_f(75) & _f(76) => _f(68));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.21,(_f(72) & _f(73) => _f(74));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.20,(_f(69) & _f(70) => _f(71));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.19,(_f(66) & _f(67) => _f(68));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.18,(_f(29) & _f(64) => _f(65));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.17,(_f(29) & _f(62) => _f(63));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.16,(_f(29) & _f(60) => _f(61));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.15,(_f(29) & _f(57) => _f(59));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.14,(_f(29) & _f(57) => _f(58));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.13,(_f(29) & _f(55) => _f(56));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.12,(_f(29) & _f(52) => _f(54));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.11,(_f(29) & _f(52) => _f(53));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.10,(_f(49) & _f(50) => _f(51));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.9,(_f(46) & _f(47) => _f(48));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.8,(_f(29) & _f(44) => _f(45));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.7,(_f(29) & _f(42) => _f(43));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.6,(_f(29) & _f(40) => _f(41));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.5,(_f(29) & _f(38) => _f(39));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.4,(_f(29) & _f(36) => _f(37));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.3,(_f(29) & _f(34) => _f(35));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.2,(_f(29) & _f(32) => _f(33));
  _f(1) & _f(2) & _f(15) & _f(27) & _f(28) & q_queueCreate.1,(_f(29) & _f(30) => _f(31));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.4,(_f(22) & _f(25) => _f(26));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.3,(_f(22) & _f(23) => _f(24));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.2,(_f(19) & _f(20) => _f(21));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.1,(_f(16) & _f(17) => _f(18));
  _f(1) & _f(2) & Initialisation.6,(_f(13) => _f(14));
  _f(1) & _f(2) & Initialisation.5,(_f(11) => _f(12));
  _f(1) & _f(2) & Initialisation.4,(_f(9) => _f(10));
  _f(1) & _f(2) & Initialisation.3,(_f(7) => _f(8));
  _f(1) & _f(2) & Initialisation.2,(_f(5) => _f(6));
  _f(1) & _f(2) & Initialisation.1,(_f(3) => _f(4))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & BIT = 0..1 & MAX_DELAY: 0..2147483647 & 1<=MAX_DELAY & NULL_PARAMETER: PARAMETER & PRIORITY: POW(NAT) & TICK: POW(NAT) & TICK = 0..MAX_DELAY & TICK_INCREMENT: TICK*TICK +-> TICK & dom(TICK_INCREMENT) = TICK*TICK & TICK_INCREMENT = %(tick,inc).(tick: TICK & inc: TICK | (tick+inc) mod MAX_DELAY) & QUEUE_NULL: QUEUE & ITEM_NULL: ITEM & ITEM_EMPTY: ITEM & TASK_NULL: TASK & REMOVE_EVENT: TASK*POW(QUEUE)*(QUEUE +-> POW(TASK)) +-> (QUEUE +-> POW(TASK)) & REMOVE_EVENT = %(task,queues,pending).(task: TASK & queues: POW(QUEUE) & pending: QUEUE +-> POW(TASK) | %queue.(queue: queues & queue: dom(pending) | pending(queue)-{task})) & semGIVE_BLOCK_TIME: TICK & IDLE_PRIORITY: PRIORITY & IDLE_PRIORITY = 0 & QUEUE_LENGTH: POW(NAT) & QUEUE_LENGTH = 1..2147483647 & QUEUE_QUANT: POW(NAT) & QUEUE_QUANT = 0..2147483647 & NAME: FIN(INTEGER) & not(NAME = {}) & PARAMETER: FIN(INTEGER) & not(PARAMETER = {}) & TASK: FIN(INTEGER) & not(TASK = {}) & STACK: FIN(INTEGER) & not(STACK = {}) & TASK_CODE: FIN(INTEGER) & not(TASK_CODE = {}) & ITEM: FIN(INTEGER) & not(ITEM = {}) & QUEUE: FIN(INTEGER) & not(QUEUE = {}) & (1..3)*{SCHEDULER_STATE}: FIN(NATURAL*{SCHEDULER_STATE}) & not((1..3)*{SCHEDULER_STATE} = {}) & (1..2)*{COPY_POSITION}: FIN(NATURAL*{COPY_POSITION}) & not((1..2)*{COPY_POSITION} = {}) & (1..3)*{QUEUE_TYPE}: FIN(NATURAL*{QUEUE_TYPE}) & not((1..3)*{QUEUE_TYPE} = {}) & (1..10)*{ERROR_DEFINITION}: FIN(NATURAL*{ERROR_DEFINITION}) & not((1..10)*{ERROR_DEFINITION} = {}) & "`Component properties'" & remove_task: (QUEUE +-> POW(TASK))*POW(TASK) +-> (QUEUE +-> POW(TASK)) & dom(remove_task) = (QUEUE +-> POW(TASK))*POW(TASK) & remove_task = %(q_task,unblocked).(q_task: QUEUE +-> POW(TASK) & unblocked: POW(TASK) | %q1.(q1: QUEUE & q1: dom(q_task) | q_task(q1)-unblocked)) & update_first: (QUEUE +-> POW(TASK))*POW(TASK) +-> (QUEUE +-> TASK) & dom(update_first) = (QUEUE +-> POW(TASK))*POW(TASK) & update_first = %(q_task,unblocked).(q_task: QUEUE +-> POW(TASK) & unblocked: POW(TASK) | SET(q1,task).(q1: QUEUE & q1: dom(q_task) & not(q_task(q1): POW(unblocked)) & task: TASK & (task: q_task(q1) & not(task: unblocked)))));
  ("`Seen and used machines assertions'" & BIT: POW(NATURAL) & QUEUE_LENGTH: POW(QUEUE_QUANT));
  "`Check that the invariant (queues: POW(QUEUE)) is established by the initialisation - ref 3.3'";
  ({}: POW(QUEUE));
  "`Check that the invariant (queue_receiving: QUEUE +-> POW(TASK)) is established by the initialisation - ref 3.3'";
  ({}: QUEUE +-> POW(TASK));
  "`Check that the invariant (queues = dom(queue_receiving)) is established by the initialisation - ref 3.3'";
  (dom({}) = {});
  "`Check that the invariant (first_receiving: QUEUE +-> TASK) is established by the initialisation - ref 3.3'";
  ({}: QUEUE +-> TASK);
  "`Check that the invariant (queues_msg <: queues) is established by the initialisation - ref 3.3'";
  ({}: POW({}));
  "`Check that the invariant (queue_items: QUEUE +-> POW(ITEM)) is established by the initialisation - ref 3.3'";
  ({}: QUEUE +-> POW(ITEM));
  ("`Component invariant'" & queues: POW(QUEUE) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & queues = dom(queue_receiving) & queues = dom(queue_sending) & first_receiving: QUEUE +-> TASK & first_sending: QUEUE +-> TASK & dom(first_receiving) = dom(queue_receiving) & dom(first_sending) = dom(queue_sending) & !q1.(q1: queues & q1: dom(first_receiving) & not(queue_receiving(q1) = {}) => first_receiving(q1): queue_receiving(q1)) & !q1.(q1: queues & q1: dom(first_sending) & not(queue_sending(q1) = {}) => first_sending(q1): queue_sending(q1)) & queues_msg: POW(queues) & queues_msg_full: POW(queues_msg) & queues_msg_empty: POW(queues_msg) & queues_msg_full/\queues_msg_empty = {} & queue_items: QUEUE +-> POW(ITEM) & queues_msg = dom(queue_items) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_receiving(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_sending(q1) => not(tk: queue_sending(q2))) & semaphores: POW(QUEUE) & semaphores: POW(queues) & semaphores_busy: POW(semaphores) & semaphores_full: POW(semaphores) & semaphores_busy/\semaphores_full = {} & mutexes: POW(queues) & mutex_holder: QUEUE +-> TASK & mutexes = dom(mutex_holder) & mutexes_busy: POW(mutexes) & !mt.(mt: mutexes_busy => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(mt: mutexes_busy) => mutex_holder(mt) = TASK_NULL) & queues_msg/\semaphores = {} & queues_msg/\mutexes = {} & mutexes/\semaphores = {});
  ("`Local hypotheses'" & que: queues_msg & que: queues_msg_empty);
  "`Check assertion (!que.(que: queues_msg & que: queues_msg_empty => que/:queues_msg_full)) deduction - ref 3.2, 4.2, 5.3'";
  (not(que: queues_msg_full));
  ("`Local hypotheses'" & que: queues_msg & que: queues_msg_full);
  "`Check assertion (!que.(que: queues_msg & que: queues_msg_full => que/:queues_msg_empty)) deduction - ref 3.2, 4.2, 5.3'";
  (not(que: queues_msg_empty));
  ("`Local hypotheses'" & que: QUEUE & not(que: queues));
  "`Check assertion (!que.(que: QUEUE & que/:queues => que/:semaphores)) deduction - ref 3.2, 4.2, 5.3'";
  (not(que: semaphores));
  "`Check assertion (!que.(que: QUEUE & que/:queues => que/:mutexes)) deduction - ref 3.2, 4.2, 5.3'";
  (not(que: mutexes));
  ("`Component assertions'" & !que.(que: QUEUE & not(que: queues) => not(que: mutexes)) & !que.(que: QUEUE & not(que: queues) => not(que: semaphores)) & !que.(que: queues_msg & que: queues_msg_full => not(que: queues_msg_empty)) & !que.(que: queues_msg & que: queues_msg_empty => not(que: queues_msg_full)));
  ("`q_queueCreate preconditions in this component'" & uxQueueLength: QUEUE_LENGTH & uxItemSize: INTEGER & 0<=uxItemSize & uxItemSize<=2147483647);
  ("`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues));
  "`Check that the invariant (queue_receiving: QUEUE +-> POW(TASK)) is preserved by the operation - ref 3.4'";
  (queue_receiving\/{pxQueue|->{}}: QUEUE +-> POW(TASK));
  "`Check that the invariant (queue_sending: QUEUE +-> POW(TASK)) is preserved by the operation - ref 3.4'";
  (queue_sending\/{pxQueue|->{}}: QUEUE +-> POW(TASK));
  "`Check that the invariant (queues = dom(queue_receiving)) is preserved by the operation - ref 3.4'";
  (queues\/{pxQueue} = dom(queue_receiving\/{pxQueue|->{}}));
  "`Check that the invariant (queues = dom(queue_sending)) is preserved by the operation - ref 3.4'";
  (queues\/{pxQueue} = dom(queue_sending\/{pxQueue|->{}}));
  "`Check that the invariant (first_receiving: QUEUE +-> TASK) is preserved by the operation - ref 3.4'";
  (first_receiving\/{pxQueue|->TASK_NULL}: QUEUE +-> TASK);
  "`Check that the invariant (first_sending: QUEUE +-> TASK) is preserved by the operation - ref 3.4'";
  (first_sending\/{pxQueue|->TASK_NULL}: QUEUE +-> TASK);
  "`Check that the invariant (dom(first_receiving) = dom(queue_receiving)) is preserved by the operation - ref 3.4'";
  (dom(first_receiving\/{pxQueue|->TASK_NULL}) = dom(queue_receiving\/{pxQueue|->{}}));
  "`Check that the invariant (dom(first_sending) = dom(queue_sending)) is preserved by the operation - ref 3.4'";
  (dom(first_sending\/{pxQueue|->TASK_NULL}) = dom(queue_sending\/{pxQueue|->{}}));
  ("`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues) & q1: queues\/{pxQueue} & q1: dom(first_receiving\/{pxQueue|->TASK_NULL}) & not((queue_receiving\/{pxQueue|->{}})(q1) = {}));
  "`Check that the invariant (!q1.(q1: queues & q1: dom(first_receiving) & queue_receiving(q1)/={} => first_receiving(q1): queue_receiving(q1))) is preserved by the operation - ref 3.4'";
  ((first_receiving\/{pxQueue|->TASK_NULL})(q1): (queue_receiving\/{pxQueue|->{}})(q1));
  ("`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues) & q1: queues\/{pxQueue} & q1: dom(first_sending\/{pxQueue|->TASK_NULL}) & not((queue_sending\/{pxQueue|->{}})(q1) = {}));
  "`Check that the invariant (!q1.(q1: queues & q1: dom(first_sending) & queue_sending(q1)/={} => first_sending(q1): queue_sending(q1))) is preserved by the operation - ref 3.4'";
  ((first_sending\/{pxQueue|->TASK_NULL})(q1): (queue_sending\/{pxQueue|->{}})(q1));
  "`Check that the invariant (queues_msg <: queues) is preserved by the operation - ref 3.4'";
  (pxQueue: queues\/{pxQueue});
  (queues_msg: POW(queues\/{pxQueue}));
  "`Check that the invariant (queues_msg_full <: queues_msg) is preserved by the operation - ref 3.4'";
  (queues_msg_full: POW(queues_msg\/{pxQueue}));
  "`Check that the invariant (queues_msg_empty <: queues_msg) is preserved by the operation - ref 3.4'";
  (pxQueue: queues_msg\/{pxQueue});
  (queues_msg_empty: POW(queues_msg\/{pxQueue}));
  "`Check that the invariant (queues_msg_full/\queues_msg_empty = {}) is preserved by the operation - ref 3.4'";
  (not(pxQueue: queues_msg_full));
  "`Check that the invariant (queue_items: QUEUE +-> POW(ITEM)) is preserved by the operation - ref 3.4'";
  (queue_items\/{pxQueue|->{}}: QUEUE +-> POW(ITEM));
  "`Check that the invariant (queues_msg = dom(queue_items)) is preserved by the operation - ref 3.4'";
  (queues_msg\/{pxQueue} = dom(queue_items\/{pxQueue|->{}}));
  ("`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues) & q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & tk: TASK & tk: (queue_receiving\/{pxQueue|->{}})(q1));
  "`Check that the invariant (!(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => tk/:queue_sending(q2))) is preserved by the operation - ref 3.4'";
  (not(tk: (queue_sending\/{pxQueue|->{}})(q2)));
  ("`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues) & q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & tk: TASK & tk: (queue_sending\/{pxQueue|->{}})(q2));
  "`Check that the invariant (!(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => tk/:queue_receiving(q1))) is preserved by the operation - ref 3.4'";
  (not(tk: (queue_receiving\/{pxQueue|->{}})(q1)));
  ("`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues) & q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & not(q1 = q2) & tk: TASK & tk: (queue_receiving\/{pxQueue|->{}})(q1));
  "`Check that the invariant (!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_receiving(q1) => tk/:queue_receiving(q2))) is preserved by the operation - ref 3.4'";
  (not(tk: (queue_receiving\/{pxQueue|->{}})(q2)));
  ("`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues) & q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & not(q1 = q2) & tk: TASK & tk: (queue_sending\/{pxQueue|->{}})(q1));
  "`Check that the invariant (!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_sending(q1) => tk/:queue_sending(q2))) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (semaphores <: queues) is preserved by the operation - ref 3.4'";
  (semaphores: POW(queues\/{pxQueue}));
  "`Check that the invariant (mutexes <: queues) is preserved by the operation - ref 3.4'";
  (mutexes: POW(queues\/{pxQueue}));
  "`Check that the invariant (queues_msg/\semaphores = {}) is preserved by the operation - ref 3.4'";
  (queues_msg\/{pxQueue}/\semaphores = {});
  "`Check that the invariant (queues_msg/\mutexes = {}) is preserved by the operation - ref 3.4'";
  (queues_msg\/{pxQueue}/\mutexes = {});
  ("`q_queueDelete preconditions in this component'" & pxQueue: queues & not(pxQueue: semaphores) & not(pxQueue: mutexes) & queue_receiving(pxQueue) = {} & queue_sending(pxQueue) = {});
  ("`Local hypotheses'" & pxQueue: queues_msg_full & pxQueue: queues_msg_empty);
  "`Check that the invariant (queues: POW(QUEUE)) is preserved by the operation - ref 3.4'";
  (queues-{pxQueue}: POW(QUEUE));
  ({pxQueue}<<|queue_receiving: QUEUE +-> POW(TASK));
  ({pxQueue}<<|queue_sending: QUEUE +-> POW(TASK));
  (queues-{pxQueue} = dom({pxQueue}<<|queue_receiving));
  (queues-{pxQueue} = dom({pxQueue}<<|queue_sending));
  ({pxQueue}<<|first_receiving: QUEUE +-> TASK);
  ({pxQueue}<<|first_sending: QUEUE +-> TASK);
  (dom({pxQueue}<<|first_receiving) = dom({pxQueue}<<|queue_receiving));
  (dom({pxQueue}<<|first_sending) = dom({pxQueue}<<|queue_sending));
  ("`Local hypotheses'" & pxQueue: queues_msg_full & pxQueue: queues_msg_empty & q1: queues & not(q1 = pxQueue) & q1: dom({pxQueue}<<|first_receiving) & not(({pxQueue}<<|queue_receiving)(q1) = {}));
  (({pxQueue}<<|first_receiving)(q1): ({pxQueue}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & pxQueue: queues_msg_full & pxQueue: queues_msg_empty & q1: queues & not(q1 = pxQueue) & q1: dom({pxQueue}<<|first_sending) & not(({pxQueue}<<|queue_sending)(q1) = {}));
  (({pxQueue}<<|first_sending)(q1): ({pxQueue}<<|queue_sending)(q1));
  (queues_msg-{pxQueue}: POW(queues-{pxQueue}));
  (queues_msg_full-{pxQueue}: POW(queues_msg-{pxQueue}));
  (queues_msg_empty-{pxQueue}: POW(queues_msg-{pxQueue}));
  (queues_msg_full-{pxQueue}/\queues_msg_empty-{pxQueue} = {});
  ({pxQueue}<<|queue_items: QUEUE +-> POW(ITEM));
  (queues_msg-{pxQueue} = dom({pxQueue}<<|queue_items));
  ("`Local hypotheses'" & pxQueue: queues_msg_full & pxQueue: queues_msg_empty & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  (not(tk: ({pxQueue}<<|queue_sending)(q2)));
  ("`Local hypotheses'" & pxQueue: queues_msg_full & pxQueue: queues_msg_empty & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2));
  (not(tk: ({pxQueue}<<|queue_receiving)(q1)));
  ("`Local hypotheses'" & pxQueue: queues_msg_full & pxQueue: queues_msg_empty & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  (not(tk: ({pxQueue}<<|queue_receiving)(q2)));
  ("`Local hypotheses'" & pxQueue: queues_msg_full & pxQueue: queues_msg_empty & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1));
  (semaphores: POW(queues-{pxQueue}));
  (mutexes: POW(queues-{pxQueue}));
  (queues_msg-{pxQueue}/\semaphores = {});
  (queues_msg-{pxQueue}/\mutexes = {});
  ("`Local hypotheses'" & pxQueue: queues_msg_full & not(pxQueue: queues_msg_empty));
  ("`Local hypotheses'" & pxQueue: queues_msg_full & not(pxQueue: queues_msg_empty) & q1: queues & not(q1 = pxQueue) & q1: dom({pxQueue}<<|first_receiving) & not(({pxQueue}<<|queue_receiving)(q1) = {}));
  ("`Local hypotheses'" & pxQueue: queues_msg_full & not(pxQueue: queues_msg_empty) & q1: queues & not(q1 = pxQueue) & q1: dom({pxQueue}<<|first_sending) & not(({pxQueue}<<|queue_sending)(q1) = {}));
  (queues_msg_empty: POW(queues_msg-{pxQueue}));
  (queues_msg_full-{pxQueue}/\queues_msg_empty = {});
  ("`Local hypotheses'" & pxQueue: queues_msg_full & not(pxQueue: queues_msg_empty) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & pxQueue: queues_msg_full & not(pxQueue: queues_msg_empty) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2));
  ("`Local hypotheses'" & pxQueue: queues_msg_full & not(pxQueue: queues_msg_empty) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & pxQueue: queues_msg_full & not(pxQueue: queues_msg_empty) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & pxQueue: queues_msg_empty);
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & pxQueue: queues_msg_empty & q1: queues & not(q1 = pxQueue) & q1: dom({pxQueue}<<|first_receiving) & not(({pxQueue}<<|queue_receiving)(q1) = {}));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & pxQueue: queues_msg_empty & q1: queues & not(q1 = pxQueue) & q1: dom({pxQueue}<<|first_sending) & not(({pxQueue}<<|queue_sending)(q1) = {}));
  (queues_msg_full: POW(queues_msg-{pxQueue}));
  (queues_msg_full/\queues_msg_empty-{pxQueue} = {});
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & pxQueue: queues_msg_empty & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & pxQueue: queues_msg_empty & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & pxQueue: queues_msg_empty & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & pxQueue: queues_msg_empty & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(pxQueue: queues_msg_empty));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(pxQueue: queues_msg_empty) & q1: queues & not(q1 = pxQueue) & q1: dom({pxQueue}<<|first_receiving) & not(({pxQueue}<<|queue_receiving)(q1) = {}));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(pxQueue: queues_msg_empty) & q1: queues & not(q1 = pxQueue) & q1: dom({pxQueue}<<|first_sending) & not(({pxQueue}<<|queue_sending)(q1) = {}));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(pxQueue: queues_msg_empty) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(pxQueue: queues_msg_empty) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(pxQueue: queues_msg_empty) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(pxQueue: queues_msg_empty) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1));
  ("`q_sendItem preconditions in this component'" & pxQueue: queues_msg & pxItem: ITEM & not(pxItem: queue_items(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full));
  ("`Local hypotheses'" & pxQueue: queues_msg_empty & not(queue_receiving(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving(pxQueue)-{first_receiving(pxQueue)} & n_first: n_receiving);
  (queue_receiving<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK));
  (queues = dom(queue_receiving<+{pxQueue|->n_receiving}));
  (first_receiving<+{pxQueue|->n_first}: QUEUE +-> TASK);
  (dom(first_receiving<+{pxQueue|->n_first}) = dom(queue_receiving<+{pxQueue|->n_receiving}));
  ("`Local hypotheses'" & pxQueue: queues_msg_empty & not(queue_receiving(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving(pxQueue)-{first_receiving(pxQueue)} & n_first: n_receiving & q1: queues & q1: dom(first_receiving<+{pxQueue|->n_first}) & not((queue_receiving<+{pxQueue|->n_receiving})(q1) = {}));
  ((first_receiving<+{pxQueue|->n_first})(q1): (queue_receiving<+{pxQueue|->n_receiving})(q1));
  (queues_msg_empty-{pxQueue}: POW(queues_msg));
  (queues_msg_full\/{pxQueue}/\queues_msg_empty-{pxQueue} = {});
  (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pxItem})}: QUEUE +-> POW(ITEM));
  (queues_msg = dom(queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pxItem})}));
  ("`Local hypotheses'" & pxQueue: queues_msg_empty & not(queue_receiving(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving(pxQueue)-{first_receiving(pxQueue)} & n_first: n_receiving & q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->n_receiving})(q1));
  (not(tk: queue_sending(q2)));
  ("`Local hypotheses'" & pxQueue: queues_msg_empty & not(queue_receiving(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving(pxQueue)-{first_receiving(pxQueue)} & n_first: n_receiving & q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2));
  (not(tk: (queue_receiving<+{pxQueue|->n_receiving})(q1)));
  ("`Local hypotheses'" & pxQueue: queues_msg_empty & not(queue_receiving(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving(pxQueue)-{first_receiving(pxQueue)} & n_first: n_receiving & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->n_receiving})(q1));
  (not(tk: (queue_receiving<+{pxQueue|->n_receiving})(q2)));
  ("`Local hypotheses'" & pxQueue: queues_msg_empty & queue_receiving(pxQueue) = {});
  ("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & not(queue_receiving(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving(pxQueue)-{first_receiving(pxQueue)} & n_first: n_receiving);
  ("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & not(queue_receiving(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving(pxQueue)-{first_receiving(pxQueue)} & n_first: n_receiving & q1: queues & q1: dom(first_receiving<+{pxQueue|->n_first}) & not((queue_receiving<+{pxQueue|->n_receiving})(q1) = {}));
  (queues_msg_full\/{pxQueue}/\queues_msg_empty = {});
  ("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & not(queue_receiving(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving(pxQueue)-{first_receiving(pxQueue)} & n_first: n_receiving & q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->n_receiving})(q1));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & not(queue_receiving(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving(pxQueue)-{first_receiving(pxQueue)} & n_first: n_receiving & q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & not(queue_receiving(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving(pxQueue)-{first_receiving(pxQueue)} & n_first: n_receiving & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->n_receiving})(q1));
  ("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & queue_receiving(pxQueue) = {});
  ("`q_receivedItem preconditions in this component'" & pxQueue: queues_msg & justPeeking: BOOL & not(pxQueue: queues_msg_empty));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending(pxQueue)-{first_sending(pxQueue)} & n_first: n_sending & pxQueue: queues_msg_full);
  (queue_sending<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK));
  (queues = dom(queue_sending<+{pxQueue|->n_sending}));
  (first_sending<+{pxQueue|->n_first}: QUEUE +-> TASK);
  (dom(first_sending<+{pxQueue|->n_first}) = dom(queue_sending<+{pxQueue|->n_sending}));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending(pxQueue)-{first_sending(pxQueue)} & n_first: n_sending & pxQueue: queues_msg_full & q1: queues & q1: dom(first_sending<+{pxQueue|->n_first}) & not((queue_sending<+{pxQueue|->n_sending})(q1) = {}));
  ((first_sending<+{pxQueue|->n_first})(q1): (queue_sending<+{pxQueue|->n_sending})(q1));
  (queues_msg_full-{pxQueue}: POW(queues_msg));
  (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}: QUEUE +-> POW(ITEM));
  (queues_msg = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending(pxQueue)-{first_sending(pxQueue)} & n_first: n_sending & pxQueue: queues_msg_full & q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1));
  (not(tk: (queue_sending<+{pxQueue|->n_sending})(q2)));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending(pxQueue)-{first_sending(pxQueue)} & n_first: n_sending & pxQueue: queues_msg_full & q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->n_sending})(q2));
  (not(tk: queue_receiving(q1)));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending(pxQueue)-{first_sending(pxQueue)} & n_first: n_sending & pxQueue: queues_msg_full & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->n_sending})(q1));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending(pxQueue)-{first_sending(pxQueue)} & n_first: n_sending & not(pxQueue: queues_msg_full));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending(pxQueue)-{first_sending(pxQueue)} & n_first: n_sending & not(pxQueue: queues_msg_full) & q1: queues & q1: dom(first_sending<+{pxQueue|->n_first}) & not((queue_sending<+{pxQueue|->n_sending})(q1) = {}));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending(pxQueue)-{first_sending(pxQueue)} & n_first: n_sending & not(pxQueue: queues_msg_full) & q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending(pxQueue)-{first_sending(pxQueue)} & n_first: n_sending & not(pxQueue: queues_msg_full) & q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->n_sending})(q2));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending(pxQueue)-{first_sending(pxQueue)} & n_first: n_sending & not(pxQueue: queues_msg_full) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->n_sending})(q1));
  ("`q_insertTaskWaitingToSend preconditions in this component'" & pxQueue: queues & pxTask: TASK & !q1.(q1: queues => not(pxTask: queue_sending(q1)) & not(pxTask: queue_receiving(q1))));
  ("`Local hypotheses'" & queue_sending(pxQueue) = {});
  (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})}: QUEUE +-> POW(TASK));
  (queues = dom(queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})}));
  (first_sending<+{pxQueue|->pxTask}: QUEUE +-> TASK);
  (dom(first_sending<+{pxQueue|->pxTask}) = dom(queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})}));
  ("`Local hypotheses'" & queue_sending(pxQueue) = {} & q1: queues & q1: dom(first_sending<+{pxQueue|->pxTask}) & not((queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})})(q1) = {}));
  ((first_sending<+{pxQueue|->pxTask})(q1): (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})})(q1));
  ("`Local hypotheses'" & queue_sending(pxQueue) = {} & q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1));
  (not(tk: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})})(q2)));
  ("`Local hypotheses'" & queue_sending(pxQueue) = {} & q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})})(q2));
  ("`Local hypotheses'" & queue_sending(pxQueue) = {} & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})})(q1));
  ("`Local hypotheses'" & not(queue_sending(pxQueue) = {}));
  (dom(first_sending) = dom(queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})}));
  ("`Local hypotheses'" & not(queue_sending(pxQueue) = {}) & q1: queues & q1: dom(first_sending) & not((queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})})(q1) = {}));
  (first_sending(q1): (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})})(q1));
  ("`Local hypotheses'" & not(queue_sending(pxQueue) = {}) & q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1));
  ("`Local hypotheses'" & not(queue_sending(pxQueue) = {}) & q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})})(q2));
  ("`Local hypotheses'" & not(queue_sending(pxQueue) = {}) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})})(q1));
  ("`q_insertTaskWaitingToReceive preconditions in this component'" & pxQueue: queues & pxTask: TASK & !q1.(q1: queues => not(pxTask: queue_sending(q1)) & not(pxTask: queue_receiving(q1))));
  ("`Local hypotheses'" & queue_receiving(pxQueue) = {});
  (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})}: QUEUE +-> POW(TASK));
  (queues = dom(queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})}));
  (first_receiving<+{pxQueue|->pxTask}: QUEUE +-> TASK);
  (dom(first_receiving<+{pxQueue|->pxTask}) = dom(queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})}));
  ("`Local hypotheses'" & queue_receiving(pxQueue) = {} & q1: queues & q1: dom(first_receiving<+{pxQueue|->pxTask}) & not((queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})})(q1) = {}));
  ((first_receiving<+{pxQueue|->pxTask})(q1): (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})})(q1));
  ("`Local hypotheses'" & queue_receiving(pxQueue) = {} & q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})})(q1));
  ("`Local hypotheses'" & queue_receiving(pxQueue) = {} & q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2));
  (not(tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})})(q1)));
  ("`Local hypotheses'" & queue_receiving(pxQueue) = {} & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})})(q1));
  (not(tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})})(q2)));
  ("`Local hypotheses'" & not(queue_receiving(pxQueue) = {}));
  (dom(first_receiving) = dom(queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})}));
  ("`Local hypotheses'" & not(queue_receiving(pxQueue) = {}) & q1: queues & q1: dom(first_receiving) & not((queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})})(q1) = {}));
  (first_receiving(q1): (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})})(q1));
  ("`Local hypotheses'" & not(queue_receiving(pxQueue) = {}) & q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})})(q1));
  ("`Local hypotheses'" & not(queue_receiving(pxQueue) = {}) & q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2));
  ("`Local hypotheses'" & not(queue_receiving(pxQueue) = {}) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})})(q1));
  ("`q_removeFromEventListQueue preconditions in this component'" & task: TASK);
  ("`Local hypotheses'" & pxQueue: queues & n_sending: POW(TASK) & n_first: TASK & task: queue_sending(pxQueue) & n_sending = queue_sending(pxQueue)-{first_sending(pxQueue)} & n_first = first_sending(pxQueue) & pxQueue$0: queues & task: queue_receiving(pxQueue$0) & n_receiving: POW(TASK) & n_receiving = queue_receiving(pxQueue$0)-{first_receiving(pxQueue$0)} & n_first$0: TASK & n_first$0: queue_receiving(pxQueue$0));
  (queue_receiving<+{pxQueue$0|->n_receiving}: QUEUE +-> POW(TASK));
  (queues = dom(queue_receiving<+{pxQueue$0|->n_receiving}));
  (first_receiving<+{pxQueue$0|->n_first$0}: QUEUE +-> TASK);
  (dom(first_receiving<+{pxQueue$0|->n_first$0}) = dom(queue_receiving<+{pxQueue$0|->n_receiving}));
  ("`Local hypotheses'" & pxQueue: queues & n_sending: POW(TASK) & n_first: TASK & task: queue_sending(pxQueue) & n_sending = queue_sending(pxQueue)-{first_sending(pxQueue)} & n_first = first_sending(pxQueue) & pxQueue$0: queues & task: queue_receiving(pxQueue$0) & n_receiving: POW(TASK) & n_receiving = queue_receiving(pxQueue$0)-{first_receiving(pxQueue$0)} & n_first$0: TASK & n_first$0: queue_receiving(pxQueue$0) & q1: queues & q1: dom(first_receiving<+{pxQueue$0|->n_first$0}) & not((queue_receiving<+{pxQueue$0|->n_receiving})(q1) = {}));
  ((first_receiving<+{pxQueue$0|->n_first$0})(q1): (queue_receiving<+{pxQueue$0|->n_receiving})(q1));
  ("`Local hypotheses'" & pxQueue: queues & n_sending: POW(TASK) & n_first: TASK & task: queue_sending(pxQueue) & n_sending = queue_sending(pxQueue)-{first_sending(pxQueue)} & n_first = first_sending(pxQueue) & pxQueue$0: queues & task: queue_receiving(pxQueue$0) & n_receiving: POW(TASK) & n_receiving = queue_receiving(pxQueue$0)-{first_receiving(pxQueue$0)} & n_first$0: TASK & n_first$0: queue_receiving(pxQueue$0) & q1: queues & q1: dom(first_sending<+{pxQueue|->n_first}) & not((queue_sending<+{pxQueue|->n_sending})(q1) = {}));
  ("`Local hypotheses'" & pxQueue: queues & n_sending: POW(TASK) & n_first: TASK & task: queue_sending(pxQueue) & n_sending = queue_sending(pxQueue)-{first_sending(pxQueue)} & n_first = first_sending(pxQueue) & pxQueue$0: queues & task: queue_receiving(pxQueue$0) & n_receiving: POW(TASK) & n_receiving = queue_receiving(pxQueue$0)-{first_receiving(pxQueue$0)} & n_first$0: TASK & n_first$0: queue_receiving(pxQueue$0) & q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue$0|->n_receiving})(q1));
  ("`Local hypotheses'" & pxQueue: queues & n_sending: POW(TASK) & n_first: TASK & task: queue_sending(pxQueue) & n_sending = queue_sending(pxQueue)-{first_sending(pxQueue)} & n_first = first_sending(pxQueue) & pxQueue$0: queues & task: queue_receiving(pxQueue$0) & n_receiving: POW(TASK) & n_receiving = queue_receiving(pxQueue$0)-{first_receiving(pxQueue$0)} & n_first$0: TASK & n_first$0: queue_receiving(pxQueue$0) & q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->n_sending})(q2));
  (not(tk: (queue_receiving<+{pxQueue$0|->n_receiving})(q1)));
  ("`Local hypotheses'" & pxQueue: queues & n_sending: POW(TASK) & n_first: TASK & task: queue_sending(pxQueue) & n_sending = queue_sending(pxQueue)-{first_sending(pxQueue)} & n_first = first_sending(pxQueue) & pxQueue$0: queues & task: queue_receiving(pxQueue$0) & n_receiving: POW(TASK) & n_receiving = queue_receiving(pxQueue$0)-{first_receiving(pxQueue$0)} & n_first$0: TASK & n_first$0: queue_receiving(pxQueue$0) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue$0|->n_receiving})(q1));
  (not(tk: (queue_receiving<+{pxQueue$0|->n_receiving})(q2)));
  ("`Local hypotheses'" & pxQueue: queues & n_sending: POW(TASK) & n_first: TASK & task: queue_sending(pxQueue) & n_sending = queue_sending(pxQueue)-{first_sending(pxQueue)} & n_first = first_sending(pxQueue) & pxQueue$0: queues & task: queue_receiving(pxQueue$0) & n_receiving: POW(TASK) & n_receiving = queue_receiving(pxQueue$0)-{first_receiving(pxQueue$0)} & n_first$0: TASK & n_first$0: queue_receiving(pxQueue$0) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->n_sending})(q1));
  ("`q_createSemaphore preconditions in this component'" & maxCount: QUEUE_LENGTH & initialCount: QUEUE_QUANT & initialCount<=maxCount);
  ("`Local hypotheses'" & semaphore: QUEUE & not(semaphore: queues));
  (queue_receiving\/{semaphore|->{}}: QUEUE +-> POW(TASK));
  (queue_sending\/{semaphore|->{}}: QUEUE +-> POW(TASK));
  (queues\/{semaphore} = dom(queue_receiving\/{semaphore|->{}}));
  (queues\/{semaphore} = dom(queue_sending\/{semaphore|->{}}));
  (first_receiving\/{semaphore|->TASK_NULL}: QUEUE +-> TASK);
  (first_sending\/{semaphore|->TASK_NULL}: QUEUE +-> TASK);
  (dom(first_receiving\/{semaphore|->TASK_NULL}) = dom(queue_receiving\/{semaphore|->{}}));
  (dom(first_sending\/{semaphore|->TASK_NULL}) = dom(queue_sending\/{semaphore|->{}}));
  ("`Local hypotheses'" & semaphore: QUEUE & not(semaphore: queues) & q1: queues\/{semaphore} & q1: dom(first_receiving\/{semaphore|->TASK_NULL}) & not((queue_receiving\/{semaphore|->{}})(q1) = {}));
  ((first_receiving\/{semaphore|->TASK_NULL})(q1): (queue_receiving\/{semaphore|->{}})(q1));
  ("`Local hypotheses'" & semaphore: QUEUE & not(semaphore: queues) & q1: queues\/{semaphore} & q1: dom(first_sending\/{semaphore|->TASK_NULL}) & not((queue_sending\/{semaphore|->{}})(q1) = {}));
  ((first_sending\/{semaphore|->TASK_NULL})(q1): (queue_sending\/{semaphore|->{}})(q1));
  (queues_msg: POW(queues\/{semaphore}));
  ("`Local hypotheses'" & semaphore: QUEUE & not(semaphore: queues) & q1: queues\/{semaphore} & q2: queues\/{semaphore} & tk: TASK & tk: (queue_receiving\/{semaphore|->{}})(q1));
  (not(tk: (queue_sending\/{semaphore|->{}})(q2)));
  ("`Local hypotheses'" & semaphore: QUEUE & not(semaphore: queues) & q1: queues\/{semaphore} & q2: queues\/{semaphore} & tk: TASK & tk: (queue_sending\/{semaphore|->{}})(q2));
  (not(tk: (queue_receiving\/{semaphore|->{}})(q1)));
  ("`Local hypotheses'" & semaphore: QUEUE & not(semaphore: queues) & q1: queues\/{semaphore} & q2: queues\/{semaphore} & not(q1 = q2) & tk: TASK & tk: (queue_receiving\/{semaphore|->{}})(q1));
  (not(tk: (queue_receiving\/{semaphore|->{}})(q2)));
  ("`Local hypotheses'" & semaphore: QUEUE & not(semaphore: queues) & q1: queues\/{semaphore} & q2: queues\/{semaphore} & not(q1 = q2) & tk: TASK & tk: (queue_sending\/{semaphore|->{}})(q1));
  (semaphore: queues\/{semaphore});
  (semaphores: POW(queues\/{semaphore}));
  "`Check that the invariant (semaphores_busy <: semaphores) is preserved by the operation - ref 3.4'";
  (semaphore: semaphores\/{semaphore});
  (semaphores_busy: POW(semaphores\/{semaphore}));
  "`Check that the invariant (semaphores_full <: semaphores) is preserved by the operation - ref 3.4'";
  (semaphores_full: POW(semaphores\/{semaphore}));
  "`Check that the invariant (semaphores_busy/\semaphores_full = {}) is preserved by the operation - ref 3.4'";
  (semaphores_busy\/{semaphore}/\semaphores_full = {});
  (mutexes: POW(queues\/{semaphore}));
  (not(semaphore: queues_msg));
  "`Check that the invariant (mutexes/\semaphores = {}) is preserved by the operation - ref 3.4'";
  (not(semaphore: mutexes));
  (not(semaphore: semaphores_busy));
  ("`q_deleteSemaphore preconditions in this component'" & semaphore: semaphores);
  ("`Local hypotheses'" & semaphore: semaphores_busy & semaphore: semaphores_full);
  (queues-{semaphore}: POW(QUEUE));
  ({semaphore}<<|queue_receiving: QUEUE +-> POW(TASK));
  ({semaphore}<<|queue_sending: QUEUE +-> POW(TASK));
  (queues-{semaphore} = dom({semaphore}<<|queue_receiving));
  (queues-{semaphore} = dom({semaphore}<<|queue_sending));
  ({semaphore}<<|first_receiving: QUEUE +-> TASK);
  ({semaphore}<<|first_sending: QUEUE +-> TASK);
  (dom({semaphore}<<|first_receiving) = dom({semaphore}<<|queue_receiving));
  (dom({semaphore}<<|first_sending) = dom({semaphore}<<|queue_sending));
  ("`Local hypotheses'" & semaphore: semaphores_busy & semaphore: semaphores_full & q1: queues & not(q1 = semaphore) & q1: dom({semaphore}<<|first_receiving) & not(({semaphore}<<|queue_receiving)(q1) = {}));
  (({semaphore}<<|first_receiving)(q1): ({semaphore}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & semaphore: semaphores_busy & semaphore: semaphores_full & q1: queues & not(q1 = semaphore) & q1: dom({semaphore}<<|first_sending) & not(({semaphore}<<|queue_sending)(q1) = {}));
  (({semaphore}<<|first_sending)(q1): ({semaphore}<<|queue_sending)(q1));
  (queues_msg: POW(queues-{semaphore}));
  ("`Local hypotheses'" & semaphore: semaphores_busy & semaphore: semaphores_full & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & tk: TASK & tk: ({semaphore}<<|queue_receiving)(q1));
  (not(tk: ({semaphore}<<|queue_sending)(q2)));
  ("`Local hypotheses'" & semaphore: semaphores_busy & semaphore: semaphores_full & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & tk: TASK & tk: ({semaphore}<<|queue_sending)(q2));
  (not(tk: ({semaphore}<<|queue_receiving)(q1)));
  ("`Local hypotheses'" & semaphore: semaphores_busy & semaphore: semaphores_full & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & not(q1 = q2) & tk: TASK & tk: ({semaphore}<<|queue_receiving)(q1));
  (not(tk: ({semaphore}<<|queue_receiving)(q2)));
  ("`Local hypotheses'" & semaphore: semaphores_busy & semaphore: semaphores_full & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & not(q1 = q2) & tk: TASK & tk: ({semaphore}<<|queue_sending)(q1));
  "`Check that the invariant (semaphores: POW(QUEUE)) is preserved by the operation - ref 3.4'";
  (semaphores-{semaphore}: POW(QUEUE));
  (semaphores-{semaphore}: POW(queues-{semaphore}));
  (semaphores_busy-{semaphore}: POW(semaphores-{semaphore}));
  (semaphores_full-{semaphore}: POW(semaphores-{semaphore}));
  (semaphores_busy-{semaphore}/\semaphores_full-{semaphore} = {});
  (mutexes: POW(queues-{semaphore}));
  (queues_msg/\semaphores-{semaphore} = {});
  (mutexes/\semaphores-{semaphore} = {});
  ("`Local hypotheses'" & semaphore: semaphores_busy & not(semaphore: semaphores_full));
  ("`Local hypotheses'" & semaphore: semaphores_busy & not(semaphore: semaphores_full) & q1: queues & not(q1 = semaphore) & q1: dom({semaphore}<<|first_receiving) & not(({semaphore}<<|queue_receiving)(q1) = {}));
  ("`Local hypotheses'" & semaphore: semaphores_busy & not(semaphore: semaphores_full) & q1: queues & not(q1 = semaphore) & q1: dom({semaphore}<<|first_sending) & not(({semaphore}<<|queue_sending)(q1) = {}));
  ("`Local hypotheses'" & semaphore: semaphores_busy & not(semaphore: semaphores_full) & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & tk: TASK & tk: ({semaphore}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & semaphore: semaphores_busy & not(semaphore: semaphores_full) & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & tk: TASK & tk: ({semaphore}<<|queue_sending)(q2));
  ("`Local hypotheses'" & semaphore: semaphores_busy & not(semaphore: semaphores_full) & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & not(q1 = q2) & tk: TASK & tk: ({semaphore}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & semaphore: semaphores_busy & not(semaphore: semaphores_full) & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & not(q1 = q2) & tk: TASK & tk: ({semaphore}<<|queue_sending)(q1));
  (semaphores_full: POW(semaphores-{semaphore}));
  (semaphores_busy-{semaphore}/\semaphores_full = {});
  ("`Local hypotheses'" & not(semaphore: semaphores_busy) & semaphore: semaphores_full);
  ("`Local hypotheses'" & not(semaphore: semaphores_busy) & semaphore: semaphores_full & q1: queues & not(q1 = semaphore) & q1: dom({semaphore}<<|first_receiving) & not(({semaphore}<<|queue_receiving)(q1) = {}));
  ("`Local hypotheses'" & not(semaphore: semaphores_busy) & semaphore: semaphores_full & q1: queues & not(q1 = semaphore) & q1: dom({semaphore}<<|first_sending) & not(({semaphore}<<|queue_sending)(q1) = {}));
  ("`Local hypotheses'" & not(semaphore: semaphores_busy) & semaphore: semaphores_full & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & tk: TASK & tk: ({semaphore}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & not(semaphore: semaphores_busy) & semaphore: semaphores_full & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & tk: TASK & tk: ({semaphore}<<|queue_sending)(q2));
  ("`Local hypotheses'" & not(semaphore: semaphores_busy) & semaphore: semaphores_full & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & not(q1 = q2) & tk: TASK & tk: ({semaphore}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & not(semaphore: semaphores_busy) & semaphore: semaphores_full & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & not(q1 = q2) & tk: TASK & tk: ({semaphore}<<|queue_sending)(q1));
  (semaphores_busy: POW(semaphores-{semaphore}));
  (semaphores_busy/\semaphores_full-{semaphore} = {});
  ("`Local hypotheses'" & not(semaphore: semaphores_busy) & not(semaphore: semaphores_full));
  ("`Local hypotheses'" & not(semaphore: semaphores_busy) & not(semaphore: semaphores_full) & q1: queues & not(q1 = semaphore) & q1: dom({semaphore}<<|first_receiving) & not(({semaphore}<<|queue_receiving)(q1) = {}));
  ("`Local hypotheses'" & not(semaphore: semaphores_busy) & not(semaphore: semaphores_full) & q1: queues & not(q1 = semaphore) & q1: dom({semaphore}<<|first_sending) & not(({semaphore}<<|queue_sending)(q1) = {}));
  ("`Local hypotheses'" & not(semaphore: semaphores_busy) & not(semaphore: semaphores_full) & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & tk: TASK & tk: ({semaphore}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & not(semaphore: semaphores_busy) & not(semaphore: semaphores_full) & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & tk: TASK & tk: ({semaphore}<<|queue_sending)(q2));
  ("`Local hypotheses'" & not(semaphore: semaphores_busy) & not(semaphore: semaphores_full) & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & not(q1 = q2) & tk: TASK & tk: ({semaphore}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & not(semaphore: semaphores_busy) & not(semaphore: semaphores_full) & q1: queues & not(q1 = semaphore) & q2: queues & not(q2 = semaphore) & not(q1 = q2) & tk: TASK & tk: ({semaphore}<<|queue_sending)(q1));
  ("`q_takeSemaphore preconditions in this component'" & semaphore: semaphores & not(semaphore: semaphores_busy));
  ("`Local hypotheses'" & n_sending: POW(TASK) & n_sending = queue_sending(semaphore)-{first_sending(semaphore)} & n_first: TASK & n_first: n_sending & semaphore: semaphores_full);
  (queue_sending<+{semaphore|->n_sending}: QUEUE +-> POW(TASK));
  (queues = dom(queue_sending<+{semaphore|->n_sending}));
  (first_sending<+{semaphore|->n_first}: QUEUE +-> TASK);
  (dom(first_sending<+{semaphore|->n_first}) = dom(queue_sending<+{semaphore|->n_sending}));
  ("`Local hypotheses'" & n_sending: POW(TASK) & n_sending = queue_sending(semaphore)-{first_sending(semaphore)} & n_first: TASK & n_first: n_sending & semaphore: semaphores_full & q1: queues & q1: dom(first_sending<+{semaphore|->n_first}) & not((queue_sending<+{semaphore|->n_sending})(q1) = {}));
  ((first_sending<+{semaphore|->n_first})(q1): (queue_sending<+{semaphore|->n_sending})(q1));
  ("`Local hypotheses'" & n_sending: POW(TASK) & n_sending = queue_sending(semaphore)-{first_sending(semaphore)} & n_first: TASK & n_first: n_sending & semaphore: semaphores_full & q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1));
  (not(tk: (queue_sending<+{semaphore|->n_sending})(q2)));
  ("`Local hypotheses'" & n_sending: POW(TASK) & n_sending = queue_sending(semaphore)-{first_sending(semaphore)} & n_first: TASK & n_first: n_sending & semaphore: semaphores_full & q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{semaphore|->n_sending})(q2));
  ("`Local hypotheses'" & n_sending: POW(TASK) & n_sending = queue_sending(semaphore)-{first_sending(semaphore)} & n_first: TASK & n_first: n_sending & semaphore: semaphores_full & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{semaphore|->n_sending})(q1));
  (semaphores_full-{semaphore}: POW(semaphores));
  ("`Local hypotheses'" & n_sending: POW(TASK) & n_sending = queue_sending(semaphore)-{first_sending(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full));
  ("`Local hypotheses'" & n_sending: POW(TASK) & n_sending = queue_sending(semaphore)-{first_sending(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full) & q1: queues & q1: dom(first_sending<+{semaphore|->n_first}) & not((queue_sending<+{semaphore|->n_sending})(q1) = {}));
  ("`Local hypotheses'" & n_sending: POW(TASK) & n_sending = queue_sending(semaphore)-{first_sending(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full) & q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1));
  ("`Local hypotheses'" & n_sending: POW(TASK) & n_sending = queue_sending(semaphore)-{first_sending(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full) & q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{semaphore|->n_sending})(q2));
  ("`Local hypotheses'" & n_sending: POW(TASK) & n_sending = queue_sending(semaphore)-{first_sending(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{semaphore|->n_sending})(q1));
  ("`q_giveSemaphore preconditions in this component'" & semaphore: semaphores);
  ("`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving(semaphore)-{first_receiving(semaphore)} & n_first: TASK & n_first: n_receiving & semaphore: semaphores_busy);
  (queue_receiving<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK));
  (queues = dom(queue_receiving<+{semaphore|->n_receiving}));
  (first_receiving<+{semaphore|->n_first}: QUEUE +-> TASK);
  (dom(first_receiving<+{semaphore|->n_first}) = dom(queue_receiving<+{semaphore|->n_receiving}));
  ("`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving(semaphore)-{first_receiving(semaphore)} & n_first: TASK & n_first: n_receiving & semaphore: semaphores_busy & q1: queues & q1: dom(first_receiving<+{semaphore|->n_first}) & not((queue_receiving<+{semaphore|->n_receiving})(q1) = {}));
  ((first_receiving<+{semaphore|->n_first})(q1): (queue_receiving<+{semaphore|->n_receiving})(q1));
  ("`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving(semaphore)-{first_receiving(semaphore)} & n_first: TASK & n_first: n_receiving & semaphore: semaphores_busy & q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{semaphore|->n_receiving})(q1));
  ("`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving(semaphore)-{first_receiving(semaphore)} & n_first: TASK & n_first: n_receiving & semaphore: semaphores_busy & q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2));
  (not(tk: (queue_receiving<+{semaphore|->n_receiving})(q1)));
  ("`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving(semaphore)-{first_receiving(semaphore)} & n_first: TASK & n_first: n_receiving & semaphore: semaphores_busy & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{semaphore|->n_receiving})(q1));
  (not(tk: (queue_receiving<+{semaphore|->n_receiving})(q2)));
  (semaphores_busy-{semaphore}: POW(semaphores));
  ("`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving(semaphore)-{first_receiving(semaphore)} & n_first: TASK & n_first: n_receiving & not(semaphore: semaphores_busy));
  ("`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving(semaphore)-{first_receiving(semaphore)} & n_first: TASK & n_first: n_receiving & not(semaphore: semaphores_busy) & q1: queues & q1: dom(first_receiving<+{semaphore|->n_first}) & not((queue_receiving<+{semaphore|->n_receiving})(q1) = {}));
  ("`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving(semaphore)-{first_receiving(semaphore)} & n_first: TASK & n_first: n_receiving & not(semaphore: semaphores_busy) & q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{semaphore|->n_receiving})(q1));
  ("`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving(semaphore)-{first_receiving(semaphore)} & n_first: TASK & n_first: n_receiving & not(semaphore: semaphores_busy) & q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2));
  ("`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving(semaphore)-{first_receiving(semaphore)} & n_first: TASK & n_first: n_receiving & not(semaphore: semaphores_busy) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{semaphore|->n_receiving})(q1));
  ("`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving(semaphore)-{first_receiving(semaphore)} & n_first: TASK & n_first: n_receiving);
  ("`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving(semaphore)-{first_receiving(semaphore)} & n_first: TASK & n_first: n_receiving & q1: queues & q1: dom(first_receiving<+{semaphore|->n_first}) & not((queue_receiving<+{semaphore|->n_receiving})(q1) = {}));
  ("`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving(semaphore)-{first_receiving(semaphore)} & n_first: TASK & n_first: n_receiving & q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{semaphore|->n_receiving})(q1));
  ("`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving(semaphore)-{first_receiving(semaphore)} & n_first: TASK & n_first: n_receiving & q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2));
  ("`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving(semaphore)-{first_receiving(semaphore)} & n_first: TASK & n_first: n_receiving & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{semaphore|->n_receiving})(q1));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues));
  (queue_receiving\/{mutex|->{}}: QUEUE +-> POW(TASK));
  (queue_sending\/{mutex|->{}}: QUEUE +-> POW(TASK));
  (queues\/{mutex} = dom(queue_receiving\/{mutex|->{}}));
  (queues\/{mutex} = dom(queue_sending\/{mutex|->{}}));
  (first_receiving\/{mutex|->TASK_NULL}: QUEUE +-> TASK);
  (first_sending\/{mutex|->TASK_NULL}: QUEUE +-> TASK);
  (dom(first_receiving\/{mutex|->TASK_NULL}) = dom(queue_receiving\/{mutex|->{}}));
  (dom(first_sending\/{mutex|->TASK_NULL}) = dom(queue_sending\/{mutex|->{}}));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & q1: queues\/{mutex} & q1: dom(first_receiving\/{mutex|->TASK_NULL}) & not((queue_receiving\/{mutex|->{}})(q1) = {}));
  ((first_receiving\/{mutex|->TASK_NULL})(q1): (queue_receiving\/{mutex|->{}})(q1));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & q1: queues\/{mutex} & q1: dom(first_sending\/{mutex|->TASK_NULL}) & not((queue_sending\/{mutex|->{}})(q1) = {}));
  ((first_sending\/{mutex|->TASK_NULL})(q1): (queue_sending\/{mutex|->{}})(q1));
  (queues_msg: POW(queues\/{mutex}));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & q1: queues\/{mutex} & q2: queues\/{mutex} & tk: TASK & tk: (queue_receiving\/{mutex|->{}})(q1));
  (not(tk: (queue_sending\/{mutex|->{}})(q2)));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & q1: queues\/{mutex} & q2: queues\/{mutex} & tk: TASK & tk: (queue_sending\/{mutex|->{}})(q2));
  (not(tk: (queue_receiving\/{mutex|->{}})(q1)));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & q1: queues\/{mutex} & q2: queues\/{mutex} & not(q1 = q2) & tk: TASK & tk: (queue_receiving\/{mutex|->{}})(q1));
  (not(tk: (queue_receiving\/{mutex|->{}})(q2)));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & q1: queues\/{mutex} & q2: queues\/{mutex} & not(q1 = q2) & tk: TASK & tk: (queue_sending\/{mutex|->{}})(q1));
  (semaphores: POW(queues\/{mutex}));
  (mutex: queues\/{mutex});
  (mutexes: POW(queues\/{mutex}));
  "`Check that the invariant (mutex_holder: QUEUE +-> TASK) is preserved by the operation - ref 3.4'";
  (mutex_holder\/{mutex|->TASK_NULL}: QUEUE +-> TASK);
  "`Check that the invariant (mutexes = dom(mutex_holder)) is preserved by the operation - ref 3.4'";
  (mutexes\/{mutex} = dom(mutex_holder\/{mutex|->TASK_NULL}));
  "`Check that the invariant (mutexes_busy <: mutexes) is preserved by the operation - ref 3.4'";
  (mutexes_busy: POW(mutexes\/{mutex}));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & mt: mutexes_busy);
  "`Check that the invariant (!mt.(mt: mutexes_busy => mutex_holder(mt)/=TASK_NULL)) is preserved by the operation - ref 3.4'";
  (not((mutex_holder\/{mutex|->TASK_NULL})(mt) = TASK_NULL));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & mt: mutexes\/{mutex} & not(mt: mutexes_busy));
  "`Check that the invariant (!mt.(mt: mutexes & mt/:mutexes_busy => mutex_holder(mt) = TASK_NULL)) is preserved by the operation - ref 3.4'";
  ((mutex_holder\/{mutex|->TASK_NULL})(mt) = TASK_NULL);
  (not(mutex: queues_msg));
  (mutexes\/{mutex}/\semaphores = {});
  ("`q_takeMutex preconditions in this component'" & mutex: mutexes & not(mutex: mutexes_busy) & task: TASK & not(task = TASK_NULL));
  (mutex_holder<+{mutex|->task}: QUEUE +-> TASK);
  (mutexes = dom(mutex_holder<+{mutex|->task}));
  ("`Local hypotheses'" & mt: mutexes_busy\/{mutex});
  (not((mutex_holder<+{mutex|->task})(mt) = TASK_NULL));
  ("`Local hypotheses'" & mt: mutexes & not(mt: mutexes_busy) & not(mt = mutex));
  ((mutex_holder<+{mutex|->task})(mt) = TASK_NULL);
  ("`q_giveMutex preconditions in this component'" & mutex: mutexes & mutex: mutexes_busy);
  ("`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving(mutex)-{first_receiving(mutex)} & n_first: TASK & n_first: n_receiving);
  (queue_receiving<+{mutex|->n_receiving}: QUEUE +-> POW(TASK));
  (queues = dom(queue_receiving<+{mutex|->n_receiving}));
  (first_receiving<+{mutex|->n_first}: QUEUE +-> TASK);
  (dom(first_receiving<+{mutex|->n_first}) = dom(queue_receiving<+{mutex|->n_receiving}));
  ("`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving(mutex)-{first_receiving(mutex)} & n_first: TASK & n_first: n_receiving & q1: queues & q1: dom(first_receiving<+{mutex|->n_first}) & not((queue_receiving<+{mutex|->n_receiving})(q1) = {}));
  ((first_receiving<+{mutex|->n_first})(q1): (queue_receiving<+{mutex|->n_receiving})(q1));
  ("`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving(mutex)-{first_receiving(mutex)} & n_first: TASK & n_first: n_receiving & q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{mutex|->n_receiving})(q1));
  ("`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving(mutex)-{first_receiving(mutex)} & n_first: TASK & n_first: n_receiving & q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2));
  (not(tk: (queue_receiving<+{mutex|->n_receiving})(q1)));
  ("`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving(mutex)-{first_receiving(mutex)} & n_first: TASK & n_first: n_receiving & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{mutex|->n_receiving})(q1));
  (not(tk: (queue_receiving<+{mutex|->n_receiving})(q2)));
  (mutex_holder<+{mutex|->TASK_NULL}: QUEUE +-> TASK);
  (mutexes = dom(mutex_holder<+{mutex|->TASK_NULL}));
  (mutexes_busy-{mutex}: POW(mutexes));
  ("`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving(mutex)-{first_receiving(mutex)} & n_first: TASK & n_first: n_receiving & mt: mutexes_busy & not(mt = mutex));
  (not((mutex_holder<+{mutex|->TASK_NULL})(mt) = TASK_NULL));
  ("`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving(mutex)-{first_receiving(mutex)} & n_first: TASK & n_first: n_receiving & mt: mutexes & not(mt: mutexes_busy & not(mt = mutex)));
  ((mutex_holder<+{mutex|->TASK_NULL})(mt) = TASK_NULL);
  ("`q_resumeAll preconditions in this component'" & unblocked: POW(TASK));
  ("`Local hypotheses'" & not(queue_receiving = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving) & n_receiving = remove_task(queue_receiving,unblocked) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving) & !q1.(q1: queues & q1: dom(n_first) & not(n_receiving(q1) = {}) => n_first(q1): n_receiving(q1)) & not(queue_sending = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending) & n_sending = remove_task(queue_sending,unblocked) & n_first$0: QUEUE +-> TASK & dom(n_first$0) = dom(first_sending) & !q1.(q1: queues & q1: dom(n_first$0) & not(n_sending(q1) = {}) => n_first$0(q1): n_sending(q1)));
  "`Check that the invariant (queues = dom(queue_receiving)) is preserved by the operation - ref 3.4'";
  (queues = dom(n_receiving));
  "`Check that the invariant (queues = dom(queue_sending)) is preserved by the operation - ref 3.4'";
  (queues = dom(n_sending));
  "`Check that the invariant (dom(first_receiving) = dom(queue_receiving)) is preserved by the operation - ref 3.4'";
  (dom(n_first) = dom(n_receiving));
  "`Check that the invariant (dom(first_sending) = dom(queue_sending)) is preserved by the operation - ref 3.4'";
  (dom(n_first$0) = dom(n_sending));
  ("`Local hypotheses'" & not(queue_receiving = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving) & n_receiving = remove_task(queue_receiving,unblocked) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving) & !q1.(q1: queues & q1: dom(n_first) & not(n_receiving(q1) = {}) => n_first(q1): n_receiving(q1)) & not(queue_sending = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending) & n_sending = remove_task(queue_sending,unblocked) & n_first$0: QUEUE +-> TASK & dom(n_first$0) = dom(first_sending) & !q1.(q1: queues & q1: dom(n_first$0) & not(n_sending(q1) = {}) => n_first$0(q1): n_sending(q1)) & q1: queues & q2: queues & tk: TASK & tk: n_receiving(q1));
  "`Check that the invariant (!(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => tk/:queue_sending(q2))) is preserved by the operation - ref 3.4'";
  (not(tk: n_sending(q2)));
  ("`Local hypotheses'" & not(queue_receiving = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving) & n_receiving = remove_task(queue_receiving,unblocked) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving) & !q1.(q1: queues & q1: dom(n_first) & not(n_receiving(q1) = {}) => n_first(q1): n_receiving(q1)) & not(queue_sending = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending) & n_sending = remove_task(queue_sending,unblocked) & n_first$0: QUEUE +-> TASK & dom(n_first$0) = dom(first_sending) & !q1.(q1: queues & q1: dom(n_first$0) & not(n_sending(q1) = {}) => n_first$0(q1): n_sending(q1)) & q1: queues & q2: queues & tk: TASK & tk: n_sending(q2));
  "`Check that the invariant (!(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => tk/:queue_receiving(q1))) is preserved by the operation - ref 3.4'";
  (not(tk: n_receiving(q1)));
  ("`Local hypotheses'" & not(queue_receiving = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving) & n_receiving = remove_task(queue_receiving,unblocked) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving) & !q1.(q1: queues & q1: dom(n_first) & not(n_receiving(q1) = {}) => n_first(q1): n_receiving(q1)) & not(queue_sending = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending) & n_sending = remove_task(queue_sending,unblocked) & n_first$0: QUEUE +-> TASK & dom(n_first$0) = dom(first_sending) & !q1.(q1: queues & q1: dom(n_first$0) & not(n_sending(q1) = {}) => n_first$0(q1): n_sending(q1)) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: n_receiving(q1));
  "`Check that the invariant (!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_receiving(q1) => tk/:queue_receiving(q2))) is preserved by the operation - ref 3.4'";
  (not(tk: n_receiving(q2)));
  ("`Local hypotheses'" & not(queue_receiving = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving) & n_receiving = remove_task(queue_receiving,unblocked) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving) & !q1.(q1: queues & q1: dom(n_first) & not(n_receiving(q1) = {}) => n_first(q1): n_receiving(q1)) & not(queue_sending = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending) & n_sending = remove_task(queue_sending,unblocked) & n_first$0: QUEUE +-> TASK & dom(n_first$0) = dom(first_sending) & !q1.(q1: queues & q1: dom(n_first$0) & not(n_sending(q1) = {}) => n_first$0(q1): n_sending(q1)) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: n_sending(q1));
  "`Check that the invariant (!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_sending(q1) => tk/:queue_sending(q2))) is preserved by the operation - ref 3.4'";
  ("`Local hypotheses'" & not(queue_receiving = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving) & n_receiving = remove_task(queue_receiving,unblocked) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving) & !q1.(q1: queues & q1: dom(n_first) & not(n_receiving(q1) = {}) => n_first(q1): n_receiving(q1)) & queue_sending = {});
  ("`Local hypotheses'" & not(queue_receiving = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving) & n_receiving = remove_task(queue_receiving,unblocked) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving) & !q1.(q1: queues & q1: dom(n_first) & not(n_receiving(q1) = {}) => n_first(q1): n_receiving(q1)) & queue_sending = {} & q1: queues & q2: queues & tk: TASK & tk: n_receiving(q1));
  ("`Local hypotheses'" & not(queue_receiving = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving) & n_receiving = remove_task(queue_receiving,unblocked) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving) & !q1.(q1: queues & q1: dom(n_first) & not(n_receiving(q1) = {}) => n_first(q1): n_receiving(q1)) & queue_sending = {} & q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2));
  ("`Local hypotheses'" & not(queue_receiving = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving) & n_receiving = remove_task(queue_receiving,unblocked) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving) & !q1.(q1: queues & q1: dom(n_first) & not(n_receiving(q1) = {}) => n_first(q1): n_receiving(q1)) & queue_sending = {} & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: n_receiving(q1));
  ("`Local hypotheses'" & queue_receiving = {} & not(queue_sending = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending) & n_sending = remove_task(queue_sending,unblocked) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending) & !q1.(q1: queues & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)));
  (dom(n_first) = dom(n_sending));
  ("`Local hypotheses'" & queue_receiving = {} & not(queue_sending = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending) & n_sending = remove_task(queue_sending,unblocked) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending) & !q1.(q1: queues & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1));
  ("`Local hypotheses'" & queue_receiving = {} & not(queue_sending = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending) & n_sending = remove_task(queue_sending,unblocked) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending) & !q1.(q1: queues & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & q1: queues & q2: queues & tk: TASK & tk: n_sending(q2));
  ("`Local hypotheses'" & queue_receiving = {} & not(queue_sending = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending) & n_sending = remove_task(queue_sending,unblocked) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending) & !q1.(q1: queues & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: n_sending(q1))
END
&
THEORY EnumerateX IS
  SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED};
  COPY_POSITION == {queueSEND_TO_BACK,queueSEND_TO_FRONT};
  QUEUE_TYPE == {TQUE,TSEMAPH,TMUT};
  ERROR_DEFINITION == {errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY,errNO_TASK_TO_RUN,errQUEUE_BLOCKED,errQUEUE_YIELD,errQUEUE_EMPTY,errQUEUE_FULL,pdPASS,pdFAIL,pdTRUE,pdFALSE}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK)
END
