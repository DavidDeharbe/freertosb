THEORY BalanceX IS
  Task_r,93,9,0,69,9,4,2;
  AssertionLemmas,1,0,0,1,0,0,0;
  Initialisation,2,0,0,2,0,0,0;
  t_create,2,0,0,2,0,0,0;
  t_delete,25,0,0,25,0,0,0;
  t_suspend,6,0,0,6,0,0,0;
  t_resume,10,0,0,6,2,2,0;
  t_getPriority,0,0,0,0,0,0,0;
  t_getCurrent,0,0,0,0,0,0,0;
  t_getNumberOfTasks,0,0,0,0,0,0,0;
  t_delayTask,3,0,0,3,0,0,0;
  t_startScheduler,6,1,0,4,0,1,0;
  t_endScheduler,2,0,0,2,0,0,0;
  t_resumeAll,9,3,0,4,0,0,2;
  t_unblock,10,0,0,7,3,0,0;
  t_setPriority,17,5,0,7,4,1,0
END
&
THEORY ProofState IS
  Proved(Util);
  Proved(Util);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(2);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(1);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(3);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(3);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(2);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(2);
  Proved(0);
  Proved(2);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0)
END
&
THEORY MethodList IS
  dd & eh(IDLE_PRIORITY,0,Goal) & dc(tt = task) & pr & dd & ah((t_priority$1<+{task|->priority})(tt) = t_priority$1(tt)) & ah(tt: dom(t_priority$1) & not(tt = task)) & pr & pr & pr & dd & eh((t_priority$1<+{task|->priority})(tt),t_priority$1(tt),Goal) & ph(tt,!tt.(tt: tasks$1 => 0<=t_priority$1(tt))) & pr;
  dd & dc(task = running$1) & ss & ah(priority>=max(t_priority$1[ready$1])) & ah(task = running$1 & not(task = running$1 & priority+1<=max(t_priority$1[ready$1]))) & pr & pr & ss & pp(rp.0) & dd & dc(tt = running$1) & ss & pr & dd & ah((t_priority$1<+{running$1|->priority})(tt) = t_priority$1(tt)) & ah(tt: dom(t_priority$1) & not(tt = running$1)) & pr & pr & pr & dd & eh((t_priority$1<+{running$1|->priority})(tt),t_priority$1(tt),Goal) & ah(t_priority$1(tt)<=max(t_priority$1[ready$1])) & ah(tt: ready$1) & pr & pr & dd & dc(task: ready$1) & dd & ah(not(t_priority$1(running$1)<=priority)) & ah(tt: ready$1 & not(task: ready$1 & t_priority$1(running$1)<=priority)) & pr & pr & pp(rp.1) & dd & ah((t_priority$1<+{task|->priority})(running$1) = t_priority$1(running$1)) & ah(running$1: dom(t_priority$1) & not(running$1 = task)) & pr & pr & pr & dd & eh((t_priority$1<+{task|->priority})(running$1),t_priority$1(running$1),Goal) & dc(tt = task) & ss & pr & ah(not(t_priority$1(running$1)<=priority)) & mp & ah(not(t_priority$1(running$1)<=priority)) & pp(rp.0) & dd & fh(not(PRIORITY <: NATURAL & active$1 = TRUE)) & ah(PRIORITY <: NATURAL & active$1 = TRUE) & pr & pr & ss & dd & ah(PRIORITY <: NATURAL) & dd & ah(tt: dom(t_priority$1) & not(tt = task)) & pr & pr & pr & ph(tt,!tt.(tt: ready$1 => t_priority$1(tt)<=t_priority$1(running$1))) & pr & dd & fh(not(PRIORITY <: NATURAL & active$1 = TRUE)) & ah(PRIORITY <: NATURAL & active$1 = TRUE) & pr & pr & ss & pp(rp.0) & dd & pr & ah(running$1: dom(t_priority$1) & not(running$1 = task)) & pr & pr & pr & ah(not(task = tt)) & ah(tt: ready$1 & not(task: ready$1)) & pr & pr & pp(rp.0) & dd & ah(tt: dom(t_priority$1) & not(tt = task)) & pr & pr & pr & ph(tt,!tt.(tt: ready$1 => t_priority$1(tt)<=t_priority$1(running$1))) & pr & dd & fh(not(PRIORITY <: NATURAL & active$1 = TRUE)) & ah(PRIORITY <: NATURAL & active$1 = TRUE) & pr & pr & ss & pr & dd & fh(not(PRIORITY <: NATURAL & active$1 = TRUE)) & ah(PRIORITY <: NATURAL & active$1 = TRUE) & pr & pr & ss & pr & dd & fh(not(PRIORITY <: NATURAL & active$1 = TRUE)) & ah(PRIORITY <: NATURAL & active$1 = TRUE) & pr & pr & dd & ss & pr;
  pr;
  pr;
  pr;
  dd & eh(IDLE_PRIORITY,0,Goal) & dc(tt = task) & pr & dd & ah((t_priority$1<+{task|->priority})(tt) = t_priority$1(tt)) & ah(tt: dom(t_priority$1) & not(tt = task)) & pr & pr & pr & dd & eh((t_priority$1<+{task|->priority})(tt),t_priority$1(tt),Goal) & ph(tt,!tt.(tt: tasks$1 => 0<=t_priority$1(tt))) & pr;
  pr;
  pr;
  pr;
  pr;
  dd & dc(task$0 = running$1 & (ready$1\/{running$1})-{task$0} = ready$1) & ss & pr & dd & ah(#(task$1).(task$1: TASK & task$1: tasks$1 & task$1: ready$1 & (task$0 = task$1 & (ready$1\/{running$1})-{task$0} = (ready$1\/{running$1})-{task$1}))) & se(task$0) & pr & pp(rp.0);
  pr;
  dd & eh(IDLE_PRIORITY,0,Goal) & dc(tt = task) & pr & dd & ah((t_priority$1<+{task|->priority})(tt) = t_priority$1(tt)) & ah(tt: dom(t_priority$1) & not(tt = task)) & pr & pr & pr & dd & eh((t_priority$1<+{task|->priority})(tt),t_priority$1(tt),Goal) & ph(tt,!tt.(tt: tasks$1 => 0<=t_priority$1(tt))) & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & dc(tt: ready$1) & dd & ph(tt,!tt.(tt: ready$1 => t_priority$1(tt)<=t_priority$1(running$1))) & pr & dd & ah(tt: unblocked) & pr & dd & ah(t_priority$1(tt)<=max(t_priority$1[unblocked])) & ah(tt: unblocked) & pr & pr & ah(max(t_priority$1[unblocked])<=t_priority$1(running$1)) & ah(not(t_priority$1(running$1)<=max(t_priority$1[unblocked]))) & pp(rp.0) & dd & pr & dd & fh(not(PRIORITY <: NATURAL & active$1 = TRUE)) & ah(PRIORITY <: NATURAL & active$1 = TRUE) & pr & pr & ss & pr;
  pr;
  pr;
  pr;
  dd & dc(tt = running$1) & ah(t_priority$1(running$1)<=t_priority$1(task)) & pr & ah(tt: ready$1\/unblocked-{task}) & ah(not(tt = running$1) & tt: ready$1\/{running$1}\/unblocked-{task}) & pr & pr & pp(rp.0) & dd & dc(tt: ready$1) & dd & ah(t_priority$1(tt)<=t_priority$1(running$1)) & ph(tt,!tt.(tt: ready$1 => t_priority$1(tt)<=t_priority$1(running$1))) & pr & pr & dd & ah(tt: unblocked-{task}) & ah(tt: ready$1\/{running$1}\/unblocked-{task} & not(tt = running$1) & not(tt: ready$1)) & pr & pr & pr & pp(rp.0) & pr & dd & ah(PRIORITY <: NATURAL) & pr & dd & ah(not(PRIORITY <: NATURAL)) & ah(not(PRIORITY <: NATURAL & active$1 = TRUE)) & ah(active$1 = TRUE) & pp(rp.0) & dd & fh(not(PRIORITY <: NATURAL)) & ah(PRIORITY <: NATURAL) & pp(rp.0);
  pr;
  dd & se(unblocked) & ss & pr & ss & ah(not(unblocked = {})) & pr & ss & dd & pr & se(task) & pr;
  pr;
  pr;
  pr;
  dd & dc(tt = idle_task) & ss & dc(ready$1 = {}) & ss & pr & pr & dd & ah(tt: ready$1) & ah(not(tt = idle_task) & tt: ready$1\/{idle_task}) & pr & pr & pp(rp.0) & dd & ah((t_priority$1\/{idle_task|->IDLE_PRIORITY})(tt) = t_priority$1(tt)) & ah(tt: dom(t_priority$1) & not(tt = idle_task)) & pr & pr & pr & dd & eh((t_priority$1\/{idle_task|->IDLE_PRIORITY})(tt),t_priority$1(tt),Goal) & dc(ready$1 = {}) & ss & ah(tt: ready$1) & pr & dd & dc(task = idle_task) & ss & ah(max(t_priority$1[ready$1]) = 0) & ah(t_priority$1(task) = max(t_priority$1[ready$1])) & ah(not(ready$1 = {}) => task: ready$1 & t_priority$1(task) = max(t_priority$1[ready$1])) & pr & dd & ah(t_priority$1(tt)<=max(t_priority$1[ready$1])) & pr & eh(max(t_priority$1[ready$1]),0,Goal) & dd & ah((t_priority$1\/{idle_task|->IDLE_PRIORITY})(task) = t_priority$1(task)) & ah(task: dom(t_priority$1) & not(task = idle_task)) & pr & pr & pr & dd & eh((t_priority$1\/{idle_task|->IDLE_PRIORITY})(task),t_priority$1(task),Goal) & eh(t_priority$1(task),max(t_priority$1[ready$1]),Goal) & ah(tt: ready$1) & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr
END
&
THEORY PassList IS
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(2),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(3),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(3),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(2),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(2),?;
  Force(0),?;
  Force(2),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?
END
&
THEORY ManForms 
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK);
  PRVersion("V3.3.3.p39")(CLT == "V3.7.6")
END
