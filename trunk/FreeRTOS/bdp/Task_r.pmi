THEORY BalanceX IS
  Task_r,120,23,0,82,8,3,2;
  AssertionLemmas,4,1,0,3,0,0,0;
  Initialisation,2,0,0,2,0,0,0;
  t_create,2,0,0,2,0,0,0;
  t_delete,26,2,0,24,0,0,0;
  t_suspend,6,0,0,6,0,0,0;
  t_resume,10,0,0,6,2,2,0;
  t_getPriority,1,1,0,0,0,0,0;
  t_getCurrent,0,0,0,0,0,0,0;
  t_getNumberOfTasks,0,0,0,0,0,0,0;
  t_delayTask,3,0,0,3,0,0,0;
  t_startScheduler,6,1,0,4,0,1,0;
  t_endScheduler,2,0,0,2,0,0,0;
  t_resumeAll,9,3,0,4,0,0,2;
  t_incrementTick,22,10,0,10,0,0,0;
  t_unblock,10,0,0,7,3,0,0;
  t_setPriority,17,5,0,9,3,0,0
END
&
THEORY ProofState IS
  Proved(Util);
  Proved(Util);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(1);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Unproved;
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(0);
  Unproved;
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(3);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(3);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(2);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(2);
  Proved(0);
  Proved(2);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0)
END
&
THEORY MethodList IS
  dd & eh(IDLE_PRIORITY,0,Goal) & dc(tt = task) & pr & dd & ah((t_priority$1<+{task|->priority})(tt) = t_priority$1(tt)) & ah(tt: dom(t_priority$1) & not(tt = task)) & pr & pr & pr & dd & eh((t_priority$1<+{task|->priority})(tt),t_priority$1(tt),Goal) & ph(tt,!tt.(tt: tasks$1 => 0<=t_priority$1(tt))) & pr;
  dd & dc(tt = task) & eh(tt,task,AllHyp) & ss & dd & ah(priority<=t_priority$1(running$1)) & ah(task: ready$1 & not(task: ready$1 & t_priority$1(running$1)<=priority)) & pr & pr & pr & dd & ah((t_priority$1<+{task|->priority})(running$1) = t_priority$1(running$1)) & pr & ah(not(task = running$1)) & ah(not(running$1: ready$1) & task: ready$1) & pr & pr & pp(rp.0) & dd & ah(t_priority$1: TASK +-> PRIORITY & running$1: dom(t_priority$1) & not(task = running$1)) & pr & pr & pr & ar(SimplifyRelFonXY.9,Goal) & dd & eh((t_priority$1<+{task|->priority})(running$1),t_priority$1(running$1),Goal) & pr & dd & ah((t_priority$1<+{task|->priority})(tt) = t_priority$1(tt)) & ah(t_priority$1: TASK +-> PRIORITY & tt: dom(t_priority$1) & not(task = tt)) & pr & pr & pr & pr & dd & eh((t_priority$1<+{task|->priority})(tt),t_priority$1(tt),Goal) & dc(not(task = running$1)) & dd & ah((t_priority$1<+{task|->priority})(running$1) = t_priority$1(running$1)) & pr & dd & eh((t_priority$1<+{task|->priority})(running$1),t_priority$1(running$1),Goal) & ph(tt,!tt.(tt: ready$1 => t_priority$1(tt)<=t_priority$1(running$1))) & pr & ss & ah(t_priority$1(tt)<=max(t_priority$1[ready$1])) & ah(tt: ready$1) & pr & dd & ah(max(t_priority$1[ready$1])<=priority) & ah(task = running$1 & not(task = running$1 & priority+1<=max(t_priority$1[ready$1]))) & pr & pr & ss & pp(rt.0) & dd & pr;
  pr;
  pr;
  pr;
  pr;
  dd & eh(task,running$1,Goal) & eh(task,running$1,AllHyp) & ss & dd(1) & dc(tt: ready$1) & dd & pr & ah(not(tt = running$1)) & ah(tt: ready$1 & not(running$1: ready$1)) & pr & pr & pr & dd & ah((t_priority$1<+{running$1|->priority})(tt) = t_priority$1(tt)) & ah(t_priority$1: TASK +-> PRIORITY & tt: dom(t_priority$1) & not(running$1 = tt)) & pr & pr & pr & pr & dd & eh((t_priority$1<+{running$1|->priority})(tt),t_priority$1(tt),Goal) & ah(t_priority$1(tt)<=max(t_priority$1[ready])) & ah(tt: ready$1) & pr & dd & ah(atask: ready$1) & ah(atask: schedule_p(ready$1,t_priority$1)) & dd & ph(ready$1,t_priority$1,!(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) => schedule_p(tasks,t_priority) <: tasks)) & pr & pr & pr & pr & dd & pr & dd & ah(not(atask = running$1)) & ah(atask: ready$1 & not(running$1: ready$1)) & pr & pr & pr & dd & ah((t_priority$1<+{running$1|->priority})(atask) = t_priority$1(atask)) & ah(t_priority$1: TASK +-> PRIORITY & atask: dom(t_priority$1) & not(running$1 = atask)) & pr & pr & pr & pr & dd & eh((t_priority$1<+{running$1|->priority})(atask),t_priority$1(atask),Goal) & ah(t_priority$1(atask) = max(t_priority$1[ready$1])) & ph(ready$1,t_priority$1,atask,!(tasks,t_priority,task$0).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) & (task$0: tasks & task$0: schedule_p(tasks,t_priority)) => t_priority(task$0) = max(t_priority[tasks]))) & pr & pr & pr & pr & pr & pr & dd & pr & dd & ah(tt = running$1) & ah(tt: ready$1\/{running$1} & not(tt: ready$1)) & pr & pr & pp(rp.0) & ss & ah((t_priority$1<+{running$1|->priority})(atask) = t_priority$1(atask)) & ah(not(atask = running$1)) & ah(atask: ready$1 & not(running$1: ready$1)) & ah(atask: schedule_p(ready$1,t_priority$1)) & ph(ready$1,t_priority$1,!(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) => schedule_p(tasks,t_priority) <: tasks)) & pr & pr & pr & pr & pr & pr & pr & dd & ah(t_priority$1: TASK +-> PRIORITY & atask: dom(t_priority$1) & not(running$1 = atask)) & pr & ah(atask: ready$1) & ah(atask: schedule_p(ready$1,t_priority$1)) & ph(ready$1,t_priority$1,!(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) => schedule_p(tasks,t_priority) <: tasks)) & pr & pr & pr & pr & pr & pr & pr & pr & dd & eh((t_priority$1<+{running$1|->priority})(atask),t_priority$1(atask),Goal) & ah(t_priority$1(atask) = max(t_priority$1[ready$1])) & ah(atask: schedule_p(ready$1,t_priority$1)) & ph(ready$1,t_priority$1,atask,!(tasks,t_priority,task$0).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) & (task$0: tasks & task$0: schedule_p(tasks,t_priority)) => t_priority(task$0) = max(t_priority[tasks]))) & pr & pr & pr & pr & pr & ah(atask: schedule_p(ready$1,t_priority$1)) & ph(ready$1,t_priority$1,!(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) => schedule_p(tasks,t_priority) <: tasks)) & pr & pr & pr & pr & pr & pr & pr & dd & pr & eh(t_priority$1(atask),max(t_priority$1[ready$1]),Goal) & pr;
  pr;
  pr;
  pr;
  dd & ah(#(task$0).(task$0: TASK & task$0: tasks$1 & task$0: ready$1 & (atask = task$0 & (ready$1\/{running$1})-{atask} = (ready$1\/{running$1})-{task$0}))) & se(atask) & ss & eh(task,running$1,AllHyp) & ss & dd & pr & ah(atask: ready$1) & ph(ready$1,t_priority$1,!(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) => schedule_p(tasks,t_priority) <: tasks)) & pr & pr & ah(idle$1: ready$1) & ah(not(running$1 = idle$1) & (running$1 = idle$1 or idle$1: ready$1)) & pr & pr & pr & pr & pr & dd & pr & dd & pr & pr & ph(ready$1,t_priority$1,!(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) => schedule_p(tasks,t_priority) <: tasks)) & pr & pr & pr & pr & pr & aq(#(task$0).(task$0: TASK & task$0: tasks$1 & task$0: ready$1 & (atask = task$0 & (ready$1\/{running$1})-{atask} = (ready$1\/{running$1})-{task$0}))) & dd & pr;
  pr;
  dd & eh(IDLE_PRIORITY,0,Goal) & dc(tt = task) & pr & dd & ah((t_priority$1<+{task|->priority})(tt) = t_priority$1(tt)) & ah(tt: dom(t_priority$1) & not(tt = task)) & pr & pr & pr & dd & eh((t_priority$1<+{task|->priority})(tt),t_priority$1(tt),Goal) & ph(tt,!tt.(tt: tasks$1 => 0<=t_priority$1(tt))) & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & se(unblocked) & ss & pr;
  dd & se(unblocked) & ss & pr;
  pr;
  ?;
  pr;
  dd & se(unblocked) & pr & ah(#(task$0).(task$0: ready$1 & not(task$0 = running$1) & not(task$0 = idle$1) & (task = task$0 & ready$1-{task}\/{running$1} = ready$1-{task$0}\/{running$1}))) & se(task) & pr & ah(task: schedule_p(ready$1,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & pr & pr & pr & pr & pp(rp.0);
  pr;
  dd & dc(ready$1 = {}) & dd & ah(tt: unblocked) & pr & ah(tt: ready$1\/unblocked & not(unblocked = {}) & ready$1 = {}) & pr & pr & pr & pr & dd & ah(t_priority$1(tt)<=max(t_priority$1[unblocked])) & ah(tt: unblocked) & pr & dd & ah(t_priority$1(tt)<=max(t_priority$1[unblocked]) & not(t_priority$1(running$1)<=max(t_priority$1[unblocked]))) & pr & pr & pp(rt.1) & dd & dc(tt: ready$1) & dd & ph(tt,!tt.(tt: ready$1 => t_priority$1(tt)<=t_priority$1(running$1))) & pr & dd & ah(tt: unblocked) & pr & dd & ah(t_priority$1(tt)<=max(t_priority$1[unblocked]) & not(t_priority$1(running$1)<=max(t_priority$1[unblocked]))) & ah(tt: unblocked) & pr & pr & pp(rt.1);
  pr;
  dd & se(unblocked) & ss & pr;
  pr;
  dd & dc(ready$1 = {}) & dd & ah(tt: unblocked) & pr & ah(tt: ready$1\/unblocked & not(unblocked = {}) & ready$1 = {}) & pr & pr & pr & pr & dd & ah(t_priority$1(tt)<=max(t_priority$1[unblocked])) & ah(tt: unblocked) & pr & dd & ah(t_priority$1(tt)<=max(t_priority$1[unblocked]) & not(t_priority$1(running$1)<=max(t_priority$1[unblocked]))) & pr & pr & pp(rt.1) & dd & dc(tt: ready$1) & dd & ph(tt,!tt.(tt: ready$1 => t_priority$1(tt)<=t_priority$1(running$1))) & pr & dd & ah(tt: unblocked) & pr & dd & ah(t_priority$1(tt)<=max(t_priority$1[unblocked]) & not(t_priority$1(running$1)<=max(t_priority$1[unblocked]))) & ah(tt: unblocked) & pr & pr & pp(rt.1);
  pr;
  dd & se(unblocked) & ss & pr;
  pr;
  dd & dc(ready$1 = {}) & dd & ah(tt: unblocked) & pr & ah(tt: ready$1\/unblocked & not(unblocked = {}) & ready$1 = {}) & pr & pr & pr & pr & dd & ah(t_priority$1(tt)<=max(t_priority$1[unblocked])) & ah(tt: unblocked) & pr & dd & ah(t_priority$1(tt)<=max(t_priority$1[unblocked]) & not(t_priority$1(running$1)<=max(t_priority$1[unblocked]))) & pr & pr & pp(rt.1) & dd & dc(tt: ready$1) & dd & ph(tt,!tt.(tt: ready$1 => t_priority$1(tt)<=t_priority$1(running$1))) & pr & dd & ah(tt: unblocked) & pr & dd & ah(t_priority$1(tt)<=max(t_priority$1[unblocked]) & not(t_priority$1(running$1)<=max(t_priority$1[unblocked]))) & ah(tt: unblocked) & pr & pr & pp(rt.1);
  pr;
  dd & se(unblocked) & ss & pr & ah(not(unblocked = {}) & (#(task$0).(task$0: TASK & task$0: {running$1}\/suspended$1\/blocked$1\/ready$1 & task$0: unblocked & (task = task$0 & ready$1-{task}\/{running$1}\/unblocked = ready$1\/{running$1}\/unblocked-{task$0})) or #(task$0).(task$0: ready$1 & not(task$0 = running$1) & not(task$0 = idle$1) & (task = task$0 & (ready$1/\{task$0})-{task}-{running$1}-unblocked = (ready$1/\{task})-{task$0}-{running$1}-unblocked)) or (ready$1-{task}\/{running$1}\/unblocked = ready$1\/unblocked & task = running$1))) & pr & ah(#(task$0).(task$0: ready$1 & not(task$0 = running$1) & not(task$0 = idle$1) & (task = task$0 & (ready$1/\{task$0})-{task}-{running$1}-unblocked = (ready$1/\{task})-{task$0}-{running$1}-unblocked))) & se(task) & pr & ah(task: schedule_p(ready$1,t_priority$1)) & eh(schedule_p,_h,Goal) & pr & pr & pr & pr & pr & pp(rp.0) & pp(rp.0);
  pr;
  dd & ah(t_priority$1(task) = max(t_priority$1[unblocked])) & ph(unblocked,t_priority$1,task,!(tasks,t_priority,task$0).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) & (task$0: tasks & task$0: schedule_p(tasks,t_priority)) => t_priority(task$0) = max(t_priority[tasks]))) & pr & pr & pr & pr & ph(unblocked,t_priority$1,!(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) => schedule_p(tasks,t_priority) <: tasks)) & pr & pr & pr & pr & pr & pr & dd & eh(t_priority$1(task),max(t_priority$1[unblocked]),Goal) & ah(tt: unblocked) & pr;
  pr;
  dd & se(unblocked) & ss & pr & ah(#(task$0).(task$0: TASK & task$0: {running$1}\/suspended$1\/blocked$1 & task$0: unblocked & (task = task$0 & unblocked-{task}-(unblocked-{task$0}) = unblocked-{task$0}-{running$1}-(unblocked-{task})))) & se(task) & ss & ah(task: unblocked) & ah(task: schedule_p(unblocked,t_priority$1)) & ph(unblocked,t_priority$1,!(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) => schedule_p(tasks,t_priority) <: tasks)) & pr & pr & pr & pr & pr & dd & pr & ah(task: blocked$1) & ah(task: unblocked & unblocked <: blocked$1) & pr & pr & pr & pr & pr & aq(#(task$0).(task$0: TASK & task$0: {running$1}\/suspended$1\/blocked$1 & task$0: unblocked & (task = task$0 & unblocked-{task}-(unblocked-{task$0}) = unblocked-{task$0}-{running$1}-(unblocked-{task})))) & dd & ah(PP) & dd(1) & ss & ah(PP) & mp & dd & ah(not(ready$1 = {})) & ah(active$1 = TRUE & not(active$1 = TRUE & ready$1 = {})) & pr & pr & ss & pr & dd & ah(not(unblocked = {}) & (#(task$0).(task$0: TASK & task$0: {running$1}\/suspended$1\/blocked$1\/ready$1 & task$0: unblocked & (task = task$0 & unblocked-{task}-(unblocked-{task$0}) = unblocked-{task$0}-ready$1-{running$1}-(unblocked-{task}))) or (ready$1\/{running$1}\/unblocked-{task} = ready$1\/unblocked & task = running$1))) & pr & ah(#(task$0).(task$0: TASK & task$0: {running$1}\/suspended$1\/blocked$1\/ready$1 & task$0: unblocked & (task = task$0 & unblocked-{task}-(unblocked-{task$0}) = unblocked-{task$0}-ready$1-{running$1}-(unblocked-{task})))) & se(task) & ss & ah(task: unblocked) & ah(task: schedule_p(unblocked,t_priority$1)) & ph(unblocked,t_priority$1,!(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) => schedule_p(tasks,t_priority) <: tasks)) & pr & pr & pr & pr & pr & dd & pr & ah(task: blocked$1) & ah(task: unblocked & unblocked <: blocked$1) & pr & pr & pr & pr & pr & pp(rp.0) & pp(rp.0);
  pr;
  pr;
  dd & dc(ready$1 = {}) & dd & ah(tt: unblocked) & pr & ah(tt: ready$1\/unblocked & not(unblocked = {}) & ready$1 = {}) & pr & pr & pr & pr & dd & ah(t_priority$1(tt)<=max(t_priority$1[unblocked])) & ah(tt: unblocked) & pr & dd & ah(t_priority$1(tt)<=max(t_priority$1[unblocked]) & not(t_priority$1(running$1)<=max(t_priority$1[unblocked]))) & pr & pr & pp(rt.1) & dd & dc(tt: ready$1) & dd & ph(tt,!tt.(tt: ready$1 => t_priority$1(tt)<=t_priority$1(running$1))) & pr & dd & ah(tt: unblocked) & pr & dd & ah(t_priority$1(tt)<=max(t_priority$1[unblocked]) & not(t_priority$1(running$1)<=max(t_priority$1[unblocked]))) & ah(tt: unblocked) & pr & pr & pp(rt.1);
  pr;
  pr;
  pr;
  dd & ah(t_priority$1(task) = max(t_priority$1[unblocked])) & ph(unblocked,t_priority$1,task,!(tasks,t_priority,task$0).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) & (task$0: tasks & task$0: schedule_p(tasks,t_priority)) => t_priority(task$0) = max(t_priority[tasks]))) & pr & pr & pr & pr & ph(unblocked,t_priority$1,!(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) => schedule_p(tasks,t_priority) <: tasks)) & pr & pr & pr & pr & pr & pr & dd & eh(t_priority$1(task),max(t_priority$1[unblocked]),Goal) & ah(tt: unblocked) & pr;
  pr;
  dd & se(unblocked) & ss & pr & ah(#(task$0).(task$0: TASK & task$0: {running$1}\/suspended$1\/blocked$1 & task$0: unblocked & (task = task$0 & unblocked-{task}-(unblocked-{task$0}) = unblocked-{task$0}-{running$1}-(unblocked-{task})))) & se(task) & ss & ah(task: unblocked) & ah(task: schedule_p(unblocked,t_priority$1)) & ph(unblocked,t_priority$1,!(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) => schedule_p(tasks,t_priority) <: tasks)) & pr & pr & pr & pr & pr & dd & pr & ah(task: blocked$1) & ah(task: unblocked & unblocked <: blocked$1) & pr & pr & pr & pr & pr & aq(#(task$0).(task$0: TASK & task$0: {running$1}\/suspended$1\/blocked$1 & task$0: unblocked & (task = task$0 & unblocked-{task}-(unblocked-{task$0}) = unblocked-{task$0}-{running$1}-(unblocked-{task})))) & dd & ah(PP) & dd(1) & ss & ah(PP) & mp & dd & ah(not(ready$1 = {})) & ah(active$1 = TRUE & not(active$1 = TRUE & ready$1 = {})) & pr & pr & ss & pr & dd & ah(not(unblocked = {}) & (#(task$0).(task$0: TASK & task$0: {running$1}\/suspended$1\/blocked$1\/ready$1 & task$0: unblocked & (task = task$0 & unblocked-{task}-(unblocked-{task$0}) = unblocked-{task$0}-ready$1-{running$1}-(unblocked-{task}))) or (ready$1\/{running$1}\/unblocked-{task} = ready$1\/unblocked & task = running$1))) & pr & ah(#(task$0).(task$0: TASK & task$0: {running$1}\/suspended$1\/blocked$1\/ready$1 & task$0: unblocked & (task = task$0 & unblocked-{task}-(unblocked-{task$0}) = unblocked-{task$0}-ready$1-{running$1}-(unblocked-{task})))) & se(task) & ss & ah(task: unblocked) & ah(task: schedule_p(unblocked,t_priority$1)) & ph(unblocked,t_priority$1,!(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) => schedule_p(tasks,t_priority) <: tasks)) & pr & pr & pr & pr & pr & dd & pr & ah(task: blocked$1) & ah(task: unblocked & unblocked <: blocked$1) & pr & pr & pr & pr & pr & pp(rp.0) & pp(rp.0);
  pr;
  pr;
  pr;
  dd & dc(tt = idle_task) & ss & dc(ready$1 = {}) & ss & pr & pr & dd & ah(tt: ready$1) & ah(not(tt = idle_task) & tt: ready$1\/{idle_task}) & pr & pr & pp(rp.0) & dd & ah((t_priority$1\/{idle_task|->IDLE_PRIORITY})(tt) = t_priority$1(tt)) & ah(tt: dom(t_priority$1) & not(tt = idle_task)) & pr & pr & pr & dd & eh((t_priority$1\/{idle_task|->IDLE_PRIORITY})(tt),t_priority$1(tt),Goal) & dc(ready$1 = {}) & ss & ah(tt: ready$1) & pr & dd & dc(task = idle_task) & ss & ah(max(t_priority$1[ready$1]) = 0) & ah(t_priority$1(task) = max(t_priority$1[ready$1])) & ah(not(ready$1 = {}) => task: ready$1 & t_priority$1(task) = max(t_priority$1[ready$1])) & pr & dd & ah(t_priority$1(tt)<=max(t_priority$1[ready$1])) & pr & eh(max(t_priority$1[ready$1]),0,Goal) & dd & ah((t_priority$1\/{idle_task|->IDLE_PRIORITY})(task) = t_priority$1(task)) & ah(task: dom(t_priority$1) & not(task = idle_task)) & pr & pr & pr & dd & eh((t_priority$1\/{idle_task|->IDLE_PRIORITY})(task),t_priority$1(task),Goal) & eh(t_priority$1(task),max(t_priority$1[ready$1]),Goal) & ah(tt: ready$1) & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & ah(atask: tasks$1 & dom(t_priority$1) = tasks$1 & t_priority$1: TASK +-> PRIORITY) & pr & pr & pr & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & ah(({atask}<<|t_priority$1)(task) = t_priority$1(task)) & ah(not(task = atask)) & ah(task: ready$1) & pr & ah(schedule_p(ready$1,t_priority$1) <: ready$1) & eh(schedule_p,_h,Goal) & ss & pr & dd & pr & dd & pr & eh(atask,_h,Goal) & pr & ss & pr & ss & ah(t_priority$1(task) = max(t_priority$1[ready$1])) & ph(ready$1,t_priority$1,task,!(tasks,t_priority,task$0).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) & (task$0: tasks & task$0: schedule_p(tasks,t_priority)) => t_priority(task$0) = max(t_priority[tasks]))) & pr & pr & pr & ah(idle$1: ready$1) & pr & ah(running$1 = idle$1 or idle$1: ready$1 & atask = running$1 & not(atask = idle$1)) & pr & pr & pr & pr & pr & pr & pr & ph(ready$1,t_priority$1,!(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) => schedule_p(tasks,t_priority) <: tasks)) & pr & pr & pr & ah(idle$1: ready$1) & ah(running$1 = idle$1 or idle$1: ready$1 & atask = running$1 & not(atask = idle$1)) & pr & pr & pr & pr & pr & pr & dd & pr & pr & dd & eh(t_priority$1(task),max(t_priority$1[ready$1]),Goal) & ah(tt: ready$1) & pr;
  pr;
  pr;
  pr;
  ah(schedule_p(ready$1,t_priority$1) <: ready$1) & ah(PRIORITY <: NATURAL & active$1 = TRUE => running$1: dom(t_priority$1) & !(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks <: dom(t_priority) => schedule_p(tasks,t_priority) <: tasks)) & pr & pr & pr;
  pr;
  pr;
  eh(schedule_p,_h,Goal) & ss & dd & ah(task: tasks$0 & task: t_priority$0~[{max(t_priority$0[tasks$0])}]) & pp(rp.1);
  pr;
  pr;
  pr;
  pr;
  pr
END
&
THEORY PassList IS
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(2),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(3),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(3),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(2),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(2),?;
  Force(0),?;
  Force(2),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?
END
&
THEORY ManForms 
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO,genDivergencePO == KO,local_op == OK);
  PRVersion("V3.3.3.p39")(CLT == "V3.7.6")
END
