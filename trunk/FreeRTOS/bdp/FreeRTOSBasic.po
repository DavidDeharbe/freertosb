THEORY ProofList IS
  _f(1) & _f(2) & _f(8) & _f(327) & xQueueCreate.4,(_f(330) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(327) & xQueueCreate.3,(_f(329) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(327) & xQueueCreate.2,(_f(328) & _f(23) => _f(36));
  _f(1) & _f(2) & _f(8) & _f(327) & xQueueCreate.1,(_f(328) & _f(23) => _f(35));
  _f(1) & _f(2) & _f(8) & xSemaphoreCreateRecursiveMutex.5,(_f(326) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & xSemaphoreCreateRecursiveMutex.4,(_f(325) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & xSemaphoreCreateRecursiveMutex.3,(_f(322) & _f(23) => _f(324));
  _f(1) & _f(2) & _f(8) & xSemaphoreCreateRecursiveMutex.2,(_f(322) & _f(23) => _f(323));
  _f(1) & _f(2) & _f(8) & xSemaphoreCreateRecursiveMutex.1,(_f(320) & _f(20) => _f(321));
  _f(1) & _f(2) & _f(8) & xQueueCreateMutex.5,(_f(326) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & xQueueCreateMutex.4,(_f(325) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & xQueueCreateMutex.3,(_f(322) & _f(23) => _f(324));
  _f(1) & _f(2) & _f(8) & xQueueCreateMutex.2,(_f(322) & _f(23) => _f(323));
  _f(1) & _f(2) & _f(8) & xQueueCreateMutex.1,(_f(320) & _f(20) => _f(321));
  _f(1) & _f(2) & _f(8) & _f(311) & xSemaphoreCreateCounting.5,(_f(318) & _f(319) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(311) & xSemaphoreCreateCounting.4,(_f(316) & _f(317) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(311) & xSemaphoreCreateCounting.3,(_f(314) & _f(315) => _f(36));
  _f(1) & _f(2) & _f(8) & _f(311) & xSemaphoreCreateCounting.2,(_f(314) & _f(315) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(311) & xSemaphoreCreateCounting.1,(_f(312) => _f(313));
  _f(1) & _f(2) & _f(8) & vSemaphoreCreateBinary.4,(_f(310) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & vSemaphoreCreateBinary.3,(_f(309) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & vSemaphoreCreateBinary.2,(_f(308) & _f(23) => _f(36));
  _f(1) & _f(2) & _f(8) & vSemaphoreCreateBinary.1,(_f(308) & _f(23) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(290) & vQueueDelete.18,(_f(307) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(290) & vQueueDelete.17,(_f(306) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(290) & vQueueDelete.16,(_f(305) & _f(23) => _f(36));
  _f(1) & _f(2) & _f(8) & _f(290) & vQueueDelete.15,(_f(305) & _f(23) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(290) & vQueueDelete.14,(_f(304) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(290) & vQueueDelete.13,(_f(303) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(290) & vQueueDelete.12,(_f(302) & _f(23) => _f(295));
  _f(1) & _f(2) & _f(8) & _f(290) & vQueueDelete.11,(_f(302) & _f(23) => _f(294));
  _f(1) & _f(2) & _f(8) & _f(290) & vQueueDelete.10,(_f(301) & _f(20) => _f(292));
  _f(1) & _f(2) & _f(8) & _f(290) & vQueueDelete.9,(_f(300) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(290) & vQueueDelete.8,(_f(299) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(290) & vQueueDelete.7,(_f(298) & _f(23) => _f(36));
  _f(1) & _f(2) & _f(8) & _f(290) & vQueueDelete.6,(_f(298) & _f(23) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(290) & vQueueDelete.5,(_f(297) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(290) & vQueueDelete.4,(_f(296) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(290) & vQueueDelete.3,(_f(293) & _f(23) => _f(295));
  _f(1) & _f(2) & _f(8) & _f(290) & vQueueDelete.2,(_f(293) & _f(23) => _f(294));
  _f(1) & _f(2) & _f(8) & _f(290) & vQueueDelete.1,(_f(291) & _f(20) => _f(292));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.97,(_f(289) & _f(258) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.96,(_f(288) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.95,(_f(288) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.94,(_f(287) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.93,(_f(287) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.92,(_f(286) & _f(258) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.91,(_f(285) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.90,(_f(285) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.89,(_f(284) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.88,(_f(284) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.87,(_f(283) & _f(258) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.86,(_f(282) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.85,(_f(281) & _f(258) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.84,(_f(280) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.83,(_f(280) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.82,(_f(279) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.81,(_f(279) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.80,(_f(278) & _f(258) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.79,(_f(277) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.78,(_f(277) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.77,(_f(276) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.76,(_f(276) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.75,(_f(275) & _f(258) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.74,(_f(274) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.73,(_f(273) & _f(258) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.72,(_f(272) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.71,(_f(272) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.70,(_f(271) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.69,(_f(271) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.68,(_f(270) & _f(258) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.67,(_f(269) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.66,(_f(269) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.65,(_f(268) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.64,(_f(268) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.63,(_f(267) & _f(258) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.62,(_f(266) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.61,(_f(265) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.60,(_f(264) & _f(258) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.59,(_f(263) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.58,(_f(263) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.57,(_f(262) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.56,(_f(262) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.55,(_f(261) & _f(258) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.54,(_f(260) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.53,(_f(260) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.52,(_f(259) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.51,(_f(259) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.50,(_f(257) & _f(258) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.49,(_f(256) & _f(162) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.48,(_f(255) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.47,(_f(255) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.46,(_f(254) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.45,(_f(254) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.44,(_f(253) & _f(162) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.43,(_f(252) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.42,(_f(252) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.41,(_f(251) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.40,(_f(251) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.39,(_f(250) & _f(162) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.38,(_f(249) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.37,(_f(248) & _f(162) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.36,(_f(247) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.35,(_f(247) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.34,(_f(246) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.33,(_f(246) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.32,(_f(245) & _f(162) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.31,(_f(244) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.30,(_f(244) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.29,(_f(243) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.28,(_f(243) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.27,(_f(242) & _f(162) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.26,(_f(241) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.25,(_f(240) & _f(162) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.24,(_f(239) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.23,(_f(239) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.22,(_f(238) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.21,(_f(238) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.20,(_f(237) & _f(162) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.19,(_f(236) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.18,(_f(236) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.17,(_f(235) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.16,(_f(235) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.15,(_f(234) & _f(162) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.14,(_f(233) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.13,(_f(232) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.12,(_f(231) & _f(162) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.11,(_f(230) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.10,(_f(230) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.9,(_f(229) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.8,(_f(229) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.7,(_f(228) & _f(162) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.6,(_f(227) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.5,(_f(227) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.4,(_f(226) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.3,(_f(226) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.2,(_f(224) & _f(162) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(221) & incrementTick.1,(_f(222) & _f(11) => _f(223));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.121,(_f(220) & _f(162) => _f(163));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.120,(_f(219) & _f(18) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.119,(_f(219) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.118,(_f(219) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.117,(_f(218) & _f(15) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.116,(_f(218) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.115,(_f(218) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.114,(_f(217) & _f(162) => _f(163));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.113,(_f(216) & _f(18) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.112,(_f(216) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.111,(_f(216) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.110,(_f(215) & _f(15) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.109,(_f(215) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.108,(_f(215) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.107,(_f(214) & _f(162) => _f(163));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.106,(_f(213) & _f(18) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.105,(_f(213) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.104,(_f(213) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.103,(_f(212) & _f(15) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.102,(_f(212) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.101,(_f(212) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.100,(_f(211) & _f(162) => _f(163));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.99,(_f(210) & _f(18) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.98,(_f(210) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.97,(_f(210) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.96,(_f(209) & _f(15) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.95,(_f(209) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.94,(_f(209) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.93,(_f(208) & _f(162) => _f(163));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.92,(_f(207) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.91,(_f(206) & _f(162) => _f(163));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.90,(_f(205) & _f(18) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.89,(_f(205) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.88,(_f(205) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.87,(_f(204) & _f(15) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.86,(_f(204) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.85,(_f(204) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.84,(_f(203) & _f(162) => _f(163));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.83,(_f(202) & _f(18) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.82,(_f(202) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.81,(_f(202) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.80,(_f(201) & _f(15) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.79,(_f(201) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.78,(_f(201) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.77,(_f(200) & _f(162) => _f(163));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.76,(_f(199) & _f(18) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.75,(_f(199) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.74,(_f(199) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.73,(_f(198) & _f(15) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.72,(_f(198) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.71,(_f(198) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.70,(_f(197) & _f(162) => _f(163));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.69,(_f(196) & _f(18) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.68,(_f(196) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.67,(_f(196) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.66,(_f(195) & _f(15) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.65,(_f(195) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.64,(_f(195) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.63,(_f(194) & _f(162) => _f(163));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.62,(_f(193) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.61,(_f(192) & _f(162) => _f(163));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.60,(_f(191) & _f(18) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.59,(_f(191) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.58,(_f(191) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.57,(_f(190) & _f(15) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.56,(_f(190) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.55,(_f(190) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.54,(_f(189) & _f(162) => _f(163));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.53,(_f(188) & _f(18) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.52,(_f(188) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.51,(_f(188) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.50,(_f(187) & _f(15) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.49,(_f(187) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.48,(_f(187) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.47,(_f(186) & _f(162) => _f(163));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.46,(_f(185) & _f(18) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.45,(_f(185) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.44,(_f(185) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.43,(_f(184) & _f(15) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.42,(_f(184) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.41,(_f(184) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.40,(_f(183) & _f(162) => _f(163));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.39,(_f(182) & _f(18) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.38,(_f(182) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.37,(_f(182) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.36,(_f(181) & _f(15) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.35,(_f(181) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.34,(_f(181) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.33,(_f(180) & _f(162) => _f(163));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.32,(_f(179) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.31,(_f(178) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.30,(_f(177) & _f(162) => _f(163));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.29,(_f(176) & _f(18) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.28,(_f(176) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.27,(_f(176) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.26,(_f(175) & _f(15) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.25,(_f(175) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.24,(_f(175) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.23,(_f(174) & _f(162) => _f(163));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.22,(_f(173) & _f(18) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.21,(_f(173) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.20,(_f(173) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.19,(_f(172) & _f(15) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.18,(_f(172) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.17,(_f(172) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.16,(_f(171) & _f(162) => _f(163));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.15,(_f(170) & _f(18) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.14,(_f(170) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.13,(_f(170) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.12,(_f(169) & _f(15) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.11,(_f(169) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.10,(_f(169) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.9,(_f(168) & _f(162) => _f(163));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.8,(_f(167) & _f(18) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.7,(_f(167) & _f(18) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.6,(_f(167) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.5,(_f(164) & _f(15) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.4,(_f(164) & _f(15) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.3,(_f(164) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.2,(_f(161) & _f(162) => _f(163));
  _f(1) & _f(2) & _f(8) & _f(158) & xTaskResumeAll.1,(_f(159) & _f(11) => _f(160));
  _f(1) & _f(2) & _f(8) & _f(154) & vTaskEndScheduler.2,(_f(156) & _f(20) => _f(157));
  _f(1) & _f(2) & _f(8) & _f(154) & vTaskEndScheduler.1,(_f(11) => _f(155));
  _f(1) & _f(2) & _f(8) & _f(147) & vTaskStartScheduler.4,(_f(151) & _f(23) => _f(153));
  _f(1) & _f(2) & _f(8) & _f(147) & vTaskStartScheduler.3,(_f(151) & _f(23) => _f(152));
  _f(1) & _f(2) & _f(8) & _f(147) & vTaskStartScheduler.2,(_f(149) & _f(20) => _f(150));
  _f(1) & _f(2) & _f(8) & _f(147) & vTaskStartScheduler.1,(_f(11) => _f(148));
  _f(1) & _f(2) & _f(8) & _f(141) & vTaskDelayUntil.4,(_f(146) & _f(18) => _f(16));
  _f(1) & _f(2) & _f(8) & _f(141) & vTaskDelayUntil.3,(_f(145) & _f(15) => _f(16));
  _f(1) & _f(2) & _f(8) & _f(141) & vTaskDelayUntil.2,(_f(142) & _f(11) => _f(144));
  _f(1) & _f(2) & _f(8) & _f(141) & vTaskDelayUntil.1,(_f(142) & _f(11) => _f(143));
  _f(1) & _f(2) & _f(8) & _f(137) & vTaskDelay.3,(_f(140) & _f(18) => _f(16));
  _f(1) & _f(2) & _f(8) & _f(137) & vTaskDelay.2,(_f(139) & _f(15) => _f(16));
  _f(1) & _f(2) & _f(8) & _f(137) & vTaskDelay.1,(_f(11) => _f(138));
  _f(1) & _f(2) & _f(8) & _f(133) & vTaskSuspend.4,(_f(136) & _f(18) => _f(135));
  _f(1) & _f(2) & _f(8) & _f(133) & vTaskSuspend.3,(_f(136) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(133) & vTaskSuspend.2,(_f(134) & _f(15) => _f(135));
  _f(1) & _f(2) & _f(8) & _f(133) & vTaskSuspend.1,(_f(134) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.32,(_f(132) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.31,(_f(131) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.30,(_f(130) & _f(23) => _f(36));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.29,(_f(130) & _f(23) => _f(112));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.28,(_f(130) & _f(23) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.27,(_f(129) & _f(20) => _f(110));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.26,(_f(128) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.25,(_f(127) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.24,(_f(126) & _f(23) => _f(36));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.23,(_f(126) & _f(23) => _f(112));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.22,(_f(126) & _f(23) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.21,(_f(125) & _f(20) => _f(110));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.20,(_f(124) & _f(18) => _f(123));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.19,(_f(124) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.18,(_f(122) & _f(15) => _f(123));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.17,(_f(122) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.16,(_f(121) & _f(23) => _f(36));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.15,(_f(121) & _f(23) => _f(112));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.14,(_f(121) & _f(23) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.13,(_f(120) & _f(20) => _f(110));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.12,(_f(119) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.11,(_f(118) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.10,(_f(117) & _f(23) => _f(36));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.9,(_f(117) & _f(23) => _f(112));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.8,(_f(117) & _f(23) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.7,(_f(116) & _f(20) => _f(110));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.6,(_f(115) & _f(18) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.5,(_f(113) & _f(15) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.4,(_f(111) & _f(23) => _f(36));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.3,(_f(111) & _f(23) => _f(112));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.2,(_f(111) & _f(23) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(108) & vTaskDelete.1,(_f(109) & _f(20) => _f(110));
  _f(1) & _f(2) & _f(8) & _f(101) & xTaskCreate.6,(_f(107) & _f(23) => _f(36));
  _f(1) & _f(2) & _f(8) & _f(101) & xTaskCreate.5,(_f(107) & _f(23) => _f(105));
  _f(1) & _f(2) & _f(8) & _f(101) & xTaskCreate.4,(_f(106) & _f(20) => _f(103));
  _f(1) & _f(2) & _f(8) & _f(101) & xTaskCreate.3,(_f(104) & _f(23) => _f(36));
  _f(1) & _f(2) & _f(8) & _f(101) & xTaskCreate.2,(_f(104) & _f(23) => _f(105));
  _f(1) & _f(2) & _f(8) & _f(101) & xTaskCreate.1,(_f(102) & _f(20) => _f(103));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.90,(_f(100) & _f(18) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.89,(_f(100) & _f(18) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.88,(_f(99) & _f(15) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.87,(_f(99) & _f(15) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.86,(_f(98) & _f(23) => _f(36));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.85,(_f(98) & _f(23) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.84,(_f(97) & _f(18) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.83,(_f(97) & _f(18) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.82,(_f(96) & _f(15) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.81,(_f(96) & _f(15) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.80,(_f(95) & _f(23) => _f(25));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.79,(_f(95) & _f(23) => _f(24));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.78,(_f(94) & _f(20) => _f(21));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.77,(_f(93) & _f(18) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.76,(_f(93) & _f(18) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.75,(_f(92) & _f(15) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.74,(_f(92) & _f(15) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.73,(_f(91) & _f(23) => _f(57));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.72,(_f(91) & _f(23) => _f(56));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.71,(_f(90) & _f(20) => _f(54));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.70,(_f(89) & _f(18) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.69,(_f(89) & _f(18) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.68,(_f(88) & _f(15) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.67,(_f(88) & _f(15) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.66,(_f(87) & _f(23) => _f(36));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.65,(_f(87) & _f(23) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.64,(_f(86) & _f(18) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.63,(_f(86) & _f(18) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.62,(_f(85) & _f(15) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.61,(_f(85) & _f(15) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.60,(_f(84) & _f(23) => _f(25));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.59,(_f(84) & _f(23) => _f(24));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.58,(_f(83) & _f(20) => _f(21));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.57,(_f(82) & _f(18) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.56,(_f(82) & _f(18) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.55,(_f(81) & _f(15) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.54,(_f(81) & _f(15) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.53,(_f(80) & _f(23) => _f(57));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.52,(_f(80) & _f(23) => _f(56));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.51,(_f(79) & _f(20) => _f(54));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.50,(_f(78) & _f(18) => _f(52));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.49,(_f(77) & _f(18) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.48,(_f(77) & _f(18) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.47,(_f(76) & _f(15) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.46,(_f(76) & _f(15) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.45,(_f(75) & _f(23) => _f(36));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.44,(_f(75) & _f(23) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.43,(_f(74) & _f(18) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.42,(_f(74) & _f(18) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.41,(_f(73) & _f(15) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.40,(_f(73) & _f(15) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.39,(_f(72) & _f(23) => _f(25));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.38,(_f(72) & _f(23) => _f(24));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.37,(_f(71) & _f(20) => _f(21));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.36,(_f(70) & _f(18) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.35,(_f(70) & _f(18) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.34,(_f(69) & _f(15) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.33,(_f(69) & _f(15) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.32,(_f(68) & _f(23) => _f(57));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.31,(_f(68) & _f(23) => _f(56));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.30,(_f(67) & _f(20) => _f(54));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.29,(_f(66) & _f(18) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.28,(_f(66) & _f(18) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.27,(_f(65) & _f(15) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.26,(_f(65) & _f(15) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.25,(_f(64) & _f(23) => _f(36));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.24,(_f(64) & _f(23) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.23,(_f(63) & _f(18) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.22,(_f(63) & _f(18) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.21,(_f(62) & _f(15) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.20,(_f(62) & _f(15) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.19,(_f(61) & _f(23) => _f(25));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.18,(_f(61) & _f(23) => _f(24));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.17,(_f(60) & _f(20) => _f(21));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.16,(_f(59) & _f(18) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.15,(_f(59) & _f(18) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.14,(_f(58) & _f(15) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.13,(_f(58) & _f(15) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.12,(_f(55) & _f(23) => _f(57));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.11,(_f(55) & _f(23) => _f(56));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.10,(_f(53) & _f(20) => _f(54));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.9,(_f(51) & _f(18) => _f(52));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.8,(_f(50) & _f(18) => _f(16));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.7,(_f(49) & _f(15) => _f(16));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.6,(_f(48) & _f(18) => _f(16));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.5,(_f(47) & _f(15) => _f(16));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.4,(_f(44) & _f(11) => _f(46));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.3,(_f(44) & _f(11) => _f(45));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.2,(_f(43) & _f(11) => _f(13));
  _f(1) & _f(2) & _f(8) & _f(42) & xQueueGenericReceive.1,(_f(43) & _f(11) => _f(12));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.30,(_f(41) & _f(18) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.29,(_f(41) & _f(18) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.28,(_f(40) & _f(15) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.27,(_f(40) & _f(15) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.26,(_f(39) & _f(23) => _f(36));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.25,(_f(39) & _f(23) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.24,(_f(38) & _f(18) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.23,(_f(38) & _f(18) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.22,(_f(37) & _f(15) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.21,(_f(37) & _f(15) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.20,(_f(34) & _f(23) => _f(36));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.19,(_f(34) & _f(23) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.18,(_f(33) & _f(18) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.17,(_f(33) & _f(18) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.16,(_f(32) & _f(15) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.15,(_f(32) & _f(15) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.14,(_f(31) & _f(23) => _f(25));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.13,(_f(31) & _f(23) => _f(24));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.12,(_f(30) & _f(20) => _f(21));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.11,(_f(29) & _f(18) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.10,(_f(29) & _f(18) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.9,(_f(26) & _f(15) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.8,(_f(26) & _f(15) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.7,(_f(22) & _f(23) => _f(25));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.6,(_f(22) & _f(23) => _f(24));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.5,(_f(19) & _f(20) => _f(21));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.4,(_f(17) & _f(18) => _f(16));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.3,(_f(14) & _f(15) => _f(16));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.2,(_f(10) & _f(11) => _f(13));
  _f(1) & _f(2) & _f(8) & _f(9) & xQueueGenericSend.1,(_f(10) & _f(11) => _f(12));
  _f(1) & _f(2) & Initialisation.2,(_f(3) & _f(6) => _f(7));
  _f(1) & _f(2) & Initialisation.1,(_f(3) & _f(4) => _f(5))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & BIT = 0..1 & MAX_DELAY: 0..2147483647 & 1<=MAX_DELAY & NULL_PARAMETER: PARAMETER & PRIORITY: POW(NAT) & TICK: POW(NAT) & TICK = 0..MAX_DELAY & TICK_INCREMENT: TICK*TICK +-> TICK & dom(TICK_INCREMENT) = TICK*TICK & TICK_INCREMENT = %(tick,inc).(tick: TICK & inc: TICK | (tick+inc) mod MAX_DELAY) & QUEUE_NULL: QUEUE & ITEM_NULL: ITEM & ITEM_EMPTY: ITEM & TASK_NULL: TASK & REMOVE_EVENT: TASK*POW(QUEUE)*(QUEUE +-> POW(TASK)) +-> (QUEUE +-> POW(TASK)) & REMOVE_EVENT = %(task,queues,pending).(task: TASK & queues: POW(QUEUE) & pending: QUEUE +-> POW(TASK) | %queue.(queue: queues & queue: dom(pending) | pending(queue)-{task})) & NAME: FIN(INTEGER) & not(NAME = {}) & PARAMETER: FIN(INTEGER) & not(PARAMETER = {}) & TASK: FIN(INTEGER) & not(TASK = {}) & STACK: FIN(INTEGER) & not(STACK = {}) & TASK_CODE: FIN(INTEGER) & not(TASK_CODE = {}) & ITEM: FIN(INTEGER) & not(ITEM = {}) & QUEUE: FIN(INTEGER) & not(QUEUE = {}) & (1..3)*{SCHEDULER_STATE}: FIN(NATURAL*{SCHEDULER_STATE}) & not((1..3)*{SCHEDULER_STATE} = {}) & (1..2)*{COPY_POSITION}: FIN(NATURAL*{COPY_POSITION}) & not((1..2)*{COPY_POSITION} = {}) & (1..3)*{QUEUE_TYPE}: FIN(NATURAL*{QUEUE_TYPE}) & not((1..3)*{QUEUE_TYPE} = {}) & (1..10)*{ERROR_DEFINITION}: FIN(NATURAL*{ERROR_DEFINITION}) & not((1..10)*{ERROR_DEFINITION} = {}) & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES & configMAX_PRIORITIES<=2147483647 & 1<=configMAX_PRIORITIES & configTOTAL_HEAP_SIZE: INTEGER & 0<=configTOTAL_HEAP_SIZE & configTOTAL_HEAP_SIZE<=2147483647 & configMINIMAL_STACK_SIZE: INTEGER & 0<=configMINIMAL_STACK_SIZE & configMINIMAL_STACK_SIZE<=2147483647 & INCLUDE_uxTaskPriorityGet: BIT & INCLUDE_vTaskDelete: BIT & INCLUDE_vTaskSuspend: BIT & INCLUDE_xTaskGetSchedulerState: BIT & INCLUDE_vTaskPrioritySet: BIT & INCLUDE_xTaskGetCurrentTaskHandle: BIT & INCLUDE_vTaskDelayUntil: BIT & INCLUDE_vTaskDelay: BIT);
  ("`Included,imported and extended machines properties'" & remove_task: (QUEUE +-> POW(TASK))*POW(TASK) +-> (QUEUE +-> POW(TASK)) & dom(remove_task) = (QUEUE +-> POW(TASK))*POW(TASK) & remove_task = %(q_task,unblocked).(q_task: QUEUE +-> POW(TASK) & unblocked: POW(TASK) | %q1.(q1: QUEUE & q1: dom(q_task) | q_task(q1)-unblocked)) & "`Included,imported and extended machines invariants'" & queues: POW(QUEUE) & queue_items: QUEUE +-> POW(ITEM) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(QUEUE) & semaphores: POW(queues) & mutexes: POW(QUEUE) & mutexes: POW(queues) & queues = dom(queue_items) & queues = dom(queue_receiving) & queues = dom(queue_sending) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_receiving(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_sending(q1) => not(tk: queue_sending(q2))) & mutex_holder: QUEUE +-> TASK & mutexes = dom(mutex_holder) & !mt.(mt: mutexes & queue_items(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => queue_items(mt) = {} or queue_items(mt) = {ITEM_EMPTY}) & active: BOOL & tasks: FIN(TASK) & idle: TASK & not(TASK_NULL: tasks) & blocked: FIN(TASK) & blocked: POW(tasks) & ready: FIN(TASK) & ready: POW(tasks) & suspended: FIN(TASK) & suspended: POW(tasks) & pending: FIN(TASK) & pending: POW(suspended\/blocked) & ready/\blocked = {} & blocked/\suspended = {} & suspended/\ready = {} & tasks = suspended\/blocked\/ready & running: TASK & (active = TRUE => not(ready = {}) & running: ready & idle: ready) & schedulerRunning: BOOL & schedulerSuspended: INTEGER & 0<=schedulerSuspended & "`Included,imported and extended machines assertions'" & !que.(que: QUEUE & not(que: queues) => not(que: mutexes)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => queue_items(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not(queue_items(mt) = {ITEM_EMPTY}) => queue_items(mt) = {}) & (active = TRUE => not(running: suspended)) & (active = TRUE => not(running: blocked)) & (active = TRUE => running: tasks) & (active = TRUE => not(idle: suspended)) & (active = TRUE => not(idle: blocked)) & (active = TRUE => idle: tasks) & (active = TRUE => not(tasks = {})) & "`Seen and used machines assertions'" & BIT: POW(NATURAL) & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES);
  ("`Local hypotheses'" & running$0: TASK & idle$0: TASK & {}: POW(QUEUE) & {}: QUEUE +-> POW(ITEM) & {}: QUEUE +-> POW(TASK) & {}: POW({}) & dom({}) = {} & {}: QUEUE +-> TASK & {}: FIN(TASK) & {}: POW({}\/{}) & 0: INTEGER);
  "`Check that the invariant (tickCount: TICK) is established by the initialisation - ref 3.3'";
  (0: TICK);
  "`Check that the invariant (ran(mutex_holder) <: tasks-{idle}\/{TASK_NULL}) is established by the initialisation - ref 3.3'";
  (ran({}): POW({}-{idle$0}\/{TASK_NULL}));
  ("`Component invariant'" & tickCount: TICK & tickMissed: TICK & schedulerRunning = active & ran(mutex_holder): POW(tasks-{idle}\/{TASK_NULL}) & !mt.(mt: queues & mt: mutexes & queue_items(mt) = {} => mutex_holder(mt): tasks & not(mutex_holder(mt) = idle)) & !(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked) & !(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked));
  ("`xQueueGenericSend preconditions in this component'" & pxQueue: queues & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running = idle) & running: ready);
  ("`Local hypotheses'" & q1: queues);
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (not(running: queue_sending(q1)));
  (not(running: queue_receiving(q1)));
  ("`Local hypotheses'" & running$0: ready & not(running$0 = running) & queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})}: QUEUE +-> POW(TASK) & queues = dom(queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(q1) => not(tk: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(q2))) & blocked\/{running}: FIN(TASK) & running: tasks & ready-{running}: FIN(TASK) & ready-{running}: POW(tasks) & pending: POW(suspended\/(blocked\/{running})) & ready-{running}/\blocked = {} & blocked\/{running}/\suspended = {} & suspended/\ready-{running} = {} & tasks = suspended\/(blocked\/{running})\/ready-{running} & running$0: TASK & (active = TRUE => not(ready = {}) & not(ready = {running}) & (running$0: ready & not(running$0 = running)) & idle: ready) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked) & not(running$0 = running)) & (active = TRUE => running$0: tasks) & que: queues & task: TASK & task: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(que));
  "`Check that the invariant (!(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked)) is preserved by the operation - ref 3.4'";
  (task: blocked\/{running});
  ("`Local hypotheses'" & running$0: ready & not(running$0 = running) & queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})}: QUEUE +-> POW(TASK) & queues = dom(queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(q1) => not(tk: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(q2))) & blocked\/{running}: FIN(TASK) & running: tasks & ready-{running}: FIN(TASK) & ready-{running}: POW(tasks) & pending: POW(suspended\/(blocked\/{running})) & ready-{running}/\blocked = {} & blocked\/{running}/\suspended = {} & suspended/\ready-{running} = {} & tasks = suspended\/(blocked\/{running})\/ready-{running} & running$0: TASK & (active = TRUE => not(ready = {}) & not(ready = {running}) & (running$0: ready & not(running$0 = running)) & idle: ready) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked) & not(running$0 = running)) & (active = TRUE => running$0: tasks) & que: queues & task: TASK & task: queue_receiving(que));
  "`Check that the invariant (!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked)) is preserved by the operation - ref 3.4'";
  ("`Local hypotheses'" & task: TASK & task: blocked & task: queue_receiving(pxQueue) & not(task: queue_sending(pxQueue)) & not(task: pending) & pxQueue: mutexes & queue_items(pxQueue) = {} & queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})}: QUEUE +-> POW(ITEM) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})}) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {} or (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))));
  "`Check that the invariant (ran(mutex_holder) <: tasks-{idle}\/{TASK_NULL}) is preserved by the operation - ref 3.4'";
  (ran(mutex_holder<+{pxQueue|->TASK_NULL}): POW(tasks-{idle}\/{TASK_NULL}));
  ("`Local hypotheses'" & task: TASK & task: blocked & task: queue_receiving(pxQueue) & not(task: queue_sending(pxQueue)) & not(task: pending) & pxQueue: mutexes & queue_items(pxQueue) = {} & queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})}: QUEUE +-> POW(ITEM) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})}) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {} or (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & mt: queues & mt: mutexes & (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {});
  "`Check that the invariant (!mt.(mt: queues & mt: mutexes & queue_items(mt) = {} => mutex_holder(mt): tasks & mutex_holder(mt)/=idle)) is preserved by the operation - ref 3.4'";
  ((mutex_holder<+{pxQueue|->TASK_NULL})(mt): tasks);
  (not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = idle));
  ("`Local hypotheses'" & task: TASK & task: blocked & task: queue_receiving(pxQueue) & not(task: queue_sending(pxQueue)) & not(task: pending) & pxQueue: mutexes & queue_items(pxQueue) = {} & queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})}: QUEUE +-> POW(ITEM) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})}) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {} or (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: queue_sending(que$0));
  (task$0: blocked);
  (not(task$0 = task));
  ("`Local hypotheses'" & task: TASK & task: blocked & task: queue_receiving(pxQueue) & not(task: queue_sending(pxQueue)) & not(task: pending) & pxQueue: mutexes & queue_items(pxQueue) = {} & queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})}: QUEUE +-> POW(ITEM) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})}) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {} or (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0));
  ("`Local hypotheses'" & task: TASK & task: blocked & task: queue_receiving(pxQueue) & not(task: queue_sending(pxQueue)) & not(task: pending) & pxQueue: mutexes & queue_items(pxQueue) = {} & queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})}: QUEUE +-> POW(ITEM) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})}) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {} or (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))));
  ("`Local hypotheses'" & task: TASK & task: blocked & task: queue_receiving(pxQueue) & not(task: queue_sending(pxQueue)) & not(task: pending) & pxQueue: mutexes & queue_items(pxQueue) = {} & queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})}: QUEUE +-> POW(ITEM) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})}) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {} or (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & mt: queues & mt: mutexes & (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {});
  ("`Local hypotheses'" & task: TASK & task: blocked & task: queue_receiving(pxQueue) & not(task: queue_sending(pxQueue)) & not(task: pending) & pxQueue: mutexes & queue_items(pxQueue) = {} & queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})}: QUEUE +-> POW(ITEM) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})}) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {} or (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: queue_sending(que$0));
  ("`Local hypotheses'" & task: TASK & task: blocked & task: queue_receiving(pxQueue) & not(task: queue_sending(pxQueue)) & not(task: pending) & pxQueue: mutexes & queue_items(pxQueue) = {} & queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})}: QUEUE +-> POW(ITEM) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})}) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {} or (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{ITEM_EMPTY})})(mt) = {}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0));
  ("`Local hypotheses'" & task: TASK & task: blocked & task: queue_receiving(pxQueue) & not(task: queue_sending(pxQueue)) & not(task: pending) & not(pxQueue: mutexes) & queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})}) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q2))) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {} or (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & mt: queues & mt: mutexes & (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {});
  (mutex_holder(mt): tasks);
  (not(mutex_holder(mt) = idle));
  ("`Local hypotheses'" & task: TASK & task: blocked & task: queue_receiving(pxQueue) & not(task: queue_sending(pxQueue)) & not(task: pending) & not(pxQueue: mutexes) & queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})}) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q2))) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {} or (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: queue_sending(que$0));
  ("`Local hypotheses'" & task: TASK & task: blocked & task: queue_receiving(pxQueue) & not(task: queue_sending(pxQueue)) & not(task: pending) & not(pxQueue: mutexes) & queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})}) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q2))) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {} or (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0));
  ("`Local hypotheses'" & task: TASK & task: blocked & task: queue_receiving(pxQueue) & not(task: queue_sending(pxQueue)) & not(task: pending) & not(pxQueue: mutexes) & queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})}) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q2))) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {} or (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & mt: queues & mt: mutexes & (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {});
  ("`Local hypotheses'" & task: TASK & task: blocked & task: queue_receiving(pxQueue) & not(task: queue_sending(pxQueue)) & not(task: pending) & not(pxQueue: mutexes) & queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})}) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q2))) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {} or (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: queue_sending(que$0));
  ("`Local hypotheses'" & task: TASK & task: blocked & task: queue_receiving(pxQueue) & not(task: queue_sending(pxQueue)) & not(task: pending) & not(pxQueue: mutexes) & queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})}) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q2))) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {} or (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pvItemToQueue})})(mt) = {}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0));
  ("`xQueueGenericReceive preconditions in this component'" & active = TRUE & not(running = idle) & pxQueue: QUEUE & pxQueue: queues & xTicksToWait: TICK & justPeeking: BOOL);
  ("`Local hypotheses'" & 1<=xTicksToWait & queue_items(pxQueue) = {} & q1: queues);
  ("`Local hypotheses'" & 1<=xTicksToWait & queue_items(pxQueue) = {} & pxQueue: mutexes);
  (mutex_holder(pxQueue): tasks);
  (not(mutex_holder(pxQueue) = idle));
  ("`Local hypotheses'" & 1<=xTicksToWait & queue_items(pxQueue) = {} & pxQueue: mutexes & running$0: ready & not(running$0 = running) & queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(q1) => not(tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(q2))) & blocked\/{running}: FIN(TASK) & ready-{running}: FIN(TASK) & ready-{running}: POW(tasks) & pending: POW(suspended\/(blocked\/{running})) & ready-{running}/\blocked = {} & blocked\/{running}/\suspended = {} & suspended/\ready-{running} = {} & tasks = suspended\/(blocked\/{running})\/ready-{running} & running$0: TASK & (active = TRUE => not(ready = {}) & not(ready = {running}) & (running$0: ready & not(running$0 = running)) & idle: ready) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked) & not(running$0 = running)) & (active = TRUE => running$0: tasks) & que: queues & task: TASK & task: queue_sending(que));
  ("`Local hypotheses'" & 1<=xTicksToWait & queue_items(pxQueue) = {} & pxQueue: mutexes & running$0: ready & not(running$0 = running) & queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(q1) => not(tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(q2))) & blocked\/{running}: FIN(TASK) & ready-{running}: FIN(TASK) & ready-{running}: POW(tasks) & pending: POW(suspended\/(blocked\/{running})) & ready-{running}/\blocked = {} & blocked\/{running}/\suspended = {} & suspended/\ready-{running} = {} & tasks = suspended\/(blocked\/{running})\/ready-{running} & running$0: TASK & (active = TRUE => not(ready = {}) & not(ready = {running}) & (running$0: ready & not(running$0 = running)) & idle: ready) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked) & not(running$0 = running)) & (active = TRUE => running$0: tasks) & que: queues & task: TASK & task: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(que));
  ("`Local hypotheses'" & 1<=xTicksToWait & queue_items(pxQueue) = {} & not(pxQueue: mutexes) & running$0: ready & not(running$0 = running) & queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(q1) => not(tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(q2))) & blocked\/{running}: FIN(TASK) & ready-{running}: FIN(TASK) & ready-{running}: POW(tasks) & pending: POW(suspended\/(blocked\/{running})) & ready-{running}/\blocked = {} & blocked\/{running}/\suspended = {} & suspended/\ready-{running} = {} & tasks = suspended\/(blocked\/{running})\/ready-{running} & running$0: TASK & (active = TRUE => not(ready = {}) & not(ready = {running}) & (running$0: ready & not(running$0 = running)) & idle: ready) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked) & not(running$0 = running)) & (active = TRUE => running$0: tasks) & que: queues & task: TASK & task: queue_sending(que));
  ("`Local hypotheses'" & 1<=xTicksToWait & queue_items(pxQueue) = {} & not(pxQueue: mutexes) & running$0: ready & not(running$0 = running) & queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(q1) => not(tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(q2))) & blocked\/{running}: FIN(TASK) & ready-{running}: FIN(TASK) & ready-{running}: POW(tasks) & pending: POW(suspended\/(blocked\/{running})) & ready-{running}/\blocked = {} & blocked\/{running}/\suspended = {} & suspended/\ready-{running} = {} & tasks = suspended\/(blocked\/{running})\/ready-{running} & running$0: TASK & (active = TRUE => not(ready = {}) & not(ready = {running}) & (running$0: ready & not(running$0 = running)) & idle: ready) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked) & not(running$0 = running)) & (active = TRUE => running$0: tasks) & que: queues & task: TASK & task: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(que));
  ("`Local hypotheses'" & 1<=xTicksToWait & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending));
  (not(running = TASK_NULL));
  ("`Local hypotheses'" & 1<=xTicksToWait & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY} & queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->running}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->running}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} => not((mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))));
  (ran(mutex_holder<+{pxQueue|->running}): POW(tasks-{idle}\/{TASK_NULL}));
  ("`Local hypotheses'" & 1<=xTicksToWait & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY} & queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->running}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->running}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} => not((mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & mt: queues & mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {});
  ((mutex_holder<+{pxQueue|->running})(mt): tasks);
  (not((mutex_holder<+{pxQueue|->running})(mt) = idle));
  ("`Local hypotheses'" & 1<=xTicksToWait & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY} & queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->running}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->running}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} => not((mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0));
  ("`Local hypotheses'" & 1<=xTicksToWait & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY} & queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->running}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->running}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} => not((mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: queue_receiving(que$0));
  ("`Local hypotheses'" & 1<=xTicksToWait & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & not(queue_items(pxQueue) = {ITEM_EMPTY}) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & queue_items(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))));
  ("`Local hypotheses'" & 1<=xTicksToWait & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & not(queue_items(pxQueue) = {ITEM_EMPTY}) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & queue_items(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & mt: queues & mt: mutexes & queue_items(mt) = {});
  ("`Local hypotheses'" & 1<=xTicksToWait & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & not(queue_items(pxQueue) = {ITEM_EMPTY}) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & queue_items(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0));
  ("`Local hypotheses'" & 1<=xTicksToWait & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & not(queue_items(pxQueue) = {ITEM_EMPTY}) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & queue_items(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: queue_receiving(que$0));
  ("`Local hypotheses'" & 1<=xTicksToWait & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & not(pxQueue: mutexes) & queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & mt: queues & mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {});
  ("`Local hypotheses'" & 1<=xTicksToWait & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & not(pxQueue: mutexes) & queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0));
  ("`Local hypotheses'" & 1<=xTicksToWait & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & not(pxQueue: mutexes) & queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: queue_receiving(que$0));
  ("`Local hypotheses'" & 1<=xTicksToWait & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY} & queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->running}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->running}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} => not((mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))));
  ("`Local hypotheses'" & 1<=xTicksToWait & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY} & queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->running}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->running}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} => not((mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & mt: queues & mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {});
  ("`Local hypotheses'" & 1<=xTicksToWait & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY} & queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->running}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->running}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} => not((mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0));
  ("`Local hypotheses'" & 1<=xTicksToWait & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY} & queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->running}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->running}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} => not((mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: queue_receiving(que$0));
  ("`Local hypotheses'" & 1<=xTicksToWait & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & not(queue_items(pxQueue) = {ITEM_EMPTY}) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & queue_items(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))));
  ("`Local hypotheses'" & 1<=xTicksToWait & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & not(queue_items(pxQueue) = {ITEM_EMPTY}) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & queue_items(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & mt: queues & mt: mutexes & queue_items(mt) = {});
  ("`Local hypotheses'" & 1<=xTicksToWait & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & not(queue_items(pxQueue) = {ITEM_EMPTY}) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & queue_items(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0));
  ("`Local hypotheses'" & 1<=xTicksToWait & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & not(queue_items(pxQueue) = {ITEM_EMPTY}) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & queue_items(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: queue_receiving(que$0));
  ("`Local hypotheses'" & 1<=xTicksToWait & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & not(pxQueue: mutexes) & queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & mt: queues & mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {});
  ("`Local hypotheses'" & 1<=xTicksToWait & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & not(pxQueue: mutexes) & queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0));
  ("`Local hypotheses'" & 1<=xTicksToWait & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & not(pxQueue: mutexes) & queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: queue_receiving(que$0));
  ("`Local hypotheses'" & not(1<=xTicksToWait) & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending));
  ("`Local hypotheses'" & not(1<=xTicksToWait) & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY} & queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->running}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->running}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} => not((mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))));
  ("`Local hypotheses'" & not(1<=xTicksToWait) & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY} & queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->running}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->running}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} => not((mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & mt: queues & mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {});
  ("`Local hypotheses'" & not(1<=xTicksToWait) & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY} & queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->running}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->running}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} => not((mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0));
  ("`Local hypotheses'" & not(1<=xTicksToWait) & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY} & queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->running}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->running}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} => not((mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: queue_receiving(que$0));
  ("`Local hypotheses'" & not(1<=xTicksToWait) & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & not(queue_items(pxQueue) = {ITEM_EMPTY}) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & queue_items(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))));
  ("`Local hypotheses'" & not(1<=xTicksToWait) & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & not(queue_items(pxQueue) = {ITEM_EMPTY}) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & queue_items(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & mt: queues & mt: mutexes & queue_items(mt) = {});
  ("`Local hypotheses'" & not(1<=xTicksToWait) & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & not(queue_items(pxQueue) = {ITEM_EMPTY}) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & queue_items(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0));
  ("`Local hypotheses'" & not(1<=xTicksToWait) & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & not(queue_items(pxQueue) = {ITEM_EMPTY}) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & queue_items(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: queue_receiving(que$0));
  ("`Local hypotheses'" & not(1<=xTicksToWait) & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & not(pxQueue: mutexes) & queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & mt: queues & mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {});
  ("`Local hypotheses'" & not(1<=xTicksToWait) & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & not(pxQueue: mutexes) & queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0));
  ("`Local hypotheses'" & not(1<=xTicksToWait) & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & not(pxQueue: mutexes) & queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) & (active = TRUE => not(task: suspended)) & (active = TRUE => task: tasks) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: queue_receiving(que$0));
  ("`Local hypotheses'" & not(1<=xTicksToWait) & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY} & queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->running}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->running}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} => not((mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))));
  ("`Local hypotheses'" & not(1<=xTicksToWait) & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY} & queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->running}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->running}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} => not((mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & mt: queues & mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {});
  ("`Local hypotheses'" & not(1<=xTicksToWait) & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY} & queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->running}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->running}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} => not((mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0));
  ("`Local hypotheses'" & not(1<=xTicksToWait) & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY} & queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->running}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->running}) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} => not((mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (mutex_holder<+{pxQueue|->running})(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: queue_receiving(que$0));
  ("`Local hypotheses'" & not(1<=xTicksToWait) & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & not(queue_items(pxQueue) = {ITEM_EMPTY}) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & queue_items(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))));
  ("`Local hypotheses'" & not(1<=xTicksToWait) & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & not(queue_items(pxQueue) = {ITEM_EMPTY}) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & queue_items(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & mt: queues & mt: mutexes & queue_items(mt) = {});
  ("`Local hypotheses'" & not(1<=xTicksToWait) & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & not(queue_items(pxQueue) = {ITEM_EMPTY}) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & queue_items(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0));
  ("`Local hypotheses'" & not(1<=xTicksToWait) & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & pxQueue: mutexes & not(queue_items(pxQueue) = {ITEM_EMPTY}) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK & mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}) & !mt.(mt: mutexes & queue_items(mt) = {} => not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => (mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: queue_receiving(que$0));
  ("`Local hypotheses'" & not(1<=xTicksToWait) & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & not(pxQueue: mutexes) & queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & mt: queues & mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {});
  ("`Local hypotheses'" & not(1<=xTicksToWait) & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & not(pxQueue: mutexes) & queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0));
  ("`Local hypotheses'" & not(1<=xTicksToWait) & not(queue_items(pxQueue) = {}) & task: TASK & task: queue_sending(pxQueue) & task: blocked & not(task: pending) & justPeeking = FALSE & item: ITEM & item: queue_items(pxQueue) & not(pxQueue: mutexes) & queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK) & queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}) & queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1) => not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2))) & !mt.(mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & blocked-{task}: FIN(TASK) & blocked-{task}: POW(tasks) & ready\/{task}: FIN(TASK) & task: tasks & pending: POW(suspended\/blocked-{task}) & ready\/{task}/\blocked-{task} = {} & blocked-{task}/\suspended = {} & not(task: suspended) & tasks = suspended\/blocked-{task}\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY}) => (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}) & (active = TRUE => not(running: blocked & not(running = task))) & (active = TRUE => not(idle: blocked & not(idle = task))) & que$0: queues & task$0: TASK & task$0: queue_receiving(que$0));
  ("`xTaskCreate preconditions in this component'" & pvTaskCode: TASK_CODE & pcName: NAME & usStackDepth: INTEGER & 0<=usStackDepth & usStackDepth<=2147483647 & pvParameters: POW(PARAMETER) & uxPriority: PRIORITY);
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & not(task = TASK_NULL) & tasks\/{task}: FIN(TASK) & blocked: POW(tasks\/{task}) & ready\/{task}: FIN(TASK) & task: tasks\/{task} & ready: POW(tasks\/{task}) & suspended: POW(tasks\/{task}) & ready\/{task}/\blocked = {} & not(task: suspended) & tasks\/{task} = suspended\/blocked\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & (active = TRUE => not(task: suspended)) & (active = TRUE => not(task: blocked)) & (active = TRUE => task: tasks\/{task}) & (active = TRUE => idle: tasks\/{task}));
  (ran(mutex_holder): POW((tasks\/{task})-{idle}\/{TASK_NULL}));
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & not(task = TASK_NULL) & tasks\/{task}: FIN(TASK) & blocked: POW(tasks\/{task}) & ready\/{task}: FIN(TASK) & task: tasks\/{task} & ready: POW(tasks\/{task}) & suspended: POW(tasks\/{task}) & ready\/{task}/\blocked = {} & not(task: suspended) & tasks\/{task} = suspended\/blocked\/(ready\/{task}) & (active = TRUE => task: ready\/{task} & idle: ready\/{task}) & (active = TRUE => not(task: suspended)) & (active = TRUE => not(task: blocked)) & (active = TRUE => task: tasks\/{task}) & (active = TRUE => idle: tasks\/{task}) & mt: queues & mt: mutexes & queue_items(mt) = {});
  (mutex_holder(mt): tasks\/{task});
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & not(task = TASK_NULL) & tasks\/{task}: FIN(TASK) & blocked: POW(tasks\/{task}) & ready\/{task}: FIN(TASK) & task: tasks\/{task} & ready: POW(tasks\/{task}) & suspended: POW(tasks\/{task}) & ready\/{task}/\blocked = {} & not(task: suspended) & tasks\/{task} = suspended\/blocked\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & (active = TRUE => running: tasks\/{task}) & (active = TRUE => idle: tasks\/{task}));
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & not(task = TASK_NULL) & tasks\/{task}: FIN(TASK) & blocked: POW(tasks\/{task}) & ready\/{task}: FIN(TASK) & task: tasks\/{task} & ready: POW(tasks\/{task}) & suspended: POW(tasks\/{task}) & ready\/{task}/\blocked = {} & not(task: suspended) & tasks\/{task} = suspended\/blocked\/(ready\/{task}) & (active = TRUE => running: ready\/{task} & idle: ready\/{task}) & (active = TRUE => running: tasks\/{task}) & (active = TRUE => idle: tasks\/{task}) & mt: queues & mt: mutexes & queue_items(mt) = {});
  ("`vTaskDelete preconditions in this component'" & INCLUDE_vTaskDelete = 1 & pxTaskToDelete: TASK & pxTaskToDelete: tasks & not(pxTaskToDelete = idle) & not(pxTaskToDelete: ran(mutex_holder)));
  ("`Local hypotheses'" & pxQueue: queues & pxTaskToDelete: queue_receiving(pxQueue) & pxQueue$0: queues & pxTaskToDelete: queue_sending(pxQueue$0) & pxTaskToDelete: ready & pxTaskToDelete = running & running$0: ready & not(running$0 = pxTaskToDelete) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}) & queues = dom(queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & tasks-{pxTaskToDelete}: FIN(TASK) & not(TASK_NULL: tasks & not(TASK_NULL = pxTaskToDelete)) & blocked: POW(tasks-{pxTaskToDelete}) & ready-{pxTaskToDelete}: FIN(TASK) & ready-{pxTaskToDelete}: POW(tasks-{pxTaskToDelete}) & suspended: POW(tasks-{pxTaskToDelete}) & ready-{pxTaskToDelete}/\blocked = {} & suspended/\ready-{pxTaskToDelete} = {} & tasks-{pxTaskToDelete} = suspended\/blocked\/ready-{pxTaskToDelete} & running$0: TASK & (active = TRUE => not(ready = {}) & not(ready = {pxTaskToDelete}) & (running$0: ready & not(running$0 = pxTaskToDelete)) & idle: ready) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked)) & (active = TRUE => running$0: tasks & not(running$0 = pxTaskToDelete)) & (active = TRUE => not(tasks = {}) & not(tasks = {pxTaskToDelete})));
  (ran(mutex_holder): POW(tasks-{pxTaskToDelete}-{idle}\/{TASK_NULL}));
  ("`Local hypotheses'" & pxQueue: queues & pxTaskToDelete: queue_receiving(pxQueue) & pxQueue$0: queues & pxTaskToDelete: queue_sending(pxQueue$0) & pxTaskToDelete: ready & pxTaskToDelete = running & running$0: ready & not(running$0 = pxTaskToDelete) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}) & queues = dom(queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & tasks-{pxTaskToDelete}: FIN(TASK) & not(TASK_NULL: tasks & not(TASK_NULL = pxTaskToDelete)) & blocked: POW(tasks-{pxTaskToDelete}) & ready-{pxTaskToDelete}: FIN(TASK) & ready-{pxTaskToDelete}: POW(tasks-{pxTaskToDelete}) & suspended: POW(tasks-{pxTaskToDelete}) & ready-{pxTaskToDelete}/\blocked = {} & suspended/\ready-{pxTaskToDelete} = {} & tasks-{pxTaskToDelete} = suspended\/blocked\/ready-{pxTaskToDelete} & running$0: TASK & (active = TRUE => not(ready = {}) & not(ready = {pxTaskToDelete}) & (running$0: ready & not(running$0 = pxTaskToDelete)) & idle: ready) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked)) & (active = TRUE => running$0: tasks & not(running$0 = pxTaskToDelete)) & (active = TRUE => not(tasks = {}) & not(tasks = {pxTaskToDelete})) & mt: queues & mt: mutexes & queue_items(mt) = {});
  (not(mutex_holder(mt) = pxTaskToDelete));
  ("`Local hypotheses'" & pxQueue: queues & pxTaskToDelete: queue_receiving(pxQueue) & pxQueue$0: queues & pxTaskToDelete: queue_sending(pxQueue$0) & pxTaskToDelete: ready & pxTaskToDelete = running & running$0: ready & not(running$0 = pxTaskToDelete) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}) & queues = dom(queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & tasks-{pxTaskToDelete}: FIN(TASK) & not(TASK_NULL: tasks & not(TASK_NULL = pxTaskToDelete)) & blocked: POW(tasks-{pxTaskToDelete}) & ready-{pxTaskToDelete}: FIN(TASK) & ready-{pxTaskToDelete}: POW(tasks-{pxTaskToDelete}) & suspended: POW(tasks-{pxTaskToDelete}) & ready-{pxTaskToDelete}/\blocked = {} & suspended/\ready-{pxTaskToDelete} = {} & tasks-{pxTaskToDelete} = suspended\/blocked\/ready-{pxTaskToDelete} & running$0: TASK & (active = TRUE => not(ready = {}) & not(ready = {pxTaskToDelete}) & (running$0: ready & not(running$0 = pxTaskToDelete)) & idle: ready) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked)) & (active = TRUE => running$0: tasks & not(running$0 = pxTaskToDelete)) & (active = TRUE => not(tasks = {}) & not(tasks = {pxTaskToDelete})) & que: queues & task: TASK & task: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(que));
  (task: blocked);
  ("`Local hypotheses'" & pxQueue: queues & pxTaskToDelete: queue_receiving(pxQueue) & pxQueue$0: queues & pxTaskToDelete: queue_sending(pxQueue$0) & pxTaskToDelete: ready & pxTaskToDelete = running & running$0: ready & not(running$0 = pxTaskToDelete) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}) & queues = dom(queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & tasks-{pxTaskToDelete}: FIN(TASK) & not(TASK_NULL: tasks & not(TASK_NULL = pxTaskToDelete)) & blocked: POW(tasks-{pxTaskToDelete}) & ready-{pxTaskToDelete}: FIN(TASK) & ready-{pxTaskToDelete}: POW(tasks-{pxTaskToDelete}) & suspended: POW(tasks-{pxTaskToDelete}) & ready-{pxTaskToDelete}/\blocked = {} & suspended/\ready-{pxTaskToDelete} = {} & tasks-{pxTaskToDelete} = suspended\/blocked\/ready-{pxTaskToDelete} & running$0: TASK & (active = TRUE => not(ready = {}) & not(ready = {pxTaskToDelete}) & (running$0: ready & not(running$0 = pxTaskToDelete)) & idle: ready) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked)) & (active = TRUE => running$0: tasks & not(running$0 = pxTaskToDelete)) & (active = TRUE => not(tasks = {}) & not(tasks = {pxTaskToDelete})) & que: queues & task: TASK & task: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(que));
  ("`Local hypotheses'" & pxQueue: queues & pxTaskToDelete: queue_receiving(pxQueue) & pxQueue$0: queues & pxTaskToDelete: queue_sending(pxQueue$0) & pxTaskToDelete: ready & not(pxTaskToDelete = running) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}) & queues = dom(queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & tasks-{pxTaskToDelete}: FIN(TASK) & not(TASK_NULL: tasks & not(TASK_NULL = pxTaskToDelete)) & blocked: POW(tasks-{pxTaskToDelete}) & ready-{pxTaskToDelete}: FIN(TASK) & ready-{pxTaskToDelete}: POW(tasks-{pxTaskToDelete}) & suspended: POW(tasks-{pxTaskToDelete}) & ready-{pxTaskToDelete}/\blocked = {} & suspended/\ready-{pxTaskToDelete} = {} & tasks-{pxTaskToDelete} = suspended\/blocked\/ready-{pxTaskToDelete} & (active = TRUE => not(ready = {}) & not(ready = {pxTaskToDelete}) & running: ready & idle: ready) & (active = TRUE => not(tasks = {}) & not(tasks = {pxTaskToDelete})));
  ("`Local hypotheses'" & pxQueue: queues & pxTaskToDelete: queue_receiving(pxQueue) & pxQueue$0: queues & pxTaskToDelete: queue_sending(pxQueue$0) & pxTaskToDelete: ready & not(pxTaskToDelete = running) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}) & queues = dom(queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & tasks-{pxTaskToDelete}: FIN(TASK) & not(TASK_NULL: tasks & not(TASK_NULL = pxTaskToDelete)) & blocked: POW(tasks-{pxTaskToDelete}) & ready-{pxTaskToDelete}: FIN(TASK) & ready-{pxTaskToDelete}: POW(tasks-{pxTaskToDelete}) & suspended: POW(tasks-{pxTaskToDelete}) & ready-{pxTaskToDelete}/\blocked = {} & suspended/\ready-{pxTaskToDelete} = {} & tasks-{pxTaskToDelete} = suspended\/blocked\/ready-{pxTaskToDelete} & (active = TRUE => not(ready = {}) & not(ready = {pxTaskToDelete}) & running: ready & idle: ready) & (active = TRUE => not(tasks = {}) & not(tasks = {pxTaskToDelete})) & mt: queues & mt: mutexes & queue_items(mt) = {});
  ("`Local hypotheses'" & pxQueue: queues & pxTaskToDelete: queue_receiving(pxQueue) & pxQueue$0: queues & pxTaskToDelete: queue_sending(pxQueue$0) & pxTaskToDelete: ready & not(pxTaskToDelete = running) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}) & queues = dom(queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & tasks-{pxTaskToDelete}: FIN(TASK) & not(TASK_NULL: tasks & not(TASK_NULL = pxTaskToDelete)) & blocked: POW(tasks-{pxTaskToDelete}) & ready-{pxTaskToDelete}: FIN(TASK) & ready-{pxTaskToDelete}: POW(tasks-{pxTaskToDelete}) & suspended: POW(tasks-{pxTaskToDelete}) & ready-{pxTaskToDelete}/\blocked = {} & suspended/\ready-{pxTaskToDelete} = {} & tasks-{pxTaskToDelete} = suspended\/blocked\/ready-{pxTaskToDelete} & (active = TRUE => not(ready = {}) & not(ready = {pxTaskToDelete}) & running: ready & idle: ready) & (active = TRUE => not(tasks = {}) & not(tasks = {pxTaskToDelete})) & que: queues & task: TASK & task: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(que));
  ("`Local hypotheses'" & pxQueue: queues & pxTaskToDelete: queue_receiving(pxQueue) & pxQueue$0: queues & pxTaskToDelete: queue_sending(pxQueue$0) & pxTaskToDelete: ready & not(pxTaskToDelete = running) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}) & queues = dom(queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & tasks-{pxTaskToDelete}: FIN(TASK) & not(TASK_NULL: tasks & not(TASK_NULL = pxTaskToDelete)) & blocked: POW(tasks-{pxTaskToDelete}) & ready-{pxTaskToDelete}: FIN(TASK) & ready-{pxTaskToDelete}: POW(tasks-{pxTaskToDelete}) & suspended: POW(tasks-{pxTaskToDelete}) & ready-{pxTaskToDelete}/\blocked = {} & suspended/\ready-{pxTaskToDelete} = {} & tasks-{pxTaskToDelete} = suspended\/blocked\/ready-{pxTaskToDelete} & (active = TRUE => not(ready = {}) & not(ready = {pxTaskToDelete}) & running: ready & idle: ready) & (active = TRUE => not(tasks = {}) & not(tasks = {pxTaskToDelete})) & que: queues & task: TASK & task: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(que));
  ("`Local hypotheses'" & pxQueue: queues & pxTaskToDelete: queue_receiving(pxQueue) & pxQueue$0: queues & pxTaskToDelete: queue_sending(pxQueue$0) & not(pxTaskToDelete: ready) & pxTaskToDelete: blocked & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}) & queues = dom(queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & tasks-{pxTaskToDelete}: FIN(TASK) & not(TASK_NULL: tasks & not(TASK_NULL = pxTaskToDelete)) & blocked-{pxTaskToDelete}: FIN(TASK) & blocked-{pxTaskToDelete}: POW(tasks-{pxTaskToDelete}) & ready: POW(tasks-{pxTaskToDelete}) & suspended: POW(tasks-{pxTaskToDelete}) & pending-{pxTaskToDelete}: FIN(TASK) & pending-{pxTaskToDelete}: POW(suspended\/blocked-{pxTaskToDelete}) & ready/\blocked-{pxTaskToDelete} = {} & blocked-{pxTaskToDelete}/\suspended = {} & tasks-{pxTaskToDelete} = suspended\/blocked-{pxTaskToDelete}\/ready & (active = TRUE => not(running: blocked & not(running = pxTaskToDelete))) & (active = TRUE => running: tasks & not(running = pxTaskToDelete)) & (active = TRUE => not(tasks = {}) & not(tasks = {pxTaskToDelete})));
  ("`Local hypotheses'" & pxQueue: queues & pxTaskToDelete: queue_receiving(pxQueue) & pxQueue$0: queues & pxTaskToDelete: queue_sending(pxQueue$0) & not(pxTaskToDelete: ready) & pxTaskToDelete: blocked & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}) & queues = dom(queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & tasks-{pxTaskToDelete}: FIN(TASK) & not(TASK_NULL: tasks & not(TASK_NULL = pxTaskToDelete)) & blocked-{pxTaskToDelete}: FIN(TASK) & blocked-{pxTaskToDelete}: POW(tasks-{pxTaskToDelete}) & ready: POW(tasks-{pxTaskToDelete}) & suspended: POW(tasks-{pxTaskToDelete}) & pending-{pxTaskToDelete}: FIN(TASK) & pending-{pxTaskToDelete}: POW(suspended\/blocked-{pxTaskToDelete}) & ready/\blocked-{pxTaskToDelete} = {} & blocked-{pxTaskToDelete}/\suspended = {} & tasks-{pxTaskToDelete} = suspended\/blocked-{pxTaskToDelete}\/ready & (active = TRUE => not(running: blocked & not(running = pxTaskToDelete))) & (active = TRUE => running: tasks & not(running = pxTaskToDelete)) & (active = TRUE => not(tasks = {}) & not(tasks = {pxTaskToDelete})) & mt: queues & mt: mutexes & queue_items(mt) = {});
  ("`Local hypotheses'" & pxQueue: queues & pxTaskToDelete: queue_receiving(pxQueue) & pxQueue$0: queues & pxTaskToDelete: queue_sending(pxQueue$0) & not(pxTaskToDelete: ready) & pxTaskToDelete: blocked & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}) & queues = dom(queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & tasks-{pxTaskToDelete}: FIN(TASK) & not(TASK_NULL: tasks & not(TASK_NULL = pxTaskToDelete)) & blocked-{pxTaskToDelete}: FIN(TASK) & blocked-{pxTaskToDelete}: POW(tasks-{pxTaskToDelete}) & ready: POW(tasks-{pxTaskToDelete}) & suspended: POW(tasks-{pxTaskToDelete}) & pending-{pxTaskToDelete}: FIN(TASK) & pending-{pxTaskToDelete}: POW(suspended\/blocked-{pxTaskToDelete}) & ready/\blocked-{pxTaskToDelete} = {} & blocked-{pxTaskToDelete}/\suspended = {} & tasks-{pxTaskToDelete} = suspended\/blocked-{pxTaskToDelete}\/ready & (active = TRUE => not(running: blocked & not(running = pxTaskToDelete))) & (active = TRUE => running: tasks & not(running = pxTaskToDelete)) & (active = TRUE => not(tasks = {}) & not(tasks = {pxTaskToDelete})) & que: queues & task: TASK & task: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(que));
  (not(task = pxTaskToDelete));
  ("`Local hypotheses'" & pxQueue: queues & pxTaskToDelete: queue_receiving(pxQueue) & pxQueue$0: queues & pxTaskToDelete: queue_sending(pxQueue$0) & not(pxTaskToDelete: ready) & pxTaskToDelete: blocked & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}) & queues = dom(queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & tasks-{pxTaskToDelete}: FIN(TASK) & not(TASK_NULL: tasks & not(TASK_NULL = pxTaskToDelete)) & blocked-{pxTaskToDelete}: FIN(TASK) & blocked-{pxTaskToDelete}: POW(tasks-{pxTaskToDelete}) & ready: POW(tasks-{pxTaskToDelete}) & suspended: POW(tasks-{pxTaskToDelete}) & pending-{pxTaskToDelete}: FIN(TASK) & pending-{pxTaskToDelete}: POW(suspended\/blocked-{pxTaskToDelete}) & ready/\blocked-{pxTaskToDelete} = {} & blocked-{pxTaskToDelete}/\suspended = {} & tasks-{pxTaskToDelete} = suspended\/blocked-{pxTaskToDelete}\/ready & (active = TRUE => not(running: blocked & not(running = pxTaskToDelete))) & (active = TRUE => running: tasks & not(running = pxTaskToDelete)) & (active = TRUE => not(tasks = {}) & not(tasks = {pxTaskToDelete})) & que: queues & task: TASK & task: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(que));
  ("`Local hypotheses'" & pxQueue: queues & pxTaskToDelete: queue_receiving(pxQueue) & pxQueue$0: queues & pxTaskToDelete: queue_sending(pxQueue$0) & not(pxTaskToDelete: ready) & not(pxTaskToDelete: blocked) & pxTaskToDelete: suspended & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}) & queues = dom(queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & tasks-{pxTaskToDelete}: FIN(TASK) & not(TASK_NULL: tasks & not(TASK_NULL = pxTaskToDelete)) & blocked: POW(tasks-{pxTaskToDelete}) & ready: POW(tasks-{pxTaskToDelete}) & suspended-{pxTaskToDelete}: FIN(TASK) & suspended-{pxTaskToDelete}: POW(tasks-{pxTaskToDelete}) & pending-{pxTaskToDelete}: FIN(TASK) & pending-{pxTaskToDelete}: POW(suspended-{pxTaskToDelete}\/blocked) & blocked/\suspended-{pxTaskToDelete} = {} & suspended-{pxTaskToDelete}/\ready = {} & tasks-{pxTaskToDelete} = suspended-{pxTaskToDelete}\/blocked\/ready & (active = TRUE => not(running: suspended & not(running = pxTaskToDelete))) & (active = TRUE => running: tasks & not(running = pxTaskToDelete)) & (active = TRUE => not(tasks = {}) & not(tasks = {pxTaskToDelete})));
  ("`Local hypotheses'" & pxQueue: queues & pxTaskToDelete: queue_receiving(pxQueue) & pxQueue$0: queues & pxTaskToDelete: queue_sending(pxQueue$0) & not(pxTaskToDelete: ready) & not(pxTaskToDelete: blocked) & pxTaskToDelete: suspended & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}) & queues = dom(queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & tasks-{pxTaskToDelete}: FIN(TASK) & not(TASK_NULL: tasks & not(TASK_NULL = pxTaskToDelete)) & blocked: POW(tasks-{pxTaskToDelete}) & ready: POW(tasks-{pxTaskToDelete}) & suspended-{pxTaskToDelete}: FIN(TASK) & suspended-{pxTaskToDelete}: POW(tasks-{pxTaskToDelete}) & pending-{pxTaskToDelete}: FIN(TASK) & pending-{pxTaskToDelete}: POW(suspended-{pxTaskToDelete}\/blocked) & blocked/\suspended-{pxTaskToDelete} = {} & suspended-{pxTaskToDelete}/\ready = {} & tasks-{pxTaskToDelete} = suspended-{pxTaskToDelete}\/blocked\/ready & (active = TRUE => not(running: suspended & not(running = pxTaskToDelete))) & (active = TRUE => running: tasks & not(running = pxTaskToDelete)) & (active = TRUE => not(tasks = {}) & not(tasks = {pxTaskToDelete})) & mt: queues & mt: mutexes & queue_items(mt) = {});
  ("`Local hypotheses'" & pxQueue: queues & pxTaskToDelete: queue_receiving(pxQueue) & pxQueue$0: queues & pxTaskToDelete: queue_sending(pxQueue$0) & not(pxTaskToDelete: ready) & not(pxTaskToDelete: blocked) & pxTaskToDelete: suspended & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}) & queues = dom(queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & tasks-{pxTaskToDelete}: FIN(TASK) & not(TASK_NULL: tasks & not(TASK_NULL = pxTaskToDelete)) & blocked: POW(tasks-{pxTaskToDelete}) & ready: POW(tasks-{pxTaskToDelete}) & suspended-{pxTaskToDelete}: FIN(TASK) & suspended-{pxTaskToDelete}: POW(tasks-{pxTaskToDelete}) & pending-{pxTaskToDelete}: FIN(TASK) & pending-{pxTaskToDelete}: POW(suspended-{pxTaskToDelete}\/blocked) & blocked/\suspended-{pxTaskToDelete} = {} & suspended-{pxTaskToDelete}/\ready = {} & tasks-{pxTaskToDelete} = suspended-{pxTaskToDelete}\/blocked\/ready & (active = TRUE => not(running: suspended & not(running = pxTaskToDelete))) & (active = TRUE => running: tasks & not(running = pxTaskToDelete)) & (active = TRUE => not(tasks = {}) & not(tasks = {pxTaskToDelete})) & que: queues & task: TASK & task: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(que));
  ("`Local hypotheses'" & pxQueue: queues & pxTaskToDelete: queue_receiving(pxQueue) & pxQueue$0: queues & pxTaskToDelete: queue_sending(pxQueue$0) & not(pxTaskToDelete: ready) & not(pxTaskToDelete: blocked) & pxTaskToDelete: suspended & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}) & queues = dom(queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & tasks-{pxTaskToDelete}: FIN(TASK) & not(TASK_NULL: tasks & not(TASK_NULL = pxTaskToDelete)) & blocked: POW(tasks-{pxTaskToDelete}) & ready: POW(tasks-{pxTaskToDelete}) & suspended-{pxTaskToDelete}: FIN(TASK) & suspended-{pxTaskToDelete}: POW(tasks-{pxTaskToDelete}) & pending-{pxTaskToDelete}: FIN(TASK) & pending-{pxTaskToDelete}: POW(suspended-{pxTaskToDelete}\/blocked) & blocked/\suspended-{pxTaskToDelete} = {} & suspended-{pxTaskToDelete}/\ready = {} & tasks-{pxTaskToDelete} = suspended-{pxTaskToDelete}\/blocked\/ready & (active = TRUE => not(running: suspended & not(running = pxTaskToDelete))) & (active = TRUE => running: tasks & not(running = pxTaskToDelete)) & (active = TRUE => not(tasks = {}) & not(tasks = {pxTaskToDelete})) & que: queues & task: TASK & task: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(que));
  ("`Local hypotheses'" & pxQueue: queues & pxTaskToDelete: queue_receiving(pxQueue) & pxQueue$0: queues & pxTaskToDelete: queue_sending(pxQueue$0) & not(pxTaskToDelete: ready) & not(pxTaskToDelete: blocked) & not(pxTaskToDelete: suspended) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}) & queues = dom(queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & tasks-{pxTaskToDelete}: FIN(TASK) & not(TASK_NULL: tasks & not(TASK_NULL = pxTaskToDelete)) & blocked: POW(tasks-{pxTaskToDelete}) & ready: POW(tasks-{pxTaskToDelete}) & suspended: POW(tasks-{pxTaskToDelete}) & tasks-{pxTaskToDelete} = suspended\/blocked\/ready & (active = TRUE => running: tasks & not(running = pxTaskToDelete)) & (active = TRUE => not(tasks = {}) & not(tasks = {pxTaskToDelete})));
  ("`Local hypotheses'" & pxQueue: queues & pxTaskToDelete: queue_receiving(pxQueue) & pxQueue$0: queues & pxTaskToDelete: queue_sending(pxQueue$0) & not(pxTaskToDelete: ready) & not(pxTaskToDelete: blocked) & not(pxTaskToDelete: suspended) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}) & queues = dom(queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & tasks-{pxTaskToDelete}: FIN(TASK) & not(TASK_NULL: tasks & not(TASK_NULL = pxTaskToDelete)) & blocked: POW(tasks-{pxTaskToDelete}) & ready: POW(tasks-{pxTaskToDelete}) & suspended: POW(tasks-{pxTaskToDelete}) & tasks-{pxTaskToDelete} = suspended\/blocked\/ready & (active = TRUE => running: tasks & not(running = pxTaskToDelete)) & (active = TRUE => not(tasks = {}) & not(tasks = {pxTaskToDelete})) & mt: queues & mt: mutexes & queue_items(mt) = {});
  ("`Local hypotheses'" & pxQueue: queues & pxTaskToDelete: queue_receiving(pxQueue) & pxQueue$0: queues & pxTaskToDelete: queue_sending(pxQueue$0) & not(pxTaskToDelete: ready) & not(pxTaskToDelete: blocked) & not(pxTaskToDelete: suspended) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}) & queues = dom(queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & tasks-{pxTaskToDelete}: FIN(TASK) & not(TASK_NULL: tasks & not(TASK_NULL = pxTaskToDelete)) & blocked: POW(tasks-{pxTaskToDelete}) & ready: POW(tasks-{pxTaskToDelete}) & suspended: POW(tasks-{pxTaskToDelete}) & tasks-{pxTaskToDelete} = suspended\/blocked\/ready & (active = TRUE => running: tasks & not(running = pxTaskToDelete)) & (active = TRUE => not(tasks = {}) & not(tasks = {pxTaskToDelete})) & que: queues & task: TASK & task: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(que));
  ("`Local hypotheses'" & pxQueue: queues & pxTaskToDelete: queue_receiving(pxQueue) & pxQueue$0: queues & pxTaskToDelete: queue_sending(pxQueue$0) & not(pxTaskToDelete: ready) & not(pxTaskToDelete: blocked) & not(pxTaskToDelete: suspended) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}}) & queues = dom(queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToDelete}})(q2))) & tasks-{pxTaskToDelete}: FIN(TASK) & not(TASK_NULL: tasks & not(TASK_NULL = pxTaskToDelete)) & blocked: POW(tasks-{pxTaskToDelete}) & ready: POW(tasks-{pxTaskToDelete}) & suspended: POW(tasks-{pxTaskToDelete}) & tasks-{pxTaskToDelete} = suspended\/blocked\/ready & (active = TRUE => running: tasks & not(running = pxTaskToDelete)) & (active = TRUE => not(tasks = {}) & not(tasks = {pxTaskToDelete})) & que: queues & task: TASK & task: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToDelete}})(que));
  ("`vTaskSuspend preconditions in this component'" & INCLUDE_vTaskSuspend = 1 & pxTaskToSuspend: TASK & pxTaskToSuspend: tasks & not(pxTaskToSuspend = idle));
  ("`Local hypotheses'" & not(pxTaskToSuspend: suspended) & pxTaskToSuspend: blocked & pxQueue$0: queues & pxTaskToSuspend: queue_sending(pxQueue$0) & pxQueue: queues & pxTaskToSuspend: queue_receiving(pxQueue) & not(pxTaskToSuspend: ready) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToSuspend}}: QUEUE +-> POW(TASK) & queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToSuspend}}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToSuspend}}) & queues = dom(queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToSuspend}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToSuspend}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToSuspend}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToSuspend}})(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToSuspend}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToSuspend}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToSuspend}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToSuspend}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToSuspend}})(q2))) & blocked-{pxTaskToSuspend}: FIN(TASK) & blocked-{pxTaskToSuspend}: POW(tasks) & suspended\/{pxTaskToSuspend}: FIN(TASK) & pending: POW(suspended\/{pxTaskToSuspend}\/blocked-{pxTaskToSuspend}) & ready/\blocked-{pxTaskToSuspend} = {} & blocked-{pxTaskToSuspend}/\suspended = {} & suspended\/{pxTaskToSuspend}/\ready = {} & tasks = suspended\/{pxTaskToSuspend}\/blocked-{pxTaskToSuspend}\/ready & (active = TRUE => not(running: suspended) & not(running = pxTaskToSuspend)) & (active = TRUE => not(running: blocked & not(running = pxTaskToSuspend))) & que: queues & task: TASK & task: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToSuspend}})(que));
  (not(task = pxTaskToSuspend));
  ("`Local hypotheses'" & not(pxTaskToSuspend: suspended) & pxTaskToSuspend: blocked & pxQueue$0: queues & pxTaskToSuspend: queue_sending(pxQueue$0) & pxQueue: queues & pxTaskToSuspend: queue_receiving(pxQueue) & not(pxTaskToSuspend: ready) & queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToSuspend}}: QUEUE +-> POW(TASK) & queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToSuspend}}: QUEUE +-> POW(TASK) & queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToSuspend}}) & queues = dom(queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToSuspend}}) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToSuspend}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToSuspend}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToSuspend}})(q2) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToSuspend}})(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToSuspend}})(q1) => not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToSuspend}})(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToSuspend}})(q1) => not(tk: (queue_sending<+{pxQueue$0|->queue_sending(pxQueue$0)-{pxTaskToSuspend}})(q2))) & blocked-{pxTaskToSuspend}: FIN(TASK) & blocked-{pxTaskToSuspend}: POW(tasks) & suspended\/{pxTaskToSuspend}: FIN(TASK) & pending: POW(suspended\/{pxTaskToSuspend}\/blocked-{pxTaskToSuspend}) & ready/\blocked-{pxTaskToSuspend} = {} & blocked-{pxTaskToSuspend}/\suspended = {} & suspended\/{pxTaskToSuspend}/\ready = {} & tasks = suspended\/{pxTaskToSuspend}\/blocked-{pxTaskToSuspend}\/ready & (active = TRUE => not(running: suspended) & not(running = pxTaskToSuspend)) & (active = TRUE => not(running: blocked & not(running = pxTaskToSuspend))) & que: queues & task: TASK & task: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{pxTaskToSuspend}})(que));
  ("`vTaskDelay preconditions in this component'" & xTicksToDelay: TICK & INCLUDE_vTaskDelay = 1 & not(running = idle) & not(TICK_INCREMENT(tickCount,xTicksToDelay) = 0) & running: ready);
  (TICK_INCREMENT(tickCount,xTicksToDelay): TICK);
  ("`Local hypotheses'" & running$0: ready & not(running$0 = running) & blocked\/{running}: FIN(TASK) & running: tasks & ready-{running}: FIN(TASK) & ready-{running}: POW(tasks) & pending: POW(suspended\/(blocked\/{running})) & ready-{running}/\blocked = {} & blocked\/{running}/\suspended = {} & suspended/\ready-{running} = {} & tasks = suspended\/(blocked\/{running})\/ready-{running} & running$0: TASK & (active = TRUE => not(ready = {}) & not(ready = {running}) & (running$0: ready & not(running$0 = running)) & idle: ready) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked) & not(running$0 = running)) & (active = TRUE => running$0: tasks) & que: queues & task: TASK & task: queue_sending(que));
  ("`Local hypotheses'" & running$0: ready & not(running$0 = running) & blocked\/{running}: FIN(TASK) & running: tasks & ready-{running}: FIN(TASK) & ready-{running}: POW(tasks) & pending: POW(suspended\/(blocked\/{running})) & ready-{running}/\blocked = {} & blocked\/{running}/\suspended = {} & suspended/\ready-{running} = {} & tasks = suspended\/(blocked\/{running})\/ready-{running} & running$0: TASK & (active = TRUE => not(ready = {}) & not(ready = {running}) & (running$0: ready & not(running$0 = running)) & idle: ready) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked) & not(running$0 = running)) & (active = TRUE => running$0: tasks) & que: queues & task: TASK & task: queue_receiving(que));
  ("`vTaskDelayUntil preconditions in this component'" & pxPreviousWakeTime: TICK & xTimeIncrement: TICK & not(running = idle) & INCLUDE_vTaskDelayUntil = 1);
  ("`Local hypotheses'" & schedulerRunning = TRUE & not(TICK_INCREMENT(pxPreviousWakeTime,xTimeIncrement) = 0));
  (running: ready);
  (TICK_INCREMENT(pxPreviousWakeTime,xTimeIncrement): TICK);
  ("`Local hypotheses'" & schedulerRunning = TRUE & not(TICK_INCREMENT(pxPreviousWakeTime,xTimeIncrement) = 0) & running$0: ready & not(running$0 = running) & blocked\/{running}: FIN(TASK) & running: tasks & ready-{running}: FIN(TASK) & ready-{running}: POW(tasks) & pending: POW(suspended\/(blocked\/{running})) & ready-{running}/\blocked = {} & blocked\/{running}/\suspended = {} & suspended/\ready-{running} = {} & tasks = suspended\/(blocked\/{running})\/ready-{running} & running$0: TASK & (active = TRUE => not(ready = {}) & not(ready = {running}) & (running$0: ready & not(running$0 = running)) & idle: ready) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked) & not(running$0 = running)) & (active = TRUE => running$0: tasks) & que: queues & task: TASK & task: queue_sending(que));
  ("`Local hypotheses'" & schedulerRunning = TRUE & not(TICK_INCREMENT(pxPreviousWakeTime,xTimeIncrement) = 0) & running$0: ready & not(running$0 = running) & blocked\/{running}: FIN(TASK) & running: tasks & ready-{running}: FIN(TASK) & ready-{running}: POW(tasks) & pending: POW(suspended\/(blocked\/{running})) & ready-{running}/\blocked = {} & blocked\/{running}/\suspended = {} & suspended/\ready-{running} = {} & tasks = suspended\/(blocked\/{running})\/ready-{running} & running$0: TASK & (active = TRUE => not(ready = {}) & not(ready = {running}) & (running$0: ready & not(running$0 = running)) & idle: ready) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked) & not(running$0 = running)) & (active = TRUE => running$0: tasks) & que: queues & task: TASK & task: queue_receiving(que));
  ("`vTaskStartScheduler preconditions in this component'" & blocked = {} & suspended = {} & ready = {} & active = FALSE);
  (schedulerRunning = FALSE);
  ("`Local hypotheses'" & idle_task: TASK & not(idle_task: tasks) & not(idle_task = TASK_NULL) & running$0: ready\/{idle_task} & tasks\/{idle_task}: FIN(TASK) & blocked: POW(tasks\/{idle_task}) & ready\/{idle_task}: FIN(TASK) & idle_task: tasks\/{idle_task} & ready: POW(tasks\/{idle_task}) & suspended: POW(tasks\/{idle_task}) & ready\/{idle_task}/\blocked = {} & not(idle_task: suspended) & tasks\/{idle_task} = suspended\/blocked\/(ready\/{idle_task}) & running$0: TASK & idle_task: ready\/{idle_task} & not(running$0: suspended) & not(running$0: blocked) & running$0: tasks\/{idle_task} & not(idle_task: blocked));
  (ran(mutex_holder): POW((tasks\/{idle_task})-{idle_task}\/{TASK_NULL}));
  ("`Local hypotheses'" & idle_task: TASK & not(idle_task: tasks) & not(idle_task = TASK_NULL) & running$0: ready\/{idle_task} & tasks\/{idle_task}: FIN(TASK) & blocked: POW(tasks\/{idle_task}) & ready\/{idle_task}: FIN(TASK) & idle_task: tasks\/{idle_task} & ready: POW(tasks\/{idle_task}) & suspended: POW(tasks\/{idle_task}) & ready\/{idle_task}/\blocked = {} & not(idle_task: suspended) & tasks\/{idle_task} = suspended\/blocked\/(ready\/{idle_task}) & running$0: TASK & idle_task: ready\/{idle_task} & not(running$0: suspended) & not(running$0: blocked) & running$0: tasks\/{idle_task} & not(idle_task: blocked) & mt: queues & mt: mutexes & queue_items(mt) = {});
  (mutex_holder(mt): tasks\/{idle_task});
  (not(mutex_holder(mt) = idle_task));
  ("`vTaskEndScheduler preconditions in this component'" & schedulerRunning = TRUE);
  (active = TRUE);
  ("`Local hypotheses'" & {}: POW(QUEUE) & {}: QUEUE +-> POW(ITEM) & {}: QUEUE +-> POW(TASK) & {}: POW({}) & dom({}) = {} & {}: QUEUE +-> TASK & {}: FIN(TASK) & {}: POW({}\/{}));
  (ran({}): POW({}-{idle}\/{TASK_NULL}));
  ("`xTaskResumeAll preconditions in this component'" & 1<=schedulerSuspended);
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked));
  (unblocked\/pending: POW(TASK));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & not(queue_sending = {}) & not(unblocked = {}) & running$0: unblocked\/pending & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))));
  "`Check that the invariant (tickCount: TICK) is preserved by the operation - ref 3.4'";
  (TICK_INCREMENT(tickCount,tickMissed): TICK);
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & not(queue_sending = {}) & not(unblocked = {}) & running$0: unblocked\/pending & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: remove_task(queue_sending,unblocked\/pending)(que));
  (not(task: unblocked));
  (not(task: pending));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & not(queue_sending = {}) & not(unblocked = {}) & running$0: unblocked\/pending & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: remove_task(queue_receiving,unblocked\/pending)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & not(queue_sending = {}) & not(unblocked = {}) & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & not(queue_sending = {}) & not(unblocked = {}) & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: remove_task(queue_sending,unblocked\/pending)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & not(queue_sending = {}) & not(unblocked = {}) & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: remove_task(queue_receiving,unblocked\/pending)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & not(queue_sending = {}) & not(pending = {}) & running$0: unblocked\/pending & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & not(queue_sending = {}) & not(pending = {}) & running$0: unblocked\/pending & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: remove_task(queue_sending,unblocked\/pending)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & not(queue_sending = {}) & not(pending = {}) & running$0: unblocked\/pending & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: remove_task(queue_receiving,unblocked\/pending)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & not(queue_sending = {}) & not(pending = {}) & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & not(queue_sending = {}) & not(pending = {}) & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: remove_task(queue_sending,unblocked\/pending)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & not(queue_sending = {}) & not(pending = {}) & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: remove_task(queue_receiving,unblocked\/pending)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & not(queue_sending = {}) & unblocked = {} & pending = {} & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1);
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & not(queue_sending = {}) & unblocked = {} & pending = {} & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & que: queues & task: TASK & task: remove_task(queue_sending,unblocked\/pending)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & not(queue_sending = {}) & unblocked = {} & pending = {} & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & que: queues & task: TASK & task: remove_task(queue_receiving,unblocked\/pending)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & queue_sending = {} & not(unblocked = {}) & running$0: unblocked\/pending & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & queue_sending = {} & not(unblocked = {}) & running$0: unblocked\/pending & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: queue_sending(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & queue_sending = {} & not(unblocked = {}) & running$0: unblocked\/pending & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: remove_task(queue_receiving,unblocked\/pending)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & queue_sending = {} & not(unblocked = {}) & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & queue_sending = {} & not(unblocked = {}) & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: queue_sending(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & queue_sending = {} & not(unblocked = {}) & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: remove_task(queue_receiving,unblocked\/pending)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & queue_sending = {} & not(pending = {}) & running$0: unblocked\/pending & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & queue_sending = {} & not(pending = {}) & running$0: unblocked\/pending & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: queue_sending(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & queue_sending = {} & not(pending = {}) & running$0: unblocked\/pending & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: remove_task(queue_receiving,unblocked\/pending)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & queue_sending = {} & not(pending = {}) & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & queue_sending = {} & not(pending = {}) & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: queue_sending(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & queue_sending = {} & not(pending = {}) & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: remove_task(queue_receiving,unblocked\/pending)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & queue_sending = {} & unblocked = {} & pending = {} & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1);
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(queue_receiving = {}) & queue_sending = {} & unblocked = {} & pending = {} & remove_task(queue_receiving,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked\/pending)(q1) => not(tk: remove_task(queue_receiving,unblocked\/pending)(q2))) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & que: queues & task: TASK & task: remove_task(queue_receiving,unblocked\/pending)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & not(queue_sending = {}) & not(unblocked = {}) & running$0: unblocked\/pending & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & not(queue_sending = {}) & not(unblocked = {}) & running$0: unblocked\/pending & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: remove_task(queue_sending,unblocked\/pending)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & not(queue_sending = {}) & not(unblocked = {}) & running$0: unblocked\/pending & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: queue_receiving(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & not(queue_sending = {}) & not(unblocked = {}) & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & not(queue_sending = {}) & not(unblocked = {}) & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: remove_task(queue_sending,unblocked\/pending)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & not(queue_sending = {}) & not(unblocked = {}) & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: queue_receiving(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & not(queue_sending = {}) & not(pending = {}) & running$0: unblocked\/pending & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & not(queue_sending = {}) & not(pending = {}) & running$0: unblocked\/pending & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: remove_task(queue_sending,unblocked\/pending)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & not(queue_sending = {}) & not(pending = {}) & running$0: unblocked\/pending & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: queue_receiving(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & not(queue_sending = {}) & not(pending = {}) & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & not(queue_sending = {}) & not(pending = {}) & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: remove_task(queue_sending,unblocked\/pending)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & not(queue_sending = {}) & not(pending = {}) & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: queue_receiving(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & not(queue_sending = {}) & unblocked = {} & pending = {} & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1);
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & not(queue_sending = {}) & unblocked = {} & pending = {} & remove_task(queue_sending,unblocked\/pending): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked\/pending)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked\/pending)(q1) => not(tk: remove_task(queue_sending,unblocked\/pending)(q2))) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & que: queues & task: TASK & task: remove_task(queue_sending,unblocked\/pending)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & queue_sending = {} & not(unblocked = {}) & running$0: unblocked\/pending & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & queue_sending = {} & not(unblocked = {}) & running$0: unblocked\/pending & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: queue_sending(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & queue_sending = {} & not(unblocked = {}) & running$0: unblocked\/pending & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: queue_receiving(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & queue_sending = {} & not(unblocked = {}) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & queue_sending = {} & not(unblocked = {}) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: queue_sending(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & queue_sending = {} & not(unblocked = {}) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: queue_receiving(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & queue_sending = {} & not(pending = {}) & running$0: unblocked\/pending & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & queue_sending = {} & not(pending = {}) & running$0: unblocked\/pending & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: queue_sending(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & queue_sending = {} & not(pending = {}) & running$0: unblocked\/pending & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running$0: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running$0: suspended & not(running$0: pending))) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked) & not(running$0: pending))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: queue_receiving(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & queue_sending = {} & not(pending = {}) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & queue_sending = {} & not(pending = {}) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: queue_sending(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & queue_sending = {} & not(pending = {}) & blocked-unblocked-pending: FIN(TASK) & blocked-unblocked-pending: POW(tasks) & ready\/unblocked\/pending: FIN(TASK) & ready\/unblocked\/pending: POW(tasks) & suspended-pending: FIN(TASK) & suspended-pending: POW(tasks) & {}: FIN(TASK) & {}: POW(suspended-pending\/blocked-unblocked-pending) & ready\/unblocked\/pending/\blocked-unblocked-pending = {} & blocked-unblocked-pending/\suspended-pending = {} & suspended-pending/\(ready\/unblocked\/pending) = {} & tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending) & (active = TRUE => not(ready = {} & unblocked = {} & pending = {}) & running: ready\/unblocked\/pending & idle: ready\/unblocked\/pending) & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1 & (active = TRUE => not(running: suspended & not(running: pending))) & (active = TRUE => not(running: blocked & not(running: unblocked) & not(running: pending))) & (active = TRUE => not(idle: suspended & not(idle: pending))) & (active = TRUE => not(idle: blocked & not(idle: unblocked) & not(idle: pending))) & que: queues & task: TASK & task: queue_receiving(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & queue_receiving = {} & queue_sending = {} & unblocked = {} & pending = {} & schedulerSuspended-1: INTEGER & 0<=schedulerSuspended-1);
  ("`incrementTick preconditions in this component'" & schedulerRunning = TRUE);
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {});
  (unblocked: POW(TASK));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & not(queue_receiving = {}) & not(unblocked = {}) & running$0: unblocked & schedulerSuspended = 0 & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))));
  (TICK_INCREMENT(tickCount,1): TICK);
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & not(queue_receiving = {}) & not(unblocked = {}) & running$0: unblocked & schedulerSuspended = 0 & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: remove_task(queue_sending,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & not(queue_receiving = {}) & not(unblocked = {}) & running$0: unblocked & schedulerSuspended = 0 & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: remove_task(queue_receiving,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & not(queue_receiving = {}) & not(unblocked = {}) & schedulerSuspended = 0 & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & not(queue_receiving = {}) & not(unblocked = {}) & schedulerSuspended = 0 & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: remove_task(queue_sending,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & not(queue_receiving = {}) & not(unblocked = {}) & schedulerSuspended = 0 & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: remove_task(queue_receiving,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & not(queue_receiving = {}) & unblocked = {} & schedulerSuspended = 0 & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & not(queue_receiving = {}) & unblocked = {} & schedulerSuspended = 0 & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & que: queues & task: TASK & task: remove_task(queue_sending,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & not(queue_receiving = {}) & unblocked = {} & schedulerSuspended = 0 & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & que: queues & task: TASK & task: remove_task(queue_receiving,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & queue_receiving = {} & not(unblocked = {}) & running$0: unblocked & schedulerSuspended = 0 & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & queue_receiving = {} & not(unblocked = {}) & running$0: unblocked & schedulerSuspended = 0 & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: remove_task(queue_sending,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & queue_receiving = {} & not(unblocked = {}) & running$0: unblocked & schedulerSuspended = 0 & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: queue_receiving(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & queue_receiving = {} & not(unblocked = {}) & schedulerSuspended = 0 & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & queue_receiving = {} & not(unblocked = {}) & schedulerSuspended = 0 & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: remove_task(queue_sending,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & queue_receiving = {} & not(unblocked = {}) & schedulerSuspended = 0 & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: queue_receiving(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & queue_receiving = {} & unblocked = {} & schedulerSuspended = 0 & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & queue_receiving = {} & unblocked = {} & schedulerSuspended = 0 & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & que: queues & task: TASK & task: remove_task(queue_sending,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & not(queue_receiving = {}) & not(unblocked = {}) & running$0: unblocked & schedulerSuspended = 0 & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & not(queue_receiving = {}) & not(unblocked = {}) & running$0: unblocked & schedulerSuspended = 0 & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: queue_sending(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & not(queue_receiving = {}) & not(unblocked = {}) & running$0: unblocked & schedulerSuspended = 0 & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: remove_task(queue_receiving,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & not(queue_receiving = {}) & not(unblocked = {}) & schedulerSuspended = 0 & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & not(queue_receiving = {}) & not(unblocked = {}) & schedulerSuspended = 0 & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: queue_sending(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & not(queue_receiving = {}) & not(unblocked = {}) & schedulerSuspended = 0 & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: remove_task(queue_receiving,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & not(queue_receiving = {}) & unblocked = {} & schedulerSuspended = 0 & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & not(queue_receiving = {}) & unblocked = {} & schedulerSuspended = 0 & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & que: queues & task: TASK & task: remove_task(queue_receiving,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & queue_receiving = {} & not(unblocked = {}) & running$0: unblocked & schedulerSuspended = 0 & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & queue_receiving = {} & not(unblocked = {}) & running$0: unblocked & schedulerSuspended = 0 & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: queue_sending(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & queue_receiving = {} & not(unblocked = {}) & running$0: unblocked & schedulerSuspended = 0 & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: queue_receiving(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & queue_receiving = {} & not(unblocked = {}) & schedulerSuspended = 0 & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & queue_receiving = {} & not(unblocked = {}) & schedulerSuspended = 0 & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: queue_sending(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & queue_receiving = {} & not(unblocked = {}) & schedulerSuspended = 0 & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: queue_receiving(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & queue_receiving = {} & unblocked = {} & schedulerSuspended = 0);
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & not(queue_receiving = {}) & not(unblocked = {}) & running$0: unblocked & not(schedulerSuspended = 0) & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))));
  "`Check that the invariant (tickMissed: TICK) is preserved by the operation - ref 3.4'";
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & not(queue_receiving = {}) & not(unblocked = {}) & running$0: unblocked & not(schedulerSuspended = 0) & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: remove_task(queue_sending,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & not(queue_receiving = {}) & not(unblocked = {}) & running$0: unblocked & not(schedulerSuspended = 0) & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: remove_task(queue_receiving,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & not(queue_receiving = {}) & not(unblocked = {}) & not(schedulerSuspended = 0) & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & not(queue_receiving = {}) & not(unblocked = {}) & not(schedulerSuspended = 0) & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: remove_task(queue_sending,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & not(queue_receiving = {}) & not(unblocked = {}) & not(schedulerSuspended = 0) & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: remove_task(queue_receiving,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & not(queue_receiving = {}) & unblocked = {} & not(schedulerSuspended = 0) & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & not(queue_receiving = {}) & unblocked = {} & not(schedulerSuspended = 0) & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & que: queues & task: TASK & task: remove_task(queue_sending,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & not(queue_receiving = {}) & unblocked = {} & not(schedulerSuspended = 0) & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & que: queues & task: TASK & task: remove_task(queue_receiving,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & queue_receiving = {} & not(unblocked = {}) & running$0: unblocked & not(schedulerSuspended = 0) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & queue_receiving = {} & not(unblocked = {}) & running$0: unblocked & not(schedulerSuspended = 0) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: remove_task(queue_sending,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & queue_receiving = {} & not(unblocked = {}) & running$0: unblocked & not(schedulerSuspended = 0) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: queue_receiving(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & queue_receiving = {} & not(unblocked = {}) & not(schedulerSuspended = 0) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & queue_receiving = {} & not(unblocked = {}) & not(schedulerSuspended = 0) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: remove_task(queue_sending,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & queue_receiving = {} & not(unblocked = {}) & not(schedulerSuspended = 0) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: queue_receiving(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & queue_receiving = {} & unblocked = {} & not(schedulerSuspended = 0) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & not(queue_sending = {}) & queue_receiving = {} & unblocked = {} & not(schedulerSuspended = 0) & remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_sending,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1) => not(tk: remove_task(queue_sending,unblocked)(q2))) & que: queues & task: TASK & task: remove_task(queue_sending,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & not(queue_receiving = {}) & not(unblocked = {}) & running$0: unblocked & not(schedulerSuspended = 0) & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & not(queue_receiving = {}) & not(unblocked = {}) & running$0: unblocked & not(schedulerSuspended = 0) & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: queue_sending(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & not(queue_receiving = {}) & not(unblocked = {}) & running$0: unblocked & not(schedulerSuspended = 0) & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: remove_task(queue_receiving,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & not(queue_receiving = {}) & not(unblocked = {}) & not(schedulerSuspended = 0) & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & not(queue_receiving = {}) & not(unblocked = {}) & not(schedulerSuspended = 0) & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: queue_sending(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & not(queue_receiving = {}) & not(unblocked = {}) & not(schedulerSuspended = 0) & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: remove_task(queue_receiving,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & not(queue_receiving = {}) & unblocked = {} & not(schedulerSuspended = 0) & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & not(queue_receiving = {}) & unblocked = {} & not(schedulerSuspended = 0) & remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK) & queues = dom(remove_task(queue_receiving,unblocked)) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: remove_task(queue_receiving,unblocked)(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1) => not(tk: remove_task(queue_receiving,unblocked)(q2))) & que: queues & task: TASK & task: remove_task(queue_receiving,unblocked)(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & queue_receiving = {} & not(unblocked = {}) & running$0: unblocked & not(schedulerSuspended = 0) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & queue_receiving = {} & not(unblocked = {}) & running$0: unblocked & not(schedulerSuspended = 0) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: queue_sending(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & queue_receiving = {} & not(unblocked = {}) & running$0: unblocked & not(schedulerSuspended = 0) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & running$0: TASK & (active = TRUE => not(ready = {} & unblocked = {}) & running$0: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running$0: suspended)) & (active = TRUE => not(running$0: blocked & not(running$0: unblocked))) & (active = TRUE => running$0: tasks) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: queue_receiving(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & queue_receiving = {} & not(unblocked = {}) & not(schedulerSuspended = 0) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & queue_receiving = {} & not(unblocked = {}) & not(schedulerSuspended = 0) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: queue_sending(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & queue_receiving = {} & not(unblocked = {}) & not(schedulerSuspended = 0) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & pending: POW(suspended\/blocked-unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & tasks = suspended\/blocked-unblocked\/(ready\/unblocked) & (active = TRUE => not(ready = {} & unblocked = {}) & running: ready\/unblocked & idle: ready\/unblocked) & (active = TRUE => not(running: blocked & not(running: unblocked))) & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & que: queues & task: TASK & task: queue_receiving(que));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {} & queue_sending = {} & queue_receiving = {} & unblocked = {} & not(schedulerSuspended = 0));
  ("`vQueueDelete preconditions in this component'" & pxQueue: queues);
  ("`Local hypotheses'" & pxQueue: semaphores & pxQueue: mutexes & queues-{pxQueue}: POW(QUEUE) & {pxQueue}<<|queue_items: QUEUE +-> POW(ITEM) & {pxQueue}<<|queue_receiving: QUEUE +-> POW(TASK) & {pxQueue}<<|queue_sending: QUEUE +-> POW(TASK) & semaphores-{pxQueue}: POW(QUEUE) & semaphores-{pxQueue}: POW(queues-{pxQueue}) & mutexes-{pxQueue}: POW(QUEUE) & mutexes-{pxQueue}: POW(queues-{pxQueue}) & queues-{pxQueue} = dom({pxQueue}<<|queue_items) & queues-{pxQueue} = dom({pxQueue}<<|queue_receiving) & queues-{pxQueue} = dom({pxQueue}<<|queue_sending) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2) => not(tk: ({pxQueue}<<|queue_receiving)(q1))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_receiving)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & {pxQueue}<<|mutex_holder: QUEUE +-> TASK & mutexes-{pxQueue} = dom({pxQueue}<<|mutex_holder) & !mt.(mt: mutexes & not(mt = pxQueue) & ({pxQueue}<<|queue_items)(mt) = {} => not(({pxQueue}<<|mutex_holder)(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {}) => ({pxQueue}<<|mutex_holder)(mt) = TASK_NULL) & !mt.(mt: mutexes & not(mt = pxQueue) => ({pxQueue}<<|queue_items)(mt) = {} or ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & not(que: queues & not(que = pxQueue)) => not(que: mutexes & not(que = pxQueue))) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {}) => ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) => ({pxQueue}<<|queue_items)(mt) = {}));
  (ran({pxQueue}<<|mutex_holder): POW(tasks-{idle}\/{TASK_NULL}));
  ("`Local hypotheses'" & pxQueue: semaphores & pxQueue: mutexes & queues-{pxQueue}: POW(QUEUE) & {pxQueue}<<|queue_items: QUEUE +-> POW(ITEM) & {pxQueue}<<|queue_receiving: QUEUE +-> POW(TASK) & {pxQueue}<<|queue_sending: QUEUE +-> POW(TASK) & semaphores-{pxQueue}: POW(QUEUE) & semaphores-{pxQueue}: POW(queues-{pxQueue}) & mutexes-{pxQueue}: POW(QUEUE) & mutexes-{pxQueue}: POW(queues-{pxQueue}) & queues-{pxQueue} = dom({pxQueue}<<|queue_items) & queues-{pxQueue} = dom({pxQueue}<<|queue_receiving) & queues-{pxQueue} = dom({pxQueue}<<|queue_sending) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2) => not(tk: ({pxQueue}<<|queue_receiving)(q1))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_receiving)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & {pxQueue}<<|mutex_holder: QUEUE +-> TASK & mutexes-{pxQueue} = dom({pxQueue}<<|mutex_holder) & !mt.(mt: mutexes & not(mt = pxQueue) & ({pxQueue}<<|queue_items)(mt) = {} => not(({pxQueue}<<|mutex_holder)(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {}) => ({pxQueue}<<|mutex_holder)(mt) = TASK_NULL) & !mt.(mt: mutexes & not(mt = pxQueue) => ({pxQueue}<<|queue_items)(mt) = {} or ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & not(que: queues & not(que = pxQueue)) => not(que: mutexes & not(que = pxQueue))) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {}) => ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) => ({pxQueue}<<|queue_items)(mt) = {}) & mt: queues & not(mt = pxQueue) & mt: mutexes & ({pxQueue}<<|queue_items)(mt) = {});
  (({pxQueue}<<|mutex_holder)(mt): tasks);
  (not(({pxQueue}<<|mutex_holder)(mt) = idle));
  ("`Local hypotheses'" & pxQueue: semaphores & pxQueue: mutexes & queues-{pxQueue}: POW(QUEUE) & {pxQueue}<<|queue_items: QUEUE +-> POW(ITEM) & {pxQueue}<<|queue_receiving: QUEUE +-> POW(TASK) & {pxQueue}<<|queue_sending: QUEUE +-> POW(TASK) & semaphores-{pxQueue}: POW(QUEUE) & semaphores-{pxQueue}: POW(queues-{pxQueue}) & mutexes-{pxQueue}: POW(QUEUE) & mutexes-{pxQueue}: POW(queues-{pxQueue}) & queues-{pxQueue} = dom({pxQueue}<<|queue_items) & queues-{pxQueue} = dom({pxQueue}<<|queue_receiving) & queues-{pxQueue} = dom({pxQueue}<<|queue_sending) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2) => not(tk: ({pxQueue}<<|queue_receiving)(q1))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_receiving)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & {pxQueue}<<|mutex_holder: QUEUE +-> TASK & mutexes-{pxQueue} = dom({pxQueue}<<|mutex_holder) & !mt.(mt: mutexes & not(mt = pxQueue) & ({pxQueue}<<|queue_items)(mt) = {} => not(({pxQueue}<<|mutex_holder)(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {}) => ({pxQueue}<<|mutex_holder)(mt) = TASK_NULL) & !mt.(mt: mutexes & not(mt = pxQueue) => ({pxQueue}<<|queue_items)(mt) = {} or ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & not(que: queues & not(que = pxQueue)) => not(que: mutexes & not(que = pxQueue))) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {}) => ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) => ({pxQueue}<<|queue_items)(mt) = {}) & que: queues & not(que = pxQueue) & task: TASK & task: ({pxQueue}<<|queue_sending)(que));
  ("`Local hypotheses'" & pxQueue: semaphores & pxQueue: mutexes & queues-{pxQueue}: POW(QUEUE) & {pxQueue}<<|queue_items: QUEUE +-> POW(ITEM) & {pxQueue}<<|queue_receiving: QUEUE +-> POW(TASK) & {pxQueue}<<|queue_sending: QUEUE +-> POW(TASK) & semaphores-{pxQueue}: POW(QUEUE) & semaphores-{pxQueue}: POW(queues-{pxQueue}) & mutexes-{pxQueue}: POW(QUEUE) & mutexes-{pxQueue}: POW(queues-{pxQueue}) & queues-{pxQueue} = dom({pxQueue}<<|queue_items) & queues-{pxQueue} = dom({pxQueue}<<|queue_receiving) & queues-{pxQueue} = dom({pxQueue}<<|queue_sending) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2) => not(tk: ({pxQueue}<<|queue_receiving)(q1))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_receiving)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & {pxQueue}<<|mutex_holder: QUEUE +-> TASK & mutexes-{pxQueue} = dom({pxQueue}<<|mutex_holder) & !mt.(mt: mutexes & not(mt = pxQueue) & ({pxQueue}<<|queue_items)(mt) = {} => not(({pxQueue}<<|mutex_holder)(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {}) => ({pxQueue}<<|mutex_holder)(mt) = TASK_NULL) & !mt.(mt: mutexes & not(mt = pxQueue) => ({pxQueue}<<|queue_items)(mt) = {} or ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & not(que: queues & not(que = pxQueue)) => not(que: mutexes & not(que = pxQueue))) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {}) => ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) => ({pxQueue}<<|queue_items)(mt) = {}) & que: queues & not(que = pxQueue) & task: TASK & task: ({pxQueue}<<|queue_receiving)(que));
  ("`Local hypotheses'" & pxQueue: semaphores & not(pxQueue: mutexes) & queues-{pxQueue}: POW(QUEUE) & {pxQueue}<<|queue_items: QUEUE +-> POW(ITEM) & {pxQueue}<<|queue_receiving: QUEUE +-> POW(TASK) & {pxQueue}<<|queue_sending: QUEUE +-> POW(TASK) & semaphores-{pxQueue}: POW(QUEUE) & semaphores-{pxQueue}: POW(queues-{pxQueue}) & mutexes: POW(queues-{pxQueue}) & queues-{pxQueue} = dom({pxQueue}<<|queue_items) & queues-{pxQueue} = dom({pxQueue}<<|queue_receiving) & queues-{pxQueue} = dom({pxQueue}<<|queue_sending) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2) => not(tk: ({pxQueue}<<|queue_receiving)(q1))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_receiving)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & !mt.(mt: mutexes & ({pxQueue}<<|queue_items)(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(({pxQueue}<<|queue_items)(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => ({pxQueue}<<|queue_items)(mt) = {} or ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & not(que: queues & not(que = pxQueue)) => not(que: mutexes)) & !mt.(mt: mutexes & not(({pxQueue}<<|queue_items)(mt) = {}) => ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not(({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) => ({pxQueue}<<|queue_items)(mt) = {}) & mt: queues & not(mt = pxQueue) & mt: mutexes & ({pxQueue}<<|queue_items)(mt) = {});
  ("`Local hypotheses'" & pxQueue: semaphores & not(pxQueue: mutexes) & queues-{pxQueue}: POW(QUEUE) & {pxQueue}<<|queue_items: QUEUE +-> POW(ITEM) & {pxQueue}<<|queue_receiving: QUEUE +-> POW(TASK) & {pxQueue}<<|queue_sending: QUEUE +-> POW(TASK) & semaphores-{pxQueue}: POW(QUEUE) & semaphores-{pxQueue}: POW(queues-{pxQueue}) & mutexes: POW(queues-{pxQueue}) & queues-{pxQueue} = dom({pxQueue}<<|queue_items) & queues-{pxQueue} = dom({pxQueue}<<|queue_receiving) & queues-{pxQueue} = dom({pxQueue}<<|queue_sending) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2) => not(tk: ({pxQueue}<<|queue_receiving)(q1))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_receiving)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & !mt.(mt: mutexes & ({pxQueue}<<|queue_items)(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(({pxQueue}<<|queue_items)(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => ({pxQueue}<<|queue_items)(mt) = {} or ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & not(que: queues & not(que = pxQueue)) => not(que: mutexes)) & !mt.(mt: mutexes & not(({pxQueue}<<|queue_items)(mt) = {}) => ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not(({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) => ({pxQueue}<<|queue_items)(mt) = {}) & que: queues & not(que = pxQueue) & task: TASK & task: ({pxQueue}<<|queue_sending)(que));
  ("`Local hypotheses'" & pxQueue: semaphores & not(pxQueue: mutexes) & queues-{pxQueue}: POW(QUEUE) & {pxQueue}<<|queue_items: QUEUE +-> POW(ITEM) & {pxQueue}<<|queue_receiving: QUEUE +-> POW(TASK) & {pxQueue}<<|queue_sending: QUEUE +-> POW(TASK) & semaphores-{pxQueue}: POW(QUEUE) & semaphores-{pxQueue}: POW(queues-{pxQueue}) & mutexes: POW(queues-{pxQueue}) & queues-{pxQueue} = dom({pxQueue}<<|queue_items) & queues-{pxQueue} = dom({pxQueue}<<|queue_receiving) & queues-{pxQueue} = dom({pxQueue}<<|queue_sending) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2) => not(tk: ({pxQueue}<<|queue_receiving)(q1))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_receiving)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & !mt.(mt: mutexes & ({pxQueue}<<|queue_items)(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(({pxQueue}<<|queue_items)(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => ({pxQueue}<<|queue_items)(mt) = {} or ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & not(que: queues & not(que = pxQueue)) => not(que: mutexes)) & !mt.(mt: mutexes & not(({pxQueue}<<|queue_items)(mt) = {}) => ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not(({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) => ({pxQueue}<<|queue_items)(mt) = {}) & que: queues & not(que = pxQueue) & task: TASK & task: ({pxQueue}<<|queue_receiving)(que));
  ("`Local hypotheses'" & not(pxQueue: semaphores) & pxQueue: mutexes & queues-{pxQueue}: POW(QUEUE) & {pxQueue}<<|queue_items: QUEUE +-> POW(ITEM) & {pxQueue}<<|queue_receiving: QUEUE +-> POW(TASK) & {pxQueue}<<|queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(queues-{pxQueue}) & mutexes-{pxQueue}: POW(QUEUE) & mutexes-{pxQueue}: POW(queues-{pxQueue}) & queues-{pxQueue} = dom({pxQueue}<<|queue_items) & queues-{pxQueue} = dom({pxQueue}<<|queue_receiving) & queues-{pxQueue} = dom({pxQueue}<<|queue_sending) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2) => not(tk: ({pxQueue}<<|queue_receiving)(q1))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_receiving)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & {pxQueue}<<|mutex_holder: QUEUE +-> TASK & mutexes-{pxQueue} = dom({pxQueue}<<|mutex_holder) & !mt.(mt: mutexes & not(mt = pxQueue) & ({pxQueue}<<|queue_items)(mt) = {} => not(({pxQueue}<<|mutex_holder)(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {}) => ({pxQueue}<<|mutex_holder)(mt) = TASK_NULL) & !mt.(mt: mutexes & not(mt = pxQueue) => ({pxQueue}<<|queue_items)(mt) = {} or ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & not(que: queues & not(que = pxQueue)) => not(que: mutexes & not(que = pxQueue))) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {}) => ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) => ({pxQueue}<<|queue_items)(mt) = {}));
  ("`Local hypotheses'" & not(pxQueue: semaphores) & pxQueue: mutexes & queues-{pxQueue}: POW(QUEUE) & {pxQueue}<<|queue_items: QUEUE +-> POW(ITEM) & {pxQueue}<<|queue_receiving: QUEUE +-> POW(TASK) & {pxQueue}<<|queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(queues-{pxQueue}) & mutexes-{pxQueue}: POW(QUEUE) & mutexes-{pxQueue}: POW(queues-{pxQueue}) & queues-{pxQueue} = dom({pxQueue}<<|queue_items) & queues-{pxQueue} = dom({pxQueue}<<|queue_receiving) & queues-{pxQueue} = dom({pxQueue}<<|queue_sending) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2) => not(tk: ({pxQueue}<<|queue_receiving)(q1))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_receiving)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & {pxQueue}<<|mutex_holder: QUEUE +-> TASK & mutexes-{pxQueue} = dom({pxQueue}<<|mutex_holder) & !mt.(mt: mutexes & not(mt = pxQueue) & ({pxQueue}<<|queue_items)(mt) = {} => not(({pxQueue}<<|mutex_holder)(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {}) => ({pxQueue}<<|mutex_holder)(mt) = TASK_NULL) & !mt.(mt: mutexes & not(mt = pxQueue) => ({pxQueue}<<|queue_items)(mt) = {} or ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & not(que: queues & not(que = pxQueue)) => not(que: mutexes & not(que = pxQueue))) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {}) => ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) => ({pxQueue}<<|queue_items)(mt) = {}) & mt: queues & not(mt = pxQueue) & mt: mutexes & ({pxQueue}<<|queue_items)(mt) = {});
  ("`Local hypotheses'" & not(pxQueue: semaphores) & pxQueue: mutexes & queues-{pxQueue}: POW(QUEUE) & {pxQueue}<<|queue_items: QUEUE +-> POW(ITEM) & {pxQueue}<<|queue_receiving: QUEUE +-> POW(TASK) & {pxQueue}<<|queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(queues-{pxQueue}) & mutexes-{pxQueue}: POW(QUEUE) & mutexes-{pxQueue}: POW(queues-{pxQueue}) & queues-{pxQueue} = dom({pxQueue}<<|queue_items) & queues-{pxQueue} = dom({pxQueue}<<|queue_receiving) & queues-{pxQueue} = dom({pxQueue}<<|queue_sending) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2) => not(tk: ({pxQueue}<<|queue_receiving)(q1))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_receiving)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & {pxQueue}<<|mutex_holder: QUEUE +-> TASK & mutexes-{pxQueue} = dom({pxQueue}<<|mutex_holder) & !mt.(mt: mutexes & not(mt = pxQueue) & ({pxQueue}<<|queue_items)(mt) = {} => not(({pxQueue}<<|mutex_holder)(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {}) => ({pxQueue}<<|mutex_holder)(mt) = TASK_NULL) & !mt.(mt: mutexes & not(mt = pxQueue) => ({pxQueue}<<|queue_items)(mt) = {} or ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & not(que: queues & not(que = pxQueue)) => not(que: mutexes & not(que = pxQueue))) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {}) => ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) => ({pxQueue}<<|queue_items)(mt) = {}) & que: queues & not(que = pxQueue) & task: TASK & task: ({pxQueue}<<|queue_sending)(que));
  ("`Local hypotheses'" & not(pxQueue: semaphores) & pxQueue: mutexes & queues-{pxQueue}: POW(QUEUE) & {pxQueue}<<|queue_items: QUEUE +-> POW(ITEM) & {pxQueue}<<|queue_receiving: QUEUE +-> POW(TASK) & {pxQueue}<<|queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(queues-{pxQueue}) & mutexes-{pxQueue}: POW(QUEUE) & mutexes-{pxQueue}: POW(queues-{pxQueue}) & queues-{pxQueue} = dom({pxQueue}<<|queue_items) & queues-{pxQueue} = dom({pxQueue}<<|queue_receiving) & queues-{pxQueue} = dom({pxQueue}<<|queue_sending) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2) => not(tk: ({pxQueue}<<|queue_receiving)(q1))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_receiving)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & {pxQueue}<<|mutex_holder: QUEUE +-> TASK & mutexes-{pxQueue} = dom({pxQueue}<<|mutex_holder) & !mt.(mt: mutexes & not(mt = pxQueue) & ({pxQueue}<<|queue_items)(mt) = {} => not(({pxQueue}<<|mutex_holder)(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {}) => ({pxQueue}<<|mutex_holder)(mt) = TASK_NULL) & !mt.(mt: mutexes & not(mt = pxQueue) => ({pxQueue}<<|queue_items)(mt) = {} or ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & not(que: queues & not(que = pxQueue)) => not(que: mutexes & not(que = pxQueue))) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {}) => ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) => ({pxQueue}<<|queue_items)(mt) = {}) & que: queues & not(que = pxQueue) & task: TASK & task: ({pxQueue}<<|queue_receiving)(que));
  ("`Local hypotheses'" & not(pxQueue: semaphores) & not(pxQueue: mutexes) & queues-{pxQueue}: POW(QUEUE) & {pxQueue}<<|queue_items: QUEUE +-> POW(ITEM) & {pxQueue}<<|queue_receiving: QUEUE +-> POW(TASK) & {pxQueue}<<|queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(queues-{pxQueue}) & mutexes: POW(queues-{pxQueue}) & queues-{pxQueue} = dom({pxQueue}<<|queue_items) & queues-{pxQueue} = dom({pxQueue}<<|queue_receiving) & queues-{pxQueue} = dom({pxQueue}<<|queue_sending) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2) => not(tk: ({pxQueue}<<|queue_receiving)(q1))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_receiving)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & !mt.(mt: mutexes & ({pxQueue}<<|queue_items)(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(({pxQueue}<<|queue_items)(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => ({pxQueue}<<|queue_items)(mt) = {} or ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & not(que: queues & not(que = pxQueue)) => not(que: mutexes)) & !mt.(mt: mutexes & not(({pxQueue}<<|queue_items)(mt) = {}) => ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not(({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) => ({pxQueue}<<|queue_items)(mt) = {}) & mt: queues & not(mt = pxQueue) & mt: mutexes & ({pxQueue}<<|queue_items)(mt) = {});
  ("`Local hypotheses'" & not(pxQueue: semaphores) & not(pxQueue: mutexes) & queues-{pxQueue}: POW(QUEUE) & {pxQueue}<<|queue_items: QUEUE +-> POW(ITEM) & {pxQueue}<<|queue_receiving: QUEUE +-> POW(TASK) & {pxQueue}<<|queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(queues-{pxQueue}) & mutexes: POW(queues-{pxQueue}) & queues-{pxQueue} = dom({pxQueue}<<|queue_items) & queues-{pxQueue} = dom({pxQueue}<<|queue_receiving) & queues-{pxQueue} = dom({pxQueue}<<|queue_sending) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2) => not(tk: ({pxQueue}<<|queue_receiving)(q1))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_receiving)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & !mt.(mt: mutexes & ({pxQueue}<<|queue_items)(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(({pxQueue}<<|queue_items)(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => ({pxQueue}<<|queue_items)(mt) = {} or ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & not(que: queues & not(que = pxQueue)) => not(que: mutexes)) & !mt.(mt: mutexes & not(({pxQueue}<<|queue_items)(mt) = {}) => ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not(({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) => ({pxQueue}<<|queue_items)(mt) = {}) & que: queues & not(que = pxQueue) & task: TASK & task: ({pxQueue}<<|queue_sending)(que));
  ("`Local hypotheses'" & not(pxQueue: semaphores) & not(pxQueue: mutexes) & queues-{pxQueue}: POW(QUEUE) & {pxQueue}<<|queue_items: QUEUE +-> POW(ITEM) & {pxQueue}<<|queue_receiving: QUEUE +-> POW(TASK) & {pxQueue}<<|queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(queues-{pxQueue}) & mutexes: POW(queues-{pxQueue}) & queues-{pxQueue} = dom({pxQueue}<<|queue_items) & queues-{pxQueue} = dom({pxQueue}<<|queue_receiving) & queues-{pxQueue} = dom({pxQueue}<<|queue_sending) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2) => not(tk: ({pxQueue}<<|queue_receiving)(q1))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1) => not(tk: ({pxQueue}<<|queue_receiving)(q2))) & !(q1,q2,tk).(q1: queues & not(q1 = pxQueue) & (q2: queues & not(q2 = pxQueue)) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1) => not(tk: ({pxQueue}<<|queue_sending)(q2))) & !mt.(mt: mutexes & ({pxQueue}<<|queue_items)(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(({pxQueue}<<|queue_items)(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => ({pxQueue}<<|queue_items)(mt) = {} or ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & not(que: queues & not(que = pxQueue)) => not(que: mutexes)) & !mt.(mt: mutexes & not(({pxQueue}<<|queue_items)(mt) = {}) => ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not(({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY}) => ({pxQueue}<<|queue_items)(mt) = {}) & que: queues & not(que = pxQueue) & task: TASK & task: ({pxQueue}<<|queue_receiving)(que));
  ("`Local hypotheses'" & semaphore$0: QUEUE & not(semaphore$0: queues) & not(semaphore$0: mutexes) & s_items$0: POW(ITEM) & card(s_items$0) = 1 & queue_items\/{semaphore$0|->s_items$0}: QUEUE +-> POW(ITEM) & queue_receiving\/{semaphore$0|->{}}: QUEUE +-> POW(TASK) & queue_sending\/{semaphore$0|->{}}: QUEUE +-> POW(TASK) & semaphore$0: queues\/{semaphore$0} & semaphores: POW(queues\/{semaphore$0}) & mutexes: POW(queues\/{semaphore$0}) & queues\/{semaphore$0} = dom(queue_items\/{semaphore$0|->s_items$0}) & queues\/{semaphore$0} = dom(queue_receiving\/{semaphore$0|->{}}) & queues\/{semaphore$0} = dom(queue_sending\/{semaphore$0|->{}}) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & tk: TASK & tk: (queue_receiving\/{semaphore$0|->{}})(q1) => not(tk: (queue_sending\/{semaphore$0|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & tk: TASK & tk: (queue_sending\/{semaphore$0|->{}})(q2) => not(tk: (queue_receiving\/{semaphore$0|->{}})(q1))) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & not(q1 = q2) & tk: TASK & tk: (queue_receiving\/{semaphore$0|->{}})(q1) => not(tk: (queue_receiving\/{semaphore$0|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & not(q1 = q2) & tk: TASK & tk: (queue_sending\/{semaphore$0|->{}})(q1) => not(tk: (queue_sending\/{semaphore$0|->{}})(q2))) & !mt.(mt: mutexes & (queue_items\/{semaphore$0|->s_items$0})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items\/{semaphore$0|->s_items$0})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items\/{semaphore$0|->s_items$0})(mt) = {} or (queue_items\/{semaphore$0|->s_items$0})(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & (not(que: queues) & not(que = semaphore$0)) => not(que: mutexes)) & !mt.(mt: mutexes & not((queue_items\/{semaphore$0|->s_items$0})(mt) = {}) => (queue_items\/{semaphore$0|->s_items$0})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items\/{semaphore$0|->s_items$0})(mt) = {ITEM_EMPTY}) => (queue_items\/{semaphore$0|->s_items$0})(mt) = {}) & mt: queues\/{semaphore$0} & mt: mutexes & (queue_items\/{semaphore$0|->s_items$0})(mt) = {});
  ("`Local hypotheses'" & semaphore$0: QUEUE & not(semaphore$0: queues) & not(semaphore$0: mutexes) & s_items$0: POW(ITEM) & card(s_items$0) = 1 & queue_items\/{semaphore$0|->s_items$0}: QUEUE +-> POW(ITEM) & queue_receiving\/{semaphore$0|->{}}: QUEUE +-> POW(TASK) & queue_sending\/{semaphore$0|->{}}: QUEUE +-> POW(TASK) & semaphore$0: queues\/{semaphore$0} & semaphores: POW(queues\/{semaphore$0}) & mutexes: POW(queues\/{semaphore$0}) & queues\/{semaphore$0} = dom(queue_items\/{semaphore$0|->s_items$0}) & queues\/{semaphore$0} = dom(queue_receiving\/{semaphore$0|->{}}) & queues\/{semaphore$0} = dom(queue_sending\/{semaphore$0|->{}}) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & tk: TASK & tk: (queue_receiving\/{semaphore$0|->{}})(q1) => not(tk: (queue_sending\/{semaphore$0|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & tk: TASK & tk: (queue_sending\/{semaphore$0|->{}})(q2) => not(tk: (queue_receiving\/{semaphore$0|->{}})(q1))) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & not(q1 = q2) & tk: TASK & tk: (queue_receiving\/{semaphore$0|->{}})(q1) => not(tk: (queue_receiving\/{semaphore$0|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & not(q1 = q2) & tk: TASK & tk: (queue_sending\/{semaphore$0|->{}})(q1) => not(tk: (queue_sending\/{semaphore$0|->{}})(q2))) & !mt.(mt: mutexes & (queue_items\/{semaphore$0|->s_items$0})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items\/{semaphore$0|->s_items$0})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items\/{semaphore$0|->s_items$0})(mt) = {} or (queue_items\/{semaphore$0|->s_items$0})(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & (not(que: queues) & not(que = semaphore$0)) => not(que: mutexes)) & !mt.(mt: mutexes & not((queue_items\/{semaphore$0|->s_items$0})(mt) = {}) => (queue_items\/{semaphore$0|->s_items$0})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items\/{semaphore$0|->s_items$0})(mt) = {ITEM_EMPTY}) => (queue_items\/{semaphore$0|->s_items$0})(mt) = {}) & que: queues\/{semaphore$0} & task: TASK & task: (queue_sending\/{semaphore$0|->{}})(que));
  ("`Local hypotheses'" & semaphore$0: QUEUE & not(semaphore$0: queues) & not(semaphore$0: mutexes) & s_items$0: POW(ITEM) & card(s_items$0) = 1 & queue_items\/{semaphore$0|->s_items$0}: QUEUE +-> POW(ITEM) & queue_receiving\/{semaphore$0|->{}}: QUEUE +-> POW(TASK) & queue_sending\/{semaphore$0|->{}}: QUEUE +-> POW(TASK) & semaphore$0: queues\/{semaphore$0} & semaphores: POW(queues\/{semaphore$0}) & mutexes: POW(queues\/{semaphore$0}) & queues\/{semaphore$0} = dom(queue_items\/{semaphore$0|->s_items$0}) & queues\/{semaphore$0} = dom(queue_receiving\/{semaphore$0|->{}}) & queues\/{semaphore$0} = dom(queue_sending\/{semaphore$0|->{}}) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & tk: TASK & tk: (queue_receiving\/{semaphore$0|->{}})(q1) => not(tk: (queue_sending\/{semaphore$0|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & tk: TASK & tk: (queue_sending\/{semaphore$0|->{}})(q2) => not(tk: (queue_receiving\/{semaphore$0|->{}})(q1))) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & not(q1 = q2) & tk: TASK & tk: (queue_receiving\/{semaphore$0|->{}})(q1) => not(tk: (queue_receiving\/{semaphore$0|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & not(q1 = q2) & tk: TASK & tk: (queue_sending\/{semaphore$0|->{}})(q1) => not(tk: (queue_sending\/{semaphore$0|->{}})(q2))) & !mt.(mt: mutexes & (queue_items\/{semaphore$0|->s_items$0})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items\/{semaphore$0|->s_items$0})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items\/{semaphore$0|->s_items$0})(mt) = {} or (queue_items\/{semaphore$0|->s_items$0})(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & (not(que: queues) & not(que = semaphore$0)) => not(que: mutexes)) & !mt.(mt: mutexes & not((queue_items\/{semaphore$0|->s_items$0})(mt) = {}) => (queue_items\/{semaphore$0|->s_items$0})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items\/{semaphore$0|->s_items$0})(mt) = {ITEM_EMPTY}) => (queue_items\/{semaphore$0|->s_items$0})(mt) = {}) & que: queues\/{semaphore$0} & task: TASK & task: (queue_receiving\/{semaphore$0|->{}})(que));
  ("`xSemaphoreCreateCounting preconditions in this component'" & uxMaxCount: INTEGER & 0<=uxMaxCount & uxMaxCount<=2147483647 & uxInitialCount: INTEGER & 0<=uxInitialCount & uxInitialCount<=2147483647 & 1<=uxInitialCount & uxInitialCount<=uxMaxCount);
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (1<=uxMaxCount);
  ("`Local hypotheses'" & semaphore$0: QUEUE & not(semaphore$0: queues) & not(semaphore$0: mutexes) & s_items$0: POW(ITEM) & card(s_items$0) = uxInitialCount & queue_items\/{semaphore$0|->s_items$0}: QUEUE +-> POW(ITEM) & queue_receiving\/{semaphore$0|->{}}: QUEUE +-> POW(TASK) & queue_sending\/{semaphore$0|->{}}: QUEUE +-> POW(TASK) & semaphore$0: queues\/{semaphore$0} & semaphores: POW(queues\/{semaphore$0}) & mutexes: POW(queues\/{semaphore$0}) & queues\/{semaphore$0} = dom(queue_items\/{semaphore$0|->s_items$0}) & queues\/{semaphore$0} = dom(queue_receiving\/{semaphore$0|->{}}) & queues\/{semaphore$0} = dom(queue_sending\/{semaphore$0|->{}}) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & tk: TASK & tk: (queue_receiving\/{semaphore$0|->{}})(q1) => not(tk: (queue_sending\/{semaphore$0|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & tk: TASK & tk: (queue_sending\/{semaphore$0|->{}})(q2) => not(tk: (queue_receiving\/{semaphore$0|->{}})(q1))) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & not(q1 = q2) & tk: TASK & tk: (queue_receiving\/{semaphore$0|->{}})(q1) => not(tk: (queue_receiving\/{semaphore$0|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & not(q1 = q2) & tk: TASK & tk: (queue_sending\/{semaphore$0|->{}})(q1) => not(tk: (queue_sending\/{semaphore$0|->{}})(q2))) & !mt.(mt: mutexes & (queue_items\/{semaphore$0|->s_items$0})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items\/{semaphore$0|->s_items$0})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items\/{semaphore$0|->s_items$0})(mt) = {} or (queue_items\/{semaphore$0|->s_items$0})(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & (not(que: queues) & not(que = semaphore$0)) => not(que: mutexes)) & !mt.(mt: mutexes & not((queue_items\/{semaphore$0|->s_items$0})(mt) = {}) => (queue_items\/{semaphore$0|->s_items$0})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items\/{semaphore$0|->s_items$0})(mt) = {ITEM_EMPTY}) => (queue_items\/{semaphore$0|->s_items$0})(mt) = {}) & mt: queues\/{semaphore$0} & mt: mutexes & (queue_items\/{semaphore$0|->s_items$0})(mt) = {});
  "`Check that the invariant (!mt.(mt: queues & mt: mutexes & queue_items(mt) = {} => mutex_holder(mt): tasks & mutex_holder(mt)/=idle)) is preserved by the operation - ref 3.4'";
  ("`Local hypotheses'" & semaphore$0: QUEUE & not(semaphore$0: queues) & not(semaphore$0: mutexes) & s_items$0: POW(ITEM) & card(s_items$0) = uxInitialCount & queue_items\/{semaphore$0|->s_items$0}: QUEUE +-> POW(ITEM) & queue_receiving\/{semaphore$0|->{}}: QUEUE +-> POW(TASK) & queue_sending\/{semaphore$0|->{}}: QUEUE +-> POW(TASK) & semaphore$0: queues\/{semaphore$0} & semaphores: POW(queues\/{semaphore$0}) & mutexes: POW(queues\/{semaphore$0}) & queues\/{semaphore$0} = dom(queue_items\/{semaphore$0|->s_items$0}) & queues\/{semaphore$0} = dom(queue_receiving\/{semaphore$0|->{}}) & queues\/{semaphore$0} = dom(queue_sending\/{semaphore$0|->{}}) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & tk: TASK & tk: (queue_receiving\/{semaphore$0|->{}})(q1) => not(tk: (queue_sending\/{semaphore$0|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & tk: TASK & tk: (queue_sending\/{semaphore$0|->{}})(q2) => not(tk: (queue_receiving\/{semaphore$0|->{}})(q1))) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & not(q1 = q2) & tk: TASK & tk: (queue_receiving\/{semaphore$0|->{}})(q1) => not(tk: (queue_receiving\/{semaphore$0|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & not(q1 = q2) & tk: TASK & tk: (queue_sending\/{semaphore$0|->{}})(q1) => not(tk: (queue_sending\/{semaphore$0|->{}})(q2))) & !mt.(mt: mutexes & (queue_items\/{semaphore$0|->s_items$0})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items\/{semaphore$0|->s_items$0})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items\/{semaphore$0|->s_items$0})(mt) = {} or (queue_items\/{semaphore$0|->s_items$0})(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & (not(que: queues) & not(que = semaphore$0)) => not(que: mutexes)) & !mt.(mt: mutexes & not((queue_items\/{semaphore$0|->s_items$0})(mt) = {}) => (queue_items\/{semaphore$0|->s_items$0})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items\/{semaphore$0|->s_items$0})(mt) = {ITEM_EMPTY}) => (queue_items\/{semaphore$0|->s_items$0})(mt) = {}) & que: queues\/{semaphore$0} & task: TASK & task: (queue_sending\/{semaphore$0|->{}})(que));
  "`Check that the invariant (!(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked)) is preserved by the operation - ref 3.4'";
  ("`Local hypotheses'" & semaphore$0: QUEUE & not(semaphore$0: queues) & not(semaphore$0: mutexes) & s_items$0: POW(ITEM) & card(s_items$0) = uxInitialCount & queue_items\/{semaphore$0|->s_items$0}: QUEUE +-> POW(ITEM) & queue_receiving\/{semaphore$0|->{}}: QUEUE +-> POW(TASK) & queue_sending\/{semaphore$0|->{}}: QUEUE +-> POW(TASK) & semaphore$0: queues\/{semaphore$0} & semaphores: POW(queues\/{semaphore$0}) & mutexes: POW(queues\/{semaphore$0}) & queues\/{semaphore$0} = dom(queue_items\/{semaphore$0|->s_items$0}) & queues\/{semaphore$0} = dom(queue_receiving\/{semaphore$0|->{}}) & queues\/{semaphore$0} = dom(queue_sending\/{semaphore$0|->{}}) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & tk: TASK & tk: (queue_receiving\/{semaphore$0|->{}})(q1) => not(tk: (queue_sending\/{semaphore$0|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & tk: TASK & tk: (queue_sending\/{semaphore$0|->{}})(q2) => not(tk: (queue_receiving\/{semaphore$0|->{}})(q1))) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & not(q1 = q2) & tk: TASK & tk: (queue_receiving\/{semaphore$0|->{}})(q1) => not(tk: (queue_receiving\/{semaphore$0|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{semaphore$0} & q2: queues\/{semaphore$0} & not(q1 = q2) & tk: TASK & tk: (queue_sending\/{semaphore$0|->{}})(q1) => not(tk: (queue_sending\/{semaphore$0|->{}})(q2))) & !mt.(mt: mutexes & (queue_items\/{semaphore$0|->s_items$0})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items\/{semaphore$0|->s_items$0})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items\/{semaphore$0|->s_items$0})(mt) = {} or (queue_items\/{semaphore$0|->s_items$0})(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & (not(que: queues) & not(que = semaphore$0)) => not(que: mutexes)) & !mt.(mt: mutexes & not((queue_items\/{semaphore$0|->s_items$0})(mt) = {}) => (queue_items\/{semaphore$0|->s_items$0})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items\/{semaphore$0|->s_items$0})(mt) = {ITEM_EMPTY}) => (queue_items\/{semaphore$0|->s_items$0})(mt) = {}) & que: queues\/{semaphore$0} & task: TASK & task: (queue_receiving\/{semaphore$0|->{}})(que));
  "`Check that the invariant (!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked)) is preserved by the operation - ref 3.4'";
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & queue_items\/{mutex|->{ITEM_EMPTY}}: QUEUE +-> POW(ITEM) & queue_receiving\/{mutex|->{}}: QUEUE +-> POW(TASK) & queue_sending\/{mutex|->{}}: QUEUE +-> POW(TASK) & semaphores: POW(queues\/{mutex}) & mutex: queues\/{mutex} & mutexes: POW(queues\/{mutex}) & queues\/{mutex} = dom(queue_items\/{mutex|->{ITEM_EMPTY}}) & queues\/{mutex} = dom(queue_receiving\/{mutex|->{}}) & queues\/{mutex} = dom(queue_sending\/{mutex|->{}}) & !(q1,q2,tk).(q1: queues\/{mutex} & q2: queues\/{mutex} & tk: TASK & tk: (queue_receiving\/{mutex|->{}})(q1) => not(tk: (queue_sending\/{mutex|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{mutex} & q2: queues\/{mutex} & tk: TASK & tk: (queue_sending\/{mutex|->{}})(q2) => not(tk: (queue_receiving\/{mutex|->{}})(q1))) & !(q1,q2,tk).(q1: queues\/{mutex} & q2: queues\/{mutex} & not(q1 = q2) & tk: TASK & tk: (queue_receiving\/{mutex|->{}})(q1) => not(tk: (queue_receiving\/{mutex|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{mutex} & q2: queues\/{mutex} & not(q1 = q2) & tk: TASK & tk: (queue_sending\/{mutex|->{}})(q1) => not(tk: (queue_sending\/{mutex|->{}})(q2))) & mutex_holder\/{mutex|->TASK_NULL}: QUEUE +-> TASK & mutexes\/{mutex} = dom(mutex_holder\/{mutex|->TASK_NULL}) & !mt.(mt: mutexes\/{mutex} & (queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {} => not((mutex_holder\/{mutex|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes\/{mutex} & not((queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {}) => (mutex_holder\/{mutex|->TASK_NULL})(mt) = TASK_NULL) & !mt.(mt: mutexes\/{mutex} => (queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {} or (queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & (not(que: queues) & not(que = mutex)) => not(que: mutexes) & not(que = mutex)) & !mt.(mt: mutexes\/{mutex} & not((queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {}) => (queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes\/{mutex} & not((queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) => (queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {}));
  (ran(mutex_holder\/{mutex|->TASK_NULL}): POW(tasks-{idle}\/{TASK_NULL}));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & queue_items\/{mutex|->{ITEM_EMPTY}}: QUEUE +-> POW(ITEM) & queue_receiving\/{mutex|->{}}: QUEUE +-> POW(TASK) & queue_sending\/{mutex|->{}}: QUEUE +-> POW(TASK) & semaphores: POW(queues\/{mutex}) & mutex: queues\/{mutex} & mutexes: POW(queues\/{mutex}) & queues\/{mutex} = dom(queue_items\/{mutex|->{ITEM_EMPTY}}) & queues\/{mutex} = dom(queue_receiving\/{mutex|->{}}) & queues\/{mutex} = dom(queue_sending\/{mutex|->{}}) & !(q1,q2,tk).(q1: queues\/{mutex} & q2: queues\/{mutex} & tk: TASK & tk: (queue_receiving\/{mutex|->{}})(q1) => not(tk: (queue_sending\/{mutex|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{mutex} & q2: queues\/{mutex} & tk: TASK & tk: (queue_sending\/{mutex|->{}})(q2) => not(tk: (queue_receiving\/{mutex|->{}})(q1))) & !(q1,q2,tk).(q1: queues\/{mutex} & q2: queues\/{mutex} & not(q1 = q2) & tk: TASK & tk: (queue_receiving\/{mutex|->{}})(q1) => not(tk: (queue_receiving\/{mutex|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{mutex} & q2: queues\/{mutex} & not(q1 = q2) & tk: TASK & tk: (queue_sending\/{mutex|->{}})(q1) => not(tk: (queue_sending\/{mutex|->{}})(q2))) & mutex_holder\/{mutex|->TASK_NULL}: QUEUE +-> TASK & mutexes\/{mutex} = dom(mutex_holder\/{mutex|->TASK_NULL}) & !mt.(mt: mutexes\/{mutex} & (queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {} => not((mutex_holder\/{mutex|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes\/{mutex} & not((queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {}) => (mutex_holder\/{mutex|->TASK_NULL})(mt) = TASK_NULL) & !mt.(mt: mutexes\/{mutex} => (queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {} or (queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & (not(que: queues) & not(que = mutex)) => not(que: mutexes) & not(que = mutex)) & !mt.(mt: mutexes\/{mutex} & not((queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {}) => (queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes\/{mutex} & not((queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) => (queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {}) & mt: queues\/{mutex} & mt: mutexes\/{mutex} & (queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {});
  ((mutex_holder\/{mutex|->TASK_NULL})(mt): tasks);
  (not((mutex_holder\/{mutex|->TASK_NULL})(mt) = idle));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & queue_items\/{mutex|->{ITEM_EMPTY}}: QUEUE +-> POW(ITEM) & queue_receiving\/{mutex|->{}}: QUEUE +-> POW(TASK) & queue_sending\/{mutex|->{}}: QUEUE +-> POW(TASK) & semaphores: POW(queues\/{mutex}) & mutex: queues\/{mutex} & mutexes: POW(queues\/{mutex}) & queues\/{mutex} = dom(queue_items\/{mutex|->{ITEM_EMPTY}}) & queues\/{mutex} = dom(queue_receiving\/{mutex|->{}}) & queues\/{mutex} = dom(queue_sending\/{mutex|->{}}) & !(q1,q2,tk).(q1: queues\/{mutex} & q2: queues\/{mutex} & tk: TASK & tk: (queue_receiving\/{mutex|->{}})(q1) => not(tk: (queue_sending\/{mutex|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{mutex} & q2: queues\/{mutex} & tk: TASK & tk: (queue_sending\/{mutex|->{}})(q2) => not(tk: (queue_receiving\/{mutex|->{}})(q1))) & !(q1,q2,tk).(q1: queues\/{mutex} & q2: queues\/{mutex} & not(q1 = q2) & tk: TASK & tk: (queue_receiving\/{mutex|->{}})(q1) => not(tk: (queue_receiving\/{mutex|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{mutex} & q2: queues\/{mutex} & not(q1 = q2) & tk: TASK & tk: (queue_sending\/{mutex|->{}})(q1) => not(tk: (queue_sending\/{mutex|->{}})(q2))) & mutex_holder\/{mutex|->TASK_NULL}: QUEUE +-> TASK & mutexes\/{mutex} = dom(mutex_holder\/{mutex|->TASK_NULL}) & !mt.(mt: mutexes\/{mutex} & (queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {} => not((mutex_holder\/{mutex|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes\/{mutex} & not((queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {}) => (mutex_holder\/{mutex|->TASK_NULL})(mt) = TASK_NULL) & !mt.(mt: mutexes\/{mutex} => (queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {} or (queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & (not(que: queues) & not(que = mutex)) => not(que: mutexes) & not(que = mutex)) & !mt.(mt: mutexes\/{mutex} & not((queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {}) => (queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes\/{mutex} & not((queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) => (queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {}) & que: queues\/{mutex} & task: TASK & task: (queue_sending\/{mutex|->{}})(que));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & queue_items\/{mutex|->{ITEM_EMPTY}}: QUEUE +-> POW(ITEM) & queue_receiving\/{mutex|->{}}: QUEUE +-> POW(TASK) & queue_sending\/{mutex|->{}}: QUEUE +-> POW(TASK) & semaphores: POW(queues\/{mutex}) & mutex: queues\/{mutex} & mutexes: POW(queues\/{mutex}) & queues\/{mutex} = dom(queue_items\/{mutex|->{ITEM_EMPTY}}) & queues\/{mutex} = dom(queue_receiving\/{mutex|->{}}) & queues\/{mutex} = dom(queue_sending\/{mutex|->{}}) & !(q1,q2,tk).(q1: queues\/{mutex} & q2: queues\/{mutex} & tk: TASK & tk: (queue_receiving\/{mutex|->{}})(q1) => not(tk: (queue_sending\/{mutex|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{mutex} & q2: queues\/{mutex} & tk: TASK & tk: (queue_sending\/{mutex|->{}})(q2) => not(tk: (queue_receiving\/{mutex|->{}})(q1))) & !(q1,q2,tk).(q1: queues\/{mutex} & q2: queues\/{mutex} & not(q1 = q2) & tk: TASK & tk: (queue_receiving\/{mutex|->{}})(q1) => not(tk: (queue_receiving\/{mutex|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{mutex} & q2: queues\/{mutex} & not(q1 = q2) & tk: TASK & tk: (queue_sending\/{mutex|->{}})(q1) => not(tk: (queue_sending\/{mutex|->{}})(q2))) & mutex_holder\/{mutex|->TASK_NULL}: QUEUE +-> TASK & mutexes\/{mutex} = dom(mutex_holder\/{mutex|->TASK_NULL}) & !mt.(mt: mutexes\/{mutex} & (queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {} => not((mutex_holder\/{mutex|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes\/{mutex} & not((queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {}) => (mutex_holder\/{mutex|->TASK_NULL})(mt) = TASK_NULL) & !mt.(mt: mutexes\/{mutex} => (queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {} or (queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & (not(que: queues) & not(que = mutex)) => not(que: mutexes) & not(que = mutex)) & !mt.(mt: mutexes\/{mutex} & not((queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {}) => (queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes\/{mutex} & not((queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {ITEM_EMPTY}) => (queue_items\/{mutex|->{ITEM_EMPTY}})(mt) = {}) & que: queues\/{mutex} & task: TASK & task: (queue_receiving\/{mutex|->{}})(que));
  ("`xQueueCreate preconditions in this component'" & uxQueueLength: INTEGER & 0<=uxQueueLength & uxQueueLength<=2147483647 & uxItemSize: INTEGER & 0<=uxItemSize & uxItemSize<=2147483647);
  ("`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues) & queue_items\/{pxQueue|->{}}: QUEUE +-> POW(ITEM) & queue_receiving\/{pxQueue|->{}}: QUEUE +-> POW(TASK) & queue_sending\/{pxQueue|->{}}: QUEUE +-> POW(TASK) & semaphores: POW(queues\/{pxQueue}) & mutexes: POW(queues\/{pxQueue}) & queues\/{pxQueue} = dom(queue_items\/{pxQueue|->{}}) & queues\/{pxQueue} = dom(queue_receiving\/{pxQueue|->{}}) & queues\/{pxQueue} = dom(queue_sending\/{pxQueue|->{}}) & !(q1,q2,tk).(q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & tk: TASK & tk: (queue_receiving\/{pxQueue|->{}})(q1) => not(tk: (queue_sending\/{pxQueue|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & tk: TASK & tk: (queue_sending\/{pxQueue|->{}})(q2) => not(tk: (queue_receiving\/{pxQueue|->{}})(q1))) & !(q1,q2,tk).(q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & not(q1 = q2) & tk: TASK & tk: (queue_receiving\/{pxQueue|->{}})(q1) => not(tk: (queue_receiving\/{pxQueue|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & not(q1 = q2) & tk: TASK & tk: (queue_sending\/{pxQueue|->{}})(q1) => not(tk: (queue_sending\/{pxQueue|->{}})(q2))) & !mt.(mt: mutexes & (queue_items\/{pxQueue|->{}})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items\/{pxQueue|->{}})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items\/{pxQueue|->{}})(mt) = {} or (queue_items\/{pxQueue|->{}})(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & (not(que: queues) & not(que = pxQueue)) => not(que: mutexes)) & !mt.(mt: mutexes & not((queue_items\/{pxQueue|->{}})(mt) = {}) => (queue_items\/{pxQueue|->{}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items\/{pxQueue|->{}})(mt) = {ITEM_EMPTY}) => (queue_items\/{pxQueue|->{}})(mt) = {}) & mt: queues\/{pxQueue} & mt: mutexes & (queue_items\/{pxQueue|->{}})(mt) = {});
  ("`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues) & queue_items\/{pxQueue|->{}}: QUEUE +-> POW(ITEM) & queue_receiving\/{pxQueue|->{}}: QUEUE +-> POW(TASK) & queue_sending\/{pxQueue|->{}}: QUEUE +-> POW(TASK) & semaphores: POW(queues\/{pxQueue}) & mutexes: POW(queues\/{pxQueue}) & queues\/{pxQueue} = dom(queue_items\/{pxQueue|->{}}) & queues\/{pxQueue} = dom(queue_receiving\/{pxQueue|->{}}) & queues\/{pxQueue} = dom(queue_sending\/{pxQueue|->{}}) & !(q1,q2,tk).(q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & tk: TASK & tk: (queue_receiving\/{pxQueue|->{}})(q1) => not(tk: (queue_sending\/{pxQueue|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & tk: TASK & tk: (queue_sending\/{pxQueue|->{}})(q2) => not(tk: (queue_receiving\/{pxQueue|->{}})(q1))) & !(q1,q2,tk).(q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & not(q1 = q2) & tk: TASK & tk: (queue_receiving\/{pxQueue|->{}})(q1) => not(tk: (queue_receiving\/{pxQueue|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & not(q1 = q2) & tk: TASK & tk: (queue_sending\/{pxQueue|->{}})(q1) => not(tk: (queue_sending\/{pxQueue|->{}})(q2))) & !mt.(mt: mutexes & (queue_items\/{pxQueue|->{}})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items\/{pxQueue|->{}})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items\/{pxQueue|->{}})(mt) = {} or (queue_items\/{pxQueue|->{}})(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & (not(que: queues) & not(que = pxQueue)) => not(que: mutexes)) & !mt.(mt: mutexes & not((queue_items\/{pxQueue|->{}})(mt) = {}) => (queue_items\/{pxQueue|->{}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items\/{pxQueue|->{}})(mt) = {ITEM_EMPTY}) => (queue_items\/{pxQueue|->{}})(mt) = {}) & que: queues\/{pxQueue} & task: TASK & task: (queue_sending\/{pxQueue|->{}})(que));
  ("`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues) & queue_items\/{pxQueue|->{}}: QUEUE +-> POW(ITEM) & queue_receiving\/{pxQueue|->{}}: QUEUE +-> POW(TASK) & queue_sending\/{pxQueue|->{}}: QUEUE +-> POW(TASK) & semaphores: POW(queues\/{pxQueue}) & mutexes: POW(queues\/{pxQueue}) & queues\/{pxQueue} = dom(queue_items\/{pxQueue|->{}}) & queues\/{pxQueue} = dom(queue_receiving\/{pxQueue|->{}}) & queues\/{pxQueue} = dom(queue_sending\/{pxQueue|->{}}) & !(q1,q2,tk).(q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & tk: TASK & tk: (queue_receiving\/{pxQueue|->{}})(q1) => not(tk: (queue_sending\/{pxQueue|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & tk: TASK & tk: (queue_sending\/{pxQueue|->{}})(q2) => not(tk: (queue_receiving\/{pxQueue|->{}})(q1))) & !(q1,q2,tk).(q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & not(q1 = q2) & tk: TASK & tk: (queue_receiving\/{pxQueue|->{}})(q1) => not(tk: (queue_receiving\/{pxQueue|->{}})(q2))) & !(q1,q2,tk).(q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & not(q1 = q2) & tk: TASK & tk: (queue_sending\/{pxQueue|->{}})(q1) => not(tk: (queue_sending\/{pxQueue|->{}})(q2))) & !mt.(mt: mutexes & (queue_items\/{pxQueue|->{}})(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not((queue_items\/{pxQueue|->{}})(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => (queue_items\/{pxQueue|->{}})(mt) = {} or (queue_items\/{pxQueue|->{}})(mt) = {ITEM_EMPTY}) & !que.(que: QUEUE & (not(que: queues) & not(que = pxQueue)) => not(que: mutexes)) & !mt.(mt: mutexes & not((queue_items\/{pxQueue|->{}})(mt) = {}) => (queue_items\/{pxQueue|->{}})(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not((queue_items\/{pxQueue|->{}})(mt) = {ITEM_EMPTY}) => (queue_items\/{pxQueue|->{}})(mt) = {}) & que: queues\/{pxQueue} & task: TASK & task: (queue_receiving\/{pxQueue|->{}})(que))
END
&
THEORY EnumerateX IS
  SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED};
  COPY_POSITION == {queueSEND_TO_BACK,queueSEND_TO_FRONT};
  QUEUE_TYPE == {TQUE,TSEMAPH,TMUT};
  ERROR_DEFINITION == {errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY,errNO_TASK_TO_RUN,errQUEUE_BLOCKED,errQUEUE_YIELD,errQUEUE_EMPTY,errQUEUE_FULL,pdPASS,pdFAIL,pdTRUE,pdFALSE}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK)
END
