THEORY ProofList IS
  _f(1) & _f(2) & _f(10) & _f(57) & incrementTick.8,(_f(65) & _f(63) => _f(58));
  _f(1) & _f(2) & _f(10) & _f(57) & incrementTick.7,(_f(64) & _f(63) => _f(58));
  _f(1) & _f(2) & _f(10) & _f(57) & incrementTick.6,(_f(62) & _f(63) => _f(58));
  _f(1) & _f(2) & _f(10) & _f(57) & incrementTick.5,(_f(61) & _f(44) => _f(58));
  _f(1) & _f(2) & _f(10) & _f(57) & incrementTick.4,(_f(60) & _f(44) => _f(58));
  _f(1) & _f(2) & _f(10) & _f(57) & incrementTick.3,(_f(59) & _f(44) => _f(58));
  _f(1) & _f(2) & _f(10) & _f(57) & incrementTick.2,(_f(13) => _f(58));
  _f(1) & _f(2) & _f(10) & _f(57) & incrementTick.1,(_f(13) => _f(17));
  _f(1) & _f(2) & _f(10) & _f(41) & xTaskResumeAll.17,(_f(56) & _f(32) => _f(17));
  _f(1) & _f(2) & _f(10) & _f(41) & xTaskResumeAll.16,(_f(53) & _f(32) => _f(17));
  _f(1) & _f(2) & _f(10) & _f(41) & xTaskResumeAll.15,(_f(55) & _f(29) => _f(47));
  _f(1) & _f(2) & _f(10) & _f(41) & xTaskResumeAll.14,(_f(54) & _f(29) => _f(36));
  _f(1) & _f(2) & _f(10) & _f(41) & xTaskResumeAll.13,(_f(53) & _f(44) => _f(42));
  _f(1) & _f(2) & _f(10) & _f(41) & xTaskResumeAll.12,(_f(52) & _f(32) => _f(17));
  _f(1) & _f(2) & _f(10) & _f(41) & xTaskResumeAll.11,(_f(49) & _f(32) => _f(17));
  _f(1) & _f(2) & _f(10) & _f(41) & xTaskResumeAll.10,(_f(51) & _f(29) => _f(47));
  _f(1) & _f(2) & _f(10) & _f(41) & xTaskResumeAll.9,(_f(50) & _f(29) => _f(36));
  _f(1) & _f(2) & _f(10) & _f(41) & xTaskResumeAll.8,(_f(49) & _f(44) => _f(42));
  _f(1) & _f(2) & _f(10) & _f(41) & xTaskResumeAll.7,(_f(48) & _f(32) => _f(17));
  _f(1) & _f(2) & _f(10) & _f(41) & xTaskResumeAll.6,(_f(43) & _f(32) => _f(17));
  _f(1) & _f(2) & _f(10) & _f(41) & xTaskResumeAll.5,(_f(46) & _f(29) => _f(47));
  _f(1) & _f(2) & _f(10) & _f(41) & xTaskResumeAll.4,(_f(45) & _f(29) => _f(36));
  _f(1) & _f(2) & _f(10) & _f(41) & xTaskResumeAll.3,(_f(43) & _f(44) => _f(42));
  _f(1) & _f(2) & _f(10) & _f(41) & xTaskResumeAll.2,(_f(13) => _f(42));
  _f(1) & _f(2) & _f(10) & _f(41) & xTaskResumeAll.1,(_f(13) => _f(17));
  _f(1) & _f(2) & _f(10) & _f(34) & vTaskSuspendAll.4,(_f(40) & _f(32) => _f(17));
  _f(1) & _f(2) & _f(10) & _f(34) & vTaskSuspendAll.3,(_f(39) & _f(32) => _f(17));
  _f(1) & _f(2) & _f(10) & _f(34) & vTaskSuspendAll.2,(_f(37) & _f(29) => _f(38));
  _f(1) & _f(2) & _f(10) & _f(34) & vTaskSuspendAll.1,(_f(35) & _f(29) => _f(36));
  _f(1) & _f(2) & _f(10) & _f(30) & vTaskEndScheduler.3,(_f(33) & _f(32) => _f(8));
  _f(1) & _f(2) & _f(10) & _f(30) & vTaskEndScheduler.2,(_f(31) & _f(32) => _f(8));
  _f(1) & _f(2) & _f(10) & _f(30) & vTaskEndScheduler.1,(_f(13) => _f(17));
  _f(1) & _f(2) & _f(10) & _f(27) & vTaskStartScheduler.1,(_f(28) & _f(29) => _f(8));
  _f(1) & _f(2) & _f(10) & _f(24) & vTaskDelayUntil.2,(_f(25) & _f(13) => _f(26));
  _f(1) & _f(2) & _f(10) & _f(24) & vTaskDelayUntil.1,(_f(25) & _f(13) => _f(17));
  _f(1) & _f(2) & _f(10) & _f(22) & vTaskDelay.2,(_f(13) => _f(23));
  _f(1) & _f(2) & _f(10) & _f(22) & vTaskDelay.1,(_f(13) => _f(17));
  _f(1) & _f(2) & _f(10) & _f(21) & xTaskGetCurrentTaskHandle.1,(_f(13) => _f(17));
  _f(1) & _f(2) & _f(10) & _f(20) & vTaskResume.1,(_f(13) => _f(17));
  _f(1) & _f(2) & _f(10) & _f(18) & vTaskSuspend.1,(_f(19) & _f(13) => _f(17));
  _f(1) & _f(2) & _f(10) & _f(16) & vTaskDelete.1,(_f(13) => _f(17));
  _f(1) & _f(2) & _f(10) & _f(15) & xQueueGenericReceive.1,(_f(12) & _f(13) => _f(14));
  _f(1) & _f(2) & _f(10) & _f(11) & xQueueGenericSend.1,(_f(12) & _f(13) => _f(14));
  _f(1) & _f(2) & Initialisation.3,(_f(9) & _f(7) => _f(8));
  _f(1) & _f(2) & Initialisation.2,(_f(6) & _f(7) => _f(8));
  _f(1) & _f(2) & Initialisation.1,(_f(3) & _f(4) => _f(5))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & BIT = 0..1 & MAX_DELAY: 0..2147483647 & 1<=MAX_DELAY & NULL_PARAMETER: PARAMETER & PRIORITY: POW(NAT) & TICK: POW(NAT) & TICK = 0..MAX_DELAY & TICK_INCREMENT: TICK*TICK +-> TICK & dom(TICK_INCREMENT) = TICK*TICK & TICK_INCREMENT = %(tick,inc).(tick: TICK & inc: TICK | (tick+inc) mod MAX_DELAY) & QUEUE_NULL: QUEUE & ITEM_NULL: ITEM & REMOVE_EVENT: TASK*POW(QUEUE)*(QUEUE +-> POW(TASK)) +-> (QUEUE +-> POW(TASK)) & REMOVE_EVENT = %(task,queues,pending).(task: TASK & queues: POW(QUEUE) & pending: QUEUE +-> POW(TASK) | %queue.(queue: queues & queue: dom(pending) | pending(queue)-{task})) & NAME: FIN(INTEGER) & not(NAME = {}) & PARAMETER: FIN(INTEGER) & not(PARAMETER = {}) & TASK: FIN(INTEGER) & not(TASK = {}) & STACK: FIN(INTEGER) & not(STACK = {}) & TASK_CODE: FIN(INTEGER) & not(TASK_CODE = {}) & ITEM: FIN(INTEGER) & not(ITEM = {}) & QUEUE: FIN(INTEGER) & not(QUEUE = {}) & (1..3)*{SCHEDULER_STATE}: FIN(NATURAL*{SCHEDULER_STATE}) & not((1..3)*{SCHEDULER_STATE} = {}) & (1..2)*{COPY_POSITION}: FIN(NATURAL*{COPY_POSITION}) & not((1..2)*{COPY_POSITION} = {}) & (1..10)*{ERROR_DEFINITION}: FIN(NATURAL*{ERROR_DEFINITION}) & not((1..10)*{ERROR_DEFINITION} = {}) & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES & configMAX_PRIORITIES<=2147483647 & 1<=configMAX_PRIORITIES & configTOTAL_HEAP_SIZE: INTEGER & 0<=configTOTAL_HEAP_SIZE & configTOTAL_HEAP_SIZE<=2147483647 & configMINIMAL_STACK_SIZE: INTEGER & 0<=configMINIMAL_STACK_SIZE & configMINIMAL_STACK_SIZE<=2147483647 & INCLUDE_uxTaskPriorityGet: BIT & INCLUDE_vTaskDelete: BIT & INCLUDE_vTaskSuspend: BIT & INCLUDE_xTaskGetSchedulerState: BIT & INCLUDE_vTaskPrioritySet: BIT & INCLUDE_xTaskGetCurrentTaskHandle: BIT & INCLUDE_vTaskDelayUntil: BIT & INCLUDE_vTaskDelay: BIT);
  ("`Included,imported and extended machines invariants'" & queues: POW(QUEUE) & queue_items: QUEUE +-> POW(ITEM) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & queues = dom(queue_items) & queues = dom(queue_receiving) & queues = dom(queue_sending) & active: BOOL & tasks: FIN(TASK) & idle: TASK & blocked: FIN(TASK) & blocked: POW(tasks) & ready: FIN(TASK) & ready: POW(tasks) & suspended: FIN(TASK) & suspended: POW(tasks) & running: TASK & (active = TRUE => running = idle or idle: ready & running: tasks & not(running: ready) & not(running: blocked) & not(running: suspended) & tasks = {running}\/suspended\/blocked\/ready) & (active = FALSE => tasks = ready) & ready/\blocked = {} & blocked/\suspended = {} & suspended/\ready = {} & scheduler: (1..3)*{SCHEDULER_STATE} & "`Included,imported and extended machines assertions'" & (active = TRUE => idle: tasks) & (active = TRUE => not(tasks = {})) & (active = TRUE => not(idle: blocked)) & (active = TRUE => not(idle: suspended)) & (active = TRUE & ready = {} => running = idle) & "`Seen and used machines assertions'" & BIT: POW(NATURAL) & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES);
  ("`Local hypotheses'" & running$0: TASK & idle$0: TASK & {}: POW(QUEUE) & {}: QUEUE +-> POW(ITEM) & {}: QUEUE +-> POW(TASK) & dom({}) = {} & {}: FIN(TASK) & {}: POW({}) & 1|->SCHEDULER_STATE: (1..3)*{SCHEDULER_STATE});
  "`Check that the invariant (tickCount: TICK) is established by the initialisation - ref 3.3'";
  (0: TICK);
  ("`Local hypotheses'" & running$0: TASK & idle$0: TASK & {}: POW(QUEUE) & {}: QUEUE +-> POW(ITEM) & {}: QUEUE +-> POW(TASK) & dom({}) = {} & {}: FIN(TASK) & {}: POW({}) & 1|->SCHEDULER_STATE: (1..3)*{SCHEDULER_STATE} & 1|->SCHEDULER_STATE = 2|->SCHEDULER_STATE);
  "`Check that the invariant ((scheduler = taskSCHEDULER_RUNNING or scheduler = taskSCHEDULER_SUSPENDED) <=> (active = TRUE)) is established by the initialisation - ref 3.3'";
  (bfalse);
  ("`Local hypotheses'" & running$0: TASK & idle$0: TASK & {}: POW(QUEUE) & {}: QUEUE +-> POW(ITEM) & {}: QUEUE +-> POW(TASK) & dom({}) = {} & {}: FIN(TASK) & {}: POW({}) & 1|->SCHEDULER_STATE: (1..3)*{SCHEDULER_STATE} & 1|->SCHEDULER_STATE = 3|->SCHEDULER_STATE);
  ("`Component invariant'" & tickCount: TICK & tickMissed: TICK & scheduler: (1..3)*{SCHEDULER_STATE} & (scheduler = 1|->SCHEDULER_STATE => active = FALSE) & (active = FALSE => scheduler = 1|->SCHEDULER_STATE) & (scheduler = 2|->SCHEDULER_STATE or scheduler = 3|->SCHEDULER_STATE => active = TRUE) & (active = TRUE => scheduler = 2|->SCHEDULER_STATE or scheduler = 3|->SCHEDULER_STATE));
  ("`xQueueGenericSend preconditions in this component'" & pxQueue: queues & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & active = TRUE & not(running = idle));
  ("`Local hypotheses'" & 1<=xTicksToWait);
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (not(xTicksToWait = 0));
  ("`xQueueGenericReceive preconditions in this component'" & active = TRUE & not(running = idle) & xQueue: QUEUE & xQueue: queues & xTicksToWait: TICK & justPeeking: BOOL);
  ("`vTaskDelete preconditions in this component'" & INCLUDE_vTaskDelete = 1 & pxTaskToDelete: TASK & pxTaskToDelete: tasks & not(pxTaskToDelete = idle) & scheduler = 2|->SCHEDULER_STATE);
  (active = TRUE);
  ("`vTaskSuspend preconditions in this component'" & INCLUDE_vTaskSuspend = 1 & pxTaskToSuspend: TASK & pxTaskToSuspend: tasks & not(pxTaskToSuspend = idle) & scheduler = 2|->SCHEDULER_STATE);
  ("`Local hypotheses'" & not(pxTaskToSuspend: suspended));
  ("`vTaskResume preconditions in this component'" & scheduler = 2|->SCHEDULER_STATE & INCLUDE_vTaskSuspend = 1 & not(suspended = {}) & pxTaskToResume: TASK & pxTaskToResume: suspended);
  ("`xTaskGetCurrentTaskHandle preconditions in this component'" & scheduler = 2|->SCHEDULER_STATE & INCLUDE_xTaskGetCurrentTaskHandle = 1);
  ("`vTaskDelay preconditions in this component'" & scheduler = 2|->SCHEDULER_STATE & xTicksToDelay: TICK & INCLUDE_vTaskDelay = 1 & not(running = idle) & not(TICK_INCREMENT(tickCount,xTicksToDelay) = 0));
  (TICK_INCREMENT(tickCount,xTicksToDelay): TICK);
  ("`vTaskDelayUntil preconditions in this component'" & scheduler = 2|->SCHEDULER_STATE & pxPreviousWakeTime: TICK & xTimeIncrement: TICK & not(running = idle) & INCLUDE_vTaskDelayUntil = 1);
  ("`Local hypotheses'" & not(TICK_INCREMENT(pxPreviousWakeTime,xTimeIncrement) = 0));
  (TICK_INCREMENT(pxPreviousWakeTime,xTimeIncrement): TICK);
  ("`vTaskStartScheduler preconditions in this component'" & scheduler = 1|->SCHEDULER_STATE & blocked = {} & suspended = {} & ready = {});
  ("`Local hypotheses'" & idle_task: TASK & not(idle_task: tasks) & task: ready\/{idle_task} & tasks\/{idle_task}: FIN(TASK) & {}: FIN(TASK) & {}: POW(tasks\/{idle_task}) & (ready\/{idle_task})-{task}: FIN(TASK) & (ready\/{idle_task})-{task}: POW(tasks\/{idle_task}) & task: TASK & (task = idle_task or (idle_task: ready\/{idle_task} & not(idle_task = task))) & task: tasks\/{idle_task} & tasks\/{idle_task} = {task}\/{}\/{}\/(ready\/{idle_task})-{task} & {}: POW((ready\/{idle_task})-{task}) & {}: POW({}) & 2|->SCHEDULER_STATE: (1..3)*{SCHEDULER_STATE} & idle_task: tasks\/{idle_task} & (idle_task = task & (not(ready = {}) => ready = {task}) => task = idle_task) & 2|->SCHEDULER_STATE = 1|->SCHEDULER_STATE);
  "`Check that the invariant (scheduler = taskSCHEDULER_NOT_STARTED <=> (active = FALSE)) is preserved by the operation - ref 3.4'";
  ("`vTaskEndScheduler preconditions in this component'" & scheduler = 2|->SCHEDULER_STATE);
  ("`Local hypotheses'" & {}: FIN(TASK) & {}: POW({}) & 1|->SCHEDULER_STATE: (1..3)*{SCHEDULER_STATE} & 1|->SCHEDULER_STATE = 2|->SCHEDULER_STATE);
  "`Check that the invariant ((scheduler = taskSCHEDULER_RUNNING or scheduler = taskSCHEDULER_SUSPENDED) <=> (active = TRUE)) is preserved by the operation - ref 3.4'";
  ("`Local hypotheses'" & {}: FIN(TASK) & {}: POW({}) & 1|->SCHEDULER_STATE: (1..3)*{SCHEDULER_STATE} & 1|->SCHEDULER_STATE = 3|->SCHEDULER_STATE);
  ("`vTaskSuspendAll preconditions in this component'" & scheduler = 2|->SCHEDULER_STATE);
  ("`Local hypotheses'" & 3|->SCHEDULER_STATE: (1..3)*{SCHEDULER_STATE} & 3|->SCHEDULER_STATE = 1|->SCHEDULER_STATE);
  (active = FALSE);
  ("`Local hypotheses'" & 3|->SCHEDULER_STATE: (1..3)*{SCHEDULER_STATE} & active = FALSE);
  (3|->SCHEDULER_STATE = 1|->SCHEDULER_STATE);
  ("`Local hypotheses'" & 3|->SCHEDULER_STATE: (1..3)*{SCHEDULER_STATE} & 3|->SCHEDULER_STATE = 2|->SCHEDULER_STATE);
  ("`Local hypotheses'" & 3|->SCHEDULER_STATE: (1..3)*{SCHEDULER_STATE});
  ("`xTaskResumeAll preconditions in this component'" & scheduler = 3|->SCHEDULER_STATE);
  (TICK_INCREMENT(tickCount,tickMissed): TICK);
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}) & task: TASK & task: tasks & task: unblocked & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/{running}\/unblocked-{task}: FIN(TASK) & ready\/{running}\/unblocked-{task}: POW(tasks) & (active = TRUE => task = idle or idle: ready\/{running}\/unblocked-{task} & task: tasks & (not(task: ready) & not(task = running)) & not(task: blocked & not(task: unblocked)) & not(task: suspended) & tasks = {task}\/suspended\/blocked-unblocked\/(ready\/{running}\/unblocked-{task})) & (active = FALSE => tasks = ready\/{running}\/unblocked-{task}) & ready\/{running}\/unblocked-{task}/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/{running}\/unblocked-{task}) = {} & 2|->SCHEDULER_STATE: (1..3)*{SCHEDULER_STATE} & (active = TRUE => not(idle: blocked & not(idle: unblocked))));
  "`Check that the invariant (tickCount: TICK) is preserved by the operation - ref 3.4'";
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}) & task: TASK & task: tasks & task: unblocked & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/{running}\/unblocked-{task}: FIN(TASK) & ready\/{running}\/unblocked-{task}: POW(tasks) & (active = TRUE => task = idle or idle: ready\/{running}\/unblocked-{task} & task: tasks & (not(task: ready) & not(task = running)) & not(task: blocked & not(task: unblocked)) & not(task: suspended) & tasks = {task}\/suspended\/blocked-unblocked\/(ready\/{running}\/unblocked-{task})) & (active = FALSE => tasks = ready\/{running}\/unblocked-{task}) & ready\/{running}\/unblocked-{task}/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/{running}\/unblocked-{task}) = {} & 2|->SCHEDULER_STATE: (1..3)*{SCHEDULER_STATE} & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & 2|->SCHEDULER_STATE = 1|->SCHEDULER_STATE);
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}) & task: TASK & task: tasks & task: unblocked & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/{running}\/unblocked-{task}: FIN(TASK) & ready\/{running}\/unblocked-{task}: POW(tasks) & (active = TRUE => task = idle or idle: ready\/{running}\/unblocked-{task} & task: tasks & (not(task: ready) & not(task = running)) & not(task: blocked & not(task: unblocked)) & not(task: suspended) & tasks = {task}\/suspended\/blocked-unblocked\/(ready\/{running}\/unblocked-{task})) & (active = FALSE => tasks = ready\/{running}\/unblocked-{task}) & ready\/{running}\/unblocked-{task}/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/{running}\/unblocked-{task}) = {} & 2|->SCHEDULER_STATE: (1..3)*{SCHEDULER_STATE} & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & active = FALSE);
  (2|->SCHEDULER_STATE = 1|->SCHEDULER_STATE);
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}) & task: TASK & task: tasks & task: unblocked & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/{running}\/unblocked-{task}: FIN(TASK) & ready\/{running}\/unblocked-{task}: POW(tasks) & (active = TRUE => task = idle or idle: ready\/{running}\/unblocked-{task} & task: tasks & (not(task: ready) & not(task = running)) & not(task: blocked & not(task: unblocked)) & not(task: suspended) & tasks = {task}\/suspended\/blocked-unblocked\/(ready\/{running}\/unblocked-{task})) & (active = FALSE => tasks = ready\/{running}\/unblocked-{task}) & ready\/{running}\/unblocked-{task}/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/{running}\/unblocked-{task}) = {} & 2|->SCHEDULER_STATE: (1..3)*{SCHEDULER_STATE} & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & 2|->SCHEDULER_STATE = 3|->SCHEDULER_STATE);
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & (active = TRUE => running = idle or idle: ready\/unblocked & running: tasks & (not(running: ready) & not(running: unblocked)) & not(running: blocked & not(running: unblocked)) & not(running: suspended) & tasks = {running}\/suspended\/blocked-unblocked\/(ready\/unblocked)) & (active = FALSE => tasks = ready\/unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & 2|->SCHEDULER_STATE: (1..3)*{SCHEDULER_STATE} & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & (active = TRUE & (ready = {} & unblocked = {}) => running = idle));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & (active = TRUE => running = idle or idle: ready\/unblocked & running: tasks & (not(running: ready) & not(running: unblocked)) & not(running: blocked & not(running: unblocked)) & not(running: suspended) & tasks = {running}\/suspended\/blocked-unblocked\/(ready\/unblocked)) & (active = FALSE => tasks = ready\/unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & 2|->SCHEDULER_STATE: (1..3)*{SCHEDULER_STATE} & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & (active = TRUE & (ready = {} & unblocked = {}) => running = idle) & 2|->SCHEDULER_STATE = 1|->SCHEDULER_STATE);
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & (active = TRUE => running = idle or idle: ready\/unblocked & running: tasks & (not(running: ready) & not(running: unblocked)) & not(running: blocked & not(running: unblocked)) & not(running: suspended) & tasks = {running}\/suspended\/blocked-unblocked\/(ready\/unblocked)) & (active = FALSE => tasks = ready\/unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & 2|->SCHEDULER_STATE: (1..3)*{SCHEDULER_STATE} & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & (active = TRUE & (ready = {} & unblocked = {}) => running = idle) & active = FALSE);
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & (active = TRUE => running = idle or idle: ready\/unblocked & running: tasks & (not(running: ready) & not(running: unblocked)) & not(running: blocked & not(running: unblocked)) & not(running: suspended) & tasks = {running}\/suspended\/blocked-unblocked\/(ready\/unblocked)) & (active = FALSE => tasks = ready\/unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & 2|->SCHEDULER_STATE: (1..3)*{SCHEDULER_STATE} & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & (active = TRUE & (ready = {} & unblocked = {}) => running = idle) & 2|->SCHEDULER_STATE = 3|->SCHEDULER_STATE);
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked = {} & 2|->SCHEDULER_STATE: (1..3)*{SCHEDULER_STATE});
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked = {} & 2|->SCHEDULER_STATE: (1..3)*{SCHEDULER_STATE} & 2|->SCHEDULER_STATE = 1|->SCHEDULER_STATE);
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked = {} & 2|->SCHEDULER_STATE: (1..3)*{SCHEDULER_STATE} & active = FALSE);
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked = {} & 2|->SCHEDULER_STATE: (1..3)*{SCHEDULER_STATE} & 2|->SCHEDULER_STATE = 3|->SCHEDULER_STATE);
  ("`incrementTick preconditions in this component'" & not(scheduler = 1|->SCHEDULER_STATE));
  (TICK_INCREMENT(tickCount,1): TICK);
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}) & task: TASK & task: tasks & task: unblocked & scheduler = 2|->SCHEDULER_STATE & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/{running}\/unblocked-{task}: FIN(TASK) & ready\/{running}\/unblocked-{task}: POW(tasks) & (active = TRUE => task = idle or idle: ready\/{running}\/unblocked-{task} & task: tasks & (not(task: ready) & not(task = running)) & not(task: blocked & not(task: unblocked)) & not(task: suspended) & tasks = {task}\/suspended\/blocked-unblocked\/(ready\/{running}\/unblocked-{task})) & (active = FALSE => tasks = ready\/{running}\/unblocked-{task}) & ready\/{running}\/unblocked-{task}/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/{running}\/unblocked-{task}) = {} & (active = TRUE => not(idle: blocked & not(idle: unblocked))));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}) & scheduler = 2|->SCHEDULER_STATE & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & (active = TRUE => running = idle or idle: ready\/unblocked & running: tasks & (not(running: ready) & not(running: unblocked)) & not(running: blocked & not(running: unblocked)) & not(running: suspended) & tasks = {running}\/suspended\/blocked-unblocked\/(ready\/unblocked)) & (active = FALSE => tasks = ready\/unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & (active = TRUE & (ready = {} & unblocked = {}) => running = idle));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked = {} & scheduler = 2|->SCHEDULER_STATE);
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}) & task: TASK & task: tasks & task: unblocked & not(scheduler = 2|->SCHEDULER_STATE) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/{running}\/unblocked-{task}: FIN(TASK) & ready\/{running}\/unblocked-{task}: POW(tasks) & (active = TRUE => task = idle or idle: ready\/{running}\/unblocked-{task} & task: tasks & (not(task: ready) & not(task = running)) & not(task: blocked & not(task: unblocked)) & not(task: suspended) & tasks = {task}\/suspended\/blocked-unblocked\/(ready\/{running}\/unblocked-{task})) & (active = FALSE => tasks = ready\/{running}\/unblocked-{task}) & ready\/{running}\/unblocked-{task}/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/{running}\/unblocked-{task}) = {} & (active = TRUE => not(idle: blocked & not(idle: unblocked))));
  "`Check that the invariant (tickMissed: TICK) is preserved by the operation - ref 3.4'";
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}) & not(scheduler = 2|->SCHEDULER_STATE) & blocked-unblocked: FIN(TASK) & blocked-unblocked: POW(tasks) & ready\/unblocked: FIN(TASK) & ready\/unblocked: POW(tasks) & (active = TRUE => running = idle or idle: ready\/unblocked & running: tasks & (not(running: ready) & not(running: unblocked)) & not(running: blocked & not(running: unblocked)) & not(running: suspended) & tasks = {running}\/suspended\/blocked-unblocked\/(ready\/unblocked)) & (active = FALSE => tasks = ready\/unblocked) & ready\/unblocked/\blocked-unblocked = {} & blocked-unblocked/\suspended = {} & suspended/\(ready\/unblocked) = {} & (active = TRUE => not(idle: blocked & not(idle: unblocked))) & (active = TRUE & (ready = {} & unblocked = {}) => running = idle));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked = {} & not(scheduler = 2|->SCHEDULER_STATE))
END
&
THEORY EnumerateX IS
  SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED};
  COPY_POSITION == {queueSEND_TO_BACK,queueSEND_TO_FRONT};
  ERROR_DEFINITION == {errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY,errNO_TASK_TO_RUN,errQUEUE_BLOCKED,errQUEUE_YIELD,errQUEUE_EMPTY,errQUEUE_FULL,pdPASS,pdFAIL,pdTRUE,pdFALSE}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK)
END
