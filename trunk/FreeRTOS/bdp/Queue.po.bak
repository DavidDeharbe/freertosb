THEORY ProofList IS
  _f(1) & _f(2) & _f(15) & _f(25) & q_createMutex.18,(_f(291) & _f(62) => _f(292));
  _f(1) & _f(2) & _f(15) & _f(25) & q_createMutex.17,(_f(289) & _f(59) => _f(290));
  _f(1) & _f(2) & _f(15) & _f(25) & q_createMutex.16,(_f(287) & _f(56) => _f(288));
  _f(1) & _f(2) & _f(15) & _f(25) & q_createMutex.15,(_f(268) & _f(89) => _f(286));
  _f(1) & _f(2) & _f(15) & _f(25) & q_createMutex.14,(_f(268) & _f(87) => _f(285));
  _f(1) & _f(2) & _f(15) & _f(25) & q_createMutex.13,(_f(284) & _f(54) => _f(279));
  _f(1) & _f(2) & _f(15) & _f(25) & q_createMutex.12,(_f(282) & _f(51) => _f(283));
  _f(1) & _f(2) & _f(15) & _f(25) & q_createMutex.11,(_f(280) & _f(48) => _f(281));
  _f(1) & _f(2) & _f(15) & _f(25) & q_createMutex.10,(_f(278) & _f(45) => _f(279));
  _f(1) & _f(2) & _f(15) & _f(25) & q_createMutex.9,(_f(268) & _f(42) => _f(277));
  _f(1) & _f(2) & _f(15) & _f(25) & q_createMutex.8,(_f(268) & _f(40) => _f(276));
  _f(1) & _f(2) & _f(15) & _f(25) & q_createMutex.7,(_f(268) & _f(38) => _f(275));
  _f(1) & _f(2) & _f(15) & _f(25) & q_createMutex.6,(_f(268) & _f(36) => _f(274));
  _f(1) & _f(2) & _f(15) & _f(25) & q_createMutex.5,(_f(268) & _f(36) => _f(273));
  _f(1) & _f(2) & _f(15) & _f(25) & q_createMutex.4,(_f(268) & _f(34) => _f(272));
  _f(1) & _f(2) & _f(15) & _f(25) & q_createMutex.3,(_f(268) & _f(32) => _f(271));
  _f(1) & _f(2) & _f(15) & _f(25) & q_createMutex.2,(_f(268) & _f(30) => _f(270));
  _f(1) & _f(2) & _f(15) & _f(25) & q_createMutex.1,(_f(268) & _f(28) => _f(269));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(246) & q_createSemaphore.16,(_f(266) & _f(62) => _f(267));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(246) & q_createSemaphore.15,(_f(265) & _f(59) => _f(60));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(246) & q_createSemaphore.14,(_f(264) & _f(56) => _f(57));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(246) & q_createSemaphore.13,(_f(263) & _f(54) => _f(258));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(246) & q_createSemaphore.12,(_f(261) & _f(51) => _f(262));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(246) & q_createSemaphore.11,(_f(259) & _f(48) => _f(260));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(246) & q_createSemaphore.10,(_f(257) & _f(45) => _f(258));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(246) & q_createSemaphore.9,(_f(247) & _f(42) => _f(256));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(246) & q_createSemaphore.8,(_f(247) & _f(40) => _f(255));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(246) & q_createSemaphore.7,(_f(247) & _f(38) => _f(254));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(246) & q_createSemaphore.6,(_f(247) & _f(36) => _f(253));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(246) & q_createSemaphore.5,(_f(247) & _f(34) => _f(252));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(246) & q_createSemaphore.4,(_f(247) & _f(34) => _f(251));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(246) & q_createSemaphore.3,(_f(247) & _f(32) => _f(250));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(246) & q_createSemaphore.2,(_f(247) & _f(30) => _f(249));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(246) & q_createSemaphore.1,(_f(247) & _f(28) => _f(248));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(217) & q_resumeAll.18,(_f(245) & _f(237) => _f(229));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(217) & q_resumeAll.17,(_f(244) & _f(231) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(217) & q_resumeAll.16,(_f(243) & _f(228) => _f(229));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(217) & q_resumeAll.15,(_f(242) & _f(225) => _f(226));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(217) & q_resumeAll.14,(_f(242) & _f(221) => _f(222));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(217) & q_resumeAll.13,(_f(241) & _f(234) => _f(235));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(217) & q_resumeAll.12,(_f(240) & _f(231) => _f(232));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(217) & q_resumeAll.11,(_f(239) & _f(228) => _f(129));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(217) & q_resumeAll.10,(_f(238) & _f(223) => _f(224));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(217) & q_resumeAll.9,(_f(238) & _f(219) => _f(220));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(217) & q_resumeAll.8,(_f(236) & _f(237) => _f(229));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(217) & q_resumeAll.7,(_f(233) & _f(234) => _f(235));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(217) & q_resumeAll.6,(_f(230) & _f(231) => _f(232));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(217) & q_resumeAll.5,(_f(227) & _f(228) => _f(229));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(217) & q_resumeAll.4,(_f(218) & _f(225) => _f(226));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(217) & q_resumeAll.3,(_f(218) & _f(223) => _f(224));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(217) & q_resumeAll.2,(_f(218) & _f(221) => _f(222));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(217) & q_resumeAll.1,(_f(218) & _f(219) => _f(220));
  _f(1) & _f(2) & _f(15) & _f(25) & q_endScheduler.6,(_f(87) => _f(14));
  _f(1) & _f(2) & _f(15) & _f(25) & q_endScheduler.5,(_f(38) => _f(12));
  _f(1) & _f(2) & _f(15) & _f(25) & q_endScheduler.4,(_f(34) => _f(10));
  _f(1) & _f(2) & _f(15) & _f(25) & q_endScheduler.3,(_f(30) => _f(8));
  _f(1) & _f(2) & _f(15) & _f(25) & q_endScheduler.2,(_f(28) => _f(6));
  _f(1) & _f(2) & _f(15) & _f(25) & q_endScheduler.1,(_f(66) => _f(4));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(207) & q_removeFromEventListQueue.8,(_f(216) & _f(54) => _f(176));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(207) & q_removeFromEventListQueue.7,(_f(214) & _f(51) => _f(215));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(207) & q_removeFromEventListQueue.6,(_f(212) & _f(48) => _f(213));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(207) & q_removeFromEventListQueue.5,(_f(211) & _f(45) => _f(176));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(207) & q_removeFromEventListQueue.4,(_f(208) & _f(42) => _f(174));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(207) & q_removeFromEventListQueue.3,(_f(208) & _f(40) => _f(210));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(207) & q_removeFromEventListQueue.2,(_f(208) & _f(32) => _f(172));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(207) & q_removeFromEventListQueue.1,(_f(208) & _f(30) => _f(209));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.31,(_f(205) & _f(62) => _f(206));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.30,(_f(204) & _f(59) => _f(60));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.29,(_f(203) & _f(56) => _f(57));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.28,(_f(202) & _f(54) => _f(176));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.27,(_f(201) & _f(48) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.26,(_f(200) & _f(45) => _f(176));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.25,(_f(197) & _f(42) => _f(174));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.24,(_f(197) & _f(38) => _f(199));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.23,(_f(197) & _f(32) => _f(172));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.22,(_f(197) & _f(28) => _f(198));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.21,(_f(195) & _f(59) => _f(196));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.20,(_f(193) & _f(56) => _f(194));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.19,(_f(187) & _f(89) => _f(192));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.18,(_f(187) & _f(87) => _f(191));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.17,(_f(190) & _f(54) => _f(176));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.16,(_f(189) & _f(48) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.15,(_f(188) & _f(45) => _f(176));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.14,(_f(187) & _f(42) => _f(174));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.13,(_f(187) & _f(32) => _f(172));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.12,(_f(185) & _f(62) => _f(186));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.11,(_f(183) & _f(59) => _f(184));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.10,(_f(181) & _f(56) => _f(182));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.9,(_f(170) & _f(89) => _f(180));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.8,(_f(170) & _f(87) => _f(179));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.7,(_f(178) & _f(54) => _f(176));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.6,(_f(177) & _f(48) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.5,(_f(175) & _f(45) => _f(176));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.4,(_f(170) & _f(42) => _f(174));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.3,(_f(170) & _f(38) => _f(173));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.2,(_f(170) & _f(32) => _f(172));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(169) & q_receivedItem.1,(_f(170) & _f(28) => _f(171));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(162) & q_insertTaskWaitingToReceive.5,(_f(167) & _f(51) => _f(168));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(162) & q_insertTaskWaitingToReceive.4,(_f(130) & _f(48) => _f(166));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(162) & q_insertTaskWaitingToReceive.3,(_f(165) & _f(45) => _f(129));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(162) & q_insertTaskWaitingToReceive.2,(_f(40) => _f(164));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(162) & q_insertTaskWaitingToReceive.1,(_f(30) => _f(163));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(154) & q_insertTaskWaitingToSend.5,(_f(161) & _f(54) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(154) & q_insertTaskWaitingToSend.4,(_f(159) & _f(48) => _f(160));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(154) & q_insertTaskWaitingToSend.3,(_f(157) & _f(45) => _f(158));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(154) & q_insertTaskWaitingToSend.2,(_f(42) => _f(156));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(154) & q_insertTaskWaitingToSend.1,(_f(32) => _f(155));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(138) & q_sendItemMutex.12,(_f(136) & _f(62) => _f(153));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(138) & q_sendItemMutex.11,(_f(151) & _f(59) => _f(152));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(138) & q_sendItemMutex.10,(_f(149) & _f(56) => _f(150));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(138) & q_sendItemMutex.9,(_f(89) => _f(148));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(138) & q_sendItemMutex.8,(_f(87) => _f(147));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(138) & q_sendItemMutex.7,(_f(145) & _f(51) => _f(146));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(138) & q_sendItemMutex.6,(_f(130) & _f(48) => _f(144));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(138) & q_sendItemMutex.5,(_f(143) & _f(45) => _f(129));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(138) & q_sendItemMutex.4,(_f(40) => _f(142));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(138) & q_sendItemMutex.3,(_f(38) => _f(141));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(138) & q_sendItemMutex.2,(_f(30) => _f(140));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(138) & q_sendItemMutex.1,(_f(28) => _f(139));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(123) & q_sendItem.10,(_f(136) & _f(62) => _f(137));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(123) & q_sendItem.9,(_f(135) & _f(59) => _f(60));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(123) & q_sendItem.8,(_f(134) & _f(56) => _f(57));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(123) & q_sendItem.7,(_f(132) & _f(51) => _f(133));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(123) & q_sendItem.6,(_f(130) & _f(48) => _f(131));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(123) & q_sendItem.5,(_f(128) & _f(45) => _f(129));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(123) & q_sendItem.4,(_f(40) => _f(127));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(123) & q_sendItem.3,(_f(38) => _f(126));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(123) & q_sendItem.2,(_f(30) => _f(125));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(123) & q_sendItem.1,(_f(28) => _f(124));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.72,(_f(122) & _f(62) => _f(96));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.71,(_f(121) & _f(59) => _f(60));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.70,(_f(120) & _f(56) => _f(57));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.69,(_f(119) & _f(54) => _f(81));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.68,(_f(118) & _f(51) => _f(85));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.67,(_f(117) & _f(48) => _f(83));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.66,(_f(116) & _f(45) => _f(81));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.65,(_f(115) & _f(42) => _f(79));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.64,(_f(115) & _f(40) => _f(78));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.63,(_f(115) & _f(38) => _f(77));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.62,(_f(115) & _f(36) => _f(98));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.61,(_f(115) & _f(34) => _f(107));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.60,(_f(115) & _f(32) => _f(70));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.59,(_f(115) & _f(30) => _f(69));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.58,(_f(115) & _f(28) => _f(68));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.57,(_f(115) & _f(66) => _f(67));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.56,(_f(114) & _f(62) => _f(96));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.55,(_f(113) & _f(59) => _f(94));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.54,(_f(112) & _f(56) => _f(92));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.53,(_f(106) & _f(89) => _f(90));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.52,(_f(106) & _f(87) => _f(88));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.51,(_f(111) & _f(54) => _f(81));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.50,(_f(110) & _f(51) => _f(85));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.49,(_f(109) & _f(48) => _f(83));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.48,(_f(108) & _f(45) => _f(81));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.47,(_f(106) & _f(42) => _f(79));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.46,(_f(106) & _f(40) => _f(78));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.45,(_f(106) & _f(38) => _f(77));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.44,(_f(106) & _f(36) => _f(76));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.43,(_f(106) & _f(74) => _f(75));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.42,(_f(106) & _f(34) => _f(107));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.41,(_f(106) & _f(32) => _f(70));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.40,(_f(106) & _f(30) => _f(69));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.39,(_f(106) & _f(28) => _f(68));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.38,(_f(106) & _f(66) => _f(67));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.37,(_f(105) & _f(62) => _f(96));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.36,(_f(104) & _f(59) => _f(60));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.35,(_f(103) & _f(56) => _f(57));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.34,(_f(102) & _f(54) => _f(81));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.33,(_f(101) & _f(51) => _f(85));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.32,(_f(100) & _f(48) => _f(83));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.31,(_f(99) & _f(45) => _f(81));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.30,(_f(97) & _f(42) => _f(79));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.29,(_f(97) & _f(40) => _f(78));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.28,(_f(97) & _f(38) => _f(77));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.27,(_f(97) & _f(36) => _f(98));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.26,(_f(97) & _f(34) => _f(73));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.25,(_f(97) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.24,(_f(97) & _f(32) => _f(70));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.23,(_f(97) & _f(30) => _f(69));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.22,(_f(97) & _f(28) => _f(68));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.21,(_f(97) & _f(66) => _f(67));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.20,(_f(95) & _f(62) => _f(96));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.19,(_f(93) & _f(59) => _f(94));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.18,(_f(91) & _f(56) => _f(92));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.17,(_f(65) & _f(89) => _f(90));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.16,(_f(65) & _f(87) => _f(88));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.15,(_f(86) & _f(54) => _f(81));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.14,(_f(84) & _f(51) => _f(85));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.13,(_f(82) & _f(48) => _f(83));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.12,(_f(80) & _f(45) => _f(81));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.11,(_f(65) & _f(42) => _f(79));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.10,(_f(65) & _f(40) => _f(78));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.9,(_f(65) & _f(38) => _f(77));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.8,(_f(65) & _f(36) => _f(76));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.7,(_f(65) & _f(74) => _f(75));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.6,(_f(65) & _f(34) => _f(73));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.5,(_f(65) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.4,(_f(65) & _f(32) => _f(70));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.3,(_f(65) & _f(30) => _f(69));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.2,(_f(65) & _f(28) => _f(68));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(64) & q_queueDelete.1,(_f(65) & _f(66) => _f(67));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(26) & xQueueCreate.15,(_f(61) & _f(62) => _f(63));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(26) & xQueueCreate.14,(_f(58) & _f(59) => _f(60));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(26) & xQueueCreate.13,(_f(55) & _f(56) => _f(57));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(26) & xQueueCreate.12,(_f(53) & _f(54) => _f(46));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(26) & xQueueCreate.11,(_f(50) & _f(51) => _f(52));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(26) & xQueueCreate.10,(_f(47) & _f(48) => _f(49));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(26) & xQueueCreate.9,(_f(44) & _f(45) => _f(46));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(26) & xQueueCreate.8,(_f(27) & _f(42) => _f(43));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(26) & xQueueCreate.7,(_f(27) & _f(40) => _f(41));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(26) & xQueueCreate.6,(_f(27) & _f(38) => _f(39));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(26) & xQueueCreate.5,(_f(27) & _f(36) => _f(37));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(26) & xQueueCreate.4,(_f(27) & _f(34) => _f(35));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(26) & xQueueCreate.3,(_f(27) & _f(32) => _f(33));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(26) & xQueueCreate.2,(_f(27) & _f(30) => _f(31));
  _f(1) & _f(2) & _f(15) & _f(25) & _f(26) & xQueueCreate.1,(_f(27) & _f(28) => _f(29));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.3,(_f(22) & _f(23) => _f(24));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.2,(_f(19) & _f(20) => _f(21));
  _f(1) & _f(2) & _f(15) & AssertionLemmas.1,(_f(16) & _f(17) => _f(18));
  _f(1) & _f(2) & Initialisation.6,(_f(13) => _f(14));
  _f(1) & _f(2) & Initialisation.5,(_f(11) => _f(12));
  _f(1) & _f(2) & Initialisation.4,(_f(9) => _f(10));
  _f(1) & _f(2) & Initialisation.3,(_f(7) => _f(8));
  _f(1) & _f(2) & Initialisation.2,(_f(5) => _f(6));
  _f(1) & _f(2) & Initialisation.1,(_f(3) => _f(4))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & BIT = 0..1 & MAX_DELAY: 0..2147483647 & 1<=MAX_DELAY & NULL_PARAMETER: PARAMETER & PRIORITY: POW(NAT) & TICK: POW(NAT) & TICK = 0..MAX_DELAY & TICK_INCREMENT: TICK*TICK +-> TICK & dom(TICK_INCREMENT) = TICK*TICK & TICK_INCREMENT = %(tick,inc).(tick: TICK & inc: TICK | (tick+inc) mod MAX_DELAY) & QUEUE_NULL: QUEUE & ITEM_NULL: ITEM & ITEM_EMPTY: ITEM & TASK_NULL: TASK & REMOVE_EVENT: TASK*POW(QUEUE)*(QUEUE +-> POW(TASK)) +-> (QUEUE +-> POW(TASK)) & REMOVE_EVENT = %(task,queues,pending).(task: TASK & queues: POW(QUEUE) & pending: QUEUE +-> POW(TASK) | %queue.(queue: queues & queue: dom(pending) | pending(queue)-{task})) & NAME: FIN(INTEGER) & not(NAME = {}) & PARAMETER: FIN(INTEGER) & not(PARAMETER = {}) & TASK: FIN(INTEGER) & not(TASK = {}) & STACK: FIN(INTEGER) & not(STACK = {}) & TASK_CODE: FIN(INTEGER) & not(TASK_CODE = {}) & ITEM: FIN(INTEGER) & not(ITEM = {}) & QUEUE: FIN(INTEGER) & not(QUEUE = {}) & (1..3)*{SCHEDULER_STATE}: FIN(NATURAL*{SCHEDULER_STATE}) & not((1..3)*{SCHEDULER_STATE} = {}) & (1..2)*{COPY_POSITION}: FIN(NATURAL*{COPY_POSITION}) & not((1..2)*{COPY_POSITION} = {}) & (1..3)*{QUEUE_TYPE}: FIN(NATURAL*{QUEUE_TYPE}) & not((1..3)*{QUEUE_TYPE} = {}) & (1..10)*{ERROR_DEFINITION}: FIN(NATURAL*{ERROR_DEFINITION}) & not((1..10)*{ERROR_DEFINITION} = {}) & "`Component properties'" & remove_task: (QUEUE +-> POW(TASK))*POW(TASK) +-> (QUEUE +-> POW(TASK)) & dom(remove_task) = (QUEUE +-> POW(TASK))*POW(TASK) & remove_task = %(q_task,unblocked).(q_task: QUEUE +-> POW(TASK) & unblocked: POW(TASK) | %q1.(q1: QUEUE & q1: dom(q_task) | q_task(q1)-unblocked)));
  ("`Seen and used machines assertions'" & BIT: POW(NATURAL));
  "`Check that the invariant (queues: POW(QUEUE)) is established by the initialisation - ref 3.3'";
  ({}: POW(QUEUE));
  "`Check that the invariant (queue_items: QUEUE +-> POW(ITEM)) is established by the initialisation - ref 3.3'";
  ({}: QUEUE +-> POW(ITEM));
  "`Check that the invariant (queue_receiving: QUEUE +-> POW(TASK)) is established by the initialisation - ref 3.3'";
  ({}: QUEUE +-> POW(TASK));
  "`Check that the invariant (semaphores <: queues) is established by the initialisation - ref 3.3'";
  ({}: POW({}));
  "`Check that the invariant (queues = dom(queue_items)) is established by the initialisation - ref 3.3'";
  (dom({}) = {});
  "`Check that the invariant (mutex_holder: QUEUE +-> TASK) is established by the initialisation - ref 3.3'";
  ({}: QUEUE +-> TASK);
  ("`Component invariant'" & queues: POW(QUEUE) & queue_items: QUEUE +-> POW(ITEM) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(QUEUE) & semaphores: POW(queues) & mutexes: POW(QUEUE) & mutexes: POW(queues) & queues = dom(queue_items) & queues = dom(queue_receiving) & queues = dom(queue_sending) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_receiving(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_sending(q1) => not(tk: queue_sending(q2))) & mutex_holder: QUEUE +-> TASK & mutexes = dom(mutex_holder) & !mt.(mt: mutexes & queue_items(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => queue_items(mt) = {} or queue_items(mt) = {ITEM_EMPTY}));
  ("`Local hypotheses'" & mt: mutexes & not(queue_items(mt) = {ITEM_EMPTY}));
  "`Check assertion (!mt.(mt: mutexes & queue_items(mt)/={ITEM_EMPTY} => queue_items(mt) = {})) deduction - ref 3.2, 4.2, 5.3'";
  (queue_items(mt) = {});
  ("`Local hypotheses'" & mt: mutexes & not(queue_items(mt) = {}));
  "`Check assertion (!mt.(mt: mutexes & queue_items(mt)/={} => queue_items(mt) = {ITEM_EMPTY})) deduction - ref 3.2, 4.2, 5.3'";
  (queue_items(mt) = {ITEM_EMPTY});
  ("`Local hypotheses'" & que: QUEUE & not(que: queues));
  "`Check assertion (!que.(que: QUEUE & que/:queues => que/:mutexes)) deduction - ref 3.2, 4.2, 5.3'";
  (not(que: mutexes));
  ("`Component assertions'" & !que.(que: QUEUE & not(que: queues) => not(que: mutexes)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => queue_items(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not(queue_items(mt) = {ITEM_EMPTY}) => queue_items(mt) = {}));
  ("`xQueueCreate preconditions in this component'" & uxQueueLength: INTEGER & 0<=uxQueueLength & uxQueueLength<=2147483647 & uxItemSize: INTEGER & 0<=uxItemSize & uxItemSize<=2147483647);
  ("`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues));
  "`Check that the invariant (queue_items: QUEUE +-> POW(ITEM)) is preserved by the operation - ref 3.4'";
  (queue_items\/{pxQueue|->{}}: QUEUE +-> POW(ITEM));
  "`Check that the invariant (queue_receiving: QUEUE +-> POW(TASK)) is preserved by the operation - ref 3.4'";
  (queue_receiving\/{pxQueue|->{}}: QUEUE +-> POW(TASK));
  "`Check that the invariant (queue_sending: QUEUE +-> POW(TASK)) is preserved by the operation - ref 3.4'";
  (queue_sending\/{pxQueue|->{}}: QUEUE +-> POW(TASK));
  "`Check that the invariant (semaphores <: queues) is preserved by the operation - ref 3.4'";
  (semaphores: POW(queues\/{pxQueue}));
  "`Check that the invariant (mutexes <: queues) is preserved by the operation - ref 3.4'";
  (mutexes: POW(queues\/{pxQueue}));
  "`Check that the invariant (queues = dom(queue_items)) is preserved by the operation - ref 3.4'";
  (queues\/{pxQueue} = dom(queue_items\/{pxQueue|->{}}));
  "`Check that the invariant (queues = dom(queue_receiving)) is preserved by the operation - ref 3.4'";
  (queues\/{pxQueue} = dom(queue_receiving\/{pxQueue|->{}}));
  "`Check that the invariant (queues = dom(queue_sending)) is preserved by the operation - ref 3.4'";
  (queues\/{pxQueue} = dom(queue_sending\/{pxQueue|->{}}));
  ("`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues) & q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & tk: TASK & tk: (queue_receiving\/{pxQueue|->{}})(q1));
  "`Check that the invariant (!(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => tk/:queue_sending(q2))) is preserved by the operation - ref 3.4'";
  (not(tk: (queue_sending\/{pxQueue|->{}})(q2)));
  ("`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues) & q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & tk: TASK & tk: (queue_sending\/{pxQueue|->{}})(q2));
  "`Check that the invariant (!(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => tk/:queue_receiving(q1))) is preserved by the operation - ref 3.4'";
  (not(tk: (queue_receiving\/{pxQueue|->{}})(q1)));
  ("`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues) & q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & not(q1 = q2) & tk: TASK & tk: (queue_receiving\/{pxQueue|->{}})(q1));
  "`Check that the invariant (!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_receiving(q1) => tk/:queue_receiving(q2))) is preserved by the operation - ref 3.4'";
  (not(tk: (queue_receiving\/{pxQueue|->{}})(q2)));
  ("`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues) & q1: queues\/{pxQueue} & q2: queues\/{pxQueue} & not(q1 = q2) & tk: TASK & tk: (queue_sending\/{pxQueue|->{}})(q1));
  "`Check that the invariant (!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_sending(q1) => tk/:queue_sending(q2))) is preserved by the operation - ref 3.4'";
  ("`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues) & mt: mutexes & (queue_items\/{pxQueue|->{}})(mt) = {});
  "`Check that the invariant (!mt.(mt: mutexes & queue_items(mt) = {} => mutex_holder(mt)/=TASK_NULL)) is preserved by the operation - ref 3.4'";
  (not(mutex_holder(mt) = TASK_NULL));
  ("`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues) & mt: mutexes & not((queue_items\/{pxQueue|->{}})(mt) = {}));
  "`Check that the invariant (!mt.(mt: mutexes & queue_items(mt)/={} => mutex_holder(mt) = TASK_NULL)) is preserved by the operation - ref 3.4'";
  (mutex_holder(mt) = TASK_NULL);
  ("`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues) & mt: mutexes);
  "`Check that the invariant (!mt.(mt: mutexes => queue_items(mt) = {} or queue_items(mt) = {ITEM_EMPTY})) is preserved by the operation - ref 3.4'";
  ((queue_items\/{pxQueue|->{}})(mt) = {} or (queue_items\/{pxQueue|->{}})(mt) = {ITEM_EMPTY});
  ("`q_queueDelete preconditions in this component'" & pxQueue: queues);
  ("`Local hypotheses'" & pxQueue: semaphores & pxQueue: mutexes);
  "`Check that the invariant (queues: POW(QUEUE)) is preserved by the operation - ref 3.4'";
  (queues-{pxQueue}: POW(QUEUE));
  ({pxQueue}<<|queue_items: QUEUE +-> POW(ITEM));
  ({pxQueue}<<|queue_receiving: QUEUE +-> POW(TASK));
  ({pxQueue}<<|queue_sending: QUEUE +-> POW(TASK));
  "`Check that the invariant (semaphores: POW(QUEUE)) is preserved by the operation - ref 3.4'";
  (semaphores-{pxQueue}: POW(QUEUE));
  (semaphores-{pxQueue}: POW(queues-{pxQueue}));
  "`Check that the invariant (mutexes: POW(QUEUE)) is preserved by the operation - ref 3.4'";
  (mutexes-{pxQueue}: POW(QUEUE));
  (mutexes-{pxQueue}: POW(queues-{pxQueue}));
  (queues-{pxQueue} = dom({pxQueue}<<|queue_items));
  (queues-{pxQueue} = dom({pxQueue}<<|queue_receiving));
  (queues-{pxQueue} = dom({pxQueue}<<|queue_sending));
  ("`Local hypotheses'" & pxQueue: semaphores & pxQueue: mutexes & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  (not(tk: ({pxQueue}<<|queue_sending)(q2)));
  ("`Local hypotheses'" & pxQueue: semaphores & pxQueue: mutexes & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2));
  (not(tk: ({pxQueue}<<|queue_receiving)(q1)));
  ("`Local hypotheses'" & pxQueue: semaphores & pxQueue: mutexes & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  (not(tk: ({pxQueue}<<|queue_receiving)(q2)));
  ("`Local hypotheses'" & pxQueue: semaphores & pxQueue: mutexes & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1));
  "`Check that the invariant (mutex_holder: QUEUE +-> TASK) is preserved by the operation - ref 3.4'";
  ({pxQueue}<<|mutex_holder: QUEUE +-> TASK);
  "`Check that the invariant (mutexes = dom(mutex_holder)) is preserved by the operation - ref 3.4'";
  (mutexes-{pxQueue} = dom({pxQueue}<<|mutex_holder));
  ("`Local hypotheses'" & pxQueue: semaphores & pxQueue: mutexes & mt: mutexes & not(mt = pxQueue) & ({pxQueue}<<|queue_items)(mt) = {});
  (not(({pxQueue}<<|mutex_holder)(mt) = TASK_NULL));
  ("`Local hypotheses'" & pxQueue: semaphores & pxQueue: mutexes & mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {}));
  (({pxQueue}<<|mutex_holder)(mt) = TASK_NULL);
  ("`Local hypotheses'" & pxQueue: semaphores & pxQueue: mutexes & mt: mutexes & not(mt = pxQueue));
  (({pxQueue}<<|queue_items)(mt) = {} or ({pxQueue}<<|queue_items)(mt) = {ITEM_EMPTY});
  ("`Local hypotheses'" & pxQueue: semaphores & not(pxQueue: mutexes));
  (mutexes: POW(queues-{pxQueue}));
  ("`Local hypotheses'" & pxQueue: semaphores & not(pxQueue: mutexes) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & pxQueue: semaphores & not(pxQueue: mutexes) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2));
  ("`Local hypotheses'" & pxQueue: semaphores & not(pxQueue: mutexes) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & pxQueue: semaphores & not(pxQueue: mutexes) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1));
  ("`Local hypotheses'" & pxQueue: semaphores & not(pxQueue: mutexes) & mt: mutexes & ({pxQueue}<<|queue_items)(mt) = {});
  ("`Local hypotheses'" & pxQueue: semaphores & not(pxQueue: mutexes) & mt: mutexes & not(({pxQueue}<<|queue_items)(mt) = {}));
  ("`Local hypotheses'" & pxQueue: semaphores & not(pxQueue: mutexes) & mt: mutexes);
  ("`Local hypotheses'" & not(pxQueue: semaphores) & pxQueue: mutexes);
  (semaphores: POW(queues-{pxQueue}));
  ("`Local hypotheses'" & not(pxQueue: semaphores) & pxQueue: mutexes & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & not(pxQueue: semaphores) & pxQueue: mutexes & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2));
  ("`Local hypotheses'" & not(pxQueue: semaphores) & pxQueue: mutexes & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & not(pxQueue: semaphores) & pxQueue: mutexes & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1));
  ("`Local hypotheses'" & not(pxQueue: semaphores) & pxQueue: mutexes & mt: mutexes & not(mt = pxQueue) & ({pxQueue}<<|queue_items)(mt) = {});
  ("`Local hypotheses'" & not(pxQueue: semaphores) & pxQueue: mutexes & mt: mutexes & not(mt = pxQueue) & not(({pxQueue}<<|queue_items)(mt) = {}));
  ("`Local hypotheses'" & not(pxQueue: semaphores) & pxQueue: mutexes & mt: mutexes & not(mt = pxQueue));
  ("`Local hypotheses'" & not(pxQueue: semaphores) & not(pxQueue: mutexes));
  ("`Local hypotheses'" & not(pxQueue: semaphores) & not(pxQueue: mutexes) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & not(pxQueue: semaphores) & not(pxQueue: mutexes) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q2));
  ("`Local hypotheses'" & not(pxQueue: semaphores) & not(pxQueue: mutexes) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_receiving)(q1));
  ("`Local hypotheses'" & not(pxQueue: semaphores) & not(pxQueue: mutexes) & q1: queues & not(q1 = pxQueue) & q2: queues & not(q2 = pxQueue) & not(q1 = q2) & tk: TASK & tk: ({pxQueue}<<|queue_sending)(q1));
  ("`Local hypotheses'" & not(pxQueue: semaphores) & not(pxQueue: mutexes) & mt: mutexes & ({pxQueue}<<|queue_items)(mt) = {});
  ("`Local hypotheses'" & not(pxQueue: semaphores) & not(pxQueue: mutexes) & mt: mutexes & not(({pxQueue}<<|queue_items)(mt) = {}));
  ("`Local hypotheses'" & not(pxQueue: semaphores) & not(pxQueue: mutexes) & mt: mutexes);
  ("`q_sendItem preconditions in this component'" & pxQueue: queues & not(pxQueue: mutexes) & pxItem: ITEM & task: TASK & copy_position: (1..2)*{COPY_POSITION} & task: queue_receiving(pxQueue));
  (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pxItem})}: QUEUE +-> POW(ITEM));
  (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}: QUEUE +-> POW(TASK));
  (queues = dom(queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pxItem})}));
  (queues = dom(queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}}));
  ("`Local hypotheses'" & q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1));
  (not(tk: queue_sending(q2)));
  ("`Local hypotheses'" & q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2));
  (not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1)));
  ("`Local hypotheses'" & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q1));
  (not(tk: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(q2)));
  ("`Local hypotheses'" & mt: mutexes & (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pxItem})})(mt) = {});
  ("`Local hypotheses'" & mt: mutexes & not((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pxItem})})(mt) = {}));
  ("`Local hypotheses'" & mt: mutexes);
  ((queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pxItem})})(mt) = {} or (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pxItem})})(mt) = {ITEM_EMPTY});
  ("`q_sendItemMutex preconditions in this component'" & mutex: mutexes & task: TASK & task: queue_receiving(mutex) & queue_items(mutex) = {});
  (queue_items<+{mutex|->(queue_items(mutex)\/{ITEM_EMPTY})}: QUEUE +-> POW(ITEM));
  (queue_receiving<+{mutex|->queue_receiving(mutex)-{task}}: QUEUE +-> POW(TASK));
  (queues = dom(queue_items<+{mutex|->(queue_items(mutex)\/{ITEM_EMPTY})}));
  (queues = dom(queue_receiving<+{mutex|->queue_receiving(mutex)-{task}}));
  ("`Local hypotheses'" & q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{mutex|->queue_receiving(mutex)-{task}})(q1));
  (not(tk: (queue_receiving<+{mutex|->queue_receiving(mutex)-{task}})(q1)));
  ("`Local hypotheses'" & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{mutex|->queue_receiving(mutex)-{task}})(q1));
  (not(tk: (queue_receiving<+{mutex|->queue_receiving(mutex)-{task}})(q2)));
  (mutex_holder<+{mutex|->TASK_NULL}: QUEUE +-> TASK);
  (mutexes = dom(mutex_holder<+{mutex|->TASK_NULL}));
  ("`Local hypotheses'" & mt: mutexes & (queue_items<+{mutex|->(queue_items(mutex)\/{ITEM_EMPTY})})(mt) = {});
  (not((mutex_holder<+{mutex|->TASK_NULL})(mt) = TASK_NULL));
  ("`Local hypotheses'" & mt: mutexes & not((queue_items<+{mutex|->(queue_items(mutex)\/{ITEM_EMPTY})})(mt) = {}));
  ((mutex_holder<+{mutex|->TASK_NULL})(mt) = TASK_NULL);
  ((queue_items<+{mutex|->(queue_items(mutex)\/{ITEM_EMPTY})})(mt) = {} or (queue_items<+{mutex|->(queue_items(mutex)\/{ITEM_EMPTY})})(mt) = {ITEM_EMPTY});
  ("`q_insertTaskWaitingToSend preconditions in this component'" & pxQueue: queues & pxTask: TASK & !q1.(q1: queues => not(pxTask: queue_sending(q1)) & not(pxTask: queue_receiving(q1))));
  (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})}: QUEUE +-> POW(TASK));
  (queues = dom(queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})}));
  ("`Local hypotheses'" & q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1));
  (not(tk: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})})(q2)));
  ("`Local hypotheses'" & q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})})(q2));
  (not(tk: queue_receiving(q1)));
  ("`Local hypotheses'" & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{pxTask})})(q1));
  ("`q_insertTaskWaitingToReceive preconditions in this component'" & pxQueue: queues & pxTask: TASK & !q1.(q1: queues => not(pxTask: queue_sending(q1)) & not(pxTask: queue_receiving(q1))));
  (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})}: QUEUE +-> POW(TASK));
  (queues = dom(queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})}));
  ("`Local hypotheses'" & q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})})(q1));
  (not(tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})})(q1)));
  ("`Local hypotheses'" & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})})(q1));
  (not(tk: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{pxTask})})(q2)));
  ("`q_receivedItem preconditions in this component'" & pxQueue: queues & justPeeking: BOOL & task: TASK & task: queue_sending(pxQueue) & not(queue_items(pxQueue) = {}) & rTask: TASK & not(rTask = TASK_NULL));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY});
  (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}: QUEUE +-> POW(ITEM));
  (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}: QUEUE +-> POW(TASK));
  (queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}}));
  (queues = dom(queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}}));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY} & q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1));
  (not(tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2)));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY} & q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY} & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1));
  (mutex_holder<+{pxQueue|->rTask}: QUEUE +-> TASK);
  (mutexes = dom(mutex_holder<+{pxQueue|->rTask}));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY} & mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {});
  (not((mutex_holder<+{pxQueue|->rTask})(mt) = TASK_NULL));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY} & mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {}));
  ((mutex_holder<+{pxQueue|->rTask})(mt) = TASK_NULL);
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY} & mt: mutexes);
  ((queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{ITEM_EMPTY}})(mt) = {ITEM_EMPTY});
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & pxQueue: mutexes & not(queue_items(pxQueue) = {ITEM_EMPTY}));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & pxQueue: mutexes & not(queue_items(pxQueue) = {ITEM_EMPTY}) & q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & pxQueue: mutexes & not(queue_items(pxQueue) = {ITEM_EMPTY}) & q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & pxQueue: mutexes & not(queue_items(pxQueue) = {ITEM_EMPTY}) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1));
  (mutex_holder<+{pxQueue|->TASK_NULL}: QUEUE +-> TASK);
  (mutexes = dom(mutex_holder<+{pxQueue|->TASK_NULL}));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & pxQueue: mutexes & not(queue_items(pxQueue) = {ITEM_EMPTY}) & mt: mutexes & queue_items(mt) = {});
  (not((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & pxQueue: mutexes & not(queue_items(pxQueue) = {ITEM_EMPTY}) & mt: mutexes & not(queue_items(mt) = {}));
  ((mutex_holder<+{pxQueue|->TASK_NULL})(mt) = TASK_NULL);
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(pxQueue: mutexes));
  (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}: QUEUE +-> POW(ITEM));
  (queues = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{item}}));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(pxQueue: mutexes) & q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(pxQueue: mutexes) & q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(pxQueue: mutexes) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(pxQueue: mutexes) & mt: mutexes & (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {});
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(pxQueue: mutexes) & mt: mutexes & not((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {}));
  ("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(pxQueue: mutexes) & mt: mutexes);
  ((queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {} or (queue_items<+{pxQueue|->queue_items(pxQueue)-{item}})(mt) = {ITEM_EMPTY});
  ("`q_removeFromEventListQueue preconditions in this component'" & task: TASK);
  ("`Local hypotheses'" & pxQueue: queues & task: queue_sending(pxQueue) & pxQueue$0: queues & task: queue_receiving(pxQueue$0));
  (queue_receiving<+{pxQueue$0|->queue_receiving(pxQueue$0)-{task}}: QUEUE +-> POW(TASK));
  (queues = dom(queue_receiving<+{pxQueue$0|->queue_receiving(pxQueue$0)-{task}}));
  ("`Local hypotheses'" & pxQueue: queues & task: queue_sending(pxQueue) & pxQueue$0: queues & task: queue_receiving(pxQueue$0) & q1: queues & q2: queues & tk: TASK & tk: (queue_receiving<+{pxQueue$0|->queue_receiving(pxQueue$0)-{task}})(q1));
  ("`Local hypotheses'" & pxQueue: queues & task: queue_sending(pxQueue) & pxQueue$0: queues & task: queue_receiving(pxQueue$0) & q1: queues & q2: queues & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q2));
  (not(tk: (queue_receiving<+{pxQueue$0|->queue_receiving(pxQueue$0)-{task}})(q1)));
  ("`Local hypotheses'" & pxQueue: queues & task: queue_sending(pxQueue) & pxQueue$0: queues & task: queue_receiving(pxQueue$0) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_receiving<+{pxQueue$0|->queue_receiving(pxQueue$0)-{task}})(q1));
  (not(tk: (queue_receiving<+{pxQueue$0|->queue_receiving(pxQueue$0)-{task}})(q2)));
  ("`Local hypotheses'" & pxQueue: queues & task: queue_sending(pxQueue) & pxQueue$0: queues & task: queue_receiving(pxQueue$0) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(q1));
  ("`q_resumeAll preconditions in this component'" & unblocked: POW(TASK));
  ("`Local hypotheses'" & not(queue_receiving = {}) & not(queue_sending = {}));
  "`Check that the invariant (queue_receiving: QUEUE +-> POW(TASK)) is preserved by the operation - ref 3.4'";
  (remove_task(queue_receiving,unblocked): QUEUE +-> POW(TASK));
  "`Check that the invariant (queue_sending: QUEUE +-> POW(TASK)) is preserved by the operation - ref 3.4'";
  (remove_task(queue_sending,unblocked): QUEUE +-> POW(TASK));
  "`Check that the invariant (queues = dom(queue_receiving)) is preserved by the operation - ref 3.4'";
  (queues = dom(remove_task(queue_receiving,unblocked)));
  "`Check that the invariant (queues = dom(queue_sending)) is preserved by the operation - ref 3.4'";
  (queues = dom(remove_task(queue_sending,unblocked)));
  ("`Local hypotheses'" & not(queue_receiving = {}) & not(queue_sending = {}) & q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1));
  "`Check that the invariant (!(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => tk/:queue_sending(q2))) is preserved by the operation - ref 3.4'";
  (not(tk: remove_task(queue_sending,unblocked)(q2)));
  ("`Local hypotheses'" & not(queue_receiving = {}) & not(queue_sending = {}) & q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2));
  "`Check that the invariant (!(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => tk/:queue_receiving(q1))) is preserved by the operation - ref 3.4'";
  (not(tk: remove_task(queue_receiving,unblocked)(q1)));
  ("`Local hypotheses'" & not(queue_receiving = {}) & not(queue_sending = {}) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1));
  "`Check that the invariant (!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_receiving(q1) => tk/:queue_receiving(q2))) is preserved by the operation - ref 3.4'";
  (not(tk: remove_task(queue_receiving,unblocked)(q2)));
  ("`Local hypotheses'" & not(queue_receiving = {}) & not(queue_sending = {}) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1));
  "`Check that the invariant (!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_sending(q1) => tk/:queue_sending(q2))) is preserved by the operation - ref 3.4'";
  ("`Local hypotheses'" & not(queue_receiving = {}) & queue_sending = {});
  ("`Local hypotheses'" & not(queue_receiving = {}) & queue_sending = {} & q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1));
  ("`Local hypotheses'" & not(queue_receiving = {}) & queue_sending = {} & q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2));
  ("`Local hypotheses'" & not(queue_receiving = {}) & queue_sending = {} & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_receiving,unblocked)(q1));
  ("`Local hypotheses'" & queue_receiving = {} & not(queue_sending = {}));
  ("`Local hypotheses'" & queue_receiving = {} & not(queue_sending = {}) & q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1));
  ("`Local hypotheses'" & queue_receiving = {} & not(queue_sending = {}) & q1: queues & q2: queues & tk: TASK & tk: remove_task(queue_sending,unblocked)(q2));
  ("`Local hypotheses'" & queue_receiving = {} & not(queue_sending = {}) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: remove_task(queue_sending,unblocked)(q1));
  ("`q_createSemaphore preconditions in this component'" & length: INTEGER & 0<=length & length<=2147483647 & 1<=length & initialCount: INTEGER & 0<=initialCount & initialCount<=2147483647 & initialCount<=length);
  ("`Local hypotheses'" & semaphore: QUEUE & not(semaphore: queues) & not(semaphore: mutexes) & s_items: POW(ITEM) & card(s_items) = initialCount);
  (queue_items\/{semaphore|->s_items}: QUEUE +-> POW(ITEM));
  (queue_receiving\/{semaphore|->{}}: QUEUE +-> POW(TASK));
  (queue_sending\/{semaphore|->{}}: QUEUE +-> POW(TASK));
  (semaphore: queues\/{semaphore});
  (semaphores: POW(queues\/{semaphore}));
  (mutexes: POW(queues\/{semaphore}));
  (queues\/{semaphore} = dom(queue_items\/{semaphore|->s_items}));
  (queues\/{semaphore} = dom(queue_receiving\/{semaphore|->{}}));
  (queues\/{semaphore} = dom(queue_sending\/{semaphore|->{}}));
  ("`Local hypotheses'" & semaphore: QUEUE & not(semaphore: queues) & not(semaphore: mutexes) & s_items: POW(ITEM) & card(s_items) = initialCount & q1: queues\/{semaphore} & q2: queues\/{semaphore} & tk: TASK & tk: (queue_receiving\/{semaphore|->{}})(q1));
  (not(tk: (queue_sending\/{semaphore|->{}})(q2)));
  ("`Local hypotheses'" & semaphore: QUEUE & not(semaphore: queues) & not(semaphore: mutexes) & s_items: POW(ITEM) & card(s_items) = initialCount & q1: queues\/{semaphore} & q2: queues\/{semaphore} & tk: TASK & tk: (queue_sending\/{semaphore|->{}})(q2));
  (not(tk: (queue_receiving\/{semaphore|->{}})(q1)));
  ("`Local hypotheses'" & semaphore: QUEUE & not(semaphore: queues) & not(semaphore: mutexes) & s_items: POW(ITEM) & card(s_items) = initialCount & q1: queues\/{semaphore} & q2: queues\/{semaphore} & not(q1 = q2) & tk: TASK & tk: (queue_receiving\/{semaphore|->{}})(q1));
  (not(tk: (queue_receiving\/{semaphore|->{}})(q2)));
  ("`Local hypotheses'" & semaphore: QUEUE & not(semaphore: queues) & not(semaphore: mutexes) & s_items: POW(ITEM) & card(s_items) = initialCount & q1: queues\/{semaphore} & q2: queues\/{semaphore} & not(q1 = q2) & tk: TASK & tk: (queue_sending\/{semaphore|->{}})(q1));
  ("`Local hypotheses'" & semaphore: QUEUE & not(semaphore: queues) & not(semaphore: mutexes) & s_items: POW(ITEM) & card(s_items) = initialCount & mt: mutexes & (queue_items\/{semaphore|->s_items})(mt) = {});
  ("`Local hypotheses'" & semaphore: QUEUE & not(semaphore: queues) & not(semaphore: mutexes) & s_items: POW(ITEM) & card(s_items) = initialCount & mt: mutexes & not((queue_items\/{semaphore|->s_items})(mt) = {}));
  ("`Local hypotheses'" & semaphore: QUEUE & not(semaphore: queues) & not(semaphore: mutexes) & s_items: POW(ITEM) & card(s_items) = initialCount & mt: mutexes);
  ((queue_items\/{semaphore|->s_items})(mt) = {} or (queue_items\/{semaphore|->s_items})(mt) = {ITEM_EMPTY});
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues));
  (queue_items\/{mutex|->{ITEM_EMPTY}}: QUEUE +-> POW(ITEM));
  (queue_receiving\/{mutex|->{}}: QUEUE +-> POW(TASK));
  (queue_sending\/{mutex|->{}}: QUEUE +-> POW(TASK));
  (semaphores: POW(queues\/{mutex}));
  (mutex: queues\/{mutex});
  (mutexes: POW(queues\/{mutex}));
  (queues\/{mutex} = dom(queue_items\/{mutex|->{ITEM_EMPTY}}));
  (queues\/{mutex} = dom(queue_receiving\/{mutex|->{}}));
  (queues\/{mutex} = dom(queue_sending\/{mutex|->{}}));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & q1: queues\/{mutex} & q2: queues\/{mutex} & tk: TASK & tk: (queue_receiving\/{mutex|->{}})(q1));
  (not(tk: (queue_sending\/{mutex|->{}})(q2)));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & q1: queues\/{mutex} & q2: queues\/{mutex} & tk: TASK & tk: (queue_sending\/{mutex|->{}})(q2));
  (not(tk: (queue_receiving\/{mutex|->{}})(q1)));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & q1: queues\/{mutex} & q2: queues\/{mutex} & not(q1 = q2) & tk: TASK & tk: (queue_receiving\/{mutex|->{}})(q1));
  (not(tk: (queue_receiving\/{mutex|->{}})(q2)));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & q1: queues\/{mutex} & q2: queues\/{mutex} & not(q1 = q2) & tk: TASK & tk: (queue_sending\/{mutex|->{}})(q1));
  (mutex_holder\/{mutex|->TASK_NULL}: QUEUE +-> TASK);
  (mutexes\/{mutex} = dom(mutex_holder\/{mutex|->TASK_NULL}));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & mt$0: mutexes\/{mutex} & (queue_items\/{mutex|->{ITEM_EMPTY}})(mt$0) = {});
  (not((mutex_holder\/{mutex|->TASK_NULL})(mt$0) = TASK_NULL));
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & mt$0: mutexes\/{mutex} & not((queue_items\/{mutex|->{ITEM_EMPTY}})(mt$0) = {}));
  ((mutex_holder\/{mutex|->TASK_NULL})(mt$0) = TASK_NULL);
  ("`Local hypotheses'" & mutex: QUEUE & not(mutex: queues) & mt$0: mutexes\/{mutex});
  ((queue_items\/{mutex|->{ITEM_EMPTY}})(mt$0) = {} or (queue_items\/{mutex|->{ITEM_EMPTY}})(mt$0) = {ITEM_EMPTY})
END
&
THEORY EnumerateX IS
  SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED};
  COPY_POSITION == {queueSEND_TO_BACK,queueSEND_TO_FRONT};
  QUEUE_TYPE == {TQUE,TSEMAPH,TMUT};
  ERROR_DEFINITION == {errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY,errNO_TASK_TO_RUN,errQUEUE_BLOCKED,errQUEUE_YIELD,errQUEUE_EMPTY,errQUEUE_FULL,pdPASS,pdFAIL,pdTRUE,pdFALSE}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK)
END
