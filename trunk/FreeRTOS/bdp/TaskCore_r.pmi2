THEORY BalanceX IS
  TaskCore_r,71,9,0,50,8,1,0;
  AssertionLemmas,1,0,0,1,0,0,0;
  Initialisation,2,0,0,2,0,0,0;
  t_create,2,0,0,2,0,0,0;
  t_delete,20,0,0,20,0,0,0;
  t_suspend,4,0,0,4,0,0,0;
  t_resume,4,0,0,0,4,0,0;
  t_getPriority,0,0,0,0,0,0,0;
  t_getCurrent,0,0,0,0,0,0,0;
  t_getNumberOfTasks,0,0,0,0,0,0,0;
  t_delayTask,2,0,0,2,0,0,0;
  t_startScheduler,5,2,0,3,0,0,0;
  t_endScheduler,2,0,0,2,0,0,0;
  t_resumeAll,7,5,0,2,0,0,0;
  t_unblock,8,0,0,5,3,0,0;
  t_setPriority,14,2,0,7,1,1,0
END
&
THEORY ProofState IS
  Unproved;
  Unproved;
  Proved(0);
  Proved(0);
  Unproved;
  Proved(2);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(0);
  Proved(1);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(1);
  Proved(1);
  Proved(1);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0)
END
&
THEORY MethodList IS
  ?;
  ?;
  pr;
  pr;
  ?;
  pr;
  pr;
  pr;
  dd & dc(task$0 = running$1 & (ready$1\/{running$1})-{task$0} = ready$1) & ss & pr & dd(0) & aq(#(task$1).(task$1: TASK & task$1: tasks$1 & task$1: ready$1 & (task$0 = task$1 & (ready$1\/{running$1})-{task$0} = (ready$1\/{running$1})-{task$1}))) & ah(PP) & ah(#(task$1).(task$1: TASK & task$1: tasks$1 & task$1: ready$1 & (task$0 = task$1 & (ready$1\/{running$1})-{task$0} = (ready$1\/{running$1})-{task$1}))) & se(task$0) & ss & pr & pr;
  pr;
  dd & ah((t_priority$1<+{task|->priority})(idle$1) = t_priority$1(idle$1)) & ah(idle$1: dom(t_priority$1) & not(idle$1 = task) & t_priority$1: TASK +-> PRIORITY) & pr & pr & pr & pr & dd & eh((t_priority$1<+{task|->priority})(idle$1),t_priority$1(idle$1),Goal) & ph(tt,!tt.(tt: tasks$1 => t_priority$1(idle$1)<=t_priority$1(tt))) & pr & dc(tt = task) & ss & pr & ss & dd & ah((t_priority$1<+{task|->priority})(tt) = t_priority$1(tt)) & ah(tt: dom(t_priority$1) & not(tt = task) & t_priority$1: TASK +-> PRIORITY) & pr & pr & pr & pr & dd & eh((t_priority$1<+{task|->priority})(tt),t_priority$1(tt),Goal) & ph(tt,!tt.(tt: tasks$1 => t_priority$1(idle$1)<=t_priority$1(tt))) & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & se(unblocked) & ss & pr;
  pr;
  dd & dc(tt: ready$1) & dd & ph(tt,!tt.(tt: ready$1 => t_priority$1(tt)<=t_priority$1(running$1))) & pr & dd & ah(tt: unblocked) & ah(not(tt: ready$1) & tt: ready$1\/unblocked) & pr & pr & pp(rp.1) & dd & ah(t_priority$1(tt)<=max(t_priority$1[unblocked])) & pr & ah(not(t_priority$1(running$1)<=max(t_priority$1[unblocked]))) & pp(rt.1);
  dd & se(unblocked) & ss & pr;
  pr;
  dd & dc(tt = running$1) & pr & ah(tt: ready$1\/unblocked-{task}) & ah(tt: ready$1\/{running$1}\/unblocked-{task}) & ah(not(tt = running$1)) & pp(rp.1) & dd & dc(tt: unblocked) & dd & pr & dd & ah(tt: ready$1) & ah(tt: ready$1\/unblocked-{task}) & ah(not(tt: unblocked)) & pp(rp.1) & dd & ah(t_priority$1(tt)<=t_priority$1(running$1)) & ph(tt,!tt.(tt: ready$1 => t_priority$1(tt)<=t_priority$1(running$1))) & pr & dd & ah(t_priority$1(running$1)<=max(t_priority$1[unblocked])) & ah(t_priority$1(tt)<=t_priority$1(running$1)) & mp & ah(active$1 = TRUE) & ss & dd & ah(PRIORITY <: NATURAL) & pr & dd & ct & pr;
  dd & se(unblocked) & ss & pr & ss & ah(not(unblocked = {})) & pr & ss & dd & pr & se(task) & pr;
  pr;
  pr;
  eh(active$1,FALSE,Goal) & ss & dd & pr & dc(tt = idle_task) & ss & pr & dd & ss & pr & dd & dc(tt = idle_task) & ss & pr & dd & ss & pr;
  dd & dc(ready$1 = {}) & ss & dd & eh(active$1,FALSE,AllHyp) & ss & dd & pr & dd & pr & dc(tt = idle_task) & ss & pr & dd & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr
END
&
THEORY PassList IS
  Force(0),(?;0;1;2;3);
  Force(0),(?;0;1;2;3);
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1;2;3);
  Force(2),(?;0;1);
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1;2;3);
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(1),?;
  Force(1),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?
END
&
THEORY ManForms 
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO,genDivergencePO == KO,local_op == OK);
  PRVersion("V3.3.3.p39")(CLT == "V3.7.6")
END
