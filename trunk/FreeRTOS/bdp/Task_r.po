THEORY ProofList IS
  _f(1) & _f(2) & _f(8) & _f(12) & _f(111) & t_setPriority.17,(_f(132) & _f(23) => _f(119));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(111) & t_setPriority.16,(_f(130) & _f(23) => _f(131));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(111) & t_setPriority.15,(_f(129) & _f(23) => _f(115));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(111) & t_setPriority.14,(_f(129) & _f(17) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(111) & t_setPriority.13,(_f(129) & _f(15) => _f(113));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(111) & t_setPriority.12,(_f(128) & _f(23) => _f(119));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(111) & t_setPriority.11,(_f(126) & _f(23) => _f(127));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(111) & t_setPriority.10,(_f(125) & _f(23) => _f(115));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(111) & t_setPriority.9,(_f(125) & _f(17) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(111) & t_setPriority.8,(_f(125) & _f(15) => _f(113));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(111) & t_setPriority.7,(_f(123) & _f(121) => _f(124));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(111) & t_setPriority.6,(_f(120) & _f(121) => _f(122));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(111) & t_setPriority.5,(_f(118) & _f(23) => _f(119));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(111) & t_setPriority.4,(_f(116) & _f(23) => _f(117));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(111) & t_setPriority.3,(_f(112) & _f(23) => _f(115));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(111) & t_setPriority.2,(_f(112) & _f(17) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(111) & t_setPriority.1,(_f(112) & _f(15) => _f(113));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(95) & t_unblock.10,(_f(110) & _f(23) => _f(48));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(95) & t_unblock.9,(_f(109) & _f(23) => _f(51));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(95) & t_unblock.8,(_f(108) & _f(23) => _f(44));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(95) & t_unblock.7,(_f(104) & _f(99) => _f(107));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(95) & t_unblock.6,(_f(104) & _f(105) => _f(106));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(95) & t_unblock.5,(_f(103) & _f(23) => _f(48));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(95) & t_unblock.4,(_f(102) & _f(23) => _f(46));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(95) & t_unblock.3,(_f(101) & _f(23) => _f(44));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(95) & t_unblock.2,(_f(98) & _f(99) => _f(100));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(95) & t_unblock.1,(_f(96) => _f(97));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(82) & t_resumeAll.9,(_f(92) & _f(93) => _f(94));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(82) & t_resumeAll.8,(_f(91) & _f(23) => _f(48));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(82) & t_resumeAll.7,(_f(90) & _f(23) => _f(51));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(82) & t_resumeAll.6,(_f(88) & _f(23) => _f(44));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(82) & t_resumeAll.5,(_f(88) & _f(84) => _f(89));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(82) & t_resumeAll.4,(_f(87) & _f(23) => _f(48));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(82) & t_resumeAll.3,(_f(86) & _f(23) => _f(46));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(82) & t_resumeAll.2,(_f(83) & _f(23) => _f(44));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(82) & t_resumeAll.1,(_f(83) & _f(84) => _f(85));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(80) & t_endScheduler.2,(_f(81) & _f(17) => _f(7));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(80) & t_endScheduler.1,(_f(81) & _f(15) => _f(5));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(69) & t_startScheduler.6,(_f(78) & _f(23) => _f(79));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(69) & t_startScheduler.5,(_f(76) & _f(23) => _f(77));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(69) & t_startScheduler.4,(_f(70) & _f(23) => _f(75));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(69) & t_startScheduler.3,(_f(70) & _f(17) => _f(74));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(69) & t_startScheduler.2,(_f(70) & _f(15) => _f(73));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(69) & t_startScheduler.1,(_f(70) & _f(71) => _f(72));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(65) & t_delayTask.3,(_f(68) & _f(23) => _f(48));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(65) & t_delayTask.2,(_f(67) & _f(23) => _f(46));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(65) & t_delayTask.1,(_f(66) & _f(23) => _f(44));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(53) & t_resume.10,(_f(64) & _f(23) => _f(48));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(53) & t_resume.9,(_f(63) & _f(23) => _f(51));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(53) & t_resume.8,(_f(62) & _f(23) => _f(44));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(53) & t_resume.7,(_f(61) & _f(23) => _f(51));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(53) & t_resume.6,(_f(60) & _f(23) => _f(48));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(53) & t_resume.5,(_f(59) & _f(23) => _f(56));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(53) & t_resume.4,(_f(58) & _f(23) => _f(44));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(53) & t_resume.3,(_f(57) & _f(23) => _f(48));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(53) & t_resume.2,(_f(55) & _f(23) => _f(56));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(53) & t_resume.1,(_f(54) & _f(23) => _f(44));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(42) & t_suspend.6,(_f(52) & _f(23) => _f(48));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(42) & t_suspend.5,(_f(50) & _f(23) => _f(51));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(42) & t_suspend.4,(_f(49) & _f(23) => _f(44));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(42) & t_suspend.3,(_f(47) & _f(23) => _f(48));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(42) & t_suspend.2,(_f(45) & _f(23) => _f(46));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(42) & t_suspend.1,(_f(43) & _f(23) => _f(44));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.25,(_f(41) & _f(23) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.24,(_f(40) & _f(23) => _f(31));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.23,(_f(39) & _f(23) => _f(24));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.22,(_f(39) & _f(17) => _f(22));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.21,(_f(39) & _f(15) => _f(21));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.20,(_f(38) & _f(23) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.19,(_f(37) & _f(23) => _f(31));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.18,(_f(36) & _f(23) => _f(24));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.17,(_f(36) & _f(17) => _f(22));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.16,(_f(36) & _f(15) => _f(21));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.15,(_f(35) & _f(23) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.14,(_f(34) & _f(23) => _f(31));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.13,(_f(33) & _f(23) => _f(24));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.12,(_f(33) & _f(17) => _f(22));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.11,(_f(33) & _f(15) => _f(21));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.10,(_f(32) & _f(23) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.9,(_f(30) & _f(23) => _f(31));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.8,(_f(29) & _f(23) => _f(24));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.7,(_f(29) & _f(17) => _f(22));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.6,(_f(29) & _f(15) => _f(21));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.5,(_f(27) & _f(23) => _f(28));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.4,(_f(25) & _f(23) => _f(26));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.3,(_f(20) & _f(23) => _f(24));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.2,(_f(20) & _f(17) => _f(22));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(19) & t_delete.1,(_f(20) & _f(15) => _f(21));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(13) & t_create.2,(_f(14) & _f(17) => _f(18));
  _f(1) & _f(2) & _f(8) & _f(12) & _f(13) & t_create.1,(_f(14) & _f(15) => _f(16));
  _f(1) & _f(2) & _f(8) & AssertionLemmas.1,(_f(9) & _f(10) => _f(11));
  _f(1) & _f(2) & Initialisation.2,(_f(3) & _f(6) => _f(7));
  _f(1) & _f(2) & Initialisation.1,(_f(3) & _f(4) => _f(5))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES & configMAX_PRIORITIES<=2147483647 & 1<=configMAX_PRIORITIES & configTOTAL_HEAP_SIZE: INTEGER & 0<=configTOTAL_HEAP_SIZE & configTOTAL_HEAP_SIZE<=2147483647 & configMINIMAL_STACK_SIZE: INTEGER & 0<=configMINIMAL_STACK_SIZE & configMINIMAL_STACK_SIZE<=2147483647 & INCLUDE_uxTaskPriorityGet: BIT & INCLUDE_vTaskDelete: BIT & INCLUDE_vTaskSuspend: BIT & INCLUDE_xTaskGetSchedulerState: BIT & INCLUDE_vTaskPrioritySet: BIT & INCLUDE_xTaskGetCurrentTaskHandle: BIT & INCLUDE_vTaskDelayUntil: BIT & INCLUDE_vTaskDelay: BIT & BIT = 0..1 & MAX_DELAY: 0..2147483647 & 1<=MAX_DELAY & NULL_PARAMETER: PARAMETER & PRIORITY: POW(NAT) & TICK: POW(NAT) & TICK = 0..MAX_DELAY & TICK_INCREMENT: TICK*TICK +-> TICK & dom(TICK_INCREMENT) = TICK*TICK & TICK_INCREMENT = %(tick,inc).(tick: TICK & inc: TICK | (tick+inc) mod MAX_DELAY) & QUEUE_NULL: QUEUE & ITEM_NULL: ITEM & REMOVE_EVENT: TASK*POW(QUEUE)*(QUEUE +-> POW(TASK)) +-> (QUEUE +-> POW(TASK)) & REMOVE_EVENT = %(task,queues,pending).(task: TASK & queues: POW(QUEUE) & pending: QUEUE +-> POW(TASK) | %queue.(queue: queues & queue: dom(pending) | pending(queue)-{task})) & NAME: FIN(INTEGER) & not(NAME = {}) & PARAMETER: FIN(INTEGER) & not(PARAMETER = {}) & TASK: FIN(INTEGER) & not(TASK = {}) & STACK: FIN(INTEGER) & not(STACK = {}) & TASK_CODE: FIN(INTEGER) & not(TASK_CODE = {}) & ITEM: FIN(INTEGER) & not(ITEM = {}) & QUEUE: FIN(INTEGER) & not(QUEUE = {}) & (1..3)*{SCHEDULER_STATE}: FIN(NATURAL*{SCHEDULER_STATE}) & not((1..3)*{SCHEDULER_STATE} = {}) & (1..2)*{COPY_POSITION}: FIN(NATURAL*{COPY_POSITION}) & not((1..2)*{COPY_POSITION} = {}) & (1..10)*{ERROR_DEFINITION}: FIN(NATURAL*{ERROR_DEFINITION}) & not((1..10)*{ERROR_DEFINITION} = {}) & "`Component properties'" & PRIORITY = 0..configMAX_PRIORITIES-1 & IDLE_PRIORITY: PRIORITY & IDLE_PRIORITY = 0 & max_prt: PRIORITY*PRIORITY +-> PRIORITY & dom(max_prt) = PRIORITY*PRIORITY & max_prt = %(tmp_mprt_ready,t_prt).(tmp_mprt_ready: PRIORITY & t_prt: PRIORITY | max({tmp_mprt_ready}\/{t_prt})));
  ("`Seen and used machines assertions'" & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES & BIT: POW(NATURAL));
  ("`Local hypotheses'" & running$2: TASK & idle$2: TASK);
  "`Check that the invariant (t_priority$1: TASK +-> PRIORITY) is established by the initialisation - ref 4.3, 5.4'";
  ({}: TASK +-> PRIORITY);
  "`Check that the invariant (dom(t_priority$1) = tasks$1) is established by the initialisation - ref 4.3, 5.4'";
  (dom({}) = {});
  ("`Previous components invariants'" & active$1: BOOL & tasks$1: FIN(TASK) & idle$1: TASK & blocked$1: FIN(TASK) & blocked$1: POW(tasks$1) & ready$1: FIN(TASK) & ready$1: POW(tasks$1) & suspended$1: FIN(TASK) & suspended$1: POW(tasks$1) & running$1: TASK & (active$1 = TRUE => running$1 = idle$1 or idle$1: ready$1 & running$1: tasks$1 & not(running$1: ready$1) & not(running$1: blocked$1) & not(running$1: suspended$1) & tasks$1 = {running$1}\/suspended$1\/blocked$1\/ready$1) & (active$1 = FALSE => tasks$1 = ready$1) & ready$1/\blocked$1 = {} & blocked$1/\suspended$1 = {} & suspended$1/\ready$1 = {} & "`Previous components assertions'" & (active$1 = TRUE => idle$1: tasks$1) & (active$1 = TRUE => not(tasks$1 = {})) & (active$1 = TRUE => not(idle$1: blocked$1)) & (active$1 = TRUE => not(idle$1: suspended$1)) & "`Component invariant'" & t_priority$1: TASK +-> PRIORITY & dom(t_priority$1) = tasks$1 & (active$1 = TRUE => t_priority$1(idle$1) = IDLE_PRIORITY & !tt.(tt: ready$1 => t_priority$1(tt)<=t_priority$1(running$1)) & !tt.(tt: tasks$1 => IDLE_PRIORITY<=t_priority$1(tt))) & active = active$1 & tasks = tasks$1 & blocked = blocked$1 & ready = ready$1 & suspended = suspended$1 & running = running$1 & idle = idle$1);
  ("`Local hypotheses'" & PRIORITY: POW(NATURAL) & active$1 = TRUE);
  "`Check assertion (PRIORITY <: NATURAL & active = TRUE => running: dom(t_priority)) deduction - ref 3.2, 4.2, 5.3'";
  (running$1: dom(t_priority$1));
  ("`Component assertions'" & (PRIORITY: POW(NATURAL) & active$1 = TRUE => running$1: dom(t_priority$1)));
  ("`t_create preconditions in previous components'" & active$1 = FALSE & priority: PRIORITY);
  ("`t_create preconditions in this component'" & active$1 = FALSE & priority: PRIORITY & "`Local hypotheses'" & task: TASK & not(task: tasks$1));
  "`Check that the invariant (t_priority$1: TASK +-> PRIORITY) is preserved by the operation - ref 4.4, 5.5'";
  (t_priority$1\/{task|->priority}: TASK +-> PRIORITY);
  "`Check that the invariant (dom(t_priority$1) = tasks$1) is preserved by the operation - ref 4.4, 5.5'";
  (dom(t_priority$1\/{task|->priority}) = {task}\/tasks$1);
  ("`t_delete preconditions in previous components'" & active$1 = TRUE & atask: TASK & atask: tasks$1 & not(atask = idle$1));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & active$1 = TRUE & "`Local hypotheses'" & atask = running$1 & task: TASK & task: ready$1 & t_priority$1(task) = max(t_priority$1[ready$1]));
  ({atask}<<|t_priority$1: TASK +-> PRIORITY);
  (dom({atask}<<|t_priority$1) = tasks$1-{atask});
  "`Check that the invariant (active$1 = TRUE => t_priority$1(idle$1) = IDLE_PRIORITY & !tt.(tt: ready$1 => t_priority$1(tt)<=t_priority$1(running$1)) & !tt.(tt: tasks$1 => IDLE_PRIORITY<=t_priority$1(tt))) is preserved by the operation - ref 4.4, 5.5'";
  (({atask}<<|t_priority$1)(idle$1) = IDLE_PRIORITY);
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & active$1 = TRUE & "`Local hypotheses'" & atask = running$1 & task: TASK & task: ready$1 & t_priority$1(task) = max(t_priority$1[ready$1]) & tt: ready$1 & not(tt = task));
  (({atask}<<|t_priority$1)(tt)<=({atask}<<|t_priority$1)(task));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & active$1 = TRUE & "`Local hypotheses'" & atask = running$1 & task: TASK & task: ready$1 & t_priority$1(task) = max(t_priority$1[ready$1]) & tt: tasks$1 & not(tt = atask));
  (IDLE_PRIORITY<=({atask}<<|t_priority$1)(tt));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & active$1 = TRUE & "`Local hypotheses'" & not(atask = running$1) & atask: ready$1);
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & active$1 = TRUE & "`Local hypotheses'" & not(atask = running$1) & atask: ready$1 & tt: ready$1 & not(tt = atask));
  (({atask}<<|t_priority$1)(tt)<=({atask}<<|t_priority$1)(running$1));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & active$1 = TRUE & "`Local hypotheses'" & not(atask = running$1) & atask: ready$1 & tt: tasks$1 & not(tt = atask));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & active$1 = TRUE & "`Local hypotheses'" & not(atask = running$1) & not(atask: ready$1) & atask: blocked$1);
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & active$1 = TRUE & "`Local hypotheses'" & not(atask = running$1) & not(atask: ready$1) & atask: blocked$1 & tt: ready$1);
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & active$1 = TRUE & "`Local hypotheses'" & not(atask = running$1) & not(atask: ready$1) & atask: blocked$1 & tt: tasks$1 & not(tt = atask));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & active$1 = TRUE & "`Local hypotheses'" & not(atask = running$1) & not(atask: ready$1) & not(atask: blocked$1) & atask: suspended$1);
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & active$1 = TRUE & "`Local hypotheses'" & not(atask = running$1) & not(atask: ready$1) & not(atask: blocked$1) & atask: suspended$1 & tt: ready$1);
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & active$1 = TRUE & "`Local hypotheses'" & not(atask = running$1) & not(atask: ready$1) & not(atask: blocked$1) & atask: suspended$1 & tt: tasks$1 & not(tt = atask));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & active$1 = TRUE & "`Local hypotheses'" & not(atask = running$1) & not(atask: ready$1) & not(atask: blocked$1) & not(atask: suspended$1));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & active$1 = TRUE & "`Local hypotheses'" & not(atask = running$1) & not(atask: ready$1) & not(atask: blocked$1) & not(atask: suspended$1) & tt: ready$1);
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & active$1 = TRUE & "`Local hypotheses'" & not(atask = running$1) & not(atask: ready$1) & not(atask: blocked$1) & not(atask: suspended$1) & tt: tasks$1 & not(tt = atask));
  ("`t_suspend preconditions in previous components'" & active$1 = TRUE & atask: TASK & atask: tasks$1 & not(atask = idle$1));
  ("`t_suspend preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & active$1 = TRUE & "`Local hypotheses'" & atask = running$1 & task: TASK & task: ready$1 & t_priority$1(task) = max(t_priority$1[ready$1]));
  (t_priority$1(idle$1) = IDLE_PRIORITY);
  ("`t_suspend preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & active$1 = TRUE & "`Local hypotheses'" & atask = running$1 & task: TASK & task: ready$1 & t_priority$1(task) = max(t_priority$1[ready$1]) & tt: ready$1 & not(tt = task));
  (t_priority$1(tt)<=t_priority$1(task));
  ("`t_suspend preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & active$1 = TRUE & "`Local hypotheses'" & atask = running$1 & task: TASK & task: ready$1 & t_priority$1(task) = max(t_priority$1[ready$1]) & tt: tasks$1);
  (IDLE_PRIORITY<=t_priority$1(tt));
  ("`t_suspend preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & active$1 = TRUE & "`Local hypotheses'" & not(atask = running$1) & atask: ready$1);
  ("`t_suspend preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & active$1 = TRUE & "`Local hypotheses'" & not(atask = running$1) & atask: ready$1 & tt: ready$1 & not(tt = atask));
  (t_priority$1(tt)<=t_priority$1(running$1));
  ("`t_suspend preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & active$1 = TRUE & "`Local hypotheses'" & not(atask = running$1) & atask: ready$1 & tt: tasks$1);
  ("`t_resume preconditions in previous components'" & active$1 = TRUE & atask: TASK & atask: suspended$1);
  ("`t_resume preconditions in this component'" & active$1 = TRUE & atask: TASK & atask: suspended$1 & "`Local hypotheses'" & t_priority$1(running$1)+1<=t_priority$1(atask));
  ("`t_resume preconditions in this component'" & active$1 = TRUE & atask: TASK & atask: suspended$1 & "`Local hypotheses'" & t_priority$1(running$1)+1<=t_priority$1(atask) & tt: ready$1\/{running$1});
  (t_priority$1(tt)<=t_priority$1(atask));
  ("`t_resume preconditions in this component'" & active$1 = TRUE & atask: TASK & atask: suspended$1 & "`Local hypotheses'" & t_priority$1(running$1)+1<=t_priority$1(atask) & tt: tasks$1);
  ("`t_resume preconditions in this component'" & active$1 = TRUE & atask: TASK & atask: suspended$1 & "`Local hypotheses'" & not(t_priority$1(running$1)+1<=t_priority$1(atask)) & t_priority$1(atask) = t_priority$1(running$1));
  ("`t_resume preconditions in this component'" & active$1 = TRUE & atask: TASK & atask: suspended$1 & "`Local hypotheses'" & not(t_priority$1(running$1)+1<=t_priority$1(atask)) & t_priority$1(atask) = t_priority$1(running$1) & tt: ready$1\/{running$1});
  ("`t_resume preconditions in this component'" & active$1 = TRUE & atask: TASK & atask: suspended$1 & "`Local hypotheses'" & not(t_priority$1(running$1)+1<=t_priority$1(atask)) & t_priority$1(atask) = t_priority$1(running$1) & tt: tasks$1);
  ("`t_resume preconditions in this component'" & active$1 = TRUE & atask: TASK & atask: suspended$1 & "`Local hypotheses'" & not(t_priority$1(running$1)+1<=t_priority$1(atask)) & t_priority$1(atask) = t_priority$1(running$1) & tt: ready$1\/{atask});
  ("`t_resume preconditions in this component'" & active$1 = TRUE & atask: TASK & atask: suspended$1 & "`Local hypotheses'" & not(t_priority$1(running$1)+1<=t_priority$1(atask)) & not(t_priority$1(atask) = t_priority$1(running$1)));
  ("`t_resume preconditions in this component'" & active$1 = TRUE & atask: TASK & atask: suspended$1 & "`Local hypotheses'" & not(t_priority$1(running$1)+1<=t_priority$1(atask)) & not(t_priority$1(atask) = t_priority$1(running$1)) & tt: ready$1\/{atask});
  ("`t_resume preconditions in this component'" & active$1 = TRUE & atask: TASK & atask: suspended$1 & "`Local hypotheses'" & not(t_priority$1(running$1)+1<=t_priority$1(atask)) & not(t_priority$1(atask) = t_priority$1(running$1)) & tt: tasks$1);
  ("`t_delayTask preconditions in previous components'" & active$1 = TRUE & not(running$1 = idle$1) & ticks: TICK & not(ticks = 0));
  ("`t_delayTask preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & ticks: TICK & not(ticks = 0) & "`Local hypotheses'" & task: TASK & task: ready$1 & t_priority$1(task) = max(t_priority$1[ready$1]));
  ("`t_delayTask preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & ticks: TICK & not(ticks = 0) & "`Local hypotheses'" & task: TASK & task: ready$1 & t_priority$1(task) = max(t_priority$1[ready$1]) & tt: ready$1 & not(tt = task));
  ("`t_delayTask preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & ticks: TICK & not(ticks = 0) & "`Local hypotheses'" & task: TASK & task: ready$1 & t_priority$1(task) = max(t_priority$1[ready$1]) & tt: tasks$1);
  ("`t_startScheduler preconditions in previous components'" & active$1 = FALSE);
  ("`t_startScheduler preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & idle_task: TASK & not(idle_task: tasks$1) & task: TASK & (ready$1 = {} => task = idle_task) & (not(ready$1 = {}) => task: ready$1 & t_priority$1(task) = max(t_priority$1[ready$1])));
  "`Check that the invariant (tasks = tasks$1) is preserved by the operation - ref 4.4, 5.5'";
  (task: ready$1\/{idle_task});
  (t_priority$1\/{idle_task|->IDLE_PRIORITY}: TASK +-> PRIORITY);
  (dom(t_priority$1\/{idle_task|->IDLE_PRIORITY}) = tasks$1\/{idle_task});
  ((t_priority$1\/{idle_task|->IDLE_PRIORITY})(idle_task) = IDLE_PRIORITY);
  ("`t_startScheduler preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & idle_task: TASK & not(idle_task: tasks$1) & task: TASK & (ready$1 = {} => task = idle_task) & (not(ready$1 = {}) => task: ready$1 & t_priority$1(task) = max(t_priority$1[ready$1])) & tt: ready$1\/{idle_task} & not(tt = task));
  ((t_priority$1\/{idle_task|->IDLE_PRIORITY})(tt)<=(t_priority$1\/{idle_task|->IDLE_PRIORITY})(task));
  ("`t_startScheduler preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & idle_task: TASK & not(idle_task: tasks$1) & task: TASK & (ready$1 = {} => task = idle_task) & (not(ready$1 = {}) => task: ready$1 & t_priority$1(task) = max(t_priority$1[ready$1])) & tt: tasks$1\/{idle_task});
  (IDLE_PRIORITY<=(t_priority$1\/{idle_task|->IDLE_PRIORITY})(tt));
  ("`t_endScheduler preconditions in previous components'" & active$1 = TRUE);
  ("`t_endScheduler preconditions in this component'" & active$1 = TRUE);
  ("`t_resumeAll preconditions in previous components'" & active$1 = TRUE & tick: TICK);
  ("`t_resumeAll preconditions in this component'" & active$1 = TRUE & tick: TICK & "`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & not(unblocked = {}) & t_priority$1(running$1)<=max(t_priority$1[unblocked]) & task: TASK & task: unblocked & task: tasks$1 & t_priority$1(running$1)<=t_priority$1(task) & t_priority$1(task) = max(t_priority$1[unblocked]));
  "`Check that the invariant (running = running$1 & ready = ready$1 & blocked = blocked$1 & blocked = blocked$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(unblocked$0).(unblocked$0: FIN(TASK) & unblocked$0: POW(blocked$1) & (not(unblocked$0 = {}) & (#(task$0).(task$0: TASK & task$0: tasks$1 & task$0: unblocked$0 & (task = task$0 & ready$1\/{running$1}\/unblocked-{task} = ready$1\/{running$1}\/unblocked$0-{task$0})) or (ready$1\/{running$1}\/unblocked-{task} = ready$1\/unblocked$0 & task = running$1) & blocked$1-unblocked = blocked$1-unblocked$0) or (unblocked$0 = {} & (ready$1\/{running$1}\/unblocked-{task} = ready$1 & task = running$1 & blocked$1-unblocked = blocked$1)))));
  ("`t_resumeAll preconditions in this component'" & active$1 = TRUE & tick: TICK & "`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & not(unblocked = {}) & t_priority$1(running$1)<=max(t_priority$1[unblocked]) & task: TASK & task: unblocked & task: tasks$1 & t_priority$1(running$1)<=t_priority$1(task) & t_priority$1(task) = max(t_priority$1[unblocked]) & tt: ready$1\/{running$1}\/unblocked-{task});
  ("`t_resumeAll preconditions in this component'" & active$1 = TRUE & tick: TICK & "`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & not(unblocked = {}) & t_priority$1(running$1)<=max(t_priority$1[unblocked]) & task: TASK & task: unblocked & task: tasks$1 & t_priority$1(running$1)<=t_priority$1(task) & t_priority$1(task) = max(t_priority$1[unblocked]) & tt: tasks$1);
  ("`t_resumeAll preconditions in this component'" & active$1 = TRUE & tick: TICK & "`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & not(unblocked = {}) & not(t_priority$1(running$1)<=max(t_priority$1[unblocked])));
  (#(unblocked$0).(unblocked$0: FIN(TASK) & unblocked$0: POW(blocked$1) & (not(unblocked$0 = {}) & (#task.(task: TASK & task: tasks$1 & task: unblocked$0 & (running$1 = task & ready$1\/unblocked = ready$1\/{running$1}\/unblocked$0-{task})) or ready$1\/unblocked = ready$1\/unblocked$0 & blocked$1-unblocked = blocked$1-unblocked$0) or (unblocked$0 = {} & (unblocked: POW(ready$1) & blocked$1-unblocked = blocked$1)))));
  ("`t_resumeAll preconditions in this component'" & active$1 = TRUE & tick: TICK & "`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & not(unblocked = {}) & not(t_priority$1(running$1)<=max(t_priority$1[unblocked])) & tt: ready$1\/unblocked);
  ("`t_resumeAll preconditions in this component'" & active$1 = TRUE & tick: TICK & "`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & not(unblocked = {}) & not(t_priority$1(running$1)<=max(t_priority$1[unblocked])) & tt: tasks$1);
  ("`t_resumeAll preconditions in this component'" & active$1 = TRUE & tick: TICK & "`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & unblocked = {});
  "`Check that the invariant (running = running$1 & ready = ready$1 & blocked = blocked$1) is preserved by the operation - ref 4.4, 5.5'";
  (#unblocked.(unblocked: FIN(TASK) & unblocked: POW(blocked$1) & (not(unblocked = {}) & (#task.(task: TASK & task: tasks$1 & task: unblocked & (running$1 = task & ready$1 = ready$1\/{running$1}\/unblocked-{task})) or ready$1 = ready$1\/unblocked & blocked$1 = blocked$1-unblocked) or unblocked = {})));
  ("`t_unblock preconditions in previous components'" & active$1 = TRUE & task: TASK & task: blocked$1);
  "`Check precondition (blocked/={}) deduction'";
  (not(blocked$1 = {}));
  ("`t_unblock preconditions in this component'" & active$1 = TRUE & not(blocked$1 = {}) & task: TASK & task: blocked$1 & "`Local hypotheses'" & t_priority$1(running$1)<=t_priority$1(task) & running$1 = idle$1);
  "`Check that the invariant (ready = ready$1) is preserved by the operation - ref 4.4, 5.5'";
  (ready$1\/{running$1} = ready$1\/{idle$1});
  ("`t_unblock preconditions in this component'" & active$1 = TRUE & not(blocked$1 = {}) & task: TASK & task: blocked$1 & "`Local hypotheses'" & t_priority$1(running$1)<=t_priority$1(task));
  ("`t_unblock preconditions in this component'" & active$1 = TRUE & not(blocked$1 = {}) & task: TASK & task: blocked$1 & "`Local hypotheses'" & t_priority$1(running$1)<=t_priority$1(task) & tt: ready$1\/{running$1});
  ("`t_unblock preconditions in this component'" & active$1 = TRUE & not(blocked$1 = {}) & task: TASK & task: blocked$1 & "`Local hypotheses'" & t_priority$1(running$1)<=t_priority$1(task) & tt: tasks$1);
  ("`t_unblock preconditions in this component'" & active$1 = TRUE & not(blocked$1 = {}) & task: TASK & task: blocked$1 & "`Local hypotheses'" & not(t_priority$1(running$1)<=t_priority$1(task)) & running$1 = idle$1);
  "`Check that the invariant (running = running$1) is preserved by the operation - ref 4.4, 5.5'";
  (running$1 = task);
  (ready$1\/{task} = ready$1\/{idle$1});
  ("`t_unblock preconditions in this component'" & active$1 = TRUE & not(blocked$1 = {}) & task: TASK & task: blocked$1 & "`Local hypotheses'" & not(t_priority$1(running$1)<=t_priority$1(task)));
  ("`t_unblock preconditions in this component'" & active$1 = TRUE & not(blocked$1 = {}) & task: TASK & task: blocked$1 & "`Local hypotheses'" & not(t_priority$1(running$1)<=t_priority$1(task)) & tt: ready$1\/{task});
  ("`t_unblock preconditions in this component'" & active$1 = TRUE & not(blocked$1 = {}) & task: TASK & task: blocked$1 & "`Local hypotheses'" & not(t_priority$1(running$1)<=t_priority$1(task)) & tt: tasks$1);
  ("`t_setPriority preconditions in previous components'" & task: tasks$1 & priority: PRIORITY & active$1 = TRUE & not(task = idle$1));
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & active$1 = TRUE & not(task = idle$1) & "`Local hypotheses'" & task: ready$1 & t_priority$1(running$1)<=priority);
  (t_priority$1<+{task|->priority}: TASK +-> PRIORITY);
  (dom(t_priority$1<+{task|->priority}) = tasks$1);
  ((t_priority$1<+{task|->priority})(idle$1) = IDLE_PRIORITY);
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & active$1 = TRUE & not(task = idle$1) & "`Local hypotheses'" & task: ready$1 & t_priority$1(running$1)<=priority & tt: ready$1\/{running$1} & not(tt = task));
  ((t_priority$1<+{task|->priority})(tt)<=(t_priority$1<+{task|->priority})(task));
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & active$1 = TRUE & not(task = idle$1) & "`Local hypotheses'" & task: ready$1 & t_priority$1(running$1)<=priority & tt: tasks$1);
  (IDLE_PRIORITY<=(t_priority$1<+{task|->priority})(tt));
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & active$1 = TRUE & not(task = idle$1) & "`Local hypotheses'" & not(task: ready$1 & t_priority$1(running$1)<=priority) & task = running$1 & priority+1<=max(t_priority$1[ready$1]) & task$0: TASK & task$0: tasks$1 & task$0: ready$1 & t_priority$1(task$0) = max(t_priority$1[ready$1]) & task: ready$1);
  "`Check that the invariant (running = running$1 & ready = ready$1 & ready = ready$1) is preserved by the operation - ref 4.4, 5.5'";
  (task$0 = running$1 & (ready$1\/{running$1})-{task$0} = ready$1 or (task$0 = task & (ready$1\/{running$1})-{task$0} = (ready$1\/{running$1})-{task}));
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & active$1 = TRUE & not(task = idle$1) & "`Local hypotheses'" & not(task: ready$1 & t_priority$1(running$1)<=priority) & task = running$1 & priority+1<=max(t_priority$1[ready$1]) & task$0: TASK & task$0: tasks$1 & task$0: ready$1 & t_priority$1(task$0) = max(t_priority$1[ready$1]) & not(task: ready$1));
  (task$0 = running$1 & (ready$1\/{running$1})-{task$0} = ready$1 or #(task$1).(task$1: TASK & task$1: tasks$1 & task$1: ready$1 & (task$0 = task$1 & (ready$1\/{running$1})-{task$0} = (ready$1\/{running$1})-{task$1})));
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & active$1 = TRUE & not(task = idle$1) & "`Local hypotheses'" & not(task: ready$1 & t_priority$1(running$1)<=priority) & task = running$1 & priority+1<=max(t_priority$1[ready$1]) & task$0: TASK & task$0: tasks$1 & task$0: ready$1 & t_priority$1(task$0) = max(t_priority$1[ready$1]));
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & active$1 = TRUE & not(task = idle$1) & "`Local hypotheses'" & not(task: ready$1 & t_priority$1(running$1)<=priority) & task = running$1 & priority+1<=max(t_priority$1[ready$1]) & task$0: TASK & task$0: tasks$1 & task$0: ready$1 & t_priority$1(task$0) = max(t_priority$1[ready$1]) & tt: ready$1\/{running$1} & not(tt = task$0));
  ((t_priority$1<+{task|->priority})(tt)<=(t_priority$1<+{task|->priority})(task$0));
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & active$1 = TRUE & not(task = idle$1) & "`Local hypotheses'" & not(task: ready$1 & t_priority$1(running$1)<=priority) & task = running$1 & priority+1<=max(t_priority$1[ready$1]) & task$0: TASK & task$0: tasks$1 & task$0: ready$1 & t_priority$1(task$0) = max(t_priority$1[ready$1]) & tt: tasks$1);
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & active$1 = TRUE & not(task = idle$1) & "`Local hypotheses'" & not(task: ready$1 & t_priority$1(running$1)<=priority) & not(task = running$1 & priority+1<=max(t_priority$1[ready$1])));
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & active$1 = TRUE & not(task = idle$1) & "`Local hypotheses'" & not(task: ready$1 & t_priority$1(running$1)<=priority) & not(task = running$1 & priority+1<=max(t_priority$1[ready$1])) & tt: ready$1);
  ((t_priority$1<+{task|->priority})(tt)<=(t_priority$1<+{task|->priority})(running$1));
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & active$1 = TRUE & not(task = idle$1) & "`Local hypotheses'" & not(task: ready$1 & t_priority$1(running$1)<=priority) & not(task = running$1 & priority+1<=max(t_priority$1[ready$1])) & tt: tasks$1)
END
&
THEORY EnumerateX IS
  SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED};
  COPY_POSITION == {queueSEND_TO_BACK,queueSEND_TO_FRONT};
  ERROR_DEFINITION == {errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY,errNO_TASK_TO_RUN,errQUEUE_BLOCKED,errQUEUE_YIELD,errQUEUE_EMPTY,errQUEUE_FULL,pdPASS,pdFAIL,pdTRUE,pdFALSE}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK)
END
