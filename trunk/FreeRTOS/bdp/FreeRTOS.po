THEORY ProofList IS
  _f(1) & _f(2) & _f(11) & xTaskResumeAll.1,(_f(12) & _f(4) => _f(13));
  _f(1) & _f(2) & _f(7) & vTaskDelayUntil.2,(_f(8) & _f(4) => _f(10));
  _f(1) & _f(2) & _f(7) & vTaskDelayUntil.1,(_f(8) & _f(4) => _f(9));
  _f(1) & _f(2) & _f(6) & xQueuePeek.1,(_f(4) => _f(5));
  _f(1) & _f(2) & _f(3) & xQueueReceive.1,(_f(4) => _f(5))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & BIT = 0..1 & MAX_DELAY: 0..2147483647 & 1<=MAX_DELAY & NULL_PARAMETER: PARAMETER & PRIORITY: POW(NAT) & TICK: POW(NAT) & TICK = 0..MAX_DELAY & TICK_INCREMENT: TICK*TICK +-> TICK & dom(TICK_INCREMENT) = TICK*TICK & TICK_INCREMENT = %(tick,inc).(tick: TICK & inc: TICK | (tick+inc) mod MAX_DELAY) & QUEUE_NULL: QUEUE & ITEM_NULL: ITEM & ITEM_EMPTY: ITEM & TASK_NULL: TASK & REMOVE_EVENT: TASK*POW(QUEUE)*(QUEUE +-> POW(TASK)) +-> (QUEUE +-> POW(TASK)) & REMOVE_EVENT = %(task,queues,pending).(task: TASK & queues: POW(QUEUE) & pending: QUEUE +-> POW(TASK) | %queue.(queue: queues & queue: dom(pending) | pending(queue)-{task})) & semGIVE_BLOCK_TIME: TICK & NAME: FIN(INTEGER) & not(NAME = {}) & PARAMETER: FIN(INTEGER) & not(PARAMETER = {}) & TASK: FIN(INTEGER) & not(TASK = {}) & STACK: FIN(INTEGER) & not(STACK = {}) & TASK_CODE: FIN(INTEGER) & not(TASK_CODE = {}) & ITEM: FIN(INTEGER) & not(ITEM = {}) & QUEUE: FIN(INTEGER) & not(QUEUE = {}) & (1..3)*{SCHEDULER_STATE}: FIN(NATURAL*{SCHEDULER_STATE}) & not((1..3)*{SCHEDULER_STATE} = {}) & (1..2)*{COPY_POSITION}: FIN(NATURAL*{COPY_POSITION}) & not((1..2)*{COPY_POSITION} = {}) & (1..3)*{QUEUE_TYPE}: FIN(NATURAL*{QUEUE_TYPE}) & not((1..3)*{QUEUE_TYPE} = {}) & (1..10)*{ERROR_DEFINITION}: FIN(NATURAL*{ERROR_DEFINITION}) & not((1..10)*{ERROR_DEFINITION} = {}) & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES & configMAX_PRIORITIES<=2147483647 & 1<=configMAX_PRIORITIES & configTOTAL_HEAP_SIZE: INTEGER & 0<=configTOTAL_HEAP_SIZE & configTOTAL_HEAP_SIZE<=2147483647 & configMINIMAL_STACK_SIZE: INTEGER & 0<=configMINIMAL_STACK_SIZE & configMINIMAL_STACK_SIZE<=2147483647 & INCLUDE_uxTaskPriorityGet: BIT & INCLUDE_vTaskDelete: BIT & INCLUDE_vTaskSuspend: BIT & INCLUDE_xTaskGetSchedulerState: BIT & INCLUDE_vTaskPrioritySet: BIT & INCLUDE_xTaskGetCurrentTaskHandle: BIT & INCLUDE_vTaskDelayUntil: BIT & INCLUDE_vTaskDelay: BIT);
  ("`Included,imported and extended machines properties'" & remove_task: (QUEUE +-> POW(TASK))*POW(TASK) +-> (QUEUE +-> POW(TASK)) & dom(remove_task) = (QUEUE +-> POW(TASK))*POW(TASK) & remove_task = %(q_task,unblocked).(q_task: QUEUE +-> POW(TASK) & unblocked: POW(TASK) | %q1.(q1: QUEUE & q1: dom(q_task) | q_task(q1)-unblocked)) & "`Included,imported and extended machines invariants'" & tickCount: TICK & tickMissed: TICK & schedulerRunning = active & ran(mutex_holder): POW(tasks-{idle}\/{TASK_NULL}) & !mt.(mt: queues & mt: mutexes & queue_items(mt) = {} => mutex_holder(mt): tasks & not(mutex_holder(mt) = idle)) & !(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked) & !(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked) & queues: POW(QUEUE) & queue_items: QUEUE +-> POW(ITEM) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(QUEUE) & semaphores: POW(queues) & mutexes: POW(QUEUE) & mutexes: POW(queues) & queues = dom(queue_items) & queues = dom(queue_receiving) & queues = dom(queue_sending) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_receiving(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_sending(q1) => not(tk: queue_sending(q2))) & mutex_holder: QUEUE +-> TASK & mutexes = dom(mutex_holder) & !mt.(mt: mutexes & queue_items(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => queue_items(mt) = {} or queue_items(mt) = {ITEM_EMPTY}) & active: BOOL & tasks: FIN(TASK) & idle: TASK & not(TASK_NULL: tasks) & blocked: FIN(TASK) & blocked: POW(tasks) & ready: FIN(TASK) & ready: POW(tasks) & suspended: FIN(TASK) & suspended: POW(tasks) & pending: FIN(TASK) & pending: POW(suspended\/blocked) & ready/\blocked = {} & blocked/\suspended = {} & suspended/\ready = {} & tasks = suspended\/blocked\/ready & running: TASK & (active = TRUE => not(ready = {}) & running: ready & idle: ready) & schedulerRunning: BOOL & schedulerSuspended: INTEGER & 0<=schedulerSuspended & "`Included,imported and extended machines assertions'" & !que.(que: QUEUE & not(que: queues) => not(que: mutexes)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => queue_items(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not(queue_items(mt) = {ITEM_EMPTY}) => queue_items(mt) = {}) & (active = TRUE => not(running: suspended)) & (active = TRUE => not(running: blocked)) & (active = TRUE => running: tasks) & (active = TRUE => not(idle: suspended)) & (active = TRUE => not(idle: blocked)) & (active = TRUE => idle: tasks) & (active = TRUE => not(tasks = {})) & "`Seen and used machines assertions'" & BIT: POW(NATURAL) & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES);
  ("`xQueueReceive preconditions in this component'" & queue: queues & ticks: TICK & active = TRUE & not(running = idle));
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (queue: QUEUE);
  ("`xQueuePeek preconditions in this component'" & queue: queues & ticks: TICK & active = TRUE & not(running = idle));
  ("`vTaskDelayUntil preconditions in this component'" & pxPreviousWakeTime: TICK & xTimeIncrement: TICK & not(running = idle) & INCLUDE_vTaskDelayUntil = 1);
  ("`Local hypotheses'" & schedulerRunning = TRUE & not(TICK_INCREMENT(pxPreviousWakeTime,xTimeIncrement) = 0));
  (running: ready);
  (TICK_INCREMENT(pxPreviousWakeTime,xTimeIncrement): TICK);
  ("`xTaskResumeAll preconditions in this component'" & 1<=schedulerSuspended);
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked));
  (unblocked\/pending: POW(TASK))
END
&
THEORY EnumerateX IS
  SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED};
  COPY_POSITION == {queueSEND_TO_BACK,queueSEND_TO_FRONT};
  QUEUE_TYPE == {TQUE,TSEMAPH,TMUT};
  ERROR_DEFINITION == {errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY,errNO_TASK_TO_RUN,errQUEUE_BLOCKED,errQUEUE_YIELD,errQUEUE_EMPTY,errQUEUE_FULL,pdPASS,pdFAIL,pdTRUE,pdFALSE}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK)
END
