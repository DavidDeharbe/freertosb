
THEORY ProofList IS
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(123) & q_createSemaphoreSubstitution.1,(_f(124) => _f(125));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(117) & q_resumeAllSubstitution.2,(_f(120) => _f(121));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(117) & q_resumeAllSubstitution.1,(_f(118) => _f(119));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(105) & q_removeFromEventListQueueSubstitution.4,(_f(112) => _f(113));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(105) & q_removeFromEventListQueueSubstitution.3,(_f(110) => _f(111));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(105) & q_removeFromEventListQueueSubstitution.2,(_f(108) => _f(109));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(105) & q_removeFromEventListQueueSubstitution.1,(_f(106) => _f(107));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & q_receivedItemPrecondition.2,(_f(102) => _f(103));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & q_receivedItemPrecondition.1,(_f(100) => _f(101));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(87) & q_receivedItemSubstitution.6,(_f(98) => _f(99));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(87) & q_receivedItemSubstitution.5,(_f(96) => _f(97));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(87) & q_receivedItemSubstitution.4,(_f(94) => _f(95));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(87) & q_receivedItemSubstitution.3,(_f(92) => _f(93));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(87) & q_receivedItemSubstitution.2,(_f(90) => _f(91));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(87) & q_receivedItemSubstitution.1,(_f(88) => _f(89));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & q_insertTaskWaitingToReceivePrecondition.2,(_f(84) => _f(85));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & q_insertTaskWaitingToReceivePrecondition.1,(_f(82) => _f(83));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(79) & q_insertTaskWaitingToReceiveSubstitution.1,(_f(80) => _f(81));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & q_insertTaskWaitingToSendPrecondition.2,(_f(76) => _f(77));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & q_insertTaskWaitingToSendPrecondition.1,(_f(74) => _f(75));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(71) & q_insertTaskWaitingToSendSubstitution.1,(_f(72) => _f(73));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & q_sendItemMutexPrecondition.2,(_f(68) => _f(69));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & q_sendItemMutexPrecondition.1,(_f(66) => _f(67));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(61) & q_sendItemMutexSubstitution.2,(_f(64) => _f(65));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(61) & q_sendItemMutexSubstitution.1,(_f(62) => _f(63));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & q_sendItemPrecondition.1,(_f(58) => _f(59));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(53) & q_sendItemSubstitution.2,(_f(56) => _f(57));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(53) & q_sendItemSubstitution.1,(_f(54) => _f(55));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.4,(_f(46) => _f(47));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.3,(_f(44) => _f(45));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.2,(_f(42) => _f(43));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.1,(_f(40) => _f(41));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & Invariants.14,(_f(38) => _f(39));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & Invariants.13,(_f(36) => _f(37));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & Invariants.12,(_f(34) => _f(35));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & Invariants.11,(_f(32) => _f(33));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & Invariants.10,(_f(30) => _f(31));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & Invariants.9,(_f(28) => _f(29));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & Invariants.8,(_f(26) => _f(27));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & Invariants.7,(_f(24) => _f(25));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & Invariants.6,(_f(22) => _f(23));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & Invariants.5,(_f(20) => _f(21));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & Invariants.4,(_f(18) => _f(19));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & Invariants.3,(_f(16) => _f(17));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & Invariants.2,(_f(14) => _f(15));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & Invariants.1,(_f(12) => _f(13))

END
&

THEORY Formulas IS
("`Component constraints'" & btrue);
("`Used machines constraints'" & btrue);
("`Component properties'" & remove_task: (QUEUE +-> POW(TASK))*POW(TASK) +-> (QUEUE +-> POW(TASK)) & dom(remove_task) = (QUEUE +-> POW(TASK))*POW(TASK) & remove_task = %(q_task,unblocked).(q_task: QUEUE +-> POW(TASK) & unblocked: POW(TASK) | %q1.(q1: QUEUE & q1: dom(q_task) | q_task(q1)-unblocked)));
("`Seen and used machines properties'" & BIT = 0..1 & MAX_DELAY: 0..maxint & 1<=MAX_DELAY & NULL_PARAMETER: PARAMETER & PRIORITY: POW(NAT) & TICK: POW(NAT) & TICK = 0..MAX_DELAY & TICK_INCREMENT: TICK*TICK +-> TICK & dom(TICK_INCREMENT) = TICK*TICK & TICK_INCREMENT = %(tick,inc).(tick: TICK & inc: TICK | (tick+inc) mod MAX_DELAY) & QUEUE_NULL: QUEUE & ITEM_NULL: ITEM & ITEM_EMPTY: ITEM & TASK_NULL: TASK & REMOVE_EVENT: TASK*POW(QUEUE)*(QUEUE +-> POW(TASK)) +-> (QUEUE +-> POW(TASK)) & REMOVE_EVENT = %(task,queues,pending).(task: TASK & queues: POW(QUEUE) & pending: QUEUE +-> POW(TASK) | %queue.(queue: queues & queue: dom(pending) | pending(queue)-{task})) & semGIVE_BLOCK_TIME: TICK & IDLE_PRIORITY: PRIORITY & IDLE_PRIORITY = 0 & NAME: FIN(INTEGER) & not(NAME = {}) & PARAMETER: FIN(INTEGER) & not(PARAMETER = {}) & TASK: FIN(INTEGER) & not(TASK = {}) & STACK: FIN(INTEGER) & not(STACK = {}) & TASK_CODE: FIN(INTEGER) & not(TASK_CODE = {}) & ITEM: FIN(INTEGER) & not(ITEM = {}) & QUEUE: FIN(INTEGER) & not(QUEUE = {}) & (1..3)*{SCHEDULER_STATE}: FIN(NATURAL*{SCHEDULER_STATE}) & not((1..3)*{SCHEDULER_STATE} = {}) & (1..2)*{COPY_POSITION}: FIN(NATURAL*{COPY_POSITION}) & not((1..2)*{COPY_POSITION} = {}) & (1..3)*{QUEUE_TYPE}: FIN(NATURAL*{QUEUE_TYPE}) & not((1..3)*{QUEUE_TYPE} = {}) & (1..10)*{ERROR_DEFINITION}: FIN(NATURAL*{ERROR_DEFINITION}) & not((1..10)*{ERROR_DEFINITION} = {}));
("`Included,imported and extended machines properties'" & btrue);
("`Component invariant'" & queues: POW(QUEUE) & queue_items: QUEUE +-> POW(ITEM) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(QUEUE) & semaphores: POW(queues) & mutexes: POW(QUEUE) & mutexes: POW(queues) & queues = dom(queue_items) & queues = dom(queue_receiving) & queues = dom(queue_sending) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_receiving(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_sending(q1) => not(tk: queue_sending(q2))) & mutex_holder: QUEUE +-> TASK & mutexes = dom(mutex_holder) & !mt.(mt: mutexes & queue_items(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => mutex_holder(mt) = TASK_NULL) & !mt.(mt: mutexes => queue_items(mt) = {} or queue_items(mt) = {ITEM_EMPTY}) & btrue & btrue);
("`Seen and used machines invariants'" & btrue);
("`Included,imported and extended machines invariants'" & btrue);
("`Component assertions'" & !que.(que: QUEUE & not(que: queues) => not(que: mutexes)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => queue_items(mt) = {ITEM_EMPTY}) & !mt.(mt: mutexes & not(queue_items(mt) = {ITEM_EMPTY}) => queue_items(mt) = {}));
("`Seen and used machines assertions'" & BIT: POW(NATURAL));
("`Included,imported and extended machines assertions'" & btrue);
("`Local hypotheses'" & queues: POW(QUEUE) & queue_items: QUEUE +-> POW(ITEM) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(QUEUE) & semaphores: POW(queues) & mutexes: POW(QUEUE) & mutexes: POW(queues) & queues = dom(queue_items) & queues = dom(queue_receiving) & queues = dom(queue_sending) & q1: queues & q2: queues & tk: TASK);
(q1: dom(queue_receiving));
("`Local hypotheses'" & queues: POW(QUEUE) & queue_items: QUEUE +-> POW(ITEM) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(QUEUE) & semaphores: POW(queues) & mutexes: POW(QUEUE) & mutexes: POW(queues) & queues = dom(queue_items) & queues = dom(queue_receiving) & queues = dom(queue_sending) & q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1));
(q2: dom(queue_sending));
("`Local hypotheses'" & queues: POW(QUEUE) & queue_items: QUEUE +-> POW(ITEM) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(QUEUE) & semaphores: POW(queues) & mutexes: POW(QUEUE) & mutexes: POW(queues) & queues = dom(queue_items) & queues = dom(queue_receiving) & queues = dom(queue_sending) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_sending(q2))) & q1: queues & q2: queues & tk: TASK);
(q2: dom(queue_sending));
("`Local hypotheses'" & queues: POW(QUEUE) & queue_items: QUEUE +-> POW(ITEM) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(QUEUE) & semaphores: POW(queues) & mutexes: POW(QUEUE) & mutexes: POW(queues) & queues = dom(queue_items) & queues = dom(queue_receiving) & queues = dom(queue_sending) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_sending(q2))) & q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2));
(q1: dom(queue_receiving));
("`Local hypotheses'" & queues: POW(QUEUE) & queue_items: QUEUE +-> POW(ITEM) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(QUEUE) & semaphores: POW(queues) & mutexes: POW(QUEUE) & mutexes: POW(queues) & queues = dom(queue_items) & queues = dom(queue_receiving) & queues = dom(queue_sending) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: queue_receiving(q1))) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK);
(q1: dom(queue_receiving));
("`Local hypotheses'" & queues: POW(QUEUE) & queue_items: QUEUE +-> POW(ITEM) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(QUEUE) & semaphores: POW(queues) & mutexes: POW(QUEUE) & mutexes: POW(queues) & queues = dom(queue_items) & queues = dom(queue_receiving) & queues = dom(queue_sending) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: queue_receiving(q1))) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_receiving(q1));
(q2: dom(queue_receiving));
("`Local hypotheses'" & queues: POW(QUEUE) & queue_items: QUEUE +-> POW(ITEM) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(QUEUE) & semaphores: POW(queues) & mutexes: POW(QUEUE) & mutexes: POW(queues) & queues = dom(queue_items) & queues = dom(queue_receiving) & queues = dom(queue_sending) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_receiving(q2))) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK);
(q1: dom(queue_sending));
("`Local hypotheses'" & queues: POW(QUEUE) & queue_items: QUEUE +-> POW(ITEM) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(QUEUE) & semaphores: POW(queues) & mutexes: POW(QUEUE) & mutexes: POW(queues) & queues = dom(queue_items) & queues = dom(queue_receiving) & queues = dom(queue_sending) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_receiving(q2))) & q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_sending(q1));
(q2: dom(queue_sending));
("`Local hypotheses'" & queues: POW(QUEUE) & queue_items: QUEUE +-> POW(ITEM) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(QUEUE) & semaphores: POW(queues) & mutexes: POW(QUEUE) & mutexes: POW(queues) & queues = dom(queue_items) & queues = dom(queue_receiving) & queues = dom(queue_sending) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_receiving(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_sending(q1) => not(tk: queue_sending(q2))) & mutex_holder: QUEUE +-> TASK & mutexes = dom(mutex_holder) & mt: mutexes);
(mt: dom(queue_items));
("`Local hypotheses'" & queues: POW(QUEUE) & queue_items: QUEUE +-> POW(ITEM) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(QUEUE) & semaphores: POW(queues) & mutexes: POW(QUEUE) & mutexes: POW(queues) & queues = dom(queue_items) & queues = dom(queue_receiving) & queues = dom(queue_sending) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_receiving(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_sending(q1) => not(tk: queue_sending(q2))) & mutex_holder: QUEUE +-> TASK & mutexes = dom(mutex_holder) & mt: mutexes & queue_items(mt) = {});
(mt: dom(mutex_holder));
("`Local hypotheses'" & queues: POW(QUEUE) & queue_items: QUEUE +-> POW(ITEM) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(QUEUE) & semaphores: POW(queues) & mutexes: POW(QUEUE) & mutexes: POW(queues) & queues = dom(queue_items) & queues = dom(queue_receiving) & queues = dom(queue_sending) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_receiving(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_sending(q1) => not(tk: queue_sending(q2))) & mutex_holder: QUEUE +-> TASK & mutexes = dom(mutex_holder) & !mt.(mt: mutexes & queue_items(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & mt: mutexes);
(mt: dom(queue_items));
("`Local hypotheses'" & queues: POW(QUEUE) & queue_items: QUEUE +-> POW(ITEM) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(QUEUE) & semaphores: POW(queues) & mutexes: POW(QUEUE) & mutexes: POW(queues) & queues = dom(queue_items) & queues = dom(queue_receiving) & queues = dom(queue_sending) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_receiving(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_sending(q1) => not(tk: queue_sending(q2))) & mutex_holder: QUEUE +-> TASK & mutexes = dom(mutex_holder) & !mt.(mt: mutexes & queue_items(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & mt: mutexes & not(queue_items(mt) = {}));
(mt: dom(mutex_holder));
("`Local hypotheses'" & queues: POW(QUEUE) & queue_items: QUEUE +-> POW(ITEM) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(QUEUE) & semaphores: POW(queues) & mutexes: POW(QUEUE) & mutexes: POW(queues) & queues = dom(queue_items) & queues = dom(queue_receiving) & queues = dom(queue_sending) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_receiving(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_sending(q1) => not(tk: queue_sending(q2))) & mutex_holder: QUEUE +-> TASK & mutexes = dom(mutex_holder) & !mt.(mt: mutexes & queue_items(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => mutex_holder(mt) = TASK_NULL) & mt: mutexes);
(mt: dom(queue_items));
("`Local hypotheses'" & queues: POW(QUEUE) & queue_items: QUEUE +-> POW(ITEM) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & semaphores: POW(QUEUE) & semaphores: POW(queues) & mutexes: POW(QUEUE) & mutexes: POW(queues) & queues = dom(queue_items) & queues = dom(queue_receiving) & queues = dom(queue_sending) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_receiving(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_sending(q1) => not(tk: queue_sending(q2))) & mutex_holder: QUEUE +-> TASK & mutexes = dom(mutex_holder) & !mt.(mt: mutexes & queue_items(mt) = {} => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => mutex_holder(mt) = TASK_NULL) & mt: mutexes & not(queue_items(mt) = {}));
(mt: dom(queue_items));
("`Local hypotheses'" & !que.(que: QUEUE & not(que: queues) => not(que: mutexes)) & mt: mutexes);
(mt: dom(queue_items));
("`Local hypotheses'" & !que.(que: QUEUE & not(que: queues) => not(que: mutexes)) & mt: mutexes & not(queue_items(mt) = {}));
(mt: dom(queue_items));
("`Local hypotheses'" & !que.(que: QUEUE & not(que: queues) => not(que: mutexes)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => queue_items(mt) = {ITEM_EMPTY}) & mt: mutexes);
(mt: dom(queue_items));
("`Local hypotheses'" & !que.(que: QUEUE & not(que: queues) => not(que: mutexes)) & !mt.(mt: mutexes & not(queue_items(mt) = {}) => queue_items(mt) = {ITEM_EMPTY}) & mt: mutexes & not(queue_items(mt) = {ITEM_EMPTY}));
(mt: dom(queue_items));
("`xQueueCreate preconditions in previous components'" & btrue);
("`xQueueCreate preconditions in this component'" & uxQueueLength: INTEGER & 0<=uxQueueLength & uxQueueLength<=maxint & uxItemSize: INTEGER & 0<=uxItemSize & uxItemSize<=maxint);
("`q_queueDelete preconditions in previous components'" & btrue);
("`q_queueDelete preconditions in this component'" & pxQueue: queues);
("`q_sendItem preconditions in previous components'" & btrue);
("`q_sendItem preconditions in this component'" & pxQueue: queues & not(pxQueue: mutexes) & pxItem: ITEM & task: TASK & copy_position: (1..2)*{COPY_POSITION} & task: queue_receiving(pxQueue));
("`Local hypotheses'" & btrue);
(pxQueue: dom(queue_items));
("`Local hypotheses'" & btrue);
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & pxQueue: queues & not(pxQueue: mutexes) & pxItem: ITEM & task: TASK & copy_position: (1..2)*{COPY_POSITION});
(pxQueue: dom(queue_receiving));
("`q_sendItemMutex preconditions in previous components'" & btrue);
("`q_sendItemMutex preconditions in this component'" & mutex: mutexes & task: TASK & task: queue_receiving(mutex) & queue_items(mutex) = {});
("`Local hypotheses'" & btrue);
(mutex: dom(queue_items));
("`Local hypotheses'" & btrue);
(mutex: dom(queue_receiving));
("`Local hypotheses'" & mutex: mutexes & task: TASK);
(mutex: dom(queue_receiving));
("`Local hypotheses'" & mutex: mutexes & task: TASK & task: queue_receiving(mutex));
(mutex: dom(queue_items));
("`q_insertTaskWaitingToSend preconditions in previous components'" & btrue);
("`q_insertTaskWaitingToSend preconditions in this component'" & pxQueue: queues & pxTask: TASK & !q1.(q1: queues => not(pxTask: queue_sending(q1)) & not(pxTask: queue_receiving(q1))));
("`Local hypotheses'" & btrue);
(pxQueue: dom(queue_sending));
("`Local hypotheses'" & pxQueue: queues & pxTask: TASK & q1: queues);
(q1: dom(queue_sending));
("`Local hypotheses'" & pxQueue: queues & pxTask: TASK & q1: queues & not(pxTask: queue_sending(q1)));
(q1: dom(queue_receiving));
("`q_insertTaskWaitingToReceive preconditions in previous components'" & btrue);
("`q_insertTaskWaitingToReceive preconditions in this component'" & pxQueue: queues & pxTask: TASK & !q1.(q1: queues => not(pxTask: queue_sending(q1)) & not(pxTask: queue_receiving(q1))));
("`Local hypotheses'" & btrue);
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & pxQueue: queues & pxTask: TASK & q1: queues);
(q1: dom(queue_sending));
("`Local hypotheses'" & pxQueue: queues & pxTask: TASK & q1: queues & not(pxTask: queue_sending(q1)));
(q1: dom(queue_receiving));
("`q_receivedItem preconditions in previous components'" & btrue);
("`q_receivedItem preconditions in this component'" & pxQueue: queues & justPeeking: BOOL & task: TASK & task: queue_sending(pxQueue) & not(queue_items(pxQueue) = {}) & rTask: TASK & not(rTask = TASK_NULL));
("`Local hypotheses'" & item: ITEM);
(pxQueue: dom(queue_items));
("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & pxQueue: mutexes);
(pxQueue: dom(queue_items));
("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & pxQueue: mutexes & queue_items(pxQueue) = {ITEM_EMPTY});
(pxQueue: dom(queue_items));
("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & pxQueue: mutexes);
(pxQueue: dom(queue_items));
("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(pxQueue: mutexes));
(pxQueue: dom(queue_items));
("`Local hypotheses'" & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE);
(pxQueue: dom(queue_sending));
("`Local hypotheses'" & pxQueue: queues & justPeeking: BOOL & task: TASK);
(pxQueue: dom(queue_sending));
("`Local hypotheses'" & pxQueue: queues & justPeeking: BOOL & task: TASK & task: queue_sending(pxQueue));
(pxQueue: dom(queue_items));
("`q_removeFromEventListQueue preconditions in previous components'" & btrue);
("`q_removeFromEventListQueue preconditions in this component'" & task: TASK);
("`Local hypotheses'" & pxQueue: queues);
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & pxQueue: queues & task: queue_receiving(pxQueue));
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & pxQueue: queues);
(pxQueue: dom(queue_sending));
("`Local hypotheses'" & pxQueue: queues & task: queue_sending(pxQueue));
(pxQueue: dom(queue_sending));
("`q_endScheduler preconditions in previous components'" & btrue);
("`q_endScheduler preconditions in this component'" & btrue);
("`q_resumeAll preconditions in previous components'" & btrue);
("`q_resumeAll preconditions in this component'" & unblocked: POW(TASK));
("`Local hypotheses'" & not(queue_sending = {}));
(queue_sending,unblocked: dom(remove_task));
("`Local hypotheses'" & not(queue_receiving = {}));
(queue_receiving,unblocked: dom(remove_task));
("`q_createSemaphore preconditions in previous components'" & btrue);
("`q_createSemaphore preconditions in this component'" & length: INTEGER & 0<=length & length<=maxint & 1<=length & initialCount: INTEGER & 0<=initialCount & initialCount<=maxint & initialCount<=length);
("`Local hypotheses'" & semaphore: QUEUE & not(semaphore: queues) & not(semaphore: mutexes) & s_items: POW(ITEM));
(s_items: FIN(s_items));
("`q_createMutex preconditions in previous components'" & btrue);
("`q_createMutex preconditions in this component'" & btrue)

END
&

THEORY EnumerateX IS
(SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED});
(COPY_POSITION == {queueSEND_TO_BACK,queueSEND_TO_FRONT});
(QUEUE_TYPE == {TQUE,TSEMAPH,TMUT});
(ERROR_DEFINITION == {errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY,errNO_TASK_TO_RUN,errQUEUE_BLOCKED,errQUEUE_YIELD,errQUEUE_EMPTY,errQUEUE_FULL,pdPASS,pdFAIL,pdTRUE,pdFALSE})

END
