THEORY ProofList IS
  _f(1) & _f(2) & _f(8) & _f(24) & _f(222) & t_setPriority.19,(_f(232) & _f(41) => _f(242));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(222) & t_setPriority.18,(_f(232) & _f(39) => _f(241));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(222) & t_setPriority.17,(_f(239) & _f(37) => _f(240));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(222) & t_setPriority.16,(_f(232) & _f(50) => _f(238));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(222) & t_setPriority.15,(_f(232) & _f(50) => _f(237));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(222) & t_setPriority.14,(_f(232) & _f(50) => _f(236));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(222) & t_setPriority.13,(_f(232) & _f(50) => _f(235));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(222) & t_setPriority.12,(_f(232) & _f(33) => _f(234));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(222) & t_setPriority.11,(_f(232) & _f(31) => _f(233));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(222) & t_setPriority.10,(_f(223) & _f(41) => _f(231));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(222) & t_setPriority.9,(_f(223) & _f(39) => _f(230));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(222) & t_setPriority.8,(_f(228) & _f(37) => _f(229));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(222) & t_setPriority.7,(_f(223) & _f(50) => _f(227));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(222) & t_setPriority.6,(_f(223) & _f(50) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(222) & t_setPriority.5,(_f(223) & _f(50) => _f(54));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(222) & t_setPriority.4,(_f(223) & _f(50) => _f(226));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(222) & t_setPriority.3,(_f(223) & _f(138) => _f(139));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(222) & t_setPriority.2,(_f(223) & _f(33) => _f(225));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(222) & t_setPriority.1,(_f(223) & _f(31) => _f(224));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.50,(_f(215) & _f(201) => _f(60));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.49,(_f(215) & _f(199) => _f(221));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.48,(_f(219) & _f(198) => _f(220));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.47,(_f(215) & _f(197) => _f(218));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.46,(_f(215) & _f(197) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.45,(_f(215) & _f(197) => _f(54));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.44,(_f(215) & _f(197) => _f(52));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.43,(_f(215) & _f(197) => _f(217));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.42,(_f(215) & _f(205) => _f(139));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.41,(_f(215) & _f(196) => _f(94));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.40,(_f(215) & _f(195) => _f(216));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.39,(_f(159) & _f(201) => _f(168));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.38,(_f(159) & _f(200) => _f(157));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.37,(_f(159) & _f(199) => _f(167));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.36,(_f(165) & _f(198) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.35,(_f(159) & _f(197) => _f(164));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.34,(_f(159) & _f(197) => _f(163));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.33,(_f(159) & _f(197) => _f(162));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.32,(_f(159) & _f(196) => _f(161));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.31,(_f(159) & _f(195) => _f(160));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.30,(_f(159) & _f(194) => _f(148));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.29,(_f(159) & _f(193) => _f(147));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.28,(_f(202) & _f(201) => _f(214));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.27,(_f(202) & _f(200) => _f(157));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.26,(_f(202) & _f(199) => _f(213));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.25,(_f(211) & _f(198) => _f(212));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.24,(_f(202) & _f(197) => _f(210));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.23,(_f(202) & _f(197) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.22,(_f(208) & _f(197) => _f(209));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.21,(_f(202) & _f(197) => _f(207));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.20,(_f(202) & _f(197) => _f(52));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.19,(_f(202) & _f(197) => _f(206));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.18,(_f(202) & _f(205) => _f(139));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.17,(_f(202) & _f(196) => _f(204));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.16,(_f(202) & _f(195) => _f(203));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.15,(_f(202) & _f(194) => _f(148));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.14,(_f(202) & _f(193) => _f(147));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.13,(_f(146) & _f(201) => _f(158));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.12,(_f(146) & _f(200) => _f(157));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.11,(_f(146) & _f(199) => _f(156));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.10,(_f(154) & _f(198) => _f(155));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.9,(_f(146) & _f(197) => _f(153));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.8,(_f(146) & _f(197) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.7,(_f(146) & _f(197) => _f(128));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.6,(_f(146) & _f(197) => _f(152));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.5,(_f(146) & _f(197) => _f(151));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.4,(_f(146) & _f(196) => _f(150));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.3,(_f(146) & _f(195) => _f(149));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.2,(_f(146) & _f(194) => _f(148));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(192) & t_incrementTick.1,(_f(146) & _f(193) => _f(147));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.30,(_f(181) & _f(39) => _f(191));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.29,(_f(184) & _f(37) => _f(190));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.28,(_f(181) & _f(50) => _f(189));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.27,(_f(181) & _f(50) => _f(188));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.26,(_f(181) & _f(50) => _f(187));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.25,(_f(181) & _f(31) => _f(186));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.24,(_f(181) & _f(80) => _f(180));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.23,(_f(181) & _f(39) => _f(185));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.22,(_f(184) & _f(37) => _f(118));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.21,(_f(181) & _f(50) => _f(183));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.20,(_f(181) & _f(50) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.19,(_f(181) & _f(50) => _f(128));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.18,(_f(181) & _f(50) => _f(152));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.17,(_f(181) & _f(50) => _f(52));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.16,(_f(181) & _f(50) => _f(182));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.15,(_f(181) & _f(31) => _f(110));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.14,(_f(181) & _f(29) => _f(172));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.13,(_f(181) & _f(72) => _f(171));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.12,(_f(170) & _f(80) => _f(180));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.11,(_f(170) & _f(39) => _f(179));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.10,(_f(177) & _f(37) => _f(178));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.9,(_f(170) & _f(50) => _f(176));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.8,(_f(170) & _f(50) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.7,(_f(170) & _f(50) => _f(175));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.6,(_f(170) & _f(50) => _f(152));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.5,(_f(170) & _f(50) => _f(52));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.4,(_f(170) & _f(50) => _f(174));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.3,(_f(170) & _f(31) => _f(173));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.2,(_f(170) & _f(29) => _f(172));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(169) & t_unblock.1,(_f(170) & _f(72) => _f(171));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.24,(_f(159) & _f(41) => _f(168));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.23,(_f(159) & _f(80) => _f(157));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.22,(_f(159) & _f(39) => _f(167));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.21,(_f(165) & _f(37) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.20,(_f(159) & _f(50) => _f(164));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.19,(_f(159) & _f(50) => _f(163));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.18,(_f(159) & _f(50) => _f(162));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.17,(_f(159) & _f(33) => _f(161));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.16,(_f(159) & _f(31) => _f(160));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.15,(_f(159) & _f(29) => _f(148));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.14,(_f(159) & _f(72) => _f(147));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.13,(_f(146) & _f(41) => _f(158));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.12,(_f(146) & _f(80) => _f(157));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.11,(_f(146) & _f(39) => _f(156));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.10,(_f(154) & _f(37) => _f(155));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.9,(_f(146) & _f(50) => _f(153));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.8,(_f(146) & _f(50) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.7,(_f(146) & _f(50) => _f(128));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.6,(_f(146) & _f(50) => _f(152));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.5,(_f(146) & _f(50) => _f(151));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.4,(_f(146) & _f(33) => _f(150));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.3,(_f(146) & _f(31) => _f(149));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.2,(_f(146) & _f(29) => _f(148));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(145) & t_resumeAll.1,(_f(146) & _f(72) => _f(147));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(144) & t_endScheduler.2,(_f(29) => _f(7));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(144) & t_endScheduler.1,(_f(27) => _f(5));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(132) & t_startScheduler.11,(_f(133) & _f(80) => _f(7));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(132) & t_startScheduler.10,(_f(133) & _f(39) => _f(143));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(132) & t_startScheduler.9,(_f(133) & _f(50) => _f(142));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(132) & t_startScheduler.8,(_f(133) & _f(50) => _f(141));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(132) & t_startScheduler.7,(_f(133) & _f(50) => _f(140));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(132) & t_startScheduler.6,(_f(133) & _f(138) => _f(139));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(132) & t_startScheduler.5,(_f(133) & _f(33) => _f(137));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(132) & t_startScheduler.4,(_f(133) & _f(31) => _f(136));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(132) & t_startScheduler.3,(_f(133) & _f(29) => _f(135));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(132) & t_startScheduler.2,(_f(133) & _f(72) => _f(5));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(132) & t_startScheduler.1,(_f(133) & _f(27) => _f(134));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(125) & t_delayTask.13,(_f(126) & _f(41) => _f(60));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(125) & t_delayTask.12,(_f(126) & _f(80) => _f(131));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(125) & t_delayTask.11,(_f(126) & _f(39) => _f(59));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(125) & t_delayTask.10,(_f(130) & _f(37) => _f(97));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(125) & t_delayTask.9,(_f(126) & _f(50) => _f(129));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(125) & t_delayTask.8,(_f(126) & _f(50) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(125) & t_delayTask.7,(_f(126) & _f(50) => _f(128));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(125) & t_delayTask.6,(_f(126) & _f(50) => _f(54));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(125) & t_delayTask.5,(_f(126) & _f(50) => _f(52));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(125) & t_delayTask.4,(_f(126) & _f(50) => _f(51));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(125) & t_delayTask.3,(_f(126) & _f(33) => _f(94));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(125) & t_delayTask.2,(_f(126) & _f(31) => _f(47));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(125) & t_delayTask.1,(_f(126) & _f(72) => _f(127));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(109) & t_resume.19,(_f(39) => _f(124));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(109) & t_resume.18,(_f(117) & _f(37) => _f(123));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(109) & t_resume.17,(_f(50) => _f(122));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(109) & t_resume.16,(_f(50) => _f(65));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(109) & t_resume.15,(_f(50) => _f(121));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(109) & t_resume.14,(_f(31) => _f(120));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(109) & t_resume.13,(_f(41) => _f(89));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(109) & t_resume.12,(_f(80) => _f(88));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(109) & t_resume.11,(_f(39) => _f(119));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(109) & t_resume.10,(_f(117) & _f(37) => _f(118));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(109) & t_resume.9,(_f(50) => _f(116));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(109) & t_resume.8,(_f(50) => _f(98));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(109) & t_resume.7,(_f(50) => _f(115));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(109) & t_resume.6,(_f(50) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(109) & t_resume.5,(_f(50) => _f(113));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(109) & t_resume.4,(_f(50) => _f(112));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(109) & t_resume.3,(_f(35) => _f(111));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(109) & t_resume.2,(_f(83) => _f(84));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(109) & t_resume.1,(_f(31) => _f(110));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.35,(_f(107) & _f(41) => _f(106));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.34,(_f(107) & _f(50) => _f(108));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.33,(_f(107) & _f(50) => _f(65));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.32,(_f(107) & _f(83) => _f(95));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.31,(_f(71) & _f(41) => _f(106));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.30,(_f(71) & _f(80) => _f(81));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.29,(_f(71) & _f(39) => _f(79));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.28,(_f(71) & _f(50) => _f(105));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.27,(_f(71) & _f(50) => _f(65));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.26,(_f(71) & _f(83) => _f(95));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.25,(_f(71) & _f(29) => _f(104));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.24,(_f(71) & _f(72) => _f(73));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.23,(_f(61) & _f(41) => _f(103));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.22,(_f(61) & _f(80) => _f(98));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.21,(_f(61) & _f(39) => _f(69));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.20,(_f(67) & _f(37) => _f(102));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.19,(_f(61) & _f(50) => _f(101));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.18,(_f(61) & _f(50) => _f(65));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.17,(_f(61) & _f(50) => _f(64));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.16,(_f(61) & _f(83) => _f(95));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.15,(_f(61) & _f(33) => _f(100));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.14,(_f(61) & _f(31) => _f(62));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.13,(_f(44) & _f(41) => _f(99));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.12,(_f(44) & _f(80) => _f(98));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.11,(_f(44) & _f(39) => _f(59));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.10,(_f(57) & _f(37) => _f(97));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.9,(_f(44) & _f(50) => _f(96));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.8,(_f(44) & _f(50) => _f(53));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.7,(_f(44) & _f(50) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.6,(_f(44) & _f(50) => _f(54));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.5,(_f(44) & _f(50) => _f(52));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.4,(_f(44) & _f(50) => _f(51));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.3,(_f(44) & _f(83) => _f(95));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.2,(_f(44) & _f(33) => _f(94));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(93) & t_suspend.1,(_f(44) & _f(31) => _f(47));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.52,(_f(92) & _f(37) => _f(78));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.51,(_f(90) & _f(50) => _f(91));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.50,(_f(90) & _f(50) => _f(65));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.49,(_f(90) & _f(35) => _f(49));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.48,(_f(90) & _f(33) => _f(75));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.47,(_f(90) & _f(29) => _f(46));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.46,(_f(90) & _f(27) => _f(45));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.45,(_f(82) & _f(41) => _f(89));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.44,(_f(82) & _f(80) => _f(88));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.43,(_f(87) & _f(37) => _f(78));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.42,(_f(82) & _f(50) => _f(86));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.41,(_f(82) & _f(50) => _f(65));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.40,(_f(82) & _f(35) => _f(85));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.39,(_f(82) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.38,(_f(82) & _f(33) => _f(75));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.37,(_f(82) & _f(29) => _f(46));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.36,(_f(82) & _f(27) => _f(45));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.35,(_f(71) & _f(80) => _f(81));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.34,(_f(71) & _f(39) => _f(79));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.33,(_f(77) & _f(37) => _f(78));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.32,(_f(71) & _f(50) => _f(76));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.31,(_f(71) & _f(50) => _f(65));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.30,(_f(71) & _f(35) => _f(49));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.29,(_f(71) & _f(33) => _f(75));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.28,(_f(71) & _f(29) => _f(74));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.27,(_f(71) & _f(72) => _f(73));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.26,(_f(71) & _f(27) => _f(45));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.25,(_f(61) & _f(41) => _f(70));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.24,(_f(61) & _f(39) => _f(69));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.23,(_f(67) & _f(37) => _f(68));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.22,(_f(61) & _f(50) => _f(66));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.21,(_f(61) & _f(50) => _f(65));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.20,(_f(61) & _f(50) => _f(64));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.19,(_f(61) & _f(35) => _f(49));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.18,(_f(61) & _f(33) => _f(63));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.17,(_f(61) & _f(31) => _f(62));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.16,(_f(61) & _f(29) => _f(46));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.15,(_f(61) & _f(27) => _f(45));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.14,(_f(44) & _f(41) => _f(60));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.13,(_f(44) & _f(39) => _f(59));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.12,(_f(57) & _f(37) => _f(58));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.11,(_f(44) & _f(50) => _f(56));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.10,(_f(44) & _f(50) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.9,(_f(44) & _f(50) => _f(54));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.8,(_f(44) & _f(50) => _f(53));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.7,(_f(44) & _f(50) => _f(52));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.6,(_f(44) & _f(50) => _f(51));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.5,(_f(44) & _f(35) => _f(49));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.4,(_f(44) & _f(33) => _f(48));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.3,(_f(44) & _f(31) => _f(47));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.2,(_f(44) & _f(29) => _f(46));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(43) & t_delete.1,(_f(44) & _f(27) => _f(45));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(25) & t_create.8,(_f(26) & _f(41) => _f(42));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(25) & t_create.7,(_f(26) & _f(39) => _f(40));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(25) & t_create.6,(_f(26) & _f(37) => _f(38));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(25) & t_create.5,(_f(26) & _f(35) => _f(36));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(25) & t_create.4,(_f(26) & _f(33) => _f(34));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(25) & t_create.3,(_f(26) & _f(31) => _f(32));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(25) & t_create.2,(_f(26) & _f(29) => _f(30));
  _f(1) & _f(2) & _f(8) & _f(24) & _f(25) & t_create.1,(_f(26) & _f(27) => _f(28));
  _f(1) & _f(2) & _f(8) & AssertionLemmas.5,(_f(21) & _f(22) => _f(23));
  _f(1) & _f(2) & _f(8) & AssertionLemmas.4,(_f(18) & _f(19) => _f(20));
  _f(1) & _f(2) & _f(8) & AssertionLemmas.3,(_f(15) & _f(16) => _f(17));
  _f(1) & _f(2) & _f(8) & AssertionLemmas.2,(_f(12) & _f(13) => _f(14));
  _f(1) & _f(2) & _f(8) & AssertionLemmas.1,(_f(9) & _f(10) => _f(11));
  _f(1) & _f(2) & Initialisation.2,(_f(3) & _f(6) => _f(7));
  _f(1) & _f(2) & Initialisation.1,(_f(3) & _f(4) => _f(5))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES & configMAX_PRIORITIES<=2147483647 & 1<=configMAX_PRIORITIES & configTOTAL_HEAP_SIZE: INTEGER & 0<=configTOTAL_HEAP_SIZE & configTOTAL_HEAP_SIZE<=2147483647 & configMINIMAL_STACK_SIZE: INTEGER & 0<=configMINIMAL_STACK_SIZE & configMINIMAL_STACK_SIZE<=2147483647 & INCLUDE_uxTaskPriorityGet: BIT & INCLUDE_vTaskDelete: BIT & INCLUDE_vTaskSuspend: BIT & INCLUDE_xTaskGetSchedulerState: BIT & INCLUDE_vTaskPrioritySet: BIT & INCLUDE_xTaskGetCurrentTaskHandle: BIT & INCLUDE_vTaskDelayUntil: BIT & INCLUDE_vTaskDelay: BIT & BIT = 0..1 & MAX_DELAY: 0..2147483647 & 1<=MAX_DELAY & NULL_PARAMETER: PARAMETER & PRIORITY: POW(NAT) & TICK: POW(NAT) & TICK = 0..MAX_DELAY & TICK_INCREMENT: TICK*TICK +-> TICK & dom(TICK_INCREMENT) = TICK*TICK & TICK_INCREMENT = %(tick,inc).(tick: TICK & inc: TICK | (tick+inc) mod MAX_DELAY) & QUEUE_NULL: QUEUE & ITEM_NULL: ITEM & REMOVE_EVENT: TASK*POW(QUEUE)*(QUEUE +-> POW(TASK)) +-> (QUEUE +-> POW(TASK)) & REMOVE_EVENT = %(task,queues,pending).(task: TASK & queues: POW(QUEUE) & pending: QUEUE +-> POW(TASK) | %queue.(queue: queues & queue: dom(pending) | pending(queue)-{task})) & NAME: FIN(INTEGER) & not(NAME = {}) & PARAMETER: FIN(INTEGER) & not(PARAMETER = {}) & TASK: FIN(INTEGER) & not(TASK = {}) & STACK: FIN(INTEGER) & not(STACK = {}) & TASK_CODE: FIN(INTEGER) & not(TASK_CODE = {}) & ITEM: FIN(INTEGER) & not(ITEM = {}) & QUEUE: FIN(INTEGER) & not(QUEUE = {}) & (1..3)*{SCHEDULER_STATE}: FIN(NATURAL*{SCHEDULER_STATE}) & not((1..3)*{SCHEDULER_STATE} = {}) & (1..2)*{COPY_POSITION}: FIN(NATURAL*{COPY_POSITION}) & not((1..2)*{COPY_POSITION} = {}) & (1..10)*{ERROR_DEFINITION}: FIN(NATURAL*{ERROR_DEFINITION}) & not((1..10)*{ERROR_DEFINITION} = {}));
  ("`Seen and used machines assertions'" & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES & BIT: POW(NATURAL));
  ("`Local hypotheses'" & running$0: TASK & idle$0: TASK);
  "`Check that the invariant (tasks: FIN(TASK)) is established by the initialisation - ref 3.3'";
  ({}: FIN(TASK));
  "`Check that the invariant (blocked <: tasks) is established by the initialisation - ref 3.3'";
  ({}: POW({}));
  ("`Component invariant'" & active: BOOL & tasks: FIN(TASK) & idle: TASK & blocked: FIN(TASK) & blocked: POW(tasks) & ready: FIN(TASK) & ready: POW(tasks) & suspended: FIN(TASK) & suspended: POW(tasks) & running: TASK & (active = TRUE => running = idle or idle: ready & running: tasks & not(running: ready) & not(running: blocked) & not(running: suspended) & tasks = {running}\/suspended\/blocked\/ready) & (active = FALSE => tasks = ready) & ready/\blocked = {} & blocked/\suspended = {} & suspended/\ready = {});
  ("`Local hypotheses'" & active = TRUE);
  "`Check assertion (active = TRUE => idle: tasks) deduction - ref 3.2, 4.2, 5.3'";
  (idle: tasks);
  ("`Local hypotheses'" & (active = TRUE => idle: tasks) & active = TRUE);
  "`Check assertion (active = TRUE => tasks/={}) deduction - ref 3.2, 4.2, 5.3'";
  (not(tasks = {}));
  ("`Local hypotheses'" & (active = TRUE => idle: tasks) & (active = TRUE => not(tasks = {})) & active = TRUE);
  "`Check assertion (active = TRUE => idle/:blocked) deduction - ref 3.2, 4.2, 5.3'";
  (not(idle: blocked));
  ("`Local hypotheses'" & (active = TRUE => idle: tasks) & (active = TRUE => not(tasks = {})) & (active = TRUE => not(idle: blocked)) & active = TRUE);
  "`Check assertion (active = TRUE => idle/:suspended) deduction - ref 3.2, 4.2, 5.3'";
  (not(idle: suspended));
  ("`Local hypotheses'" & (active = TRUE => idle: tasks) & (active = TRUE => not(tasks = {})) & (active = TRUE => not(idle: blocked)) & (active = TRUE => not(idle: suspended)) & active = TRUE & ready = {});
  "`Check assertion (active = TRUE => (ready = {} => running = idle)) deduction - ref 3.2, 4.2, 5.3'";
  (running = idle);
  ("`Component assertions'" & (active = TRUE => idle: tasks) & (active = TRUE => not(tasks = {})) & (active = TRUE => not(idle: blocked)) & (active = TRUE => not(idle: suspended)) & (active = TRUE & ready = {} => running = idle));
  ("`t_create preconditions in this component'" & active = FALSE & priority: PRIORITY);
  ("`Local hypotheses'" & task: TASK & not(task: tasks));
  "`Check that the invariant (tasks: FIN(TASK)) is preserved by the operation - ref 3.4'";
  ({task}\/tasks: FIN(TASK));
  "`Check that the invariant (blocked <: tasks) is preserved by the operation - ref 3.4'";
  (blocked: POW({task}\/tasks));
  "`Check that the invariant (ready: FIN(TASK)) is preserved by the operation - ref 3.4'";
  ({task}\/ready: FIN(TASK));
  "`Check that the invariant (ready <: tasks) is preserved by the operation - ref 3.4'";
  ({task}\/ready: POW({task}\/tasks));
  "`Check that the invariant (suspended <: tasks) is preserved by the operation - ref 3.4'";
  (suspended: POW({task}\/tasks));
  "`Check that the invariant (active = FALSE => tasks = ready) is preserved by the operation - ref 3.4'";
  ({task}\/tasks = {task}\/ready);
  "`Check that the invariant (ready/\blocked = {}) is preserved by the operation - ref 3.4'";
  ({task}\/ready/\blocked = {});
  "`Check that the invariant (suspended/\ready = {}) is preserved by the operation - ref 3.4'";
  (suspended/\({task}\/ready) = {});
  ("`t_delete preconditions in this component'" & active = TRUE & atask: TASK & atask: tasks & not(atask = idle));
  ("`Local hypotheses'" & atask = running & task: TASK & task: ready);
  (tasks-{atask}: FIN(TASK));
  (blocked: POW(tasks-{atask}));
  (ready-{task}: FIN(TASK));
  (ready-{task}: POW(tasks-{atask}));
  (suspended: POW(tasks-{atask}));
  "`Check that the invariant (active = TRUE => running = idle or idle: ready & running: tasks & running/:ready & running/:blocked & running/:suspended & tasks = {running}\/suspended\/blocked\/ready) is preserved by the operation - ref 3.4'";
  (task = idle or (idle: ready & not(idle = task)));
  (task: tasks);
  (not(task = atask));
  (not(task: blocked));
  (not(task: suspended));
  (tasks-{atask} = {task}\/suspended\/blocked\/ready-{task});
  ("`Local hypotheses'" & atask = running & task: TASK & task: ready & active = FALSE);
  (tasks-{atask} = ready-{task});
  (ready-{task}/\blocked = {});
  (suspended/\ready-{task} = {});
  ("`Local hypotheses'" & not(atask = running) & atask: ready);
  (ready-{atask}: FIN(TASK));
  (ready-{atask}: POW(tasks-{atask}));
  (running = idle or (idle: ready & not(idle = atask)));
  (not(running = atask));
  (tasks-{atask} = {running}\/suspended\/blocked\/ready-{atask});
  ("`Local hypotheses'" & not(atask = running) & atask: ready & active = FALSE);
  (tasks-{atask} = ready-{atask});
  (ready-{atask}/\blocked = {});
  (suspended/\ready-{atask} = {});
  ("`Local hypotheses'" & not(atask = running) & not(atask: ready) & atask: blocked);
  "`Check that the invariant (blocked: FIN(TASK)) is preserved by the operation - ref 3.4'";
  (blocked-{atask}: FIN(TASK));
  (blocked-{atask}: POW(tasks-{atask}));
  (ready: POW(tasks-{atask}));
  (tasks-{atask} = {running}\/suspended\/blocked-{atask}\/ready);
  ("`Local hypotheses'" & not(atask = running) & not(atask: ready) & atask: blocked & active = FALSE);
  (tasks-{atask} = ready);
  (ready/\blocked-{atask} = {});
  "`Check that the invariant (blocked/\suspended = {}) is preserved by the operation - ref 3.4'";
  (blocked-{atask}/\suspended = {});
  ("`Local hypotheses'" & not(atask = running) & not(atask: ready) & not(atask: blocked) & atask: suspended);
  "`Check that the invariant (suspended: FIN(TASK)) is preserved by the operation - ref 3.4'";
  (suspended-{atask}: FIN(TASK));
  (suspended-{atask}: POW(tasks-{atask}));
  (tasks-{atask} = {running}\/suspended-{atask}\/blocked\/ready);
  ("`Local hypotheses'" & not(atask = running) & not(atask: ready) & not(atask: blocked) & atask: suspended & active = FALSE);
  (blocked/\suspended-{atask} = {});
  (suspended-{atask}/\ready = {});
  ("`Local hypotheses'" & not(atask = running) & not(atask: ready) & not(atask: blocked) & not(atask: suspended));
  (tasks-{atask} = {running}\/suspended\/blocked\/ready);
  ("`Local hypotheses'" & not(atask = running) & not(atask: ready) & not(atask: blocked) & not(atask: suspended) & active = FALSE);
  ("`t_suspend preconditions in this component'" & active = TRUE & atask: TASK & atask: tasks & not(atask = idle));
  (ready-{task}: POW(tasks));
  (suspended\/{atask}: FIN(TASK));
  (tasks = {task}\/(suspended\/{atask})\/blocked\/ready-{task});
  (tasks = ready-{task});
  (not(atask: blocked));
  (suspended\/{atask}/\ready-{task} = {});
  (ready-{atask}: POW(tasks));
  (tasks = {running}\/(suspended\/{atask})\/blocked\/ready-{atask});
  (tasks = ready-{atask});
  (suspended\/{atask}/\ready-{atask} = {});
  (blocked-{atask}: POW(tasks));
  (tasks = {running}\/(suspended\/{atask})\/blocked-{atask}\/ready);
  (suspended\/{atask}/\ready = {});
  ("`Local hypotheses'" & not(atask = running) & not(atask: ready) & not(atask: blocked));
  (tasks = {running}\/(suspended\/{atask})\/blocked\/ready);
  ("`t_resume preconditions in this component'" & active = TRUE & atask: TASK & atask: suspended);
  (ready\/{running}: FIN(TASK));
  (suspended-{atask}: POW(tasks));
  (atask = idle or idle: ready\/{running});
  (atask: tasks);
  (not(atask: ready));
  (not(atask = running));
  (tasks = {atask}\/suspended-{atask}\/blocked\/(ready\/{running}));
  ("`Local hypotheses'" & active = FALSE);
  (tasks = ready\/{running});
  (ready\/{running}/\blocked = {});
  (ready\/{atask}: FIN(TASK));
  (running = idle or idle: ready\/{atask});
  (tasks = {running}\/suspended-{atask}\/blocked\/(ready\/{atask}));
  (tasks = ready\/{atask});
  (ready\/{atask}/\blocked = {});
  ("`t_delayTask preconditions in this component'" & active = TRUE & not(running = idle) & ticks: TICK & not(ticks = 0));
  ("`Local hypotheses'" & task: TASK & task: ready);
  (blocked\/{running}: FIN(TASK));
  (not(task = running));
  (tasks = {task}\/suspended\/(blocked\/{running})\/ready-{task});
  ("`Local hypotheses'" & task: TASK & task: ready & active = FALSE);
  (blocked\/{running}/\suspended = {});
  ("`t_startScheduler preconditions in this component'" & active = FALSE);
  ("`Local hypotheses'" & idle_task: TASK & not(idle_task: tasks) & task: ready\/{idle_task});
  (tasks\/{idle_task}: FIN(TASK));
  ({}: POW(tasks\/{idle_task}));
  ((ready\/{idle_task})-{task}: FIN(TASK));
  ((ready\/{idle_task})-{task}: POW(tasks\/{idle_task}));
  "`Check that the invariant (running: TASK) is preserved by the operation - ref 3.4'";
  (task: TASK);
  (task = idle_task or (idle_task: ready\/{idle_task} & not(idle_task = task)));
  (task: tasks\/{idle_task});
  (tasks\/{idle_task} = {task}\/{}\/{}\/(ready\/{idle_task})-{task});
  ({}: POW((ready\/{idle_task})-{task}));
  ("`t_endScheduler preconditions in this component'" & active = TRUE);
  ("`t_resumeAll preconditions in this component'" & active = TRUE & tick: TICK);
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}) & task: TASK & task: tasks & task: unblocked);
  (blocked-unblocked: FIN(TASK));
  (blocked-unblocked: POW(tasks));
  (ready\/{running}\/unblocked-{task}: FIN(TASK));
  (ready\/{running}\/unblocked-{task}: POW(tasks));
  (task = idle or idle: ready\/{running}\/unblocked-{task});
  (not(task: ready));
  (tasks = {task}\/suspended\/blocked-unblocked\/(ready\/{running}\/unblocked-{task}));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}) & task: TASK & task: tasks & task: unblocked & active = FALSE);
  (tasks = ready\/{running}\/unblocked-{task});
  (ready\/{running}\/unblocked-{task}/\blocked-unblocked = {});
  (blocked-unblocked/\suspended = {});
  (suspended/\(ready\/{running}\/unblocked-{task}) = {});
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}));
  (ready\/unblocked: FIN(TASK));
  (ready\/unblocked: POW(tasks));
  (running = idle or idle: ready\/unblocked);
  (not(running: unblocked));
  (tasks = {running}\/suspended\/blocked-unblocked\/(ready\/unblocked));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}) & active = FALSE);
  (tasks = ready\/unblocked);
  (ready\/unblocked/\blocked-unblocked = {});
  (suspended/\(ready\/unblocked) = {});
  ("`t_unblock preconditions in this component'" & active = TRUE & task: TASK & task: blocked);
  ("`Local hypotheses'" & running = idle);
  (blocked-{task}: FIN(TASK));
  (blocked-{task}: POW(tasks));
  (ready\/{idle}: FIN(TASK));
  (task = idle or idle: ready\/{idle});
  (not(task = idle));
  (tasks = {task}\/suspended\/blocked-{task}\/(ready\/{idle}));
  ("`Local hypotheses'" & running = idle & active = FALSE);
  (tasks = ready\/{idle});
  (ready\/{idle}/\blocked-{task} = {});
  (blocked-{task}/\suspended = {});
  ("`Local hypotheses'" & not(running = idle));
  (task = idle or idle: ready\/{running});
  (tasks = {task}\/suspended\/blocked-{task}\/(ready\/{running}));
  ("`Local hypotheses'" & not(running = idle) & active = FALSE);
  (ready\/{running}/\blocked-{task} = {});
  (ready\/{task}: FIN(TASK));
  (running = idle or idle: ready\/{task});
  (not(running = task));
  (tasks = {running}\/suspended\/blocked-{task}\/(ready\/{task}));
  (tasks = ready\/{task});
  (ready\/{task}/\blocked-{task} = {});
  ("`t_incrementTick preconditions in this component'" & active = TRUE & tick: TICK);
  "`Check that the invariant (blocked: FIN(TASK)) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (blocked <: tasks) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (ready: FIN(TASK)) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (ready <: tasks) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (active = TRUE => running = idle or idle: ready & running: tasks & running/:ready & running/:blocked & running/:suspended & tasks = {running}\/suspended\/blocked\/ready) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (active = FALSE => tasks = ready) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (ready/\blocked = {}) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (blocked/\suspended = {}) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (suspended/\ready = {}) is preserved by the operation - ref 3.4'";
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}) & task: ready & not(task = running) & not(task = idle));
  (ready-{task}\/{running}\/unblocked: FIN(TASK));
  (ready-{task}\/{running}\/unblocked: POW(tasks));
  "`Check that the invariant (running: TASK) is preserved by the operation - ref 3.4'";
  (task = idle or idle: ready-{task}\/{running}\/unblocked);
  (not(task: unblocked));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}) & task: ready & not(task = running) & not(task = idle) & task: blocked);
  (task: unblocked);
  (tasks = {task}\/suspended\/blocked-unblocked\/(ready-{task}\/{running}\/unblocked));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}) & task: ready & not(task = running) & not(task = idle) & active = FALSE);
  (tasks = ready-{task}\/{running}\/unblocked);
  (ready-{task}\/{running}\/unblocked/\blocked-unblocked = {});
  (suspended/\(ready-{task}\/{running}\/unblocked) = {});
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked = {} & task: ready & not(task = running) & not(task = idle));
  (ready-{task}\/{running}: FIN(TASK));
  (task = idle or idle: ready-{task}\/{running});
  (tasks = {task}\/suspended\/blocked\/(ready-{task}\/{running}));
  ("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked = {} & task: ready & not(task = running) & not(task = idle) & active = FALSE);
  (tasks = ready-{task}\/{running});
  (ready-{task}\/{running}/\blocked = {});
  ("`t_setPriority preconditions in this component'" & task: tasks & priority: PRIORITY & active = TRUE & not(task = idle));
  ("`Local hypotheses'" & task: ready);
  ((ready\/{running})-{task}: FIN(TASK));
  ((ready\/{running})-{task}: POW(tasks));
  (task = idle or (idle: ready\/{running} & not(idle = task)));
  (tasks = {task}\/suspended\/blocked\/(ready\/{running})-{task});
  ("`Local hypotheses'" & task: ready & active = FALSE);
  (tasks = (ready\/{running})-{task});
  ((ready\/{running})-{task}/\blocked = {});
  (suspended/\(ready\/{running})-{task} = {});
  ("`Local hypotheses'" & not(task: ready) & task = running & task$0: TASK & task$0: tasks & task$0: ready);
  ((ready\/{running})-{task$0}: FIN(TASK));
  ((ready\/{running})-{task$0}: POW(tasks));
  (task$0 = idle or (idle: ready\/{running} & not(idle = task$0)));
  (not(task$0: blocked));
  (not(task$0: suspended));
  (tasks = {task$0}\/suspended\/blocked\/(ready\/{running})-{task$0});
  ("`Local hypotheses'" & not(task: ready) & task = running & task$0: TASK & task$0: tasks & task$0: ready & active = FALSE);
  (tasks = (ready\/{running})-{task$0});
  ((ready\/{running})-{task$0}/\blocked = {});
  (suspended/\(ready\/{running})-{task$0} = {})
END
&
THEORY EnumerateX IS
  SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED};
  COPY_POSITION == {queueSEND_TO_BACK,queueSEND_TO_FRONT};
  ERROR_DEFINITION == {errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY,errNO_TASK_TO_RUN,errQUEUE_BLOCKED,errQUEUE_YIELD,errQUEUE_EMPTY,errQUEUE_FULL,pdPASS,pdFAIL,pdTRUE,pdFALSE}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK)
END
