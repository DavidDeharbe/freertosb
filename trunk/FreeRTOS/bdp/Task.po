THEORY ProofList IS
  _f(1) & _f(2) & _f(10) & _f(32) & _f(230) & t_PriorityInherit.12,(_f(150) & _f(55) => _f(152));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(230) & t_PriorityInherit.11,(_f(150) & _f(55) => _f(151));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(230) & t_PriorityInherit.10,(_f(141) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(230) & t_PriorityInherit.9,(_f(141) & _f(52) => _f(149));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(230) & t_PriorityInherit.8,(_f(141) & _f(50) => _f(148));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(230) & t_PriorityInherit.7,(_f(141) & _f(87) => _f(147));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(230) & t_PriorityInherit.6,(_f(141) & _f(48) => _f(146));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(230) & t_PriorityInherit.5,(_f(141) & _f(84) => _f(145));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(230) & t_PriorityInherit.4,(_f(141) & _f(43) => _f(144));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(230) & t_PriorityInherit.3,(_f(141) & _f(41) => _f(143));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(230) & t_PriorityInherit.2,(_f(141) & _f(39) => _f(25));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(230) & t_PriorityInherit.1,(_f(141) & _f(78) => _f(142));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(227) & t_addPending.2,(_f(84) => _f(229));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(227) & t_addPending.1,(_f(82) => _f(228));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(225) & t_setPriority.1,(_f(226) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(224) & t_unblockMutex.12,(_f(11) & _f(55) => _f(58));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(224) & t_unblockMutex.11,(_f(11) & _f(55) => _f(57));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(224) & t_unblockMutex.10,(_f(11) & _f(55) => _f(56));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(224) & t_unblockMutex.9,(_f(52) => _f(223));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(224) & t_unblockMutex.8,(_f(50) => _f(51));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(224) & t_unblockMutex.7,(_f(87) => _f(222));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(224) & t_unblockMutex.6,(_f(48) => _f(221));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(224) & t_unblockMutex.5,(_f(84) => _f(220));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(224) & t_unblockMutex.4,(_f(43) => _f(219));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(224) & t_unblockMutex.3,(_f(41) => _f(42));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(224) & t_unblockMutex.2,(_f(39) => _f(218));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(224) & t_unblockMutex.1,(_f(78) => _f(217));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(216) & t_unblock.12,(_f(11) & _f(55) => _f(58));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(216) & t_unblock.11,(_f(11) & _f(55) => _f(57));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(216) & t_unblock.10,(_f(11) & _f(55) => _f(56));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(216) & t_unblock.9,(_f(52) => _f(223));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(216) & t_unblock.8,(_f(50) => _f(51));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(216) & t_unblock.7,(_f(87) => _f(222));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(216) & t_unblock.6,(_f(48) => _f(221));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(216) & t_unblock.5,(_f(84) => _f(220));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(216) & t_unblock.4,(_f(43) => _f(219));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(216) & t_unblock.3,(_f(41) => _f(42));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(216) & t_unblock.2,(_f(39) => _f(218));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(216) & t_unblock.1,(_f(78) => _f(217));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(190) & t_resumeIncrement.23,(_f(184) & _f(212) => _f(214));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(190) & t_resumeIncrement.22,(_f(184) & _f(212) => _f(215));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(190) & t_resumeIncrement.21,(_f(183) & _f(208) => _f(209));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(190) & t_resumeIncrement.20,(_f(183) & _f(206) => _f(207));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(190) & t_resumeIncrement.19,(_f(183) & _f(204) => _f(205));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(190) & t_resumeIncrement.18,(_f(183) & _f(202) => _f(203));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(190) & t_resumeIncrement.17,(_f(183) & _f(200) => _f(201));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(190) & t_resumeIncrement.16,(_f(183) & _f(198) => _f(199));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(190) & t_resumeIncrement.15,(_f(183) & _f(196) => _f(197));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(190) & t_resumeIncrement.14,(_f(183) & _f(194) => _f(195));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(190) & t_resumeIncrement.13,(_f(183) & _f(192) => _f(193));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(190) & t_resumeIncrement.12,(_f(211) & _f(212) => _f(214));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(190) & t_resumeIncrement.11,(_f(211) & _f(212) => _f(213));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(190) & t_resumeIncrement.10,(_f(191) & _f(210) => _f(70));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(190) & t_resumeIncrement.9,(_f(191) & _f(208) => _f(209));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(190) & t_resumeIncrement.8,(_f(191) & _f(206) => _f(207));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(190) & t_resumeIncrement.7,(_f(191) & _f(204) => _f(205));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(190) & t_resumeIncrement.6,(_f(191) & _f(202) => _f(203));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(190) & t_resumeIncrement.5,(_f(191) & _f(200) => _f(201));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(190) & t_resumeIncrement.4,(_f(191) & _f(198) => _f(199));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(190) & t_resumeIncrement.3,(_f(191) & _f(196) => _f(197));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(190) & t_resumeIncrement.2,(_f(191) & _f(194) => _f(195));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(190) & t_resumeIncrement.1,(_f(191) & _f(192) => _f(193));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.58,(_f(189) & _f(55) => _f(182));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.57,(_f(189) & _f(55) => _f(185));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.56,(_f(188) & _f(52) => _f(179));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.55,(_f(188) & _f(50) => _f(178));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.54,(_f(188) & _f(87) => _f(177));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.53,(_f(188) & _f(48) => _f(176));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.52,(_f(188) & _f(84) => _f(175));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.51,(_f(188) & _f(82) => _f(5));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.50,(_f(188) & _f(46) => _f(174));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.49,(_f(188) & _f(91) => _f(173));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.48,(_f(188) & _f(43) => _f(172));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.47,(_f(188) & _f(41) => _f(171));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.46,(_f(188) & _f(39) => _f(170));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.45,(_f(188) & _f(78) => _f(169));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.44,(_f(187) & _f(55) => _f(182));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.43,(_f(187) & _f(55) => _f(181));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.42,(_f(186) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.41,(_f(186) & _f(52) => _f(179));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.40,(_f(186) & _f(50) => _f(178));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.39,(_f(186) & _f(87) => _f(177));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.38,(_f(186) & _f(48) => _f(176));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.37,(_f(186) & _f(84) => _f(175));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.36,(_f(186) & _f(82) => _f(5));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.35,(_f(186) & _f(46) => _f(174));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.34,(_f(186) & _f(91) => _f(173));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.33,(_f(186) & _f(43) => _f(172));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.32,(_f(186) & _f(41) => _f(171));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.31,(_f(186) & _f(39) => _f(170));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.30,(_f(186) & _f(78) => _f(169));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.29,(_f(184) & _f(55) => _f(182));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.28,(_f(184) & _f(55) => _f(185));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.27,(_f(183) & _f(52) => _f(179));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.26,(_f(183) & _f(50) => _f(178));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.25,(_f(183) & _f(87) => _f(177));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.24,(_f(183) & _f(48) => _f(176));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.23,(_f(183) & _f(84) => _f(175));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.22,(_f(183) & _f(82) => _f(5));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.21,(_f(183) & _f(46) => _f(174));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.20,(_f(183) & _f(91) => _f(173));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.19,(_f(183) & _f(43) => _f(172));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.18,(_f(183) & _f(41) => _f(171));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.17,(_f(183) & _f(39) => _f(170));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.16,(_f(183) & _f(78) => _f(169));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.15,(_f(180) & _f(55) => _f(182));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.14,(_f(180) & _f(55) => _f(181));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.13,(_f(168) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.12,(_f(168) & _f(52) => _f(179));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.11,(_f(168) & _f(50) => _f(178));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.10,(_f(168) & _f(87) => _f(177));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.9,(_f(168) & _f(48) => _f(176));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.8,(_f(168) & _f(84) => _f(175));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.7,(_f(168) & _f(82) => _f(5));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.6,(_f(168) & _f(46) => _f(174));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.5,(_f(168) & _f(91) => _f(173));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.4,(_f(168) & _f(43) => _f(172));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.3,(_f(168) & _f(41) => _f(171));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.2,(_f(168) & _f(39) => _f(170));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(167) & t_resumeAll.1,(_f(168) & _f(78) => _f(169));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(166) & t_endScheduler.3,(_f(84) => _f(9));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(166) & t_endScheduler.2,(_f(39) => _f(7));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(166) & t_endScheduler.1,(_f(35) => _f(5));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(153) & t_startScheduler.12,(_f(154) & _f(55) => _f(165));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(153) & t_startScheduler.11,(_f(154) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(153) & t_startScheduler.10,(_f(154) & _f(52) => _f(164));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(153) & t_startScheduler.9,(_f(154) & _f(50) => _f(163));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(153) & t_startScheduler.8,(_f(154) & _f(48) => _f(162));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(153) & t_startScheduler.7,(_f(154) & _f(46) => _f(161));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(153) & t_startScheduler.6,(_f(154) & _f(43) => _f(160));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(153) & t_startScheduler.5,(_f(154) & _f(43) => _f(159));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(153) & t_startScheduler.4,(_f(154) & _f(41) => _f(158));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(153) & t_startScheduler.3,(_f(154) & _f(39) => _f(157));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(153) & t_startScheduler.2,(_f(154) & _f(37) => _f(156));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(153) & t_startScheduler.1,(_f(154) & _f(35) => _f(155));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(140) & t_delayTask.12,(_f(150) & _f(55) => _f(152));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(140) & t_delayTask.11,(_f(150) & _f(55) => _f(151));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(140) & t_delayTask.10,(_f(141) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(140) & t_delayTask.9,(_f(141) & _f(52) => _f(149));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(140) & t_delayTask.8,(_f(141) & _f(50) => _f(148));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(140) & t_delayTask.7,(_f(141) & _f(87) => _f(147));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(140) & t_delayTask.6,(_f(141) & _f(48) => _f(146));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(140) & t_delayTask.5,(_f(141) & _f(84) => _f(145));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(140) & t_delayTask.4,(_f(141) & _f(43) => _f(144));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(140) & t_delayTask.3,(_f(141) & _f(41) => _f(143));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(140) & t_delayTask.2,(_f(141) & _f(39) => _f(25));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(140) & t_delayTask.1,(_f(141) & _f(78) => _f(142));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(126) & t_resume.22,(_f(11) & _f(55) => _f(138));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(126) & t_resume.21,(_f(11) & _f(55) => _f(139));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(126) & t_resume.20,(_f(52) => _f(136));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(126) & t_resume.19,(_f(50) => _f(135));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(126) & t_resume.18,(_f(87) => _f(134));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(126) & t_resume.17,(_f(48) => _f(133));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(126) & t_resume.16,(_f(84) => _f(132));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(126) & t_resume.15,(_f(46) => _f(131));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(126) & t_resume.14,(_f(91) => _f(130));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(126) & t_resume.13,(_f(43) => _f(129));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(126) & t_resume.12,(_f(41) => _f(128));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(126) & t_resume.11,(_f(137) & _f(55) => _f(138));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(126) & t_resume.10,(_f(127) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(126) & t_resume.9,(_f(127) & _f(52) => _f(136));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(126) & t_resume.8,(_f(127) & _f(50) => _f(135));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(126) & t_resume.7,(_f(127) & _f(87) => _f(134));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(126) & t_resume.6,(_f(127) & _f(48) => _f(133));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(126) & t_resume.5,(_f(127) & _f(84) => _f(132));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(126) & t_resume.4,(_f(127) & _f(46) => _f(131));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(126) & t_resume.3,(_f(127) & _f(91) => _f(130));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(126) & t_resume.2,(_f(127) & _f(43) => _f(129));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(126) & t_resume.1,(_f(127) & _f(41) => _f(128));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.34,(_f(124) & _f(52) => _f(125));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.33,(_f(124) & _f(50) => _f(122));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.32,(_f(124) & _f(84) => _f(105));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.31,(_f(124) & _f(91) => _f(104));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.30,(_f(116) & _f(52) => _f(123));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.29,(_f(116) & _f(50) => _f(122));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.28,(_f(116) & _f(87) => _f(121));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.27,(_f(116) & _f(48) => _f(120));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.26,(_f(116) & _f(84) => _f(119));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.25,(_f(116) & _f(91) => _f(104));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.24,(_f(116) & _f(39) => _f(118));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.23,(_f(116) & _f(78) => _f(117));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.22,(_f(114) & _f(55) => _f(112));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.21,(_f(114) & _f(55) => _f(115));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.20,(_f(114) & _f(55) => _f(111));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.19,(_f(113) & _f(52) => _f(109));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.18,(_f(113) & _f(50) => _f(108));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.17,(_f(113) & _f(87) => _f(107));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.16,(_f(113) & _f(48) => _f(106));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.15,(_f(113) & _f(84) => _f(105));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.14,(_f(113) & _f(91) => _f(104));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.13,(_f(113) & _f(43) => _f(103));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.12,(_f(113) & _f(41) => _f(102));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.11,(_f(110) & _f(55) => _f(112));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.10,(_f(110) & _f(55) => _f(111));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.9,(_f(101) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.8,(_f(101) & _f(52) => _f(109));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.7,(_f(101) & _f(50) => _f(108));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.6,(_f(101) & _f(87) => _f(107));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.5,(_f(101) & _f(48) => _f(106));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.4,(_f(101) & _f(84) => _f(105));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.3,(_f(101) & _f(91) => _f(104));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.2,(_f(101) & _f(43) => _f(103));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(100) & t_suspend.1,(_f(101) & _f(41) => _f(102));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.47,(_f(98) & _f(52) => _f(99));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.46,(_f(98) & _f(46) => _f(65));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.45,(_f(98) & _f(43) => _f(81));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.44,(_f(98) & _f(39) => _f(62));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.43,(_f(98) & _f(35) => _f(61));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.42,(_f(90) & _f(52) => _f(97));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.41,(_f(90) & _f(50) => _f(96));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.40,(_f(90) & _f(87) => _f(95));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.39,(_f(90) & _f(84) => _f(94));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.38,(_f(90) & _f(82) => _f(83));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.37,(_f(90) & _f(46) => _f(93));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.36,(_f(90) & _f(91) => _f(92));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.35,(_f(90) & _f(43) => _f(81));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.34,(_f(90) & _f(39) => _f(62));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.33,(_f(90) & _f(35) => _f(61));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.32,(_f(77) & _f(52) => _f(89));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.31,(_f(77) & _f(87) => _f(88));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.30,(_f(77) & _f(48) => _f(86));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.29,(_f(77) & _f(84) => _f(85));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.28,(_f(77) & _f(82) => _f(83));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.27,(_f(77) & _f(46) => _f(65));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.26,(_f(77) & _f(43) => _f(81));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.25,(_f(77) & _f(39) => _f(80));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.24,(_f(77) & _f(78) => _f(79));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.23,(_f(77) & _f(35) => _f(61));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.22,(_f(75) & _f(55) => _f(73));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.21,(_f(75) & _f(55) => _f(76));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.20,(_f(75) & _f(55) => _f(72));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.19,(_f(74) & _f(52) => _f(68));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.18,(_f(74) & _f(50) => _f(67));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.17,(_f(74) & _f(48) => _f(66));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.16,(_f(74) & _f(46) => _f(65));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.15,(_f(74) & _f(43) => _f(64));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.14,(_f(74) & _f(41) => _f(63));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.13,(_f(74) & _f(39) => _f(62));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.12,(_f(74) & _f(35) => _f(61));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.11,(_f(71) & _f(55) => _f(73));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.10,(_f(71) & _f(55) => _f(72));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.9,(_f(60) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.8,(_f(60) & _f(52) => _f(68));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.7,(_f(60) & _f(50) => _f(67));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.6,(_f(60) & _f(48) => _f(66));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.5,(_f(60) & _f(46) => _f(65));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.4,(_f(60) & _f(43) => _f(64));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.3,(_f(60) & _f(41) => _f(63));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.2,(_f(60) & _f(39) => _f(62));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(59) & t_delete.1,(_f(60) & _f(35) => _f(61));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(33) & t_create.13,(_f(54) & _f(55) => _f(58));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(33) & t_create.12,(_f(54) & _f(55) => _f(57));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(33) & t_create.11,(_f(54) & _f(55) => _f(56));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(33) & t_create.10,(_f(34) & _f(52) => _f(53));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(33) & t_create.9,(_f(34) & _f(50) => _f(51));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(33) & t_create.8,(_f(34) & _f(48) => _f(49));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(33) & t_create.7,(_f(34) & _f(46) => _f(47));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(33) & t_create.6,(_f(34) & _f(43) => _f(45));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(33) & t_create.5,(_f(34) & _f(43) => _f(44));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(33) & t_create.4,(_f(34) & _f(41) => _f(42));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(33) & t_create.3,(_f(34) & _f(39) => _f(40));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(33) & t_create.2,(_f(34) & _f(37) => _f(38));
  _f(1) & _f(2) & _f(10) & _f(32) & _f(33) & t_create.1,(_f(34) & _f(35) => _f(36));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.7,(_f(29) & _f(30) => _f(31));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.6,(_f(26) & _f(27) => _f(28));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.5,(_f(23) & _f(24) => _f(25));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.4,(_f(20) & _f(21) => _f(22));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.3,(_f(17) & _f(18) => _f(19));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.2,(_f(14) & _f(15) => _f(16));
  _f(1) & _f(2) & _f(10) & AssertionLemmas.1,(_f(11) & _f(12) => _f(13));
  _f(1) & _f(2) & Initialisation.3,(_f(3) & _f(8) => _f(9));
  _f(1) & _f(2) & Initialisation.2,(_f(3) & _f(6) => _f(7));
  _f(1) & _f(2) & Initialisation.1,(_f(3) & _f(4) => _f(5))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES & configMAX_PRIORITIES<=2147483647 & 1<=configMAX_PRIORITIES & configTOTAL_HEAP_SIZE: INTEGER & 0<=configTOTAL_HEAP_SIZE & configTOTAL_HEAP_SIZE<=2147483647 & configMINIMAL_STACK_SIZE: INTEGER & 0<=configMINIMAL_STACK_SIZE & configMINIMAL_STACK_SIZE<=2147483647 & INCLUDE_uxTaskPriorityGet: BIT & INCLUDE_vTaskDelete: BIT & INCLUDE_vTaskSuspend: BIT & INCLUDE_xTaskGetSchedulerState: BIT & INCLUDE_vTaskPrioritySet: BIT & INCLUDE_xTaskGetCurrentTaskHandle: BIT & INCLUDE_vTaskDelayUntil: BIT & INCLUDE_vTaskDelay: BIT & BIT = 0..1 & MAX_DELAY: 0..2147483647 & 1<=MAX_DELAY & NULL_PARAMETER: PARAMETER & PRIORITY: POW(NAT) & TICK: POW(NAT) & TICK = 0..MAX_DELAY & TICK_INCREMENT: TICK*TICK +-> TICK & dom(TICK_INCREMENT) = TICK*TICK & TICK_INCREMENT = %(tick,inc).(tick: TICK & inc: TICK | (tick+inc) mod MAX_DELAY) & QUEUE_NULL: QUEUE & ITEM_NULL: ITEM & ITEM_EMPTY: ITEM & TASK_NULL: TASK & REMOVE_EVENT: TASK*POW(QUEUE)*(QUEUE +-> POW(TASK)) +-> (QUEUE +-> POW(TASK)) & REMOVE_EVENT = %(task,queues,pending).(task: TASK & queues: POW(QUEUE) & pending: QUEUE +-> POW(TASK) | %queue.(queue: queues & queue: dom(pending) | pending(queue)-{task})) & NAME: FIN(INTEGER) & not(NAME = {}) & PARAMETER: FIN(INTEGER) & not(PARAMETER = {}) & TASK: FIN(INTEGER) & not(TASK = {}) & STACK: FIN(INTEGER) & not(STACK = {}) & TASK_CODE: FIN(INTEGER) & not(TASK_CODE = {}) & ITEM: FIN(INTEGER) & not(ITEM = {}) & QUEUE: FIN(INTEGER) & not(QUEUE = {}) & (1..3)*{SCHEDULER_STATE}: FIN(NATURAL*{SCHEDULER_STATE}) & not((1..3)*{SCHEDULER_STATE} = {}) & (1..2)*{COPY_POSITION}: FIN(NATURAL*{COPY_POSITION}) & not((1..2)*{COPY_POSITION} = {}) & (1..3)*{QUEUE_TYPE}: FIN(NATURAL*{QUEUE_TYPE}) & not((1..3)*{QUEUE_TYPE} = {}) & (1..10)*{ERROR_DEFINITION}: FIN(NATURAL*{ERROR_DEFINITION}) & not((1..10)*{ERROR_DEFINITION} = {}));
  ("`Seen and used machines assertions'" & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES & BIT: POW(NATURAL));
  ("`Local hypotheses'" & running$0: TASK & idle$0: TASK);
  "`Check that the invariant (tasks: FIN(TASK)) is established by the initialisation - ref 3.3'";
  ({}: FIN(TASK));
  "`Check that the invariant (blocked <: tasks) is established by the initialisation - ref 3.3'";
  ({}: POW({}));
  "`Check that the invariant (pending <: suspended\/blocked) is established by the initialisation - ref 3.3'";
  ({}: POW({}\/{}));
  ("`Component invariant'" & active: BOOL & tasks: FIN(TASK) & idle: TASK & not(TASK_NULL: tasks) & blocked: FIN(TASK) & blocked: POW(tasks) & ready: FIN(TASK) & ready: POW(tasks) & suspended: FIN(TASK) & suspended: POW(tasks) & pending: FIN(TASK) & pending: POW(suspended\/blocked) & ready/\blocked = {} & blocked/\suspended = {} & suspended/\ready = {} & tasks = suspended\/blocked\/ready & running: TASK & (active = TRUE => not(ready = {}) & running: ready & idle: ready));
  ("`Local hypotheses'" & active = TRUE);
  "`Check assertion (active = TRUE => tasks/={}) deduction - ref 3.2, 4.2, 5.3'";
  (not(tasks = {}));
  ("`Local hypotheses'" & (active = TRUE => not(tasks = {})) & active = TRUE);
  "`Check assertion (active = TRUE => idle: tasks) deduction - ref 3.2, 4.2, 5.3'";
  (idle: tasks);
  ("`Local hypotheses'" & (active = TRUE => not(tasks = {})) & (active = TRUE => idle: tasks) & active = TRUE);
  "`Check assertion (active = TRUE => idle/:blocked) deduction - ref 3.2, 4.2, 5.3'";
  (not(idle: blocked));
  ("`Local hypotheses'" & (active = TRUE => not(tasks = {})) & (active = TRUE => idle: tasks) & (active = TRUE => not(idle: blocked)) & active = TRUE);
  "`Check assertion (active = TRUE => idle/:suspended) deduction - ref 3.2, 4.2, 5.3'";
  (not(idle: suspended));
  ("`Local hypotheses'" & (active = TRUE => not(tasks = {})) & (active = TRUE => idle: tasks) & (active = TRUE => not(idle: blocked)) & (active = TRUE => not(idle: suspended)) & active = TRUE);
  "`Check assertion (active = TRUE => running: tasks) deduction - ref 3.2, 4.2, 5.3'";
  (running: tasks);
  ("`Local hypotheses'" & (active = TRUE => not(tasks = {})) & (active = TRUE => idle: tasks) & (active = TRUE => not(idle: blocked)) & (active = TRUE => not(idle: suspended)) & (active = TRUE => running: tasks) & active = TRUE);
  "`Check assertion (active = TRUE => running/:blocked) deduction - ref 3.2, 4.2, 5.3'";
  (not(running: blocked));
  ("`Local hypotheses'" & (active = TRUE => not(tasks = {})) & (active = TRUE => idle: tasks) & (active = TRUE => not(idle: blocked)) & (active = TRUE => not(idle: suspended)) & (active = TRUE => running: tasks) & (active = TRUE => not(running: blocked)) & active = TRUE);
  "`Check assertion (active = TRUE => running/:suspended) deduction - ref 3.2, 4.2, 5.3'";
  (not(running: suspended));
  ("`Component assertions'" & (active = TRUE => not(tasks = {})) & (active = TRUE => idle: tasks) & (active = TRUE => not(idle: blocked)) & (active = TRUE => not(idle: suspended)) & (active = TRUE => running: tasks) & (active = TRUE => not(running: blocked)) & (active = TRUE => not(running: suspended)));
  ("`t_create preconditions in this component'" & priority: PRIORITY);
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & not(task = TASK_NULL));
  "`Check that the invariant (tasks: FIN(TASK)) is preserved by the operation - ref 3.4'";
  (tasks\/{task}: FIN(TASK));
  "`Check that the invariant (TASK_NULL/:tasks) is preserved by the operation - ref 3.4'";
  (not(TASK_NULL = task));
  "`Check that the invariant (blocked <: tasks) is preserved by the operation - ref 3.4'";
  (blocked: POW(tasks\/{task}));
  "`Check that the invariant (ready: FIN(TASK)) is preserved by the operation - ref 3.4'";
  (ready\/{task}: FIN(TASK));
  "`Check that the invariant (ready <: tasks) is preserved by the operation - ref 3.4'";
  (task: tasks\/{task});
  (ready: POW(tasks\/{task}));
  "`Check that the invariant (suspended <: tasks) is preserved by the operation - ref 3.4'";
  (suspended: POW(tasks\/{task}));
  "`Check that the invariant (ready/\blocked = {}) is preserved by the operation - ref 3.4'";
  (ready\/{task}/\blocked = {});
  "`Check that the invariant (suspended/\ready = {}) is preserved by the operation - ref 3.4'";
  (not(task: suspended));
  "`Check that the invariant (tasks = suspended\/blocked\/ready) is preserved by the operation - ref 3.4'";
  (tasks\/{task} = suspended\/blocked\/(ready\/{task}));
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & not(task = TASK_NULL) & active = TRUE);
  "`Check that the invariant (active = TRUE => ready/={} & running: ready & idle: ready) is preserved by the operation - ref 3.4'";
  (task: ready\/{task});
  (idle: ready\/{task});
  (running: ready\/{task});
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks & not(atask = idle));
  ("`Local hypotheses'" & atask: ready & atask = running & running$0: ready & not(running$0 = atask));
  (tasks-{atask}: FIN(TASK));
  (blocked: POW(tasks-{atask}));
  (ready-{atask}: FIN(TASK));
  (ready-{atask}: POW(tasks-{atask}));
  (suspended: POW(tasks-{atask}));
  (ready-{atask}/\blocked = {});
  (suspended/\ready-{atask} = {});
  (tasks-{atask} = suspended\/blocked\/ready-{atask});
  "`Check that the invariant (running: TASK) is preserved by the operation - ref 3.4'";
  (running$0: TASK);
  ("`Local hypotheses'" & atask: ready & atask = running & running$0: ready & not(running$0 = atask) & active = TRUE);
  (not(ready = {atask}));
  (not(idle = atask));
  ("`Local hypotheses'" & atask: ready & not(atask = running));
  ("`Local hypotheses'" & atask: ready & not(atask = running) & active = TRUE);
  (not(running = atask));
  ("`Local hypotheses'" & not(atask: ready) & atask: blocked);
  "`Check that the invariant (blocked: FIN(TASK)) is preserved by the operation - ref 3.4'";
  (blocked-{atask}: FIN(TASK));
  (blocked-{atask}: POW(tasks-{atask}));
  (ready: POW(tasks-{atask}));
  "`Check that the invariant (pending: FIN(TASK)) is preserved by the operation - ref 3.4'";
  (pending-{atask}: FIN(TASK));
  "`Check that the invariant (pending <: suspended\/blocked) is preserved by the operation - ref 3.4'";
  (pending-{atask}: POW(suspended\/blocked-{atask}));
  (ready/\blocked-{atask} = {});
  "`Check that the invariant (blocked/\suspended = {}) is preserved by the operation - ref 3.4'";
  (blocked-{atask}/\suspended = {});
  (tasks-{atask} = suspended\/blocked-{atask}\/ready);
  ("`Local hypotheses'" & not(atask: ready) & not(atask: blocked) & atask: suspended);
  "`Check that the invariant (suspended: FIN(TASK)) is preserved by the operation - ref 3.4'";
  (suspended-{atask}: FIN(TASK));
  (suspended-{atask}: POW(tasks-{atask}));
  (pending-{atask}: POW(suspended-{atask}\/blocked));
  (blocked/\suspended-{atask} = {});
  (suspended-{atask}/\ready = {});
  (tasks-{atask} = suspended-{atask}\/blocked\/ready);
  ("`Local hypotheses'" & not(atask: ready) & not(atask: blocked) & not(atask: suspended));
  (tasks-{atask} = suspended\/blocked\/ready);
  ("`t_suspend preconditions in this component'" & stask: TASK & stask: tasks & not(stask = idle));
  ("`Local hypotheses'" & stask: ready & stask = running & running$0: ready & not(running$0 = stask));
  (ready-{stask}: FIN(TASK));
  (ready-{stask}: POW(tasks));
  (suspended\/{stask}: FIN(TASK));
  (pending: POW(suspended\/{stask}\/blocked));
  (ready-{stask}/\blocked = {});
  (not(stask: blocked));
  (suspended\/{stask}/\ready-{stask} = {});
  (tasks = suspended\/{stask}\/blocked\/ready-{stask});
  ("`Local hypotheses'" & stask: ready & stask = running & running$0: ready & not(running$0 = stask) & active = TRUE);
  (not(ready = {stask}));
  (not(idle = stask));
  ("`Local hypotheses'" & stask: ready & not(stask = running));
  ("`Local hypotheses'" & stask: ready & not(stask = running) & active = TRUE);
  (not(running = stask));
  ("`Local hypotheses'" & not(stask: ready) & stask: blocked);
  (blocked-{stask}: FIN(TASK));
  (blocked-{stask}: POW(tasks));
  (pending: POW(suspended\/{stask}\/blocked-{stask}));
  (ready/\blocked-{stask} = {});
  (blocked-{stask}/\suspended = {});
  (suspended\/{stask}/\ready = {});
  (tasks = suspended\/{stask}\/blocked-{stask}\/ready);
  ("`Local hypotheses'" & not(stask: ready) & not(stask: blocked));
  (tasks = suspended\/{stask}\/blocked\/ready);
  ("`t_resume preconditions in this component'" & rtask: TASK & rtask: suspended & not(rtask: pending));
  ("`Local hypotheses'" & running$0: ready\/{rtask});
  (ready\/{rtask}: FIN(TASK));
  (rtask: tasks);
  (suspended-{rtask}: FIN(TASK));
  (suspended-{rtask}: POW(tasks));
  (pending: POW(suspended-{rtask}\/blocked));
  (ready\/{rtask}/\blocked = {});
  (blocked/\suspended-{rtask} = {});
  (suspended-{rtask}/\ready = {});
  (tasks = suspended-{rtask}\/blocked\/(ready\/{rtask}));
  ("`Local hypotheses'" & running$0: ready\/{rtask} & active = TRUE);
  (idle: ready\/{rtask});
  (running: ready\/{rtask});
  ("`t_delayTask preconditions in this component'" & task: TASK & task = running & running: ready & not(running = idle) & ticks: TICK);
  ("`Local hypotheses'" & running$0: ready & not(running$0 = running));
  (blocked\/{running}: FIN(TASK));
  (ready-{running}: FIN(TASK));
  (ready-{running}: POW(tasks));
  (pending: POW(suspended\/(blocked\/{running})));
  (ready-{running}/\blocked = {});
  (blocked\/{running}/\suspended = {});
  (suspended/\ready-{running} = {});
  (tasks = suspended\/(blocked\/{running})\/ready-{running});
  ("`Local hypotheses'" & running$0: ready & not(running$0 = running) & active = TRUE);
  (not(ready = {running}));
  (not(idle = running));
  ("`t_startScheduler preconditions in this component'" & active = FALSE);
  ("`Local hypotheses'" & idle_task: TASK & not(idle_task: tasks) & not(idle_task = TASK_NULL) & running$0: ready\/{idle_task});
  (tasks\/{idle_task}: FIN(TASK));
  (not(TASK_NULL = idle_task));
  (blocked: POW(tasks\/{idle_task}));
  (ready\/{idle_task}: FIN(TASK));
  (idle_task: tasks\/{idle_task});
  (ready: POW(tasks\/{idle_task}));
  (suspended: POW(tasks\/{idle_task}));
  (ready\/{idle_task}/\blocked = {});
  (not(idle_task: suspended));
  (tasks\/{idle_task} = suspended\/blocked\/(ready\/{idle_task}));
  (idle_task: ready\/{idle_task});
  ("`t_endScheduler preconditions in this component'" & active = TRUE);
  ("`t_resumeAll preconditions in this component'" & unblocked: FIN(TASK) & unblocked: POW(blocked));
  ("`Local hypotheses'" & not(unblocked = {}) & running$0: unblocked\/pending);
  (blocked-unblocked-pending: FIN(TASK));
  (blocked-unblocked-pending: POW(tasks));
  (ready\/unblocked\/pending: FIN(TASK));
  (ready\/unblocked\/pending: POW(tasks));
  (suspended-pending: FIN(TASK));
  (suspended-pending: POW(tasks));
  ({}: POW(suspended-pending\/blocked-unblocked-pending));
  (ready\/unblocked\/pending/\blocked-unblocked-pending = {});
  (blocked-unblocked-pending/\suspended-pending = {});
  (suspended-pending/\(ready\/unblocked\/pending) = {});
  (tasks = suspended-pending\/blocked-unblocked-pending\/(ready\/unblocked\/pending));
  ("`Local hypotheses'" & not(unblocked = {}) & running$0: unblocked\/pending & active = TRUE);
  (running$0: ready\/unblocked\/pending);
  (idle: ready\/unblocked\/pending);
  ("`Local hypotheses'" & not(unblocked = {}));
  ("`Local hypotheses'" & not(unblocked = {}) & active = TRUE);
  (running: ready\/unblocked\/pending);
  ("`Local hypotheses'" & not(pending = {}) & running$0: unblocked\/pending);
  ("`Local hypotheses'" & not(pending = {}) & running$0: unblocked\/pending & active = TRUE);
  ("`Local hypotheses'" & not(pending = {}));
  ("`Local hypotheses'" & not(pending = {}) & active = TRUE);
  ("`t_resumeIncrement preconditions in this component'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & unblocked/\pending = {});
  ("`Local hypotheses'" & not(unblocked = {}) & running$0: unblocked);
  "`Check that the invariant (blocked: FIN(TASK)) is preserved by the operation - ref 3.4'";
  (blocked-unblocked: FIN(TASK));
  "`Check that the invariant (blocked <: tasks) is preserved by the operation - ref 3.4'";
  (blocked-unblocked: POW(tasks));
  "`Check that the invariant (ready: FIN(TASK)) is preserved by the operation - ref 3.4'";
  (ready\/unblocked: FIN(TASK));
  "`Check that the invariant (ready <: tasks) is preserved by the operation - ref 3.4'";
  (ready\/unblocked: POW(tasks));
  "`Check that the invariant (pending <: suspended\/blocked) is preserved by the operation - ref 3.4'";
  (pending: POW(suspended\/blocked-unblocked));
  "`Check that the invariant (ready/\blocked = {}) is preserved by the operation - ref 3.4'";
  (ready\/unblocked/\blocked-unblocked = {});
  "`Check that the invariant (blocked/\suspended = {}) is preserved by the operation - ref 3.4'";
  (blocked-unblocked/\suspended = {});
  "`Check that the invariant (suspended/\ready = {}) is preserved by the operation - ref 3.4'";
  (suspended/\(ready\/unblocked) = {});
  "`Check that the invariant (tasks = suspended\/blocked\/ready) is preserved by the operation - ref 3.4'";
  (tasks = suspended\/blocked-unblocked\/(ready\/unblocked));
  "`Check that the invariant (running: TASK) is preserved by the operation - ref 3.4'";
  ("`Local hypotheses'" & not(unblocked = {}) & running$0: unblocked & active = TRUE);
  "`Check that the invariant (active = TRUE => ready/={} & running: ready & idle: ready) is preserved by the operation - ref 3.4'";
  (running$0: ready\/unblocked);
  (idle: ready\/unblocked);
  (running: ready\/unblocked);
  ("`t_unblock preconditions in this component'" & task: TASK & task: blocked & not(task: pending));
  (blocked-{task}: FIN(TASK));
  (blocked-{task}: POW(tasks));
  (task: tasks);
  (pending: POW(suspended\/blocked-{task}));
  (ready\/{task}/\blocked-{task} = {});
  (blocked-{task}/\suspended = {});
  (tasks = suspended\/blocked-{task}\/(ready\/{task}));
  ("`t_unblockMutex preconditions in this component'" & task: TASK & task: blocked & not(task: pending));
  ("`t_setPriority preconditions in this component'" & task: tasks & priority: PRIORITY & not(task = idle));
  ("`Local hypotheses'" & running$0: ready);
  ("`t_addPending preconditions in this component'" & ptask: TASK & not(ptask: pending) & ptask: blocked\/suspended);
  (pending\/{ptask}: FIN(TASK));
  (ptask: suspended\/blocked);
  ("`t_PriorityInherit preconditions in this component'" & xTicksToWait: TICK & holderTask: tasks & not(holderTask = idle) & not(running = idle) & running: ready)
END
&
THEORY EnumerateX IS
  SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED};
  COPY_POSITION == {queueSEND_TO_BACK,queueSEND_TO_FRONT};
  QUEUE_TYPE == {TQUE,TSEMAPH,TMUT};
  ERROR_DEFINITION == {errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY,errNO_TASK_TO_RUN,errQUEUE_BLOCKED,errQUEUE_YIELD,errQUEUE_EMPTY,errQUEUE_FULL,pdPASS,pdFAIL,pdTRUE,pdFALSE}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK)
END
