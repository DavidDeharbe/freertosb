THEORY ProofList IS
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.49,(_f(470) & _f(80) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.48,(_f(469) & _f(80) => _f(67));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.47,(_f(469) & _f(80) => _f(66));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.46,(_f(468) & _f(71) => _f(65));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.45,(_f(467) & _f(71) => _f(63));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.44,(_f(467) & _f(71) => _f(62));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.43,(_f(466) & _f(73) => _f(69));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.42,(_f(464) & _f(73) => _f(67));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.41,(_f(464) & _f(73) => _f(66));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.40,(_f(465) & _f(71) => _f(65));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.39,(_f(464) & _f(71) => _f(63));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.38,(_f(464) & _f(71) => _f(62));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.37,(_f(463) & _f(52) => _f(60));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.36,(_f(462) & _f(43) => _f(61));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.35,(_f(462) & _f(52) => _f(60));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.34,(_f(461) & _f(80) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.33,(_f(460) & _f(80) => _f(67));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.32,(_f(460) & _f(80) => _f(66));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.31,(_f(460) & _f(52) => _f(60));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.30,(_f(459) & _f(80) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.29,(_f(458) & _f(80) => _f(67));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.28,(_f(458) & _f(80) => _f(66));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.27,(_f(458) & _f(43) => _f(61));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.26,(_f(458) & _f(52) => _f(60));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.25,(_f(457) & _f(71) => _f(65));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.24,(_f(456) & _f(71) => _f(63));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.23,(_f(456) & _f(71) => _f(62));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.22,(_f(456) & _f(52) => _f(60));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.21,(_f(455) & _f(71) => _f(65));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.20,(_f(454) & _f(71) => _f(63));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.19,(_f(454) & _f(71) => _f(62));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.18,(_f(454) & _f(43) => _f(61));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.17,(_f(454) & _f(52) => _f(60));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.16,(_f(453) & _f(73) => _f(69));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.15,(_f(451) & _f(73) => _f(67));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.14,(_f(451) & _f(73) => _f(66));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.13,(_f(452) & _f(71) => _f(65));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.12,(_f(451) & _f(71) => _f(63));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.11,(_f(451) & _f(71) => _f(62));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.10,(_f(451) & _f(52) => _f(60));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.9,(_f(450) & _f(16) => _f(69));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.8,(_f(448) & _f(16) => _f(67));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.7,(_f(448) & _f(16) => _f(66));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.6,(_f(449) & _f(16) => _f(65));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.5,(_f(448) & _f(16) => _f(63));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.4,(_f(448) & _f(16) => _f(62));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.3,(_f(448) & _f(43) => _f(61));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.2,(_f(448) & _f(16) => _f(60));
  _f(1) & _f(2) & _f(3) & _f(446) & afterIncrementTick.1,(_f(447) & _f(13) => _f(58));
  _f(1) & _f(2) & _f(3) & _f(443) & incrementTick.1,(_f(444) & _f(13) => _f(445));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.49,(_f(442) & _f(134) => _f(429));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.48,(_f(442) & _f(132) => _f(428));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.47,(_f(442) & _f(418) => _f(427));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.46,(_f(441) & _f(134) => _f(429));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.45,(_f(441) & _f(132) => _f(428));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.44,(_f(441) & _f(418) => _f(427));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.43,(_f(440) & _f(43) => _f(430));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.42,(_f(440) & _f(134) => _f(429));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.41,(_f(440) & _f(132) => _f(428));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.40,(_f(440) & _f(418) => _f(427));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.39,(_f(439) & _f(134) => _f(429));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.38,(_f(439) & _f(132) => _f(428));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.37,(_f(439) & _f(418) => _f(427));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.36,(_f(438) & _f(43) => _f(430));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.35,(_f(438) & _f(134) => _f(429));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.34,(_f(438) & _f(132) => _f(428));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.33,(_f(438) & _f(418) => _f(427));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.32,(_f(437) & _f(134) => _f(429));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.31,(_f(437) & _f(132) => _f(428));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.30,(_f(437) & _f(418) => _f(427));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.29,(_f(436) & _f(134) => _f(429));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.28,(_f(436) & _f(132) => _f(428));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.27,(_f(436) & _f(418) => _f(427));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.26,(_f(435) & _f(43) => _f(430));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.25,(_f(435) & _f(134) => _f(429));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.24,(_f(435) & _f(132) => _f(428));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.23,(_f(435) & _f(418) => _f(427));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.22,(_f(434) & _f(43) => _f(430));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.21,(_f(434) & _f(134) => _f(429));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.20,(_f(434) & _f(132) => _f(428));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.19,(_f(434) & _f(418) => _f(427));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.18,(_f(433) & _f(134) => _f(429));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.17,(_f(433) & _f(132) => _f(428));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.16,(_f(433) & _f(418) => _f(427));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.15,(_f(432) & _f(134) => _f(429));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.14,(_f(432) & _f(132) => _f(428));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.13,(_f(432) & _f(418) => _f(427));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.12,(_f(431) & _f(43) => _f(430));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.11,(_f(431) & _f(134) => _f(429));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.10,(_f(431) & _f(132) => _f(428));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.9,(_f(431) & _f(418) => _f(427));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.8,(_f(426) & _f(43) => _f(430));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.7,(_f(426) & _f(134) => _f(429));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.6,(_f(426) & _f(132) => _f(428));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.5,(_f(426) & _f(16) => _f(427));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.4,(_f(421) & _f(13) => _f(425));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.3,(_f(421) & _f(13) => _f(424));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.2,(_f(421) & _f(13) => _f(423));
  _f(1) & _f(2) & _f(3) & _f(420) & giveMutex.1,(_f(421) & _f(13) => _f(422));
  _f(1) & _f(2) & _f(3) & _f(409) & takeMutex.11,(_f(419) & _f(418) => _f(20));
  _f(1) & _f(2) & _f(3) & _f(409) & takeMutex.10,(_f(419) & _f(418) => _f(18));
  _f(1) & _f(2) & _f(3) & _f(409) & takeMutex.9,(_f(417) & _f(418) => _f(20));
  _f(1) & _f(2) & _f(3) & _f(409) & takeMutex.8,(_f(417) & _f(418) => _f(18));
  _f(1) & _f(2) & _f(3) & _f(409) & takeMutex.7,(_f(415) & _f(13) => _f(416));
  _f(1) & _f(2) & _f(3) & _f(409) & takeMutex.6,(_f(414) & _f(13) => _f(125));
  _f(1) & _f(2) & _f(3) & _f(409) & takeMutex.5,(_f(414) & _f(13) => _f(124));
  _f(1) & _f(2) & _f(3) & _f(409) & takeMutex.4,(_f(410) & _f(13) => _f(413));
  _f(1) & _f(2) & _f(3) & _f(409) & takeMutex.3,(_f(410) & _f(13) => _f(127));
  _f(1) & _f(2) & _f(3) & _f(409) & takeMutex.2,(_f(410) & _f(13) => _f(412));
  _f(1) & _f(2) & _f(3) & _f(409) & takeMutex.1,(_f(410) & _f(13) => _f(411));
  _f(1) & _f(2) & _f(3) & createMutex.1,(_f(406) & _f(407) => _f(408));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.198,(_f(404) & _f(196) => _f(405));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.197,(_f(402) & _f(193) => _f(403));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.196,(_f(400) & _f(190) => _f(401));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.195,(_f(398) & _f(187) => _f(399));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.194,(_f(397) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.193,(_f(397) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.192,(_f(397) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.191,(_f(396) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.190,(_f(396) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.189,(_f(396) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.188,(_f(396) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.187,(_f(395) & _f(43) => _f(359));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.186,(_f(395) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.185,(_f(395) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.184,(_f(395) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.183,(_f(395) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.182,(_f(394) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.181,(_f(394) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.180,(_f(394) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.179,(_f(394) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.178,(_f(393) & _f(43) => _f(359));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.177,(_f(393) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.176,(_f(393) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.175,(_f(393) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.174,(_f(393) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.173,(_f(392) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.172,(_f(392) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.171,(_f(392) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.170,(_f(392) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.169,(_f(391) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.168,(_f(391) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.167,(_f(391) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.166,(_f(391) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.165,(_f(390) & _f(43) => _f(359));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.164,(_f(390) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.163,(_f(390) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.162,(_f(390) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.161,(_f(390) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.160,(_f(389) & _f(43) => _f(359));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.159,(_f(389) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.158,(_f(389) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.157,(_f(389) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.156,(_f(389) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.155,(_f(388) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.154,(_f(388) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.153,(_f(388) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.152,(_f(388) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.151,(_f(387) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.150,(_f(387) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.149,(_f(387) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.148,(_f(387) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.147,(_f(386) & _f(43) => _f(359));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.146,(_f(386) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.145,(_f(386) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.144,(_f(386) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.143,(_f(386) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.142,(_f(385) & _f(43) => _f(359));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.141,(_f(385) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.140,(_f(385) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.139,(_f(385) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.138,(_f(385) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.137,(_f(384) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.136,(_f(384) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.135,(_f(384) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.134,(_f(383) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.133,(_f(383) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.132,(_f(383) & _f(353) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.131,(_f(383) & _f(353) => _f(354));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.130,(_f(382) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.129,(_f(382) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.128,(_f(382) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.127,(_f(382) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.126,(_f(381) & _f(43) => _f(359));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.125,(_f(381) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.124,(_f(381) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.123,(_f(381) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.122,(_f(381) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.121,(_f(380) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.120,(_f(380) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.119,(_f(380) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.118,(_f(380) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.117,(_f(379) & _f(43) => _f(359));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.116,(_f(379) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.115,(_f(379) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.114,(_f(379) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.113,(_f(379) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.112,(_f(378) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.111,(_f(378) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.110,(_f(378) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.109,(_f(378) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.108,(_f(377) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.107,(_f(377) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.106,(_f(377) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.105,(_f(377) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.104,(_f(376) & _f(43) => _f(359));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.103,(_f(376) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.102,(_f(376) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.101,(_f(376) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.100,(_f(376) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.99,(_f(375) & _f(43) => _f(359));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.98,(_f(375) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.97,(_f(375) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.96,(_f(375) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.95,(_f(375) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.94,(_f(374) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.93,(_f(374) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.92,(_f(374) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.91,(_f(374) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.90,(_f(373) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.89,(_f(373) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.88,(_f(373) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.87,(_f(373) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.86,(_f(372) & _f(43) => _f(359));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.85,(_f(372) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.84,(_f(372) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.83,(_f(372) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.82,(_f(372) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.81,(_f(371) & _f(43) => _f(359));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.80,(_f(371) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.79,(_f(371) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.78,(_f(371) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.77,(_f(371) & _f(310) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.76,(_f(370) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.75,(_f(370) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.74,(_f(370) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.73,(_f(370) & _f(353) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.72,(_f(370) & _f(353) => _f(354));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.71,(_f(369) & _f(43) => _f(359));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.70,(_f(369) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.69,(_f(369) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.68,(_f(369) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.67,(_f(369) & _f(353) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.66,(_f(369) & _f(353) => _f(354));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.65,(_f(368) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.64,(_f(368) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.63,(_f(368) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.62,(_f(368) & _f(353) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.61,(_f(368) & _f(353) => _f(354));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.60,(_f(367) & _f(43) => _f(359));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.59,(_f(367) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.58,(_f(367) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.57,(_f(367) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.56,(_f(367) & _f(353) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.55,(_f(367) & _f(353) => _f(354));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.54,(_f(366) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.53,(_f(366) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.52,(_f(366) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.51,(_f(366) & _f(353) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.50,(_f(366) & _f(353) => _f(354));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.49,(_f(365) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.48,(_f(365) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.47,(_f(365) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.46,(_f(365) & _f(353) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.45,(_f(365) & _f(353) => _f(354));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.44,(_f(364) & _f(43) => _f(359));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.43,(_f(364) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.42,(_f(364) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.41,(_f(364) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.40,(_f(364) & _f(353) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.39,(_f(364) & _f(353) => _f(354));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.38,(_f(363) & _f(43) => _f(359));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.37,(_f(363) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.36,(_f(363) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.35,(_f(363) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.34,(_f(363) & _f(353) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.33,(_f(363) & _f(353) => _f(354));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.32,(_f(362) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.31,(_f(362) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.30,(_f(362) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.29,(_f(362) & _f(353) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.28,(_f(362) & _f(353) => _f(354));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.27,(_f(361) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.26,(_f(361) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.25,(_f(361) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.24,(_f(361) & _f(353) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.23,(_f(361) & _f(353) => _f(354));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.22,(_f(360) & _f(43) => _f(359));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.21,(_f(360) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.20,(_f(360) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.19,(_f(360) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.18,(_f(360) & _f(353) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.17,(_f(360) & _f(353) => _f(354));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.16,(_f(352) & _f(43) => _f(359));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.15,(_f(352) & _f(136) => _f(358));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.14,(_f(352) & _f(134) => _f(357));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.13,(_f(352) & _f(132) => _f(356));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.12,(_f(352) & _f(353) => _f(355));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.11,(_f(352) & _f(353) => _f(354));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.10,(_f(351) & _f(13) => _f(125));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.9,(_f(351) & _f(13) => _f(124));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.8,(_f(350) & _f(13) => _f(286));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.7,(_f(350) & _f(13) => _f(127));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.6,(_f(349) & _f(13) => _f(125));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.5,(_f(349) & _f(13) => _f(124));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.4,(_f(348) & _f(13) => _f(286));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.3,(_f(348) & _f(13) => _f(122));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.2,(_f(345) & _f(13) => _f(347));
  _f(1) & _f(2) & _f(3) & _f(344) & giveSemaphore.1,(_f(345) & _f(13) => _f(346));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.185,(_f(342) & _f(216) => _f(343));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.184,(_f(340) & _f(213) => _f(341));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.183,(_f(338) & _f(210) => _f(339));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.182,(_f(336) & _f(207) => _f(337));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.181,(_f(335) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.180,(_f(335) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.179,(_f(335) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.178,(_f(334) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.177,(_f(334) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.176,(_f(334) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.175,(_f(333) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.174,(_f(333) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.173,(_f(333) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.172,(_f(333) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.171,(_f(332) & _f(43) => _f(296));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.170,(_f(332) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.169,(_f(332) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.168,(_f(332) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.167,(_f(332) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.166,(_f(331) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.165,(_f(331) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.164,(_f(331) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.163,(_f(331) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.162,(_f(330) & _f(43) => _f(296));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.161,(_f(330) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.160,(_f(330) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.159,(_f(330) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.158,(_f(330) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.157,(_f(329) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.156,(_f(329) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.155,(_f(329) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.154,(_f(329) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.153,(_f(328) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.152,(_f(328) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.151,(_f(328) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.150,(_f(328) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.149,(_f(327) & _f(43) => _f(296));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.148,(_f(327) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.147,(_f(327) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.146,(_f(327) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.145,(_f(327) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.144,(_f(326) & _f(43) => _f(296));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.143,(_f(326) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.142,(_f(326) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.141,(_f(326) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.140,(_f(326) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.139,(_f(325) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.138,(_f(325) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.137,(_f(325) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.136,(_f(325) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.135,(_f(324) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.134,(_f(324) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.133,(_f(324) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.132,(_f(324) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.131,(_f(323) & _f(43) => _f(296));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.130,(_f(323) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.129,(_f(323) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.128,(_f(323) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.127,(_f(323) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.126,(_f(322) & _f(43) => _f(296));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.125,(_f(322) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.124,(_f(322) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.123,(_f(322) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.122,(_f(322) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.121,(_f(321) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.120,(_f(321) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.119,(_f(321) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.118,(_f(321) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.117,(_f(320) & _f(43) => _f(296));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.116,(_f(320) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.115,(_f(320) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.114,(_f(320) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.113,(_f(320) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.112,(_f(319) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.111,(_f(319) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.110,(_f(319) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.109,(_f(319) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.108,(_f(318) & _f(43) => _f(296));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.107,(_f(318) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.106,(_f(318) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.105,(_f(318) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.104,(_f(318) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.103,(_f(317) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.102,(_f(317) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.101,(_f(317) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.100,(_f(317) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.99,(_f(316) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.98,(_f(316) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.97,(_f(316) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.96,(_f(316) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.95,(_f(315) & _f(43) => _f(296));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.94,(_f(315) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.93,(_f(315) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.92,(_f(315) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.91,(_f(315) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.90,(_f(314) & _f(43) => _f(296));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.89,(_f(314) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.88,(_f(314) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.87,(_f(314) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.86,(_f(314) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.85,(_f(313) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.84,(_f(313) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.83,(_f(313) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.82,(_f(313) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.81,(_f(312) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.80,(_f(312) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.79,(_f(312) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.78,(_f(312) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.77,(_f(311) & _f(43) => _f(296));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.76,(_f(311) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.75,(_f(311) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.74,(_f(311) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.73,(_f(311) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.72,(_f(309) & _f(43) => _f(296));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.71,(_f(309) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.70,(_f(309) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.69,(_f(309) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.68,(_f(309) & _f(310) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.67,(_f(308) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.66,(_f(308) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.65,(_f(308) & _f(291) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.64,(_f(307) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.63,(_f(307) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.62,(_f(307) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.61,(_f(307) & _f(291) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.60,(_f(306) & _f(43) => _f(296));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.59,(_f(306) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.58,(_f(306) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.57,(_f(306) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.56,(_f(306) & _f(291) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.55,(_f(305) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.54,(_f(305) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.53,(_f(305) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.52,(_f(305) & _f(291) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.51,(_f(304) & _f(43) => _f(296));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.50,(_f(304) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.49,(_f(304) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.48,(_f(304) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.47,(_f(304) & _f(291) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.46,(_f(303) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.45,(_f(303) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.44,(_f(303) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.43,(_f(303) & _f(291) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.42,(_f(302) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.41,(_f(302) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.40,(_f(302) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.39,(_f(302) & _f(291) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.38,(_f(301) & _f(43) => _f(296));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.37,(_f(301) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.36,(_f(301) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.35,(_f(301) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.34,(_f(301) & _f(291) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.33,(_f(300) & _f(43) => _f(296));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.32,(_f(300) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.31,(_f(300) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.30,(_f(300) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.29,(_f(300) & _f(291) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.28,(_f(299) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.27,(_f(299) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.26,(_f(299) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.25,(_f(299) & _f(291) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.24,(_f(298) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.23,(_f(298) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.22,(_f(298) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.21,(_f(298) & _f(291) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.20,(_f(297) & _f(43) => _f(296));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.19,(_f(297) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.18,(_f(297) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.17,(_f(297) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.16,(_f(297) & _f(291) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.15,(_f(290) & _f(43) => _f(296));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.14,(_f(290) & _f(136) => _f(295));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.13,(_f(290) & _f(80) => _f(294));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.12,(_f(290) & _f(73) => _f(293));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.11,(_f(290) & _f(291) => _f(292));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.10,(_f(289) & _f(13) => _f(125));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.9,(_f(289) & _f(13) => _f(124));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.8,(_f(288) & _f(13) => _f(286));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.7,(_f(288) & _f(13) => _f(127));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.6,(_f(287) & _f(13) => _f(125));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.5,(_f(287) & _f(13) => _f(124));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.4,(_f(285) & _f(13) => _f(286));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.3,(_f(285) & _f(13) => _f(122));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.2,(_f(282) & _f(13) => _f(284));
  _f(1) & _f(2) & _f(3) & _f(281) & takeSemaphore.1,(_f(282) & _f(13) => _f(283));
  _f(1) & _f(2) & _f(3) & _f(271) & createSemaphore.3,(_f(278) & _f(279) => _f(280));
  _f(1) & _f(2) & _f(3) & _f(271) & createSemaphore.2,(_f(275) & _f(276) => _f(277));
  _f(1) & _f(2) & _f(3) & _f(271) & createSemaphore.1,(_f(272) & _f(273) => _f(274));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.229,(_f(270) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.228,(_f(270) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.227,(_f(270) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.226,(_f(270) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.225,(_f(269) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.224,(_f(269) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.223,(_f(269) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.222,(_f(269) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.221,(_f(268) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.220,(_f(268) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.219,(_f(268) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.218,(_f(268) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.217,(_f(267) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.216,(_f(267) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.215,(_f(267) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.214,(_f(267) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.213,(_f(266) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.212,(_f(266) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.211,(_f(266) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.210,(_f(266) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.209,(_f(266) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.208,(_f(265) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.207,(_f(265) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.206,(_f(265) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.205,(_f(265) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.204,(_f(265) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.203,(_f(264) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.202,(_f(264) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.201,(_f(264) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.200,(_f(264) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.199,(_f(264) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.198,(_f(263) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.197,(_f(263) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.196,(_f(263) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.195,(_f(263) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.194,(_f(263) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.193,(_f(262) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.192,(_f(262) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.191,(_f(262) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.190,(_f(262) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.189,(_f(261) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.188,(_f(261) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.187,(_f(261) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.186,(_f(261) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.185,(_f(260) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.184,(_f(260) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.183,(_f(260) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.182,(_f(260) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.181,(_f(259) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.180,(_f(259) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.179,(_f(259) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.178,(_f(259) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.177,(_f(258) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.176,(_f(258) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.175,(_f(258) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.174,(_f(258) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.173,(_f(258) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.172,(_f(257) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.171,(_f(257) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.170,(_f(257) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.169,(_f(257) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.168,(_f(257) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.167,(_f(256) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.166,(_f(256) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.165,(_f(256) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.164,(_f(256) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.163,(_f(256) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.162,(_f(255) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.161,(_f(255) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.160,(_f(255) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.159,(_f(255) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.158,(_f(255) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.157,(_f(254) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.156,(_f(254) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.155,(_f(254) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.154,(_f(254) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.153,(_f(253) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.152,(_f(253) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.151,(_f(253) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.150,(_f(253) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.149,(_f(252) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.148,(_f(252) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.147,(_f(252) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.146,(_f(252) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.145,(_f(251) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.144,(_f(251) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.143,(_f(251) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.142,(_f(251) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.141,(_f(250) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.140,(_f(250) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.139,(_f(250) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.138,(_f(250) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.137,(_f(249) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.136,(_f(249) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.135,(_f(249) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.134,(_f(249) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.133,(_f(248) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.132,(_f(248) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.131,(_f(248) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.130,(_f(248) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.129,(_f(247) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.128,(_f(247) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.127,(_f(247) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.126,(_f(247) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.125,(_f(246) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.124,(_f(246) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.123,(_f(246) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.122,(_f(246) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.121,(_f(246) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.120,(_f(245) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.119,(_f(245) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.118,(_f(245) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.117,(_f(245) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.116,(_f(245) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.115,(_f(244) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.114,(_f(244) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.113,(_f(244) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.112,(_f(244) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.111,(_f(244) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.110,(_f(243) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.109,(_f(243) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.108,(_f(243) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.107,(_f(243) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.106,(_f(243) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.105,(_f(242) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.104,(_f(242) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.103,(_f(242) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.102,(_f(242) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.101,(_f(242) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.100,(_f(241) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.99,(_f(241) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.98,(_f(241) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.97,(_f(241) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.96,(_f(241) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.95,(_f(240) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.94,(_f(240) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.93,(_f(240) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.92,(_f(240) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.91,(_f(240) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.90,(_f(239) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.89,(_f(239) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.88,(_f(239) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.87,(_f(239) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.86,(_f(239) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.85,(_f(238) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.84,(_f(238) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.83,(_f(238) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.82,(_f(238) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.81,(_f(237) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.80,(_f(237) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.79,(_f(237) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.78,(_f(237) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.77,(_f(236) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.76,(_f(236) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.75,(_f(236) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.74,(_f(236) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.73,(_f(235) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.72,(_f(235) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.71,(_f(235) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.70,(_f(235) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.69,(_f(234) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.68,(_f(234) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.67,(_f(234) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.66,(_f(234) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.65,(_f(233) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.64,(_f(233) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.63,(_f(233) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.62,(_f(233) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.61,(_f(232) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.60,(_f(232) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.59,(_f(232) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.58,(_f(232) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.57,(_f(231) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.56,(_f(231) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.55,(_f(231) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.54,(_f(231) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.53,(_f(230) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.52,(_f(230) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.51,(_f(230) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.50,(_f(230) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.49,(_f(230) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.48,(_f(229) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.47,(_f(229) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.46,(_f(229) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.45,(_f(229) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.44,(_f(229) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.43,(_f(228) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.42,(_f(228) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.41,(_f(228) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.40,(_f(228) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.39,(_f(228) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.38,(_f(227) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.37,(_f(227) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.36,(_f(227) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.35,(_f(227) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.34,(_f(227) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.33,(_f(226) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.32,(_f(226) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.31,(_f(226) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.30,(_f(226) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.29,(_f(226) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.28,(_f(225) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.27,(_f(225) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.26,(_f(225) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.25,(_f(225) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.24,(_f(225) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.23,(_f(224) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.22,(_f(224) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.21,(_f(224) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.20,(_f(224) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.19,(_f(224) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.18,(_f(218) & _f(43) => _f(223));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.17,(_f(218) & _f(136) => _f(222));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.16,(_f(218) & _f(80) => _f(221));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.15,(_f(218) & _f(73) => _f(220));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.14,(_f(218) & _f(132) => _f(219));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.13,(_f(215) & _f(216) => _f(217));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.12,(_f(212) & _f(213) => _f(214));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.11,(_f(209) & _f(210) => _f(211));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.10,(_f(206) & _f(207) => _f(208));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.9,(_f(203) & _f(13) => _f(205));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.8,(_f(203) & _f(13) => _f(204));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.7,(_f(202) & _f(13) => _f(125));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.6,(_f(202) & _f(13) => _f(124));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.5,(_f(201) & _f(13) => _f(114));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.4,(_f(200) & _f(13) => _f(125));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.3,(_f(200) & _f(13) => _f(124));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.2,(_f(199) & _f(13) => _f(114));
  _f(1) & _f(2) & _f(3) & _f(198) & receiveItem.1,(_f(199) & _f(13) => _f(122));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.230,(_f(195) & _f(196) => _f(197));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.229,(_f(192) & _f(193) => _f(194));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.228,(_f(189) & _f(190) => _f(191));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.227,(_f(186) & _f(187) => _f(188));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.226,(_f(185) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.225,(_f(185) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.224,(_f(185) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.223,(_f(185) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.222,(_f(184) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.221,(_f(184) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.220,(_f(184) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.219,(_f(184) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.218,(_f(184) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.217,(_f(183) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.216,(_f(183) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.215,(_f(183) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.214,(_f(183) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.213,(_f(182) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.212,(_f(182) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.211,(_f(182) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.210,(_f(182) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.209,(_f(182) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.208,(_f(181) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.207,(_f(181) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.206,(_f(181) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.205,(_f(181) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.204,(_f(180) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.203,(_f(180) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.202,(_f(180) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.201,(_f(180) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.200,(_f(179) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.199,(_f(179) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.198,(_f(179) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.197,(_f(179) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.196,(_f(179) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.195,(_f(178) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.194,(_f(178) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.193,(_f(178) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.192,(_f(178) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.191,(_f(178) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.190,(_f(177) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.189,(_f(177) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.188,(_f(177) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.187,(_f(177) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.186,(_f(176) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.185,(_f(176) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.184,(_f(176) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.183,(_f(176) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.182,(_f(175) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.181,(_f(175) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.180,(_f(175) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.179,(_f(175) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.178,(_f(175) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.177,(_f(174) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.176,(_f(174) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.175,(_f(174) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.174,(_f(174) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.173,(_f(174) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.172,(_f(173) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.171,(_f(173) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.170,(_f(173) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.169,(_f(173) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.168,(_f(172) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.167,(_f(172) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.166,(_f(172) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.165,(_f(172) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.164,(_f(172) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.163,(_f(171) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.162,(_f(171) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.161,(_f(171) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.160,(_f(171) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.159,(_f(170) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.158,(_f(170) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.157,(_f(170) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.156,(_f(170) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.155,(_f(170) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.154,(_f(169) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.153,(_f(169) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.152,(_f(169) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.151,(_f(169) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.150,(_f(168) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.149,(_f(168) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.148,(_f(168) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.147,(_f(168) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.146,(_f(167) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.145,(_f(167) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.144,(_f(167) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.143,(_f(167) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.142,(_f(167) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.141,(_f(166) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.140,(_f(166) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.139,(_f(166) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.138,(_f(166) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.137,(_f(166) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.136,(_f(165) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.135,(_f(165) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.134,(_f(165) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.133,(_f(165) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.132,(_f(164) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.131,(_f(164) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.130,(_f(164) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.129,(_f(164) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.128,(_f(163) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.127,(_f(163) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.126,(_f(163) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.125,(_f(163) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.124,(_f(163) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.123,(_f(162) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.122,(_f(162) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.121,(_f(162) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.120,(_f(162) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.119,(_f(162) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.118,(_f(161) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.117,(_f(161) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.116,(_f(161) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.115,(_f(161) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.114,(_f(160) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.113,(_f(160) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.112,(_f(160) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.111,(_f(160) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.110,(_f(160) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.109,(_f(159) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.108,(_f(159) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.107,(_f(159) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.106,(_f(159) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.105,(_f(158) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.104,(_f(158) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.103,(_f(158) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.102,(_f(158) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.101,(_f(158) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.100,(_f(157) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.99,(_f(157) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.98,(_f(157) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.97,(_f(157) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.96,(_f(156) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.95,(_f(156) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.94,(_f(156) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.93,(_f(156) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.92,(_f(155) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.91,(_f(155) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.90,(_f(155) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.89,(_f(155) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.88,(_f(155) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.87,(_f(154) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.86,(_f(154) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.85,(_f(154) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.84,(_f(154) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.83,(_f(154) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.82,(_f(153) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.81,(_f(153) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.80,(_f(153) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.79,(_f(153) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.78,(_f(152) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.77,(_f(152) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.76,(_f(152) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.75,(_f(152) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.74,(_f(151) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.73,(_f(151) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.72,(_f(151) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.71,(_f(151) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.70,(_f(151) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.69,(_f(150) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.68,(_f(150) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.67,(_f(150) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.66,(_f(150) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.65,(_f(150) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.64,(_f(149) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.63,(_f(149) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.62,(_f(149) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.61,(_f(149) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.60,(_f(148) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.59,(_f(148) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.58,(_f(148) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.57,(_f(148) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.56,(_f(148) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.55,(_f(147) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.54,(_f(147) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.53,(_f(147) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.52,(_f(147) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.51,(_f(146) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.50,(_f(146) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.49,(_f(146) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.48,(_f(146) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.47,(_f(146) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.46,(_f(145) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.45,(_f(145) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.44,(_f(145) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.43,(_f(145) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.42,(_f(144) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.41,(_f(144) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.40,(_f(144) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.39,(_f(144) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.38,(_f(143) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.37,(_f(143) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.36,(_f(143) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.35,(_f(143) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.34,(_f(143) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.33,(_f(142) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.32,(_f(142) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.31,(_f(142) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.30,(_f(142) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.29,(_f(142) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.28,(_f(141) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.27,(_f(141) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.26,(_f(141) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.25,(_f(141) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.24,(_f(140) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.23,(_f(140) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.22,(_f(140) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.21,(_f(140) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.20,(_f(139) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.19,(_f(139) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.18,(_f(139) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.17,(_f(139) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.16,(_f(139) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.15,(_f(129) & _f(43) => _f(138));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.14,(_f(129) & _f(136) => _f(137));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.13,(_f(129) & _f(134) => _f(135));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.12,(_f(129) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.11,(_f(129) & _f(130) => _f(131));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.10,(_f(128) & _f(13) => _f(125));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.9,(_f(128) & _f(13) => _f(124));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.8,(_f(126) & _f(13) => _f(114));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.7,(_f(126) & _f(13) => _f(127));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.6,(_f(123) & _f(13) => _f(125));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.5,(_f(123) & _f(13) => _f(124));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.4,(_f(121) & _f(13) => _f(114));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.3,(_f(121) & _f(13) => _f(122));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.2,(_f(118) & _f(13) => _f(120));
  _f(1) & _f(2) & _f(3) & _f(117) & sendItem.1,(_f(118) & _f(13) => _f(119));
  _f(1) & _f(2) & _f(3) & _f(112) & queueDelete.3,(_f(113) & _f(13) => _f(116));
  _f(1) & _f(2) & _f(3) & _f(112) & queueDelete.2,(_f(113) & _f(13) => _f(115));
  _f(1) & _f(2) & _f(3) & _f(112) & queueDelete.1,(_f(113) & _f(13) => _f(114));
  _f(1) & _f(2) & _f(3) & _f(108) & xQueueCreate.1,(_f(109) & _f(110) => _f(111));
  _f(1) & _f(2) & _f(3) & _f(98) & vTaskSuspend.14,(_f(107) & _f(33) => _f(103));
  _f(1) & _f(2) & _f(3) & _f(98) & vTaskSuspend.13,(_f(107) & _f(31) => _f(102));
  _f(1) & _f(2) & _f(3) & _f(98) & vTaskSuspend.12,(_f(106) & _f(33) => _f(103));
  _f(1) & _f(2) & _f(3) & _f(98) & vTaskSuspend.11,(_f(106) & _f(31) => _f(102));
  _f(1) & _f(2) & _f(3) & _f(98) & vTaskSuspend.10,(_f(105) & _f(33) => _f(103));
  _f(1) & _f(2) & _f(3) & _f(98) & vTaskSuspend.9,(_f(105) & _f(31) => _f(102));
  _f(1) & _f(2) & _f(3) & _f(98) & vTaskSuspend.8,(_f(104) & _f(33) => _f(103));
  _f(1) & _f(2) & _f(3) & _f(98) & vTaskSuspend.7,(_f(104) & _f(31) => _f(102));
  _f(1) & _f(2) & _f(3) & _f(98) & vTaskSuspend.6,(_f(104) & _f(28) => _f(100));
  _f(1) & _f(2) & _f(3) & _f(98) & vTaskSuspend.5,(_f(99) & _f(33) => _f(103));
  _f(1) & _f(2) & _f(3) & _f(98) & vTaskSuspend.4,(_f(99) & _f(31) => _f(102));
  _f(1) & _f(2) & _f(3) & _f(98) & vTaskSuspend.3,(_f(99) & _f(19) => _f(101));
  _f(1) & _f(2) & _f(3) & _f(98) & vTaskSuspend.2,(_f(99) & _f(19) => _f(20));
  _f(1) & _f(2) & _f(3) & _f(98) & vTaskSuspend.1,(_f(99) & _f(28) => _f(100));
  _f(1) & _f(2) & _f(3) & _f(94) & vTaskStartScheduler.1,(_f(95) & _f(96) => _f(97));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.49,(_f(93) & _f(80) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.48,(_f(92) & _f(80) => _f(67));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.47,(_f(92) & _f(80) => _f(66));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.46,(_f(91) & _f(71) => _f(65));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.45,(_f(90) & _f(71) => _f(63));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.44,(_f(90) & _f(71) => _f(62));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.43,(_f(89) & _f(73) => _f(69));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.42,(_f(87) & _f(73) => _f(67));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.41,(_f(87) & _f(73) => _f(66));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.40,(_f(88) & _f(71) => _f(65));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.39,(_f(87) & _f(71) => _f(63));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.38,(_f(87) & _f(71) => _f(62));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.37,(_f(86) & _f(52) => _f(60));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.36,(_f(85) & _f(43) => _f(61));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.35,(_f(85) & _f(52) => _f(60));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.34,(_f(84) & _f(80) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.33,(_f(83) & _f(80) => _f(67));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.32,(_f(83) & _f(80) => _f(66));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.31,(_f(83) & _f(52) => _f(60));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.30,(_f(81) & _f(80) => _f(82));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.29,(_f(79) & _f(80) => _f(67));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.28,(_f(79) & _f(80) => _f(66));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.27,(_f(79) & _f(43) => _f(61));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.26,(_f(79) & _f(52) => _f(60));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.25,(_f(78) & _f(71) => _f(65));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.24,(_f(77) & _f(71) => _f(63));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.23,(_f(77) & _f(71) => _f(62));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.22,(_f(77) & _f(52) => _f(60));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.21,(_f(76) & _f(71) => _f(65));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.20,(_f(75) & _f(71) => _f(63));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.19,(_f(75) & _f(71) => _f(62));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.18,(_f(75) & _f(43) => _f(61));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.17,(_f(75) & _f(52) => _f(60));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.16,(_f(74) & _f(73) => _f(69));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.15,(_f(70) & _f(73) => _f(67));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.14,(_f(70) & _f(73) => _f(66));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.13,(_f(72) & _f(71) => _f(65));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.12,(_f(70) & _f(71) => _f(63));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.11,(_f(70) & _f(71) => _f(62));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.10,(_f(70) & _f(52) => _f(60));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.9,(_f(68) & _f(16) => _f(69));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.8,(_f(59) & _f(16) => _f(67));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.7,(_f(59) & _f(16) => _f(66));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.6,(_f(64) & _f(16) => _f(65));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.5,(_f(59) & _f(16) => _f(63));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.4,(_f(59) & _f(16) => _f(62));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.3,(_f(59) & _f(43) => _f(61));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.2,(_f(59) & _f(16) => _f(60));
  _f(1) & _f(2) & _f(3) & _f(56) & xTaskResumeAll.1,(_f(57) & _f(13) => _f(58));
  _f(1) & _f(2) & _f(3) & _f(53) & beforeResumeAll.1,(_f(54) & _f(13) => _f(55));
  _f(1) & _f(2) & _f(3) & _f(45) & vTaskResume.7,(_f(51) & _f(33) => _f(50));
  _f(1) & _f(2) & _f(3) & _f(45) & vTaskResume.6,(_f(51) & _f(31) => _f(49));
  _f(1) & _f(2) & _f(3) & _f(45) & vTaskResume.5,(_f(51) & _f(52) => _f(47));
  _f(1) & _f(2) & _f(3) & _f(45) & vTaskResume.4,(_f(46) & _f(33) => _f(50));
  _f(1) & _f(2) & _f(3) & _f(45) & vTaskResume.3,(_f(46) & _f(31) => _f(49));
  _f(1) & _f(2) & _f(3) & _f(45) & vTaskResume.2,(_f(46) & _f(43) => _f(48));
  _f(1) & _f(2) & _f(3) & _f(45) & vTaskResume.1,(_f(46) & _f(16) => _f(47));
  _f(1) & _f(2) & _f(3) & _f(41) & vTaskPrioritySet.1,(_f(42) & _f(43) => _f(44));
  _f(1) & _f(2) & _f(3) & _f(26) & vTaskDelete.19,(_f(40) & _f(33) => _f(34));
  _f(1) & _f(2) & _f(3) & _f(26) & vTaskDelete.18,(_f(40) & _f(31) => _f(32));
  _f(1) & _f(2) & _f(3) & _f(26) & vTaskDelete.17,(_f(39) & _f(33) => _f(34));
  _f(1) & _f(2) & _f(3) & _f(26) & vTaskDelete.16,(_f(39) & _f(31) => _f(32));
  _f(1) & _f(2) & _f(3) & _f(26) & vTaskDelete.15,(_f(38) & _f(33) => _f(34));
  _f(1) & _f(2) & _f(3) & _f(26) & vTaskDelete.14,(_f(38) & _f(31) => _f(32));
  _f(1) & _f(2) & _f(3) & _f(26) & vTaskDelete.13,(_f(37) & _f(33) => _f(34));
  _f(1) & _f(2) & _f(3) & _f(26) & vTaskDelete.12,(_f(37) & _f(31) => _f(32));
  _f(1) & _f(2) & _f(3) & _f(26) & vTaskDelete.11,(_f(36) & _f(33) => _f(34));
  _f(1) & _f(2) & _f(3) & _f(26) & vTaskDelete.10,(_f(36) & _f(31) => _f(32));
  _f(1) & _f(2) & _f(3) & _f(26) & vTaskDelete.9,(_f(36) & _f(28) => _f(29));
  _f(1) & _f(2) & _f(3) & _f(26) & vTaskDelete.8,(_f(35) & _f(33) => _f(34));
  _f(1) & _f(2) & _f(3) & _f(26) & vTaskDelete.7,(_f(35) & _f(31) => _f(32));
  _f(1) & _f(2) & _f(3) & _f(26) & vTaskDelete.6,(_f(35) & _f(28) => _f(29));
  _f(1) & _f(2) & _f(3) & _f(26) & vTaskDelete.5,(_f(27) & _f(33) => _f(34));
  _f(1) & _f(2) & _f(3) & _f(26) & vTaskDelete.4,(_f(27) & _f(31) => _f(32));
  _f(1) & _f(2) & _f(3) & _f(26) & vTaskDelete.3,(_f(27) & _f(19) => _f(30));
  _f(1) & _f(2) & _f(3) & _f(26) & vTaskDelete.2,(_f(27) & _f(19) => _f(20));
  _f(1) & _f(2) & _f(3) & _f(26) & vTaskDelete.1,(_f(27) & _f(28) => _f(29));
  _f(1) & _f(2) & _f(3) & _f(22) & vTaskDelayUntil.4,(_f(25) & _f(19) => _f(21));
  _f(1) & _f(2) & _f(3) & _f(22) & vTaskDelayUntil.3,(_f(25) & _f(19) => _f(20));
  _f(1) & _f(2) & _f(3) & _f(22) & vTaskDelayUntil.2,(_f(25) & _f(16) => _f(18));
  _f(1) & _f(2) & _f(3) & _f(22) & vTaskDelayUntil.1,(_f(23) & _f(13) => _f(24));
  _f(1) & _f(2) & _f(3) & _f(11) & vTaskDelay.5,(_f(15) & _f(19) => _f(21));
  _f(1) & _f(2) & _f(3) & _f(11) & vTaskDelay.4,(_f(15) & _f(19) => _f(20));
  _f(1) & _f(2) & _f(3) & _f(11) & vTaskDelay.3,(_f(15) & _f(16) => _f(18));
  _f(1) & _f(2) & _f(3) & _f(11) & vTaskDelay.2,(_f(15) & _f(16) => _f(17));
  _f(1) & _f(2) & _f(3) & _f(11) & vTaskDelay.1,(_f(12) & _f(13) => _f(14));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.2,(_f(8) & _f(9) => _f(10));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.1,(_f(5) & _f(6) => _f(7))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & BIT = 0..1 & MAX_DELAY: 0..2147483647 & 1<=MAX_DELAY & NULL_PARAMETER: PARAMETER & PRIORITY: POW(NAT) & TICK: POW(NAT) & TICK = 0..MAX_DELAY & TICK_INCREMENT: TICK*TICK +-> TICK & dom(TICK_INCREMENT) = TICK*TICK & TICK_INCREMENT = %(tick,inc).(tick: TICK & inc: TICK | (tick+inc) mod MAX_DELAY) & QUEUE_NULL: QUEUE & ITEM_NULL: ITEM & ITEM_EMPTY: ITEM & TASK_NULL: TASK & REMOVE_EVENT: TASK*POW(QUEUE)*(QUEUE +-> POW(TASK)) +-> (QUEUE +-> POW(TASK)) & REMOVE_EVENT = %(task,queues,pending).(task: TASK & queues: POW(QUEUE) & pending: QUEUE +-> POW(TASK) | %queue.(queue: queues & queue: dom(pending) | pending(queue)-{task})) & semGIVE_BLOCK_TIME: TICK & IDLE_PRIORITY: PRIORITY & IDLE_PRIORITY = 0 & QUEUE_LENGTH: POW(NAT) & QUEUE_LENGTH = 1..2147483647 & QUEUE_QUANT: POW(NAT) & QUEUE_QUANT = 0..2147483647 & NAME: FIN(INTEGER) & not(NAME = {}) & PARAMETER: FIN(INTEGER) & not(PARAMETER = {}) & TASK: FIN(INTEGER) & not(TASK = {}) & STACK: FIN(INTEGER) & not(STACK = {}) & TASK_CODE: FIN(INTEGER) & not(TASK_CODE = {}) & ITEM: FIN(INTEGER) & not(ITEM = {}) & QUEUE: FIN(INTEGER) & not(QUEUE = {}) & (1..3)*{SCHEDULER_STATE}: FIN(NATURAL*{SCHEDULER_STATE}) & not((1..3)*{SCHEDULER_STATE} = {}) & (1..2)*{COPY_POSITION}: FIN(NATURAL*{COPY_POSITION}) & not((1..2)*{COPY_POSITION} = {}) & (1..3)*{QUEUE_TYPE}: FIN(NATURAL*{QUEUE_TYPE}) & not((1..3)*{QUEUE_TYPE} = {}) & (1..10)*{ERROR_DEFINITION}: FIN(NATURAL*{ERROR_DEFINITION}) & not((1..10)*{ERROR_DEFINITION} = {}) & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES & configMAX_PRIORITIES<=2147483647 & 1<=configMAX_PRIORITIES & configTOTAL_HEAP_SIZE: INTEGER & 0<=configTOTAL_HEAP_SIZE & configTOTAL_HEAP_SIZE<=2147483647 & configMINIMAL_STACK_SIZE: INTEGER & 0<=configMINIMAL_STACK_SIZE & configMINIMAL_STACK_SIZE<=2147483647 & INCLUDE_uxTaskPriorityGet: BIT & INCLUDE_vTaskDelete: BIT & INCLUDE_vTaskSuspend: BIT & INCLUDE_xTaskGetSchedulerState: BIT & INCLUDE_vTaskPrioritySet: BIT & INCLUDE_xTaskGetCurrentTaskHandle: BIT & INCLUDE_vTaskDelayUntil: BIT & INCLUDE_vTaskDelay: BIT & PRIORITY = 0..configMAX_PRIORITIES-1 & "`Previous components properties'" & remove_task: (QUEUE +-> POW(TASK))*POW(TASK) +-> (QUEUE +-> POW(TASK)) & dom(remove_task) = (QUEUE +-> POW(TASK))*POW(TASK) & remove_task = %(q_task,unblocked).(q_task: QUEUE +-> POW(TASK) & unblocked: POW(TASK) | %q1.(q1: QUEUE & q1: dom(q_task) | q_task(q1)-unblocked)) & update_first: (QUEUE +-> POW(TASK))*POW(TASK) +-> (QUEUE +-> TASK) & dom(update_first) = (QUEUE +-> POW(TASK))*POW(TASK) & update_first = %(q_task,unblocked).(q_task: QUEUE +-> POW(TASK) & unblocked: POW(TASK) | SET(q1,task).(q1: QUEUE & q1: dom(q_task) & not(q_task(q1): POW(unblocked)) & task: TASK & (task: q_task(q1) & not(task: unblocked)))));
  ("`Included,imported and extended machines properties'" & remove_task: (QUEUE +-> POW(TASK))*POW(TASK) +-> (QUEUE +-> POW(TASK)) & dom(remove_task) = (QUEUE +-> POW(TASK))*POW(TASK) & remove_task = %(q_task,unblocked).(q_task: QUEUE +-> POW(TASK) & unblocked: POW(TASK) | %q1.(q1: QUEUE & q1: dom(q_task) | q_task(q1)-unblocked)) & update_first: (QUEUE +-> POW(TASK))*POW(TASK) +-> (QUEUE +-> TASK) & dom(update_first) = (QUEUE +-> POW(TASK))*POW(TASK) & update_first = %(q_task,unblocked).(q_task: QUEUE +-> POW(TASK) & unblocked: POW(TASK) | SET(q1,task).(q1: QUEUE & q1: dom(q_task) & not(q_task(q1): POW(unblocked)) & task: TASK & (task: q_task(q1) & not(task: unblocked)))) & "`Included,imported and extended machines invariants'" & active$1: BOOL & tasks$1: FIN(TASK) & blocked$1: FIN(TASK) & blocked$1: POW(tasks$1) & unblocked$1: FIN(TASK) & unblocked$1: POW(blocked$1) & runable$1: FIN(TASK) & runable$1: POW(tasks$1) & suspended$1: FIN(TASK) & suspended$1: POW(tasks$1) & runable$1/\blocked$1 = {} & blocked$1/\suspended$1 = {} & suspended$1/\runable$1 = {} & tasks$1 = suspended$1\/blocked$1\/runable$1 & running$1: TASK & idle$1: TASK & (active$1 = TRUE => not(runable$1 = {}) & running$1: runable$1 & idle$1: runable$1 & not(TASK_NULL: tasks$1)) & queues$1: POW(QUEUE) & queue_receiving$1: QUEUE +-> POW(TASK) & queue_sending$1: QUEUE +-> POW(TASK) & queues$1 = dom(queue_receiving$1) & queues$1 = dom(queue_sending$1) & first_receiving$1: QUEUE +-> TASK & first_sending$1: QUEUE +-> TASK & dom(first_receiving$1) = dom(queue_receiving$1) & dom(first_sending$1) = dom(queue_sending$1) & !q1.(q1: queues$1 & q1: dom(first_receiving$1) & not(queue_receiving$1(q1) = {}) => first_receiving$1(q1): queue_receiving$1(q1)) & !q1.(q1: queues$1 & q1: dom(first_sending$1) & not(queue_sending$1(q1) = {}) => first_sending$1(q1): queue_sending$1(q1)) & queues_msg$1: POW(queues$1) & queues_msg_full$1: POW(queues_msg$1) & queues_msg_empty$1: POW(queues_msg$1) & queues_msg_full$1/\queues_msg_empty$1 = {} & queue_items$1: QUEUE +-> POW(ITEM) & queues_msg$1 = dom(queue_items$1) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: queue_receiving$1(q1) => not(tk: queue_receiving$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: queue_sending$1(q1) => not(tk: queue_sending$1(q2))) & semaphores$1: POW(QUEUE) & semaphores$1: POW(queues$1) & semaphores_busy$1: POW(semaphores$1) & semaphores_full$1: POW(semaphores$1) & semaphores_busy$1/\semaphores_full$1 = {} & mutexes$1: POW(queues$1) & mutex_holder$1: QUEUE +-> TASK & mutexes$1 = dom(mutex_holder$1) & mutexes_busy$1: POW(mutexes$1) & !mt.(mt: mutexes_busy$1 => not(mutex_holder$1(mt) = TASK_NULL)) & !mt.(mt: mutexes$1 & not(mt: mutexes_busy$1) => mutex_holder$1(mt) = TASK_NULL) & queues_msg$1/\semaphores$1 = {} & queues_msg$1/\mutexes$1 = {} & mutexes$1/\semaphores$1 = {} & "`Included,imported and extended machines assertions'" & (active$1 = TRUE => not(running$1: suspended$1)) & (active$1 = TRUE => not(running$1: blocked$1)) & (active$1 = TRUE => running$1: runable$1) & (active$1 = TRUE => not(idle$1 = TASK_NULL)) & (active$1 = TRUE => not(idle$1: suspended$1)) & (active$1 = TRUE => not(idle$1: blocked$1)) & (active$1 = TRUE => idle$1: runable$1) & (active$1 = TRUE => not(tasks$1 = {})) & (active$1 = TRUE => not(runable$1 = {})) & !que.(que: QUEUE & not(que: queues$1) => not(que: mutexes$1)) & !que.(que: QUEUE & not(que: queues$1) => not(que: semaphores$1)) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1)) & "`Seen and used machines assertions'" & BIT: POW(NATURAL) & QUEUE_LENGTH: POW(QUEUE_QUANT) & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES);
  ("`Previous components invariants'" & tickCount$1: TICK & tickMissed$1: TICK & !que.(que: queues$1 => queue_sending$1(que): POW(blocked$1\/suspended$1)) & !que.(que: queues$1 => queue_receiving$1(que): POW(blocked$1\/suspended$1)) & ran(mutex_holder$1): POW(tasks$1\/{TASK_NULL}) & !mt.(mt: mutexes$1 => queue_sending$1(mt) = {}) & (active$1 = TRUE => not(idle$1: ran(mutex_holder$1)) & !mt.(mt: mutexes_busy$1 => mutex_holder$1(mt): tasks$1) & !mt.(mt: mutexes$1 & not(mt: mutexes_busy$1) => not(mutex_holder$1(mt): tasks$1))) & active$1: BOOL & tasks$1: FIN(TASK) & blocked$1: FIN(TASK) & blocked$1: POW(tasks$1) & unblocked$1: FIN(TASK) & unblocked$1: POW(blocked$1) & runable$1: FIN(TASK) & runable$1: POW(tasks$1) & suspended$1: FIN(TASK) & suspended$1: POW(tasks$1) & runable$1/\blocked$1 = {} & blocked$1/\suspended$1 = {} & suspended$1/\runable$1 = {} & tasks$1 = suspended$1\/blocked$1\/runable$1 & running$1: TASK & idle$1: TASK & (active$1 = TRUE => not(runable$1 = {}) & running$1: runable$1 & idle$1: runable$1 & not(TASK_NULL: tasks$1)) & queues$1: POW(QUEUE) & queue_receiving$1: QUEUE +-> POW(TASK) & queue_sending$1: QUEUE +-> POW(TASK) & queues$1 = dom(queue_receiving$1) & queues$1 = dom(queue_sending$1) & first_receiving$1: QUEUE +-> TASK & first_sending$1: QUEUE +-> TASK & dom(first_receiving$1) = dom(queue_receiving$1) & dom(first_sending$1) = dom(queue_sending$1) & !q1.(q1: queues$1 & q1: dom(first_receiving$1) & not(queue_receiving$1(q1) = {}) => first_receiving$1(q1): queue_receiving$1(q1)) & !q1.(q1: queues$1 & q1: dom(first_sending$1) & not(queue_sending$1(q1) = {}) => first_sending$1(q1): queue_sending$1(q1)) & queues_msg$1: POW(queues$1) & queues_msg_full$1: POW(queues_msg$1) & queues_msg_empty$1: POW(queues_msg$1) & queues_msg_full$1/\queues_msg_empty$1 = {} & queue_items$1: QUEUE +-> POW(ITEM) & queues_msg$1 = dom(queue_items$1) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: queue_receiving$1(q1) => not(tk: queue_receiving$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: queue_sending$1(q1) => not(tk: queue_sending$1(q2))) & semaphores$1: POW(QUEUE) & semaphores$1: POW(queues$1) & semaphores_busy$1: POW(semaphores$1) & semaphores_full$1: POW(semaphores$1) & semaphores_busy$1/\semaphores_full$1 = {} & mutexes$1: POW(queues$1) & mutex_holder$1: QUEUE +-> TASK & mutexes$1 = dom(mutex_holder$1) & mutexes_busy$1: POW(mutexes$1) & !mt.(mt: mutexes_busy$1 => not(mutex_holder$1(mt) = TASK_NULL)) & !mt.(mt: mutexes$1 & not(mt: mutexes_busy$1) => mutex_holder$1(mt) = TASK_NULL) & queues_msg$1/\semaphores$1 = {} & queues_msg$1/\mutexes$1 = {} & mutexes$1/\semaphores$1 = {} & "`Previous components assertions'" & (active$1 = TRUE => !mt.(mt: mutexes_busy$1 => not(mutex_holder$1(mt) = idle$1))) & !(que,task).(que: queues$1 & task: TASK & not(task: blocked$1) & not(task: suspended$1) => not(task: queue_sending$1(que))) & !(que,task).(que: queues$1 & task: TASK & not(task: blocked$1) & not(task: suspended$1) => not(task: queue_receiving$1(que))) & !(que,task).(que: queues$1 & task: tasks$1 & task: queue_sending$1(que) => task: blocked$1\/suspended$1) & !(que,task).(que: queues$1 & task: tasks$1 & task: queue_receiving$1(que) => task: blocked$1\/suspended$1) & (active$1 = TRUE => not(running$1: suspended$1)) & (active$1 = TRUE => not(running$1: blocked$1)) & (active$1 = TRUE => running$1: runable$1) & (active$1 = TRUE => not(idle$1 = TASK_NULL)) & (active$1 = TRUE => not(idle$1: suspended$1)) & (active$1 = TRUE => not(idle$1: blocked$1)) & (active$1 = TRUE => idle$1: runable$1) & (active$1 = TRUE => not(tasks$1 = {})) & (active$1 = TRUE => not(runable$1 = {})) & !que.(que: QUEUE & not(que: queues$1) => not(que: mutexes$1)) & !que.(que: QUEUE & not(que: queues$1) => not(que: semaphores$1)) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1)) & "`Component invariant'" & queues = queues$1 & queues_msg = queues_msg$1 & queues_msg_full = queues_msg_full$1 & queues_msg_empty = queues_msg_empty$1 & semaphores = semaphores$1 & semaphores_busy = semaphores_busy$1 & semaphores_full = semaphores_full$1 & mutexes = mutexes$1 & mutexes_busy = mutexes_busy$1 & queue_items = queue_items$1 & queue_receiving = queue_receiving$1 & queue_sending = queue_sending$1 & mutex_holder = mutex_holder$1 & first_sending = first_sending$1 & first_receiving = first_receiving$1 & active = active$1 & tasks = tasks$1 & blocked = blocked$1 & runable = runable$1 & suspended = suspended$1 & running = running$1 & idle = idle$1 & unblocked = unblocked$1 & tickCount = tickCount$1 & tickMissed = tickMissed$1);
  ("`xTaskCreate preconditions in previous components'" & pvTaskCode: TASK_CODE & pcName: NAME & usStackDepth: INTEGER & 0<=usStackDepth & usStackDepth<=2147483647 & pvParameters: POW(PARAMETER) & uxPriority: PRIORITY);
  ("`xTaskCreate preconditions in this component'" & pvTaskCode: TASK_CODE & pcName: NAME & usStackDepth: INTEGER & 0<=usStackDepth & usStackDepth<=2147483647 & pvParameters: POW(PARAMETER) & uxPriority: PRIORITY & "`Local hypotheses'" & task: TASK & not(task: tasks$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{task} & not(task = TASK_NULL) & tasks$1\/{task}: FIN(TASK) & blocked$1: POW(tasks$1\/{task}) & n_runable: FIN(TASK) & n_runable: POW(tasks$1\/{task}) & suspended$1: POW(tasks$1\/{task}) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & tasks$1\/{task} = suspended$1\/blocked$1\/n_runable & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})));
  "`Check that the invariant (tasks = tasks$1 & runable = runable$1 & handle$1 = handle & result$1 = result & runable = runable$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(task$0,n_runable$0).(task$0: TASK & not(task$0: tasks$1) & n_runable$0: POW(tasks$1) & n_runable$0 = runable$1\/{task$0} & not(task$0 = TASK_NULL) & (tasks$1\/{task} = tasks$1\/{task$0} & n_runable = n_runable$0 & task = task$0)) or (7|->ERROR_DEFINITION = 1|->ERROR_DEFINITION & task = TASK_NULL & (task: tasks$1 & n_runable = runable$1)));
  ("`xTaskCreate preconditions in this component'" & pvTaskCode: TASK_CODE & pcName: NAME & usStackDepth: INTEGER & 0<=usStackDepth & usStackDepth<=2147483647 & pvParameters: POW(PARAMETER) & uxPriority: PRIORITY & "`Local hypotheses'" & task: TASK & not(task: tasks$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{task} & not(task = TASK_NULL) & running$2: n_runable & tasks$1\/{task}: FIN(TASK) & blocked$1: POW(tasks$1\/{task}) & n_runable: FIN(TASK) & n_runable: POW(tasks$1\/{task}) & suspended$1: POW(tasks$1\/{task}) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & tasks$1\/{task} = suspended$1\/blocked$1\/n_runable & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})));
  "`Check that the invariant (tasks = tasks$1 & runable = runable$1 & running = running$1 & handle$1 = handle & result$1 = result & running = running$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(task$0,n_runable$0).(task$0: TASK & not(task$0: tasks$1) & n_runable$0: POW(tasks$1) & n_runable$0 = runable$1\/{task$0} & not(task$0 = TASK_NULL) & (tasks$1\/{task} = tasks$1\/{task$0} & n_runable = n_runable$0 & (running$2 = running$1 or #(running$0).(running$0: n_runable$0 & running$2 = running$0)) & task = task$0)) or (7|->ERROR_DEFINITION = 1|->ERROR_DEFINITION & task = TASK_NULL & (task: tasks$1 & n_runable = runable$1 & running$2 = running$1)));
  ("`vTaskDelay preconditions in previous components'" & xTicksToDelay: TICK & INCLUDE_vTaskDelay = 1 & not(running$1 = idle$1) & running$1: runable$1);
  ("`vTaskDelay preconditions in this component'" & xTicksToDelay: TICK & INCLUDE_vTaskDelay = 1 & not(running$1 = idle$1) & running$1: runable$1 & "`Local hypotheses'" & 1<=xTicksToDelay);
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (TICK_INCREMENT(tickCount$1,xTicksToDelay): TICK);
  ("`vTaskDelay preconditions in this component'" & xTicksToDelay: TICK & INCLUDE_vTaskDelay = 1 & not(running$1 = idle$1) & running$1: runable$1 & "`Local hypotheses'" & 1<=xTicksToDelay & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & running$2: n_runable & blocked$1\/{running$1}: FIN(TASK) & running$1: tasks$1 & unblocked$1: POW(blocked$1\/{running$1}) & n_runable: FIN(TASK) & not(running$1: n_runable) & n_runable/\blocked$1 = {} & blocked$1\/{running$1}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1) & not(running$2 = running$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (1<=xTicksToDelay => !tickWakeup.(tickWakeup: TICK => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & tickWakeup: TICK)) & (not(1<=xTicksToDelay) & active$1 = TRUE => active$1 = TRUE) & tasks$1 = suspended$1\/(blocked$1\/{running$1})\/n_runable);
  "`Check operation refinement - ref 4.4, 5.5'";
  (#tickWakeup.(tickWakeup: TICK));
  (runable$1-{running$1}: POW(tasks$1));
  "`Check that the invariant (runable = runable$1) is preserved by the operation - ref 4.4, 5.5'";
  (running$2: runable$1);
  (not(running$2 = running$1));
  ("`vTaskDelayUntil preconditions in previous components'" & pxPreviousWakeTime: TICK & xTimeIncrement: TICK & not(running$1 = idle$1) & INCLUDE_vTaskDelayUntil = 1 & running$1: runable$1);
  ("`vTaskDelayUntil preconditions in this component'" & pxPreviousWakeTime: TICK & xTimeIncrement: TICK & not(running$1 = idle$1) & INCLUDE_vTaskDelayUntil = 1 & running$1: runable$1 & "`Local hypotheses'" & 1<=xTimeIncrement);
  (TICK_INCREMENT(pxPreviousWakeTime,xTimeIncrement): TICK);
  ("`vTaskDelayUntil preconditions in this component'" & pxPreviousWakeTime: TICK & xTimeIncrement: TICK & not(running$1 = idle$1) & INCLUDE_vTaskDelayUntil = 1 & running$1: runable$1 & "`Local hypotheses'" & 1<=xTimeIncrement & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & running$2: n_runable & blocked$1\/{running$1}: FIN(TASK) & running$1: tasks$1 & unblocked$1: POW(blocked$1\/{running$1}) & n_runable: FIN(TASK) & not(running$1: n_runable) & n_runable/\blocked$1 = {} & blocked$1\/{running$1}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1) & not(running$2 = running$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (1<=xTimeIncrement => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & TICK_INCREMENT(pxPreviousWakeTime,xTimeIncrement): TICK) & (not(1<=xTimeIncrement) & active$1 = TRUE => active$1 = TRUE) & tasks$1 = suspended$1\/(blocked$1\/{running$1})\/n_runable);
  ("`vTaskDelete preconditions in previous components'" & INCLUDE_vTaskDelete = 1 & pxTaskToDelete: TASK & pxTaskToDelete: tasks$1 & not(pxTaskToDelete = idle$1) & not(pxTaskToDelete: ran(mutex_holder$1)));
  ("`vTaskDelete preconditions in this component'" & INCLUDE_vTaskDelete = 1 & pxTaskToDelete: TASK & pxTaskToDelete: tasks$1 & not(pxTaskToDelete = idle$1) & not(pxTaskToDelete: ran(mutex_holder$1)) & "`Local hypotheses'" & pxQueue: queues$1 & pxTaskToDelete: queue_receiving$1(pxQueue) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: TASK & n_first: queue_receiving$1(pxQueue) & pxQueue$0: queues$1 & n_sending: POW(TASK) & n_first$0: TASK & pxTaskToDelete: queue_sending$1(pxQueue$0) & n_sending = queue_sending$1(pxQueue$0)-{first_sending$1(pxQueue$0)} & pxTaskToDelete: runable$1 & n_runable: POW(tasks$1) & n_runable = runable$1-{pxTaskToDelete} & pxTaskToDelete = running$1 & running$2: n_runable & n_first$0 = first_sending$1(pxQueue$0) & active$1 = TRUE & tasks$1-{pxTaskToDelete}: FIN(TASK) & blocked$1: POW(tasks$1-{pxTaskToDelete}) & n_runable: FIN(TASK) & n_runable: POW(tasks$1-{pxTaskToDelete}) & suspended$1: POW(tasks$1-{pxTaskToDelete}) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & tasks$1-{pxTaskToDelete} = suspended$1\/blocked$1\/n_runable & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1 & not(TASK_NULL = pxTaskToDelete))) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & queue_sending$1<+{pxQueue$0|->n_sending}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & first_sending$1<+{pxQueue$0|->n_first$0}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & dom(first_sending$1<+{pxQueue$0|->n_first$0}) = dom(queue_sending$1<+{pxQueue$0|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue$0|->n_first$0}) & not((queue_sending$1<+{pxQueue$0|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue$0|->n_first$0})(q1): (queue_sending$1<+{pxQueue$0|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(tasks$1 = {}) & not(tasks$1 = {pxTaskToDelete})) & (active$1 = TRUE => not(n_runable = {})) & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues$1 = dom(queue_sending$1<+{pxQueue$0|->n_sending}));
  "`Check that the invariant (blocked = blocked$1) is preserved by the operation - ref 4.4, 5.5'";
  (runable$1-{pxTaskToDelete}: POW(tasks$1));
  (not(running$2 = pxTaskToDelete));
  "`Check that the invariant (queue_receiving = queue_receiving$1 & first_receiving = first_receiving$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(pxQueue$0,n_first$0).(pxQueue$0: queues$1 & pxTaskToDelete: queue_receiving$1(pxQueue$0) & queue_receiving$1(pxQueue$0)-{first_receiving$1(pxQueue$0)}: POW(TASK) & n_first$0: TASK & n_first$0: queue_receiving$1(pxQueue$0) & queue_receiving$1<+{pxQueue|->n_receiving} = queue_receiving$1<+{pxQueue$0|->queue_receiving$1(pxQueue$0)-{first_receiving$1(pxQueue$0)}} & first_receiving$1<+{pxQueue|->n_first} = first_receiving$1<+{pxQueue$0|->n_first$0}));
  "`Check that the invariant (queue_sending = queue_sending$1 & first_sending = first_sending$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(pxQueue$1).(pxQueue$1: queues$1 & queue_sending$1(pxQueue$1)-{first_sending$1(pxQueue$1)}: POW(TASK) & first_sending$1(pxQueue$1): TASK & pxTaskToDelete: queue_sending$1(pxQueue$1) & queue_sending$1<+{pxQueue$0|->n_sending} = queue_sending$1<+{pxQueue$1|->queue_sending$1(pxQueue$1)-{first_sending$1(pxQueue$1)}} & first_sending$1<+{pxQueue$0|->n_first$0} = first_sending$1<+{pxQueue$1|->first_sending$1(pxQueue$1)}));
  ("`vTaskDelete preconditions in this component'" & INCLUDE_vTaskDelete = 1 & pxTaskToDelete: TASK & pxTaskToDelete: tasks$1 & not(pxTaskToDelete = idle$1) & not(pxTaskToDelete: ran(mutex_holder$1)) & "`Local hypotheses'" & pxQueue: queues$1 & pxTaskToDelete: queue_receiving$1(pxQueue) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: TASK & n_first: queue_receiving$1(pxQueue) & pxQueue$0: queues$1 & n_sending: POW(TASK) & n_first$0: TASK & pxTaskToDelete: queue_sending$1(pxQueue$0) & n_sending = queue_sending$1(pxQueue$0)-{first_sending$1(pxQueue$0)} & pxTaskToDelete: runable$1 & n_runable: POW(tasks$1) & n_runable = runable$1-{pxTaskToDelete} & pxTaskToDelete = running$1 & not(active$1 = TRUE) & n_first$0 = first_sending$1(pxQueue$0) & tasks$1-{pxTaskToDelete}: FIN(TASK) & blocked$1: POW(tasks$1-{pxTaskToDelete}) & n_runable: FIN(TASK) & n_runable: POW(tasks$1-{pxTaskToDelete}) & suspended$1: POW(tasks$1-{pxTaskToDelete}) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & tasks$1-{pxTaskToDelete} = suspended$1\/blocked$1\/n_runable & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1 & not(TASK_NULL = pxTaskToDelete))) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & queue_sending$1<+{pxQueue$0|->n_sending}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & first_sending$1<+{pxQueue$0|->n_first$0}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & dom(first_sending$1<+{pxQueue$0|->n_first$0}) = dom(queue_sending$1<+{pxQueue$0|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue$0|->n_first$0}) & not((queue_sending$1<+{pxQueue$0|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue$0|->n_first$0})(q1): (queue_sending$1<+{pxQueue$0|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(tasks$1 = {}) & not(tasks$1 = {pxTaskToDelete})) & (active$1 = TRUE => not(n_runable = {})) & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues$1 = dom(queue_sending$1<+{pxQueue$0|->n_sending}));
  ("`vTaskDelete preconditions in this component'" & INCLUDE_vTaskDelete = 1 & pxTaskToDelete: TASK & pxTaskToDelete: tasks$1 & not(pxTaskToDelete = idle$1) & not(pxTaskToDelete: ran(mutex_holder$1)) & "`Local hypotheses'" & pxQueue: queues$1 & pxTaskToDelete: queue_receiving$1(pxQueue) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: TASK & n_first: queue_receiving$1(pxQueue) & pxQueue$0: queues$1 & n_sending: POW(TASK) & n_first$0: TASK & pxTaskToDelete: queue_sending$1(pxQueue$0) & n_sending = queue_sending$1(pxQueue$0)-{first_sending$1(pxQueue$0)} & pxTaskToDelete: runable$1 & n_runable: POW(tasks$1) & n_runable = runable$1-{pxTaskToDelete} & not(pxTaskToDelete = running$1) & n_first$0 = first_sending$1(pxQueue$0) & tasks$1-{pxTaskToDelete}: FIN(TASK) & blocked$1: POW(tasks$1-{pxTaskToDelete}) & n_runable: FIN(TASK) & n_runable: POW(tasks$1-{pxTaskToDelete}) & suspended$1: POW(tasks$1-{pxTaskToDelete}) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & tasks$1-{pxTaskToDelete} = suspended$1\/blocked$1\/n_runable & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1 & not(TASK_NULL = pxTaskToDelete))) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & queue_sending$1<+{pxQueue$0|->n_sending}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & first_sending$1<+{pxQueue$0|->n_first$0}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & dom(first_sending$1<+{pxQueue$0|->n_first$0}) = dom(queue_sending$1<+{pxQueue$0|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue$0|->n_first$0}) & not((queue_sending$1<+{pxQueue$0|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue$0|->n_first$0})(q1): (queue_sending$1<+{pxQueue$0|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(tasks$1 = {}) & not(tasks$1 = {pxTaskToDelete})) & (active$1 = TRUE => not(n_runable = {})) & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues$1 = dom(queue_sending$1<+{pxQueue$0|->n_sending}));
  ("`vTaskDelete preconditions in this component'" & INCLUDE_vTaskDelete = 1 & pxTaskToDelete: TASK & pxTaskToDelete: tasks$1 & not(pxTaskToDelete = idle$1) & not(pxTaskToDelete: ran(mutex_holder$1)) & "`Local hypotheses'" & pxQueue: queues$1 & pxTaskToDelete: queue_receiving$1(pxQueue) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: TASK & n_first: queue_receiving$1(pxQueue) & pxQueue$0: queues$1 & n_sending: POW(TASK) & n_first$0: TASK & pxTaskToDelete: queue_sending$1(pxQueue$0) & n_sending = queue_sending$1(pxQueue$0)-{first_sending$1(pxQueue$0)} & not(pxTaskToDelete: runable$1) & pxTaskToDelete: blocked$1 & pxTaskToDelete: unblocked$1 & n_first$0 = first_sending$1(pxQueue$0) & tasks$1-{pxTaskToDelete}: FIN(TASK) & blocked$1-{pxTaskToDelete}: FIN(TASK) & blocked$1-{pxTaskToDelete}: POW(tasks$1-{pxTaskToDelete}) & unblocked$1-{pxTaskToDelete}: FIN(TASK) & unblocked$1-{pxTaskToDelete}: POW(blocked$1-{pxTaskToDelete}) & runable$1: POW(tasks$1-{pxTaskToDelete}) & suspended$1: POW(tasks$1-{pxTaskToDelete}) & runable$1/\blocked$1-{pxTaskToDelete} = {} & blocked$1-{pxTaskToDelete}/\suspended$1 = {} & tasks$1-{pxTaskToDelete} = suspended$1\/blocked$1-{pxTaskToDelete}\/runable$1 & (active$1 = TRUE => not(runable$1 = {}) & running$1: runable$1 & idle$1: runable$1 & not(TASK_NULL: tasks$1 & not(TASK_NULL = pxTaskToDelete))) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & queue_sending$1<+{pxQueue$0|->n_sending}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & first_sending$1<+{pxQueue$0|->n_first$0}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & dom(first_sending$1<+{pxQueue$0|->n_first$0}) = dom(queue_sending$1<+{pxQueue$0|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue$0|->n_first$0}) & not((queue_sending$1<+{pxQueue$0|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue$0|->n_first$0})(q1): (queue_sending$1<+{pxQueue$0|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = pxTaskToDelete))) & (active$1 = TRUE => not(tasks$1 = {}) & not(tasks$1 = {pxTaskToDelete})) & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues$1 = dom(queue_sending$1<+{pxQueue$0|->n_sending}));
  ("`vTaskDelete preconditions in this component'" & INCLUDE_vTaskDelete = 1 & pxTaskToDelete: TASK & pxTaskToDelete: tasks$1 & not(pxTaskToDelete = idle$1) & not(pxTaskToDelete: ran(mutex_holder$1)) & "`Local hypotheses'" & pxQueue: queues$1 & pxTaskToDelete: queue_receiving$1(pxQueue) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: TASK & n_first: queue_receiving$1(pxQueue) & pxQueue$0: queues$1 & n_sending: POW(TASK) & n_first$0: TASK & pxTaskToDelete: queue_sending$1(pxQueue$0) & n_sending = queue_sending$1(pxQueue$0)-{first_sending$1(pxQueue$0)} & not(pxTaskToDelete: runable$1) & pxTaskToDelete: blocked$1 & not(pxTaskToDelete: unblocked$1) & n_first$0 = first_sending$1(pxQueue$0) & tasks$1-{pxTaskToDelete}: FIN(TASK) & blocked$1-{pxTaskToDelete}: FIN(TASK) & blocked$1-{pxTaskToDelete}: POW(tasks$1-{pxTaskToDelete}) & unblocked$1: POW(blocked$1-{pxTaskToDelete}) & runable$1: POW(tasks$1-{pxTaskToDelete}) & suspended$1: POW(tasks$1-{pxTaskToDelete}) & runable$1/\blocked$1-{pxTaskToDelete} = {} & blocked$1-{pxTaskToDelete}/\suspended$1 = {} & tasks$1-{pxTaskToDelete} = suspended$1\/blocked$1-{pxTaskToDelete}\/runable$1 & (active$1 = TRUE => not(runable$1 = {}) & running$1: runable$1 & idle$1: runable$1 & not(TASK_NULL: tasks$1 & not(TASK_NULL = pxTaskToDelete))) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & queue_sending$1<+{pxQueue$0|->n_sending}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & first_sending$1<+{pxQueue$0|->n_first$0}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & dom(first_sending$1<+{pxQueue$0|->n_first$0}) = dom(queue_sending$1<+{pxQueue$0|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue$0|->n_first$0}) & not((queue_sending$1<+{pxQueue$0|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue$0|->n_first$0})(q1): (queue_sending$1<+{pxQueue$0|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = pxTaskToDelete))) & (active$1 = TRUE => not(tasks$1 = {}) & not(tasks$1 = {pxTaskToDelete})) & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues$1 = dom(queue_sending$1<+{pxQueue$0|->n_sending}));
  ("`vTaskDelete preconditions in this component'" & INCLUDE_vTaskDelete = 1 & pxTaskToDelete: TASK & pxTaskToDelete: tasks$1 & not(pxTaskToDelete = idle$1) & not(pxTaskToDelete: ran(mutex_holder$1)) & "`Local hypotheses'" & pxQueue: queues$1 & pxTaskToDelete: queue_receiving$1(pxQueue) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: TASK & n_first: queue_receiving$1(pxQueue) & pxQueue$0: queues$1 & n_sending: POW(TASK) & n_first$0: TASK & pxTaskToDelete: queue_sending$1(pxQueue$0) & n_sending = queue_sending$1(pxQueue$0)-{first_sending$1(pxQueue$0)} & not(pxTaskToDelete: runable$1) & not(pxTaskToDelete: blocked$1) & pxTaskToDelete: suspended$1 & n_first$0 = first_sending$1(pxQueue$0) & tasks$1-{pxTaskToDelete}: FIN(TASK) & blocked$1: POW(tasks$1-{pxTaskToDelete}) & runable$1: POW(tasks$1-{pxTaskToDelete}) & suspended$1-{pxTaskToDelete}: FIN(TASK) & suspended$1-{pxTaskToDelete}: POW(tasks$1-{pxTaskToDelete}) & blocked$1/\suspended$1-{pxTaskToDelete} = {} & suspended$1-{pxTaskToDelete}/\runable$1 = {} & tasks$1-{pxTaskToDelete} = suspended$1-{pxTaskToDelete}\/blocked$1\/runable$1 & (active$1 = TRUE => not(runable$1 = {}) & running$1: runable$1 & idle$1: runable$1 & not(TASK_NULL: tasks$1 & not(TASK_NULL = pxTaskToDelete))) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & queue_sending$1<+{pxQueue$0|->n_sending}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & first_sending$1<+{pxQueue$0|->n_first$0}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & dom(first_sending$1<+{pxQueue$0|->n_first$0}) = dom(queue_sending$1<+{pxQueue$0|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue$0|->n_first$0}) & not((queue_sending$1<+{pxQueue$0|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue$0|->n_first$0})(q1): (queue_sending$1<+{pxQueue$0|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = pxTaskToDelete))) & (active$1 = TRUE => not(tasks$1 = {}) & not(tasks$1 = {pxTaskToDelete})) & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues$1 = dom(queue_sending$1<+{pxQueue$0|->n_sending}));
  ("`vTaskDelete preconditions in this component'" & INCLUDE_vTaskDelete = 1 & pxTaskToDelete: TASK & pxTaskToDelete: tasks$1 & not(pxTaskToDelete = idle$1) & not(pxTaskToDelete: ran(mutex_holder$1)) & "`Local hypotheses'" & pxQueue: queues$1 & pxTaskToDelete: queue_receiving$1(pxQueue) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: TASK & n_first: queue_receiving$1(pxQueue) & pxQueue$0: queues$1 & n_sending: POW(TASK) & n_first$0: TASK & pxTaskToDelete: queue_sending$1(pxQueue$0) & n_sending = queue_sending$1(pxQueue$0)-{first_sending$1(pxQueue$0)} & not(pxTaskToDelete: runable$1) & not(pxTaskToDelete: blocked$1) & not(pxTaskToDelete: suspended$1) & n_first$0 = first_sending$1(pxQueue$0) & tasks$1-{pxTaskToDelete}: FIN(TASK) & blocked$1: POW(tasks$1-{pxTaskToDelete}) & runable$1: POW(tasks$1-{pxTaskToDelete}) & suspended$1: POW(tasks$1-{pxTaskToDelete}) & tasks$1-{pxTaskToDelete} = suspended$1\/blocked$1\/runable$1 & (active$1 = TRUE => not(runable$1 = {}) & running$1: runable$1 & idle$1: runable$1 & not(TASK_NULL: tasks$1 & not(TASK_NULL = pxTaskToDelete))) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & queue_sending$1<+{pxQueue$0|->n_sending}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & first_sending$1<+{pxQueue$0|->n_first$0}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & dom(first_sending$1<+{pxQueue$0|->n_first$0}) = dom(queue_sending$1<+{pxQueue$0|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue$0|->n_first$0}) & not((queue_sending$1<+{pxQueue$0|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue$0|->n_first$0})(q1): (queue_sending$1<+{pxQueue$0|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & (active$1 = TRUE => not(tasks$1 = {}) & not(tasks$1 = {pxTaskToDelete})) & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues$1 = dom(queue_sending$1<+{pxQueue$0|->n_sending}));
  ("`vTaskPrioritySet preconditions in previous components'" & pxTask: tasks$1 & uxNewPriority: PRIORITY & active$1 = TRUE & not(pxTask = idle$1));
  ("`vTaskPrioritySet preconditions in this component'" & pxTask: tasks$1 & uxNewPriority: PRIORITY & active$1 = TRUE & not(pxTask = idle$1) & "`Local hypotheses'" & running$2: runable$1 & running$2: TASK & (active$1 = TRUE => not(runable$1 = {}) & running$2: runable$1 & idle$1: runable$1 & not(TASK_NULL: tasks$1)) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: runable$1));
  "`Check that the invariant (running = running$1 & running = running$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(running$0).(running$0: runable$1 & running$2 = running$0) or running$2 = running$1);
  ("`vTaskResume preconditions in previous components'" & INCLUDE_vTaskSuspend = 1 & not(suspended$1 = {}) & pxTaskToResume: TASK & pxTaskToResume: suspended$1 & active$1 = TRUE);
  ("`vTaskResume preconditions in this component'" & INCLUDE_vTaskSuspend = 1 & not(suspended$1 = {}) & pxTaskToResume: TASK & pxTaskToResume: suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{pxTaskToResume} & pxQueue: queues$1 & pxTaskToResume: queue_receiving$1(pxQueue) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: TASK & n_first: queue_receiving$1(pxQueue) & pxQueue$0: queues$1 & n_sending: POW(TASK) & n_first$0: TASK & pxTaskToResume: queue_sending$1(pxQueue$0) & n_sending = queue_sending$1(pxQueue$0)-{first_sending$1(pxQueue$0)} & running$2: n_runable & n_first$0 = first_sending$1(pxQueue$0) & n_runable: FIN(TASK) & suspended$1-{pxTaskToResume}: FIN(TASK) & suspended$1-{pxTaskToResume}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{pxTaskToResume} = {} & suspended$1-{pxTaskToResume}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & queue_sending$1<+{pxQueue$0|->n_sending}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & first_sending$1<+{pxQueue$0|->n_first$0}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & dom(first_sending$1<+{pxQueue$0|->n_first$0}) = dom(queue_sending$1<+{pxQueue$0|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue$0|->n_first$0}) & not((queue_sending$1<+{pxQueue$0|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue$0|->n_first$0})(q1): (queue_sending$1<+{pxQueue$0|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = pxTaskToResume))) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = pxTaskToResume))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & tasks$1 = suspended$1-{pxTaskToResume}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues$1 = dom(queue_sending$1<+{pxQueue$0|->n_sending}));
  (pxTaskToResume: tasks$1);
  (#(running$0).(running$0: runable$1\/{pxTaskToResume} & running$2 = running$0) or running$2 = running$1);
  (#(pxQueue$0,n_first$0).(pxQueue$0: queues$1 & pxTaskToResume: queue_receiving$1(pxQueue$0) & queue_receiving$1(pxQueue$0)-{first_receiving$1(pxQueue$0)}: POW(TASK) & n_first$0: TASK & n_first$0: queue_receiving$1(pxQueue$0) & queue_receiving$1<+{pxQueue|->n_receiving} = queue_receiving$1<+{pxQueue$0|->queue_receiving$1(pxQueue$0)-{first_receiving$1(pxQueue$0)}} & first_receiving$1<+{pxQueue|->n_first} = first_receiving$1<+{pxQueue$0|->n_first$0}));
  (#(pxQueue$1).(pxQueue$1: queues$1 & queue_sending$1(pxQueue$1)-{first_sending$1(pxQueue$1)}: POW(TASK) & first_sending$1(pxQueue$1): TASK & pxTaskToResume: queue_sending$1(pxQueue$1) & queue_sending$1<+{pxQueue$0|->n_sending} = queue_sending$1<+{pxQueue$1|->queue_sending$1(pxQueue$1)-{first_sending$1(pxQueue$1)}} & first_sending$1<+{pxQueue$0|->n_first$0} = first_sending$1<+{pxQueue$1|->first_sending$1(pxQueue$1)}));
  ("`vTaskResume preconditions in this component'" & INCLUDE_vTaskSuspend = 1 & not(suspended$1 = {}) & pxTaskToResume: TASK & pxTaskToResume: suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{pxTaskToResume} & pxQueue: queues$1 & pxTaskToResume: queue_receiving$1(pxQueue) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: TASK & n_first: queue_receiving$1(pxQueue) & pxQueue$0: queues$1 & n_sending: POW(TASK) & n_first$0: TASK & pxTaskToResume: queue_sending$1(pxQueue$0) & n_sending = queue_sending$1(pxQueue$0)-{first_sending$1(pxQueue$0)} & n_first$0 = first_sending$1(pxQueue$0) & n_runable: FIN(TASK) & suspended$1-{pxTaskToResume}: FIN(TASK) & suspended$1-{pxTaskToResume}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{pxTaskToResume} = {} & suspended$1-{pxTaskToResume}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & queue_sending$1<+{pxQueue$0|->n_sending}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & first_sending$1<+{pxQueue$0|->n_first$0}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & dom(first_sending$1<+{pxQueue$0|->n_first$0}) = dom(queue_sending$1<+{pxQueue$0|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue$0|->n_first$0}) & not((queue_sending$1<+{pxQueue$0|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue$0|->n_first$0})(q1): (queue_sending$1<+{pxQueue$0|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = pxTaskToResume))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = pxTaskToResume))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & tasks$1 = suspended$1-{pxTaskToResume}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues$1 = dom(queue_sending$1<+{pxQueue$0|->n_sending}));
  "`Check that the invariant (tickMissed = tickMissed$1) is preserved by the operation - ref 4.4, 5.5'";
  ("`beforeResumeAll preconditions in previous components'" & active$1 = FALSE);
  ("`beforeResumeAll preconditions in this component'" & active$1 = FALSE);
  (TICK_INCREMENT(tickCount$1,tickMissed$1): TICK);
  ("`xTaskResumeAll preconditions in previous components'" & active$1 = FALSE);
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE);
  (unblocked$1: POW(TASK));
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first$0: QUEUE +-> TASK & dom(n_first$0) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first$0) & not(n_receiving(q1) = {}) => n_first$0(q1): n_receiving(q1)) & running$2: n_runable & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first$0) = dom(n_receiving) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2: unblocked$1))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_receiving) & queues$1 = dom(n_sending));
  (runable$1\/unblocked$1: POW(tasks$1));
  (#(running$0).(running$0: runable$1\/unblocked$1 & running$2 = running$0) or running$2 = running$1);
  (remove_task(queue_sending$1,unblocked$1): QUEUE +-> POW(TASK));
  (dom(remove_task(queue_sending$1,unblocked$1)) = dom(queue_sending$1));
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first$0: QUEUE +-> TASK & dom(n_first$0) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first$0) & not(n_receiving(q1) = {}) => n_first$0(q1): n_receiving(q1)) & running$2: n_runable & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first$0) = dom(n_receiving) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2: unblocked$1))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_receiving) & queues$1 = dom(n_sending) & q1: queues$1 & q1: dom(n_first) & not(remove_task(queue_sending$1,unblocked$1)(q1) = {}));
  (n_first(q1): remove_task(queue_sending$1,unblocked$1)(q1));
  (remove_task(queue_receiving$1,unblocked$1): QUEUE +-> POW(TASK));
  (dom(remove_task(queue_receiving$1,unblocked$1)) = dom(queue_receiving$1));
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first$0: QUEUE +-> TASK & dom(n_first$0) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first$0) & not(n_receiving(q1) = {}) => n_first$0(q1): n_receiving(q1)) & running$2: n_runable & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first$0) = dom(n_receiving) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2: unblocked$1))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_receiving) & queues$1 = dom(n_sending) & q1: queues$1 & q1: dom(n_first$0) & not(remove_task(queue_receiving$1,unblocked$1)(q1) = {}));
  (n_first$0(q1): remove_task(queue_receiving$1,unblocked$1)(q1));
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first$0: QUEUE +-> TASK & dom(n_first$0) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first$0) & not(n_receiving(q1) = {}) => n_first$0(q1): n_receiving(q1)) & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first$0) = dom(n_receiving) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1: unblocked$1))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_receiving) & queues$1 = dom(n_sending));
  "`Check that the invariant (unblocked = unblocked$1) is preserved by the operation - ref 4.4, 5.5'";
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first$0: QUEUE +-> TASK & dom(n_first$0) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first$0) & not(n_receiving(q1) = {}) => n_first$0(q1): n_receiving(q1)) & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first$0) = dom(n_receiving) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1: unblocked$1))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_receiving) & queues$1 = dom(n_sending) & q1: queues$1 & q1: dom(n_first) & not(remove_task(queue_sending$1,unblocked$1)(q1) = {}));
  "`Check that the invariant (queue_sending = queue_sending$1) is preserved by the operation - ref 4.4, 5.5'";
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first$0: QUEUE +-> TASK & dom(n_first$0) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first$0) & not(n_receiving(q1) = {}) => n_first$0(q1): n_receiving(q1)) & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first$0) = dom(n_receiving) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1: unblocked$1))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_receiving) & queues$1 = dom(n_sending) & q1: queues$1 & q1: dom(n_first$0) & not(remove_task(queue_receiving$1,unblocked$1)(q1) = {}));
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & queue_receiving$1 = {} & running$2: n_runable & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2: unblocked$1))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_sending));
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & queue_receiving$1 = {} & running$2: n_runable & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2: unblocked$1))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_sending) & q1: queues$1 & q1: dom(n_first) & not(remove_task(queue_sending$1,unblocked$1)(q1) = {}));
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & queue_receiving$1 = {} & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1: unblocked$1))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_sending));
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & queue_receiving$1 = {} & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1: unblocked$1))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_sending) & q1: queues$1 & q1: dom(n_first) & not(remove_task(queue_sending$1,unblocked$1)(q1) = {}));
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & queue_sending$1 = {} & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_receiving(q1) = {}) => n_first(q1): n_receiving(q1)) & running$2: n_runable & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first) = dom(n_receiving) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2: unblocked$1))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_receiving));
  "`Check that the invariant (first_sending = first_sending$1) is preserved by the operation - ref 4.4, 5.5'";
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & queue_sending$1 = {} & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_receiving(q1) = {}) => n_first(q1): n_receiving(q1)) & running$2: n_runable & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first) = dom(n_receiving) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2: unblocked$1))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_receiving) & q1: queues$1 & q1: dom(n_first) & not(remove_task(queue_receiving$1,unblocked$1)(q1) = {}));
  (n_first(q1): remove_task(queue_receiving$1,unblocked$1)(q1));
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & queue_sending$1 = {} & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_receiving(q1) = {}) => n_first(q1): n_receiving(q1)) & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first) = dom(n_receiving) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1: unblocked$1))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_receiving));
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & queue_sending$1 = {} & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_receiving(q1) = {}) => n_first(q1): n_receiving(q1)) & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first) = dom(n_receiving) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1: unblocked$1))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_receiving) & q1: queues$1 & q1: dom(n_first) & not(remove_task(queue_receiving$1,unblocked$1)(q1) = {}));
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & queue_sending$1 = {} & queue_receiving$1 = {} & running$2: n_runable & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2: unblocked$1))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable);
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & queue_sending$1 = {} & queue_receiving$1 = {} & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1: unblocked$1))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable);
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & unblocked$1 = {} & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first$0: QUEUE +-> TASK & dom(n_first$0) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first$0) & not(n_receiving(q1) = {}) => n_first$0(q1): n_receiving(q1)) & dom(n_first$0) = dom(n_receiving) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & unblocked$1: POW(TASK) & queues$1 = dom(n_receiving) & queues$1 = dom(n_sending));
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & unblocked$1 = {} & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first$0: QUEUE +-> TASK & dom(n_first$0) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first$0) & not(n_receiving(q1) = {}) => n_first$0(q1): n_receiving(q1)) & dom(n_first$0) = dom(n_receiving) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & unblocked$1: POW(TASK) & queues$1 = dom(n_receiving) & queues$1 = dom(n_sending) & q1: queues$1 & q1: dom(n_first) & not(remove_task(queue_sending$1,unblocked$1)(q1) = {}));
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & unblocked$1 = {} & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first$0: QUEUE +-> TASK & dom(n_first$0) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first$0) & not(n_receiving(q1) = {}) => n_first$0(q1): n_receiving(q1)) & dom(n_first$0) = dom(n_receiving) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & unblocked$1: POW(TASK) & queues$1 = dom(n_receiving) & queues$1 = dom(n_sending) & q1: queues$1 & q1: dom(n_first$0) & not(remove_task(queue_receiving$1,unblocked$1)(q1) = {}));
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & unblocked$1 = {} & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & queue_receiving$1 = {} & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & unblocked$1: POW(TASK) & queues$1 = dom(n_sending));
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & unblocked$1 = {} & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & queue_receiving$1 = {} & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & unblocked$1: POW(TASK) & queues$1 = dom(n_sending) & q1: queues$1 & q1: dom(n_first) & not(remove_task(queue_sending$1,unblocked$1)(q1) = {}));
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & unblocked$1 = {} & queue_sending$1 = {} & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_receiving(q1) = {}) => n_first(q1): n_receiving(q1)) & dom(n_first) = dom(n_receiving) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & unblocked$1: POW(TASK) & queues$1 = dom(n_receiving));
  ("`xTaskResumeAll preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & unblocked$1 = {} & queue_sending$1 = {} & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_receiving(q1) = {}) => n_first(q1): n_receiving(q1)) & dom(n_first) = dom(n_receiving) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & unblocked$1: POW(TASK) & queues$1 = dom(n_receiving) & q1: queues$1 & q1: dom(n_first) & not(remove_task(queue_receiving$1,unblocked$1)(q1) = {}));
  ("`vTaskStartScheduler preconditions in previous components'" & active$1 = FALSE);
  ("`vTaskStartScheduler preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & idle_task: TASK & not(idle_task: tasks$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{idle_task} & running$2: n_runable & tasks$1\/{idle_task}: FIN(TASK) & blocked$1: POW(tasks$1\/{idle_task}) & n_runable: FIN(TASK) & n_runable: POW(tasks$1\/{idle_task}) & suspended$1: POW(tasks$1\/{idle_task}) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & tasks$1\/{idle_task} = suspended$1\/blocked$1\/n_runable & running$2: TASK & not(n_runable = {}) & idle_task: n_runable & not(TASK_NULL: tasks$1) & not(TASK_NULL = idle_task) & not(running$2: suspended$1) & not(running$2: blocked$1) & not(idle_task = TASK_NULL) & not(idle_task: suspended$1) & not(idle_task: blocked$1));
  "`Check that the invariant (idle = idle$1 & tasks = tasks$1 & runable = runable$1 & running = running$1 & active = active$1 & running = running$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(idle_task$0,n_runable$0).(idle_task$0: TASK & not(idle_task$0: tasks$1) & n_runable$0: POW(tasks$1) & n_runable$0 = runable$1\/{idle_task$0} & (idle_task = idle_task$0 & tasks$1\/{idle_task} = tasks$1\/{idle_task$0} & n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) or (active$1 = TRUE & idle_task = idle$1 & idle_task: tasks$1 & n_runable = runable$1 & running$2 = running$1));
  ("`vTaskSuspend preconditions in previous components'" & INCLUDE_vTaskSuspend = 1 & pxTaskToSuspend: TASK & pxTaskToSuspend: tasks$1 & not(pxTaskToSuspend = idle$1));
  ("`vTaskSuspend preconditions in this component'" & INCLUDE_vTaskSuspend = 1 & pxTaskToSuspend: TASK & pxTaskToSuspend: tasks$1 & not(pxTaskToSuspend = idle$1) & "`Local hypotheses'" & not(pxTaskToSuspend: suspended$1) & pxQueue: queues$1 & pxTaskToSuspend: queue_receiving$1(pxQueue) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: TASK & n_first: queue_receiving$1(pxQueue) & pxQueue$0: queues$1 & n_sending: POW(TASK) & n_first$0: TASK & pxTaskToSuspend: queue_sending$1(pxQueue$0) & n_sending = queue_sending$1(pxQueue$0)-{first_sending$1(pxQueue$0)} & pxTaskToSuspend: runable$1 & n_runable: POW(tasks$1) & n_runable = runable$1-{pxTaskToSuspend} & pxTaskToSuspend = running$1 & running$2: n_runable & n_first$0 = first_sending$1(pxQueue$0) & n_runable: FIN(TASK) & suspended$1\/{pxTaskToSuspend}: FIN(TASK) & n_runable/\blocked$1 = {} & not(pxTaskToSuspend: blocked$1) & suspended$1\/{pxTaskToSuspend}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & queue_sending$1<+{pxQueue$0|->n_sending}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & first_sending$1<+{pxQueue$0|->n_first$0}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & dom(first_sending$1<+{pxQueue$0|->n_first$0}) = dom(queue_sending$1<+{pxQueue$0|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue$0|->n_first$0}) & not((queue_sending$1<+{pxQueue$0|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue$0|->n_first$0})(q1): (queue_sending$1<+{pxQueue$0|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1) & not(running$2 = pxTaskToSuspend)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(pxTaskToSuspend: suspended$1) => pxTaskToSuspend: TASK & pxTaskToSuspend: tasks$1 & not(pxTaskToSuspend = idle$1) & pxTaskToSuspend: TASK) & tasks$1 = suspended$1\/{pxTaskToSuspend}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues$1 = dom(queue_sending$1<+{pxQueue$0|->n_sending}));
  (runable$1-{pxTaskToSuspend}: POW(tasks$1));
  (not(running$2 = pxTaskToSuspend));
  (#(pxQueue$0,n_first$0).(pxQueue$0: queues$1 & pxTaskToSuspend: queue_receiving$1(pxQueue$0) & queue_receiving$1(pxQueue$0)-{first_receiving$1(pxQueue$0)}: POW(TASK) & n_first$0: TASK & n_first$0: queue_receiving$1(pxQueue$0) & queue_receiving$1<+{pxQueue|->n_receiving} = queue_receiving$1<+{pxQueue$0|->queue_receiving$1(pxQueue$0)-{first_receiving$1(pxQueue$0)}} & first_receiving$1<+{pxQueue|->n_first} = first_receiving$1<+{pxQueue$0|->n_first$0}));
  (#(pxQueue$1).(pxQueue$1: queues$1 & queue_sending$1(pxQueue$1)-{first_sending$1(pxQueue$1)}: POW(TASK) & first_sending$1(pxQueue$1): TASK & pxTaskToSuspend: queue_sending$1(pxQueue$1) & queue_sending$1<+{pxQueue$0|->n_sending} = queue_sending$1<+{pxQueue$1|->queue_sending$1(pxQueue$1)-{first_sending$1(pxQueue$1)}} & first_sending$1<+{pxQueue$0|->n_first$0} = first_sending$1<+{pxQueue$1|->first_sending$1(pxQueue$1)}));
  ("`vTaskSuspend preconditions in this component'" & INCLUDE_vTaskSuspend = 1 & pxTaskToSuspend: TASK & pxTaskToSuspend: tasks$1 & not(pxTaskToSuspend = idle$1) & "`Local hypotheses'" & not(pxTaskToSuspend: suspended$1) & pxQueue: queues$1 & pxTaskToSuspend: queue_receiving$1(pxQueue) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: TASK & n_first: queue_receiving$1(pxQueue) & pxQueue$0: queues$1 & n_sending: POW(TASK) & n_first$0: TASK & pxTaskToSuspend: queue_sending$1(pxQueue$0) & n_sending = queue_sending$1(pxQueue$0)-{first_sending$1(pxQueue$0)} & pxTaskToSuspend: runable$1 & n_runable: POW(tasks$1) & n_runable = runable$1-{pxTaskToSuspend} & not(pxTaskToSuspend = running$1) & n_first$0 = first_sending$1(pxQueue$0) & n_runable: FIN(TASK) & suspended$1\/{pxTaskToSuspend}: FIN(TASK) & n_runable/\blocked$1 = {} & not(pxTaskToSuspend: blocked$1) & suspended$1\/{pxTaskToSuspend}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & queue_sending$1<+{pxQueue$0|->n_sending}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & first_sending$1<+{pxQueue$0|->n_first$0}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & dom(first_sending$1<+{pxQueue$0|->n_first$0}) = dom(queue_sending$1<+{pxQueue$0|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue$0|->n_first$0}) & not((queue_sending$1<+{pxQueue$0|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue$0|->n_first$0})(q1): (queue_sending$1<+{pxQueue$0|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(pxTaskToSuspend: suspended$1) => pxTaskToSuspend: TASK & pxTaskToSuspend: tasks$1 & not(pxTaskToSuspend = idle$1) & pxTaskToSuspend: TASK) & tasks$1 = suspended$1\/{pxTaskToSuspend}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues$1 = dom(queue_sending$1<+{pxQueue$0|->n_sending}));
  ("`vTaskSuspend preconditions in this component'" & INCLUDE_vTaskSuspend = 1 & pxTaskToSuspend: TASK & pxTaskToSuspend: tasks$1 & not(pxTaskToSuspend = idle$1) & "`Local hypotheses'" & not(pxTaskToSuspend: suspended$1) & pxQueue: queues$1 & pxTaskToSuspend: queue_receiving$1(pxQueue) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: TASK & n_first: queue_receiving$1(pxQueue) & pxQueue$0: queues$1 & n_sending: POW(TASK) & n_first$0: TASK & pxTaskToSuspend: queue_sending$1(pxQueue$0) & n_sending = queue_sending$1(pxQueue$0)-{first_sending$1(pxQueue$0)} & not(pxTaskToSuspend: runable$1) & pxTaskToSuspend: blocked$1 & pxTaskToSuspend: unblocked$1 & n_first$0 = first_sending$1(pxQueue$0) & blocked$1-{pxTaskToSuspend}: FIN(TASK) & blocked$1-{pxTaskToSuspend}: POW(tasks$1) & unblocked$1-{pxTaskToSuspend}: FIN(TASK) & unblocked$1-{pxTaskToSuspend}: POW(blocked$1-{pxTaskToSuspend}) & suspended$1\/{pxTaskToSuspend}: FIN(TASK) & runable$1/\blocked$1-{pxTaskToSuspend} = {} & blocked$1-{pxTaskToSuspend}/\suspended$1 = {} & suspended$1\/{pxTaskToSuspend}/\runable$1 = {} & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & queue_sending$1<+{pxQueue$0|->n_sending}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & first_sending$1<+{pxQueue$0|->n_first$0}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & dom(first_sending$1<+{pxQueue$0|->n_first$0}) = dom(queue_sending$1<+{pxQueue$0|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue$0|->n_first$0}) & not((queue_sending$1<+{pxQueue$0|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue$0|->n_first$0})(q1): (queue_sending$1<+{pxQueue$0|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: suspended$1) & not(running$1 = pxTaskToSuspend)) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = pxTaskToSuspend))) & (not(pxTaskToSuspend: suspended$1) => pxTaskToSuspend: TASK & pxTaskToSuspend: tasks$1 & not(pxTaskToSuspend = idle$1) & pxTaskToSuspend: TASK) & tasks$1 = suspended$1\/{pxTaskToSuspend}\/blocked$1-{pxTaskToSuspend}\/runable$1 & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues$1 = dom(queue_sending$1<+{pxQueue$0|->n_sending}));
  ("`vTaskSuspend preconditions in this component'" & INCLUDE_vTaskSuspend = 1 & pxTaskToSuspend: TASK & pxTaskToSuspend: tasks$1 & not(pxTaskToSuspend = idle$1) & "`Local hypotheses'" & not(pxTaskToSuspend: suspended$1) & pxQueue: queues$1 & pxTaskToSuspend: queue_receiving$1(pxQueue) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: TASK & n_first: queue_receiving$1(pxQueue) & pxQueue$0: queues$1 & n_sending: POW(TASK) & n_first$0: TASK & pxTaskToSuspend: queue_sending$1(pxQueue$0) & n_sending = queue_sending$1(pxQueue$0)-{first_sending$1(pxQueue$0)} & not(pxTaskToSuspend: runable$1) & pxTaskToSuspend: blocked$1 & not(pxTaskToSuspend: unblocked$1) & n_first$0 = first_sending$1(pxQueue$0) & blocked$1-{pxTaskToSuspend}: FIN(TASK) & blocked$1-{pxTaskToSuspend}: POW(tasks$1) & unblocked$1: POW(blocked$1-{pxTaskToSuspend}) & suspended$1\/{pxTaskToSuspend}: FIN(TASK) & runable$1/\blocked$1-{pxTaskToSuspend} = {} & blocked$1-{pxTaskToSuspend}/\suspended$1 = {} & suspended$1\/{pxTaskToSuspend}/\runable$1 = {} & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & queue_sending$1<+{pxQueue$0|->n_sending}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & first_sending$1<+{pxQueue$0|->n_first$0}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & dom(first_sending$1<+{pxQueue$0|->n_first$0}) = dom(queue_sending$1<+{pxQueue$0|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue$0|->n_first$0}) & not((queue_sending$1<+{pxQueue$0|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue$0|->n_first$0})(q1): (queue_sending$1<+{pxQueue$0|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: suspended$1) & not(running$1 = pxTaskToSuspend)) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = pxTaskToSuspend))) & (not(pxTaskToSuspend: suspended$1) => pxTaskToSuspend: TASK & pxTaskToSuspend: tasks$1 & not(pxTaskToSuspend = idle$1) & pxTaskToSuspend: TASK) & tasks$1 = suspended$1\/{pxTaskToSuspend}\/blocked$1-{pxTaskToSuspend}\/runable$1 & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues$1 = dom(queue_sending$1<+{pxQueue$0|->n_sending}));
  ("`vTaskSuspend preconditions in this component'" & INCLUDE_vTaskSuspend = 1 & pxTaskToSuspend: TASK & pxTaskToSuspend: tasks$1 & not(pxTaskToSuspend = idle$1) & "`Local hypotheses'" & not(pxTaskToSuspend: suspended$1) & pxQueue: queues$1 & pxTaskToSuspend: queue_receiving$1(pxQueue) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: TASK & n_first: queue_receiving$1(pxQueue) & pxQueue$0: queues$1 & n_sending: POW(TASK) & n_first$0: TASK & pxTaskToSuspend: queue_sending$1(pxQueue$0) & n_sending = queue_sending$1(pxQueue$0)-{first_sending$1(pxQueue$0)} & not(pxTaskToSuspend: runable$1) & not(pxTaskToSuspend: blocked$1) & n_first$0 = first_sending$1(pxQueue$0) & suspended$1\/{pxTaskToSuspend}: FIN(TASK) & suspended$1\/{pxTaskToSuspend}/\runable$1 = {} & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & queue_sending$1<+{pxQueue$0|->n_sending}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & first_sending$1<+{pxQueue$0|->n_first$0}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & dom(first_sending$1<+{pxQueue$0|->n_first$0}) = dom(queue_sending$1<+{pxQueue$0|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue$0|->n_first$0}) & not((queue_sending$1<+{pxQueue$0|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue$0|->n_first$0})(q1): (queue_sending$1<+{pxQueue$0|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue$0|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: suspended$1) & not(running$1 = pxTaskToSuspend)) & (not(pxTaskToSuspend: suspended$1) => pxTaskToSuspend: TASK & pxTaskToSuspend: tasks$1 & not(pxTaskToSuspend = idle$1) & pxTaskToSuspend: TASK) & tasks$1 = suspended$1\/{pxTaskToSuspend}\/blocked$1\/runable$1 & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues$1 = dom(queue_sending$1<+{pxQueue$0|->n_sending}));
  ("`xQueueCreate preconditions in previous components'" & uxQueueLength: QUEUE_LENGTH & uxItemSize: INTEGER & 0<=uxItemSize & uxItemSize<=2147483647);
  ("`xQueueCreate preconditions in this component'" & uxQueueLength: QUEUE_LENGTH & uxItemSize: INTEGER & 0<=uxItemSize & uxItemSize<=2147483647 & "`Local hypotheses'" & pxQueue: QUEUE & not(pxQueue: queues$1) & queue_receiving$1\/{pxQueue|->{}}: QUEUE +-> POW(TASK) & queue_sending$1\/{pxQueue|->{}}: QUEUE +-> POW(TASK) & queues$1\/{pxQueue} = dom(queue_receiving$1\/{pxQueue|->{}}) & queues$1\/{pxQueue} = dom(queue_sending$1\/{pxQueue|->{}}) & first_receiving$1\/{pxQueue|->TASK_NULL}: QUEUE +-> TASK & first_sending$1\/{pxQueue|->TASK_NULL}: QUEUE +-> TASK & dom(first_receiving$1\/{pxQueue|->TASK_NULL}) = dom(queue_receiving$1\/{pxQueue|->{}}) & dom(first_sending$1\/{pxQueue|->TASK_NULL}) = dom(queue_sending$1\/{pxQueue|->{}}) & !q1.(q1: queues$1\/{pxQueue} & q1: dom(first_receiving$1\/{pxQueue|->TASK_NULL}) & not((queue_receiving$1\/{pxQueue|->{}})(q1) = {}) => (first_receiving$1\/{pxQueue|->TASK_NULL})(q1): (queue_receiving$1\/{pxQueue|->{}})(q1)) & !q1.(q1: queues$1\/{pxQueue} & q1: dom(first_sending$1\/{pxQueue|->TASK_NULL}) & not((queue_sending$1\/{pxQueue|->{}})(q1) = {}) => (first_sending$1\/{pxQueue|->TASK_NULL})(q1): (queue_sending$1\/{pxQueue|->{}})(q1)) & pxQueue: queues$1\/{pxQueue} & queues_msg$1: POW(queues$1\/{pxQueue}) & queues_msg_full$1: POW(queues_msg$1\/{pxQueue}) & pxQueue: queues_msg$1\/{pxQueue} & queues_msg_empty$1: POW(queues_msg$1\/{pxQueue}) & not(pxQueue: queues_msg_full$1) & queue_items$1\/{pxQueue|->{}}: QUEUE +-> POW(ITEM) & queues_msg$1\/{pxQueue} = dom(queue_items$1\/{pxQueue|->{}}) & !(q1,q2,tk).(q1: queues$1\/{pxQueue} & q2: queues$1\/{pxQueue} & tk: TASK & tk: (queue_receiving$1\/{pxQueue|->{}})(q1) => not(tk: (queue_sending$1\/{pxQueue|->{}})(q2))) & !(q1,q2,tk).(q1: queues$1\/{pxQueue} & q2: queues$1\/{pxQueue} & tk: TASK & tk: (queue_sending$1\/{pxQueue|->{}})(q2) => not(tk: (queue_receiving$1\/{pxQueue|->{}})(q1))) & !(q1,q2,tk).(q1: queues$1\/{pxQueue} & q2: queues$1\/{pxQueue} & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1\/{pxQueue|->{}})(q1) => not(tk: (queue_receiving$1\/{pxQueue|->{}})(q2))) & !(q1,q2,tk).(q1: queues$1\/{pxQueue} & q2: queues$1\/{pxQueue} & not(q1 = q2) & tk: TASK & tk: (queue_sending$1\/{pxQueue|->{}})(q1) => not(tk: (queue_sending$1\/{pxQueue|->{}})(q2))) & semaphores$1: POW(queues$1\/{pxQueue}) & mutexes$1: POW(queues$1\/{pxQueue}) & queues_msg$1\/{pxQueue}/\semaphores$1 = {} & queues_msg$1\/{pxQueue}/\mutexes$1 = {} & !que.(que: QUEUE & (not(que: queues$1) & not(que = pxQueue)) => not(que: mutexes$1)) & !que.(que: QUEUE & (not(que: queues$1) & not(que = pxQueue)) => not(que: semaphores$1)) & !que.(que: queues_msg$1\/{pxQueue} & que: queues_msg_full$1 => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1\/{pxQueue} & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1)));
  "`Check that the invariant (queues = queues$1 & queues_msg = queues_msg$1 & queue_items = queue_items$1 & queue_receiving = queue_receiving$1 & queue_sending = queue_sending$1 & queues_msg_empty = queues_msg_empty$1 & xQueueHandle$1 = xQueueHandle & first_sending = first_sending$1 & first_receiving = first_receiving$1 & first_receiving = first_receiving$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(pxQueue$0).(pxQueue$0: QUEUE & not(pxQueue$0: queues$1) & (queues$1\/{pxQueue} = queues$1\/{pxQueue$0} & queues_msg$1\/{pxQueue} = queues_msg$1\/{pxQueue$0} & queue_items$1\/{pxQueue|->{}} = queue_items$1\/{pxQueue$0|->{}} & queue_receiving$1\/{pxQueue|->{}} = queue_receiving$1\/{pxQueue$0|->{}} & queue_sending$1\/{pxQueue|->{}} = queue_sending$1\/{pxQueue$0|->{}} & queues_msg_empty$1\/{pxQueue} = queues_msg_empty$1\/{pxQueue$0} & pxQueue = pxQueue$0 & first_sending$1\/{pxQueue|->TASK_NULL} = first_sending$1\/{pxQueue$0|->TASK_NULL} & first_receiving$1\/{pxQueue|->TASK_NULL} = first_receiving$1\/{pxQueue$0|->TASK_NULL})) or (pxQueue = QUEUE_NULL & (pxQueue: queues$1 & pxQueue: queues_msg$1 & pxQueue|->{}: queue_items$1 & pxQueue|->{}: queue_receiving$1 & pxQueue|->{}: queue_sending$1 & pxQueue: queues_msg_empty$1 & pxQueue|->TASK_NULL: first_sending$1 & pxQueue|->TASK_NULL: first_receiving$1)));
  ("`queueDelete preconditions in previous components'" & pxQueue: queues_msg$1 & queue_receiving$1(pxQueue) = {} & queue_sending$1(pxQueue) = {});
  ("`queueDelete preconditions in this component'" & pxQueue: queues_msg$1 & queue_receiving$1(pxQueue) = {} & queue_sending$1(pxQueue) = {});
  (pxQueue: queues$1);
  (not(pxQueue: semaphores$1));
  (not(pxQueue: mutexes$1));
  ("`sendItem preconditions in previous components'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}));
  (first_receiving$1(pxQueue): TASK);
  (first_receiving$1(pxQueue): blocked$1\/suspended$1);
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & pxQueue: queues_msg_full$1 & not(xTicksToWait = 0) & xTicksToWait = MAX_DELAY);
  (running$1: tasks$1);
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & pxQueue: queues_msg_full$1 & not(xTicksToWait = 0) & xTicksToWait = MAX_DELAY & q1: queues$1);
  (not(running$1: queue_sending$1(q1)));
  (not(running$1: queue_receiving$1(q1)));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & pxQueue: queues_msg_full$1 & not(xTicksToWait = 0) & not(xTicksToWait = MAX_DELAY));
  (running$1: runable$1);
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & pxQueue: queues_msg_full$1 & not(xTicksToWait = 0) & not(xTicksToWait = MAX_DELAY) & q1: queues$1);
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & first_receiving$1(pxQueue): suspended$1 & running$2: n_runable & first_receiving$1(pxQueue): unblocked$1 & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_receiving$1(pxQueue)}: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  "`Check that the invariant (queue_items = queue_items$1) is preserved by the operation - ref 4.4, 5.5'";
  (queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)}: POW(TASK));
  "`Check that the invariant (queue_receiving = queue_receiving$1) is preserved by the operation - ref 4.4, 5.5'";
  (queue_receiving$1<+{pxQueue|->n_receiving} = queue_receiving$1<+{pxQueue|->queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)}});
  "`Check that the invariant (first_receiving = first_receiving$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(n_first$0).(n_first$0: TASK & n_first$0: queue_receiving$1(pxQueue) & not(n_first$0 = first_receiving$1(pxQueue)) & first_receiving$1<+{pxQueue|->n_first} = first_receiving$1<+{pxQueue|->n_first$0}));
  "`Check that the invariant (suspended = suspended$1) is preserved by the operation - ref 4.4, 5.5'";
  (first_receiving$1(pxQueue): tasks$1);
  (#(running$0).(running$0: runable$1\/{first_receiving$1(pxQueue)} & running$2 = running$0) or running$2 = running$1);
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & first_receiving$1(pxQueue): suspended$1 & running$2: n_runable & not(first_receiving$1(pxQueue): unblocked$1) & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & first_receiving$1(pxQueue): suspended$1 & first_receiving$1(pxQueue): unblocked$1 & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_receiving$1(pxQueue)}: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & first_receiving$1(pxQueue): suspended$1 & not(first_receiving$1(pxQueue): unblocked$1) & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & not(first_receiving$1(pxQueue): suspended$1) & running$2: n_runable & first_receiving$1(pxQueue): unblocked$1 & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_receiving$1(pxQueue)}: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & not(first_receiving$1(pxQueue): suspended$1) & running$2: n_runable & not(first_receiving$1(pxQueue): unblocked$1) & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & not(first_receiving$1(pxQueue): suspended$1) & first_receiving$1(pxQueue): unblocked$1 & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_receiving$1(pxQueue)}: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & not(first_receiving$1(pxQueue): suspended$1) & not(first_receiving$1(pxQueue): unblocked$1) & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & not(first_receiving$1(pxQueue): blocked$1) & first_receiving$1(pxQueue): suspended$1 & running$2: n_runable & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & not(first_receiving$1(pxQueue): blocked$1) & first_receiving$1(pxQueue): suspended$1 & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & not(first_receiving$1(pxQueue): blocked$1) & not(first_receiving$1(pxQueue): suspended$1) & running$2: n_runable & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & not(first_receiving$1(pxQueue): blocked$1) & not(first_receiving$1(pxQueue): suspended$1) & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & first_receiving$1(pxQueue): suspended$1 & running$2: n_runable & first_receiving$1(pxQueue): unblocked$1 & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_receiving$1(pxQueue)}: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & first_receiving$1(pxQueue): suspended$1 & running$2: n_runable & not(first_receiving$1(pxQueue): unblocked$1) & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & first_receiving$1(pxQueue): suspended$1 & first_receiving$1(pxQueue): unblocked$1 & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_receiving$1(pxQueue)}: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & first_receiving$1(pxQueue): suspended$1 & not(first_receiving$1(pxQueue): unblocked$1) & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & not(first_receiving$1(pxQueue): suspended$1) & running$2: n_runable & first_receiving$1(pxQueue): unblocked$1 & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_receiving$1(pxQueue)}: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & not(first_receiving$1(pxQueue): suspended$1) & running$2: n_runable & not(first_receiving$1(pxQueue): unblocked$1) & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & not(first_receiving$1(pxQueue): suspended$1) & first_receiving$1(pxQueue): unblocked$1 & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_receiving$1(pxQueue)}: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & not(first_receiving$1(pxQueue): suspended$1) & not(first_receiving$1(pxQueue): unblocked$1) & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & not(first_receiving$1(pxQueue): blocked$1) & first_receiving$1(pxQueue): suspended$1 & running$2: n_runable & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & not(first_receiving$1(pxQueue): blocked$1) & first_receiving$1(pxQueue): suspended$1 & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & not(first_receiving$1(pxQueue): blocked$1) & not(first_receiving$1(pxQueue): suspended$1) & running$2: n_runable & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & pxQueue: queues_msg_empty$1 & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & not(first_receiving$1(pxQueue): blocked$1) & not(first_receiving$1(pxQueue): suspended$1) & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_empty$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1/\queues_msg_empty$1-{pxQueue} = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1 & not(que = pxQueue))) & !que.(que: queues_msg$1 & (que: queues_msg_empty$1 & not(que = pxQueue)) => not(que: queues_msg_full$1)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & first_receiving$1(pxQueue): suspended$1 & running$2: n_runable & first_receiving$1(pxQueue): unblocked$1 & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_receiving$1(pxQueue)}: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & first_receiving$1(pxQueue): suspended$1 & running$2: n_runable & not(first_receiving$1(pxQueue): unblocked$1) & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & first_receiving$1(pxQueue): suspended$1 & first_receiving$1(pxQueue): unblocked$1 & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_receiving$1(pxQueue)}: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & first_receiving$1(pxQueue): suspended$1 & not(first_receiving$1(pxQueue): unblocked$1) & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & not(first_receiving$1(pxQueue): suspended$1) & running$2: n_runable & first_receiving$1(pxQueue): unblocked$1 & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_receiving$1(pxQueue)}: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & not(first_receiving$1(pxQueue): suspended$1) & running$2: n_runable & not(first_receiving$1(pxQueue): unblocked$1) & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & not(first_receiving$1(pxQueue): suspended$1) & first_receiving$1(pxQueue): unblocked$1 & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_receiving$1(pxQueue)}: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & not(first_receiving$1(pxQueue): suspended$1) & not(first_receiving$1(pxQueue): unblocked$1) & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & not(first_receiving$1(pxQueue): blocked$1) & first_receiving$1(pxQueue): suspended$1 & running$2: n_runable & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & not(first_receiving$1(pxQueue): blocked$1) & first_receiving$1(pxQueue): suspended$1 & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & not(first_receiving$1(pxQueue): blocked$1) & not(first_receiving$1(pxQueue): suspended$1) & running$2: n_runable & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & not(first_receiving$1(pxQueue): blocked$1) & not(first_receiving$1(pxQueue): suspended$1) & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queues_msg_full$1\/{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1\/{pxQueue} => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1) & not(que = pxQueue)) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & first_receiving$1(pxQueue): suspended$1 & running$2: n_runable & first_receiving$1(pxQueue): unblocked$1 & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_receiving$1(pxQueue)}: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & first_receiving$1(pxQueue): suspended$1 & running$2: n_runable & not(first_receiving$1(pxQueue): unblocked$1) & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & first_receiving$1(pxQueue): suspended$1 & first_receiving$1(pxQueue): unblocked$1 & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_receiving$1(pxQueue)}: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & first_receiving$1(pxQueue): suspended$1 & not(first_receiving$1(pxQueue): unblocked$1) & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & not(first_receiving$1(pxQueue): suspended$1) & running$2: n_runable & first_receiving$1(pxQueue): unblocked$1 & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_receiving$1(pxQueue)}: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & not(first_receiving$1(pxQueue): suspended$1) & running$2: n_runable & not(first_receiving$1(pxQueue): unblocked$1) & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & not(first_receiving$1(pxQueue): suspended$1) & first_receiving$1(pxQueue): unblocked$1 & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_receiving$1(pxQueue)}: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & first_receiving$1(pxQueue): blocked$1 & not(first_receiving$1(pxQueue): suspended$1) & not(first_receiving$1(pxQueue): unblocked$1) & blocked$1-{first_receiving$1(pxQueue)}: FIN(TASK) & blocked$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(pxQueue)} = {} & blocked$1-{first_receiving$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(pxQueue)}\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & not(first_receiving$1(pxQueue): blocked$1) & first_receiving$1(pxQueue): suspended$1 & running$2: n_runable & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & not(first_receiving$1(pxQueue): blocked$1) & first_receiving$1(pxQueue): suspended$1 & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: FIN(TASK) & suspended$1-{first_receiving$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_receiving$1(pxQueue)} = {} & suspended$1-{first_receiving$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(pxQueue)}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & not(first_receiving$1(pxQueue): blocked$1) & not(first_receiving$1(pxQueue): suspended$1) & running$2: n_runable & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & not(pxQueue: queues_msg_full$1) & not(queue_receiving$1(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK & n_receiving = queue_receiving$1(pxQueue)-{first_receiving$1(pxQueue)} & n_first: n_receiving & not(pxQueue: queues_msg_empty$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(pxQueue)} & not(first_receiving$1(pxQueue): blocked$1) & not(first_receiving$1(pxQueue): suspended$1) & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->n_first}) = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->n_first}) & not((queue_receiving$1<+{pxQueue|->n_receiving})(q1) = {}) => (first_receiving$1<+{pxQueue|->n_first})(q1): (queue_receiving$1<+{pxQueue|->n_receiving})(q1)) & queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->n_receiving})(q2))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->n_receiving}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->(queue_items$1(pxQueue)\/{pvItemToQueue})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & pxQueue: queues_msg_full$1 & not(xTicksToWait = 0) & xTicksToWait = MAX_DELAY & running$1: runable$1 & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & queue_sending$1(pxQueue) = {} & running$2: n_runable & n_runable: FIN(TASK) & suspended$1\/{running$1}: FIN(TASK) & running$1: tasks$1 & n_runable/\blocked$1 = {} & not(running$1: blocked$1) & suspended$1\/{running$1}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->running$1}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->running$1}) = dom(queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->running$1}) & not((queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q1) = {}) => (first_sending$1<+{pxQueue|->running$1})(q1): (queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q1) => not(tk: (queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q2))) & (active$1 = TRUE => not(running$2: suspended$1) & not(running$2 = running$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/{running$1}\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})}));
  "`Check that the invariant (runable = runable$1 & running = running$1 & blocked = blocked$1 & first_sending = first_sending$1 & suspended = suspended$1 & unblocked = unblocked$1 & return$1 = return & queue_sending = queue_sending$1 & first_sending = first_sending$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & blocked$1 = blocked$1\/{running$1} & (queue_sending$1(pxQueue) = {} or (not(queue_sending$1(pxQueue) = {}) & first_sending$1<+{pxQueue|->running$1} = first_sending$1)) & running$1: suspended$1 or (running$1: runable$1 & #(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) or (not(running$1: runable$1) & (running$1: blocked$1 & (blocked$1 = blocked$1-{running$1} & (running$1: unblocked$1 & unblocked$1 = unblocked$1-{running$1} or not(running$1: unblocked$1))) or not(running$1: blocked$1)) & (n_runable = runable$1 & running$2 = running$1)) & (queue_sending$1(pxQueue) = {} or (not(queue_sending$1(pxQueue) = {}) & first_sending$1<+{pxQueue|->running$1} = first_sending$1))) or (7|->ERROR_DEFINITION = 8|->ERROR_DEFINITION & (running$2 = running$1 & n_runable = runable$1 & running$1: suspended$1 & queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})} = queue_sending$1 & first_sending$1<+{pxQueue|->running$1} = first_sending$1)));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & pxQueue: queues_msg_full$1 & not(xTicksToWait = 0) & xTicksToWait = MAX_DELAY & running$1: runable$1 & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & not(queue_sending$1(pxQueue) = {}) & running$2: n_runable & n_runable: FIN(TASK) & suspended$1\/{running$1}: FIN(TASK) & running$1: tasks$1 & n_runable/\blocked$1 = {} & not(running$1: blocked$1) & suspended$1\/{running$1}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})}: QUEUE +-> POW(TASK) & dom(first_sending$1) = dom(queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})}) & !q1.(q1: queues$1 & q1: dom(first_sending$1) & not((queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q1) = {}) => first_sending$1(q1): (queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q1) => not(tk: (queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q2))) & (active$1 = TRUE => not(running$2: suspended$1) & not(running$2 = running$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/{running$1}\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})}));
  "`Check that the invariant (runable = runable$1 & running = running$1 & blocked = blocked$1 & first_sending = first_sending$1 & suspended = suspended$1 & unblocked = unblocked$1 & return$1 = return & queue_sending = queue_sending$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & blocked$1 = blocked$1\/{running$1} & (queue_sending$1(pxQueue) = {} & first_sending$1 = first_sending$1<+{pxQueue|->running$1} or not(queue_sending$1(pxQueue) = {})) & running$1: suspended$1 or (running$1: runable$1 & #(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) or (not(running$1: runable$1) & (running$1: blocked$1 & (blocked$1 = blocked$1-{running$1} & (running$1: unblocked$1 & unblocked$1 = unblocked$1-{running$1} or not(running$1: unblocked$1))) or not(running$1: blocked$1)) & (n_runable = runable$1 & running$2 = running$1)) & (queue_sending$1(pxQueue) = {} & first_sending$1 = first_sending$1<+{pxQueue|->running$1} or not(queue_sending$1(pxQueue) = {}))) or (7|->ERROR_DEFINITION = 8|->ERROR_DEFINITION & (running$2 = running$1 & n_runable = runable$1 & running$1: suspended$1 & queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})} = queue_sending$1)));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & pxQueue: queues_msg_full$1 & not(xTicksToWait = 0) & not(xTicksToWait = MAX_DELAY) & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & running$2: n_runable & queue_sending$1(pxQueue) = {} & blocked$1\/{running$1}: FIN(TASK) & running$1: tasks$1 & unblocked$1: POW(blocked$1\/{running$1}) & n_runable: FIN(TASK) & not(running$1: n_runable) & n_runable/\blocked$1 = {} & blocked$1\/{running$1}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->running$1}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->running$1}) = dom(queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->running$1}) & not((queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q1) = {}) => (first_sending$1<+{pxQueue|->running$1})(q1): (queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q1) => not(tk: (queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1) & not(running$2 = running$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/(blocked$1\/{running$1})\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})}));
  "`Check that the invariant (runable = runable$1 & running = running$1 & first_sending = first_sending$1 & blocked = blocked$1 & unblocked = unblocked$1 & suspended = suspended$1 & return$1 = return & queue_sending = queue_sending$1 & first_sending = first_sending$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & (queue_sending$1(pxQueue) = {} or (not(queue_sending$1(pxQueue) = {}) & first_sending$1<+{pxQueue|->running$1} = first_sending$1)) or (running$1: runable$1 & #(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & running$1: blocked$1 or (not(running$1: runable$1) & (running$1: blocked$1 & (blocked$1\/{running$1} = blocked$1-{running$1} & (running$1: unblocked$1 & unblocked$1 = unblocked$1-{running$1} or not(running$1: unblocked$1))) or (not(running$1: blocked$1) & running$1: blocked$1)) & (n_runable = runable$1 & running$2 = running$1)) & suspended$1 = suspended$1\/{running$1} & (queue_sending$1(pxQueue) = {} or (not(queue_sending$1(pxQueue) = {}) & first_sending$1<+{pxQueue|->running$1} = first_sending$1))) or (7|->ERROR_DEFINITION = 8|->ERROR_DEFINITION & (running$1: blocked$1 & running$2 = running$1 & n_runable = runable$1 & queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})} = queue_sending$1 & first_sending$1<+{pxQueue|->running$1} = first_sending$1)));
  ("`sendItem preconditions in this component'" & pxQueue: queues_msg$1 & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running$1 = idle$1) & active$1 = TRUE & not(pvItemToQueue: queue_items$1(pxQueue)) & "`Local hypotheses'" & pxQueue: queues_msg_full$1 & not(xTicksToWait = 0) & not(xTicksToWait = MAX_DELAY) & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & running$2: n_runable & not(queue_sending$1(pxQueue) = {}) & blocked$1\/{running$1}: FIN(TASK) & running$1: tasks$1 & unblocked$1: POW(blocked$1\/{running$1}) & n_runable: FIN(TASK) & not(running$1: n_runable) & n_runable/\blocked$1 = {} & blocked$1\/{running$1}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})}: QUEUE +-> POW(TASK) & dom(first_sending$1) = dom(queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})}) & !q1.(q1: queues$1 & q1: dom(first_sending$1) & not((queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q1) = {}) => first_sending$1(q1): (queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q1) => not(tk: (queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1) & not(running$2 = running$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(pxQueue: queues_msg_full$1) => pxQueue: queues_msg$1 & pvItemToQueue: ITEM & not(pvItemToQueue: queue_items$1(pxQueue)) & copy_position: (1..2)*{COPY_POSITION} & not(pxQueue: queues_msg_full$1) & (not(queue_receiving$1(pxQueue) = {}) => first_receiving$1(pxQueue): TASK & first_receiving$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & (pxQueue: queues_msg_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/(blocked$1\/{running$1})\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})}));
  "`Check that the invariant (runable = runable$1 & running = running$1 & first_sending = first_sending$1 & blocked = blocked$1 & unblocked = unblocked$1 & suspended = suspended$1 & return$1 = return & queue_sending = queue_sending$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & (queue_sending$1(pxQueue) = {} & first_sending$1 = first_sending$1<+{pxQueue|->running$1} or not(queue_sending$1(pxQueue) = {})) or (running$1: runable$1 & #(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & running$1: blocked$1 or (not(running$1: runable$1) & (running$1: blocked$1 & (blocked$1\/{running$1} = blocked$1-{running$1} & (running$1: unblocked$1 & unblocked$1 = unblocked$1-{running$1} or not(running$1: unblocked$1))) or (not(running$1: blocked$1) & running$1: blocked$1)) & (n_runable = runable$1 & running$2 = running$1)) & suspended$1 = suspended$1\/{running$1} & (queue_sending$1(pxQueue) = {} & first_sending$1 = first_sending$1<+{pxQueue|->running$1} or not(queue_sending$1(pxQueue) = {}))) or (7|->ERROR_DEFINITION = 8|->ERROR_DEFINITION & (running$1: blocked$1 & running$2 = running$1 & n_runable = runable$1 & queue_sending$1<+{pxQueue|->(queue_sending$1(pxQueue)\/{running$1})} = queue_sending$1)));
  ("`receiveItem preconditions in previous components'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & pxQueue: queues_msg_empty$1 & not(xTicksToWait = 0) & xTicksToWait = MAX_DELAY);
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & pxQueue: queues_msg_empty$1 & not(xTicksToWait = 0) & xTicksToWait = MAX_DELAY & q1: queues$1);
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & pxQueue: queues_msg_empty$1 & not(xTicksToWait = 0) & not(xTicksToWait = MAX_DELAY));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & pxQueue: queues_msg_empty$1 & not(xTicksToWait = 0) & not(xTicksToWait = MAX_DELAY) & q1: queues$1);
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}));
  (first_sending$1(pxQueue): TASK);
  (first_sending$1(pxQueue): blocked$1\/suspended$1);
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & pxQueue: queues_msg_empty$1 & not(xTicksToWait = 0) & xTicksToWait = MAX_DELAY & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & queue_receiving$1(pxQueue) = {} & running$2: n_runable & n_runable: FIN(TASK) & suspended$1\/{running$1}: FIN(TASK) & running$1: tasks$1 & n_runable/\blocked$1 = {} & not(running$1: blocked$1) & suspended$1\/{running$1}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->running$1}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->running$1}) = dom(queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->running$1}) & not((queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q1) = {}) => (first_receiving$1<+{pxQueue|->running$1})(q1): (queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q2))) & (active$1 = TRUE => not(running$2: suspended$1) & not(running$2 = running$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/{running$1}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})}));
  "`Check that the invariant (runable = runable$1 & running = running$1 & blocked = blocked$1 & first_receiving = first_receiving$1 & suspended = suspended$1 & unblocked = unblocked$1 & return$1 = return & queue_receiving = queue_receiving$1 & first_receiving = first_receiving$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & blocked$1 = blocked$1\/{running$1} & (queue_receiving$1(pxQueue) = {} or (not(queue_receiving$1(pxQueue) = {}) & first_receiving$1<+{pxQueue|->running$1} = first_receiving$1)) & running$1: suspended$1 or (running$1: runable$1 & #(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) or (not(running$1: runable$1) & (running$1: blocked$1 & (blocked$1 = blocked$1-{running$1} & (running$1: unblocked$1 & unblocked$1 = unblocked$1-{running$1} or not(running$1: unblocked$1))) or not(running$1: blocked$1)) & (n_runable = runable$1 & running$2 = running$1)) & (queue_receiving$1(pxQueue) = {} or (not(queue_receiving$1(pxQueue) = {}) & first_receiving$1<+{pxQueue|->running$1} = first_receiving$1))) or (7|->ERROR_DEFINITION = 8|->ERROR_DEFINITION & (running$2 = running$1 & n_runable = runable$1 & running$1: suspended$1 & queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})} = queue_receiving$1 & first_receiving$1<+{pxQueue|->running$1} = first_receiving$1)));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & pxQueue: queues_msg_empty$1 & not(xTicksToWait = 0) & xTicksToWait = MAX_DELAY & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & not(queue_receiving$1(pxQueue) = {}) & running$2: n_runable & n_runable: FIN(TASK) & suspended$1\/{running$1}: FIN(TASK) & running$1: tasks$1 & n_runable/\blocked$1 = {} & not(running$1: blocked$1) & suspended$1\/{running$1}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})}: QUEUE +-> POW(TASK) & dom(first_receiving$1) = dom(queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1) & not((queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q1) = {}) => first_receiving$1(q1): (queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q2))) & (active$1 = TRUE => not(running$2: suspended$1) & not(running$2 = running$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/{running$1}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})}));
  "`Check that the invariant (runable = runable$1 & running = running$1 & blocked = blocked$1 & first_receiving = first_receiving$1 & suspended = suspended$1 & unblocked = unblocked$1 & return$1 = return & queue_receiving = queue_receiving$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & blocked$1 = blocked$1\/{running$1} & (queue_receiving$1(pxQueue) = {} & first_receiving$1 = first_receiving$1<+{pxQueue|->running$1} or not(queue_receiving$1(pxQueue) = {})) & running$1: suspended$1 or (running$1: runable$1 & #(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) or (not(running$1: runable$1) & (running$1: blocked$1 & (blocked$1 = blocked$1-{running$1} & (running$1: unblocked$1 & unblocked$1 = unblocked$1-{running$1} or not(running$1: unblocked$1))) or not(running$1: blocked$1)) & (n_runable = runable$1 & running$2 = running$1)) & (queue_receiving$1(pxQueue) = {} & first_receiving$1 = first_receiving$1<+{pxQueue|->running$1} or not(queue_receiving$1(pxQueue) = {}))) or (7|->ERROR_DEFINITION = 8|->ERROR_DEFINITION & (running$2 = running$1 & n_runable = runable$1 & running$1: suspended$1 & queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})} = queue_receiving$1)));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & pxQueue: queues_msg_empty$1 & not(xTicksToWait = 0) & not(xTicksToWait = MAX_DELAY) & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & running$2: n_runable & queue_receiving$1(pxQueue) = {} & blocked$1\/{running$1}: FIN(TASK) & running$1: tasks$1 & unblocked$1: POW(blocked$1\/{running$1}) & n_runable: FIN(TASK) & not(running$1: n_runable) & n_runable/\blocked$1 = {} & blocked$1\/{running$1}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})}: QUEUE +-> POW(TASK) & first_receiving$1<+{pxQueue|->running$1}: QUEUE +-> TASK & dom(first_receiving$1<+{pxQueue|->running$1}) = dom(queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{pxQueue|->running$1}) & not((queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q1) = {}) => (first_receiving$1<+{pxQueue|->running$1})(q1): (queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1) & not(running$2 = running$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/(blocked$1\/{running$1})\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})}));
  "`Check that the invariant (runable = runable$1 & running = running$1 & first_receiving = first_receiving$1 & blocked = blocked$1 & unblocked = unblocked$1 & suspended = suspended$1 & return$1 = return & queue_receiving = queue_receiving$1 & first_receiving = first_receiving$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & (queue_receiving$1(pxQueue) = {} or (not(queue_receiving$1(pxQueue) = {}) & first_receiving$1<+{pxQueue|->running$1} = first_receiving$1)) or (running$1: runable$1 & #(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & running$1: blocked$1 or (not(running$1: runable$1) & (running$1: blocked$1 & (blocked$1\/{running$1} = blocked$1-{running$1} & (running$1: unblocked$1 & unblocked$1 = unblocked$1-{running$1} or not(running$1: unblocked$1))) or (not(running$1: blocked$1) & running$1: blocked$1)) & (n_runable = runable$1 & running$2 = running$1)) & suspended$1 = suspended$1\/{running$1} & (queue_receiving$1(pxQueue) = {} or (not(queue_receiving$1(pxQueue) = {}) & first_receiving$1<+{pxQueue|->running$1} = first_receiving$1))) or (7|->ERROR_DEFINITION = 8|->ERROR_DEFINITION & (running$1: blocked$1 & running$2 = running$1 & n_runable = runable$1 & queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})} = queue_receiving$1 & first_receiving$1<+{pxQueue|->running$1} = first_receiving$1)));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & pxQueue: queues_msg_empty$1 & not(xTicksToWait = 0) & not(xTicksToWait = MAX_DELAY) & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & running$2: n_runable & not(queue_receiving$1(pxQueue) = {}) & blocked$1\/{running$1}: FIN(TASK) & running$1: tasks$1 & unblocked$1: POW(blocked$1\/{running$1}) & n_runable: FIN(TASK) & not(running$1: n_runable) & n_runable/\blocked$1 = {} & blocked$1\/{running$1}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})}: QUEUE +-> POW(TASK) & dom(first_receiving$1) = dom(queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1) & not((queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q1) = {}) => first_receiving$1(q1): (queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q1) => not(tk: (queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1) & not(running$2 = running$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/(blocked$1\/{running$1})\/n_runable & queues$1 = dom(queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})}));
  "`Check that the invariant (runable = runable$1 & running = running$1 & first_receiving = first_receiving$1 & blocked = blocked$1 & unblocked = unblocked$1 & suspended = suspended$1 & return$1 = return & queue_receiving = queue_receiving$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & (queue_receiving$1(pxQueue) = {} & first_receiving$1 = first_receiving$1<+{pxQueue|->running$1} or not(queue_receiving$1(pxQueue) = {})) or (running$1: runable$1 & #(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & running$1: blocked$1 or (not(running$1: runable$1) & (running$1: blocked$1 & (blocked$1\/{running$1} = blocked$1-{running$1} & (running$1: unblocked$1 & unblocked$1 = unblocked$1-{running$1} or not(running$1: unblocked$1))) or (not(running$1: blocked$1) & running$1: blocked$1)) & (n_runable = runable$1 & running$2 = running$1)) & suspended$1 = suspended$1\/{running$1} & (queue_receiving$1(pxQueue) = {} & first_receiving$1 = first_receiving$1<+{pxQueue|->running$1} or not(queue_receiving$1(pxQueue) = {}))) or (7|->ERROR_DEFINITION = 8|->ERROR_DEFINITION & (running$1: blocked$1 & running$2 = running$1 & n_runable = runable$1 & queue_receiving$1<+{pxQueue|->(queue_receiving$1(pxQueue)\/{running$1})} = queue_receiving$1)));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & first_sending$1(pxQueue): suspended$1 & running$2: n_runable & pxQueue: queues_msg_full$1 & first_sending$1(pxQueue): unblocked$1 & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_sending$1(pxQueue)}: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  (queue_sending$1(pxQueue)-{first_sending$1(pxQueue)}: POW(TASK));
  (queue_sending$1<+{pxQueue|->n_sending} = queue_sending$1<+{pxQueue|->queue_sending$1(pxQueue)-{first_sending$1(pxQueue)}});
  (#(n_first$0).(n_first$0: TASK & n_first$0: queue_sending$1(pxQueue) & not(n_first$0 = first_sending$1(pxQueue)) & first_sending$1<+{pxQueue|->n_first} = first_sending$1<+{pxQueue|->n_first$0}));
  (first_sending$1(pxQueue): tasks$1);
  (#(running$0).(running$0: runable$1\/{first_sending$1(pxQueue)} & running$2 = running$0) or running$2 = running$1);
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & first_sending$1(pxQueue): suspended$1 & running$2: n_runable & pxQueue: queues_msg_full$1 & not(first_sending$1(pxQueue): unblocked$1) & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & first_sending$1(pxQueue): suspended$1 & running$2: n_runable & pxQueue: queues_msg_full$1 & first_sending$1(pxQueue): unblocked$1 & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_sending$1(pxQueue)}: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & first_sending$1(pxQueue): suspended$1 & running$2: n_runable & pxQueue: queues_msg_full$1 & not(first_sending$1(pxQueue): unblocked$1) & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & first_sending$1(pxQueue): suspended$1 & running$2: n_runable & not(pxQueue: queues_msg_full$1) & first_sending$1(pxQueue): unblocked$1 & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_sending$1(pxQueue)}: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1)) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & first_sending$1(pxQueue): suspended$1 & running$2: n_runable & not(pxQueue: queues_msg_full$1) & not(first_sending$1(pxQueue): unblocked$1) & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1)) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & first_sending$1(pxQueue): suspended$1 & running$2: n_runable & not(pxQueue: queues_msg_full$1) & first_sending$1(pxQueue): unblocked$1 & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_sending$1(pxQueue)}: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & first_sending$1(pxQueue): suspended$1 & running$2: n_runable & not(pxQueue: queues_msg_full$1) & not(first_sending$1(pxQueue): unblocked$1) & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & first_sending$1(pxQueue): suspended$1 & pxQueue: queues_msg_full$1 & first_sending$1(pxQueue): unblocked$1 & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_sending$1(pxQueue)}: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & first_sending$1(pxQueue): suspended$1 & pxQueue: queues_msg_full$1 & not(first_sending$1(pxQueue): unblocked$1) & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & first_sending$1(pxQueue): suspended$1 & pxQueue: queues_msg_full$1 & first_sending$1(pxQueue): unblocked$1 & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_sending$1(pxQueue)}: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & first_sending$1(pxQueue): suspended$1 & pxQueue: queues_msg_full$1 & not(first_sending$1(pxQueue): unblocked$1) & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & first_sending$1(pxQueue): suspended$1 & not(pxQueue: queues_msg_full$1) & first_sending$1(pxQueue): unblocked$1 & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_sending$1(pxQueue)}: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1)) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & first_sending$1(pxQueue): suspended$1 & not(pxQueue: queues_msg_full$1) & not(first_sending$1(pxQueue): unblocked$1) & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1)) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & first_sending$1(pxQueue): suspended$1 & not(pxQueue: queues_msg_full$1) & first_sending$1(pxQueue): unblocked$1 & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_sending$1(pxQueue)}: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & first_sending$1(pxQueue): suspended$1 & not(pxQueue: queues_msg_full$1) & not(first_sending$1(pxQueue): unblocked$1) & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & not(first_sending$1(pxQueue): suspended$1) & running$2: n_runable & pxQueue: queues_msg_full$1 & first_sending$1(pxQueue): unblocked$1 & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_sending$1(pxQueue)}: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & not(first_sending$1(pxQueue): suspended$1) & running$2: n_runable & pxQueue: queues_msg_full$1 & not(first_sending$1(pxQueue): unblocked$1) & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & not(first_sending$1(pxQueue): suspended$1) & running$2: n_runable & pxQueue: queues_msg_full$1 & first_sending$1(pxQueue): unblocked$1 & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_sending$1(pxQueue)}: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & not(first_sending$1(pxQueue): suspended$1) & running$2: n_runable & pxQueue: queues_msg_full$1 & not(first_sending$1(pxQueue): unblocked$1) & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & not(first_sending$1(pxQueue): suspended$1) & running$2: n_runable & not(pxQueue: queues_msg_full$1) & first_sending$1(pxQueue): unblocked$1 & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_sending$1(pxQueue)}: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1)) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & not(first_sending$1(pxQueue): suspended$1) & running$2: n_runable & not(pxQueue: queues_msg_full$1) & not(first_sending$1(pxQueue): unblocked$1) & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1)) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & not(first_sending$1(pxQueue): suspended$1) & running$2: n_runable & not(pxQueue: queues_msg_full$1) & first_sending$1(pxQueue): unblocked$1 & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_sending$1(pxQueue)}: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & not(first_sending$1(pxQueue): suspended$1) & running$2: n_runable & not(pxQueue: queues_msg_full$1) & not(first_sending$1(pxQueue): unblocked$1) & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & not(first_sending$1(pxQueue): suspended$1) & pxQueue: queues_msg_full$1 & first_sending$1(pxQueue): unblocked$1 & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_sending$1(pxQueue)}: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & not(first_sending$1(pxQueue): suspended$1) & pxQueue: queues_msg_full$1 & not(first_sending$1(pxQueue): unblocked$1) & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & not(first_sending$1(pxQueue): suspended$1) & pxQueue: queues_msg_full$1 & first_sending$1(pxQueue): unblocked$1 & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_sending$1(pxQueue)}: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & not(first_sending$1(pxQueue): suspended$1) & pxQueue: queues_msg_full$1 & not(first_sending$1(pxQueue): unblocked$1) & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & not(first_sending$1(pxQueue): suspended$1) & not(pxQueue: queues_msg_full$1) & first_sending$1(pxQueue): unblocked$1 & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_sending$1(pxQueue)}: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1)) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & not(first_sending$1(pxQueue): suspended$1) & not(pxQueue: queues_msg_full$1) & not(first_sending$1(pxQueue): unblocked$1) & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1)) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & not(first_sending$1(pxQueue): suspended$1) & not(pxQueue: queues_msg_full$1) & first_sending$1(pxQueue): unblocked$1 & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & unblocked$1-{first_sending$1(pxQueue)}: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & first_sending$1(pxQueue): blocked$1 & not(first_sending$1(pxQueue): suspended$1) & not(pxQueue: queues_msg_full$1) & not(first_sending$1(pxQueue): unblocked$1) & blocked$1-{first_sending$1(pxQueue)}: FIN(TASK) & blocked$1-{first_sending$1(pxQueue)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(pxQueue)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(pxQueue)} = {} & blocked$1-{first_sending$1(pxQueue)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(pxQueue)}\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & not(first_sending$1(pxQueue): blocked$1) & first_sending$1(pxQueue): suspended$1 & running$2: n_runable & pxQueue: queues_msg_full$1 & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & not(first_sending$1(pxQueue): blocked$1) & first_sending$1(pxQueue): suspended$1 & running$2: n_runable & pxQueue: queues_msg_full$1 & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & not(first_sending$1(pxQueue): blocked$1) & first_sending$1(pxQueue): suspended$1 & running$2: n_runable & not(pxQueue: queues_msg_full$1) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1)) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & not(first_sending$1(pxQueue): blocked$1) & first_sending$1(pxQueue): suspended$1 & running$2: n_runable & not(pxQueue: queues_msg_full$1) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_sending$1(pxQueue)))) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & not(first_sending$1(pxQueue): blocked$1) & first_sending$1(pxQueue): suspended$1 & pxQueue: queues_msg_full$1 & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & not(first_sending$1(pxQueue): blocked$1) & first_sending$1(pxQueue): suspended$1 & pxQueue: queues_msg_full$1 & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & not(first_sending$1(pxQueue): blocked$1) & first_sending$1(pxQueue): suspended$1 & not(pxQueue: queues_msg_full$1) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1)) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & not(first_sending$1(pxQueue): blocked$1) & first_sending$1(pxQueue): suspended$1 & not(pxQueue: queues_msg_full$1) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: FIN(TASK) & suspended$1-{first_sending$1(pxQueue)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_sending$1(pxQueue)} = {} & suspended$1-{first_sending$1(pxQueue)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(pxQueue)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1-{first_sending$1(pxQueue)}\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & not(first_sending$1(pxQueue): blocked$1) & not(first_sending$1(pxQueue): suspended$1) & running$2: n_runable & pxQueue: queues_msg_full$1 & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & not(first_sending$1(pxQueue): blocked$1) & not(first_sending$1(pxQueue): suspended$1) & running$2: n_runable & pxQueue: queues_msg_full$1 & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & not(first_sending$1(pxQueue): blocked$1) & not(first_sending$1(pxQueue): suspended$1) & running$2: n_runable & not(pxQueue: queues_msg_full$1) & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1)) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & not(first_sending$1(pxQueue): blocked$1) & not(first_sending$1(pxQueue): suspended$1) & running$2: n_runable & not(pxQueue: queues_msg_full$1) & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & not(first_sending$1(pxQueue): blocked$1) & not(first_sending$1(pxQueue): suspended$1) & pxQueue: queues_msg_full$1 & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & not(first_sending$1(pxQueue): blocked$1) & not(first_sending$1(pxQueue): suspended$1) & pxQueue: queues_msg_full$1 & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queues_msg_full$1-{pxQueue}: POW(queues_msg$1) & queues_msg_full$1-{pxQueue}/\queues_msg_empty$1 = {} & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & (que: queues_msg_full$1 & not(que = pxQueue)) => not(que: queues_msg_empty$1)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1 => not(que: queues_msg_full$1 & not(que = pxQueue))) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & not(first_sending$1(pxQueue): blocked$1) & not(first_sending$1(pxQueue): suspended$1) & not(pxQueue: queues_msg_full$1) & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & !que.(que: queues_msg$1 & que: queues_msg_full$1 => not(que: queues_msg_empty$1) & not(que = pxQueue)) & !que.(que: queues_msg$1 & que: queues_msg_empty$1\/{pxQueue} => not(que: queues_msg_full$1)) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`receiveItem preconditions in this component'" & active$1 = TRUE & not(running$1 = idle$1) & pxQueue: QUEUE & pxQueue: queues_msg$1 & xTicksToWait: TICK & justPeeking: BOOL & running$1: runable$1 & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(pxQueue: queues_msg_empty$1) & item: ITEM & item: queue_items$1(pxQueue) & justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(pxQueue)} & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending$1(pxQueue)-{first_sending$1(pxQueue)} & n_first: n_sending & not(first_sending$1(pxQueue): blocked$1) & not(first_sending$1(pxQueue): suspended$1) & not(pxQueue: queues_msg_full$1) & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{pxQueue|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{pxQueue|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{pxQueue|->n_first}) = dom(queue_sending$1<+{pxQueue|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{pxQueue|->n_first}) & not((queue_sending$1<+{pxQueue|->n_sending})(q1) = {}) => (first_sending$1<+{pxQueue|->n_first})(q1): (queue_sending$1<+{pxQueue|->n_sending})(q1)) & queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}: QUEUE +-> POW(ITEM) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{pxQueue|->n_sending})(q1) => not(tk: (queue_sending$1<+{pxQueue|->n_sending})(q2))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (pxQueue: queues_msg_empty$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & pxQueue: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(pxQueue: queues_msg_empty$1) => pxQueue: queues_msg$1 & justPeeking: BOOL & not(pxQueue: queues_msg_empty$1) & (justPeeking = FALSE & not(queue_sending$1(pxQueue) = {}) => first_sending$1(pxQueue): TASK & first_sending$1(pxQueue): blocked$1\/suspended$1 & active$1 = TRUE)) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{pxQueue|->n_sending}) & queues_msg$1 = dom(queue_items$1<+{pxQueue|->queue_items$1(pxQueue)-{item}}));
  ("`createSemaphore preconditions in previous components'" & maxCount: QUEUE_LENGTH & initialCount: QUEUE_QUANT & initialCount<=maxCount);
  ("`createSemaphore preconditions in this component'" & maxCount: QUEUE_LENGTH & initialCount: QUEUE_QUANT & initialCount<=maxCount & "`Local hypotheses'" & semaphore$0: QUEUE & not(semaphore$0: queues$1) & queue_receiving$1\/{semaphore$0|->{}}: QUEUE +-> POW(TASK) & queue_sending$1\/{semaphore$0|->{}}: QUEUE +-> POW(TASK) & queues$1\/{semaphore$0} = dom(queue_receiving$1\/{semaphore$0|->{}}) & queues$1\/{semaphore$0} = dom(queue_sending$1\/{semaphore$0|->{}}) & first_receiving$1\/{semaphore$0|->TASK_NULL}: QUEUE +-> TASK & first_sending$1\/{semaphore$0|->TASK_NULL}: QUEUE +-> TASK & dom(first_receiving$1\/{semaphore$0|->TASK_NULL}) = dom(queue_receiving$1\/{semaphore$0|->{}}) & dom(first_sending$1\/{semaphore$0|->TASK_NULL}) = dom(queue_sending$1\/{semaphore$0|->{}}) & !q1.(q1: queues$1\/{semaphore$0} & q1: dom(first_receiving$1\/{semaphore$0|->TASK_NULL}) & not((queue_receiving$1\/{semaphore$0|->{}})(q1) = {}) => (first_receiving$1\/{semaphore$0|->TASK_NULL})(q1): (queue_receiving$1\/{semaphore$0|->{}})(q1)) & !q1.(q1: queues$1\/{semaphore$0} & q1: dom(first_sending$1\/{semaphore$0|->TASK_NULL}) & not((queue_sending$1\/{semaphore$0|->{}})(q1) = {}) => (first_sending$1\/{semaphore$0|->TASK_NULL})(q1): (queue_sending$1\/{semaphore$0|->{}})(q1)) & queues_msg$1: POW(queues$1\/{semaphore$0}) & !(q1,q2,tk).(q1: queues$1\/{semaphore$0} & q2: queues$1\/{semaphore$0} & tk: TASK & tk: (queue_receiving$1\/{semaphore$0|->{}})(q1) => not(tk: (queue_sending$1\/{semaphore$0|->{}})(q2))) & !(q1,q2,tk).(q1: queues$1\/{semaphore$0} & q2: queues$1\/{semaphore$0} & tk: TASK & tk: (queue_sending$1\/{semaphore$0|->{}})(q2) => not(tk: (queue_receiving$1\/{semaphore$0|->{}})(q1))) & !(q1,q2,tk).(q1: queues$1\/{semaphore$0} & q2: queues$1\/{semaphore$0} & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1\/{semaphore$0|->{}})(q1) => not(tk: (queue_receiving$1\/{semaphore$0|->{}})(q2))) & !(q1,q2,tk).(q1: queues$1\/{semaphore$0} & q2: queues$1\/{semaphore$0} & not(q1 = q2) & tk: TASK & tk: (queue_sending$1\/{semaphore$0|->{}})(q1) => not(tk: (queue_sending$1\/{semaphore$0|->{}})(q2))) & semaphore$0: queues$1\/{semaphore$0} & semaphores$1: POW(queues$1\/{semaphore$0}) & semaphore$0: semaphores$1\/{semaphore$0} & semaphores_busy$1: POW(semaphores$1\/{semaphore$0}) & semaphores_full$1: POW(semaphores$1\/{semaphore$0}) & semaphores_busy$1\/{semaphore$0}/\semaphores_full$1 = {} & mutexes$1: POW(queues$1\/{semaphore$0}) & not(semaphore$0: queues_msg$1) & not(semaphore$0: mutexes$1) & !que.(que: QUEUE & (not(que: queues$1) & not(que = semaphore$0)) => not(que: mutexes$1)) & !que.(que: QUEUE & (not(que: queues$1) & not(que = semaphore$0)) => not(que: semaphores$1) & not(que = semaphore$0)));
  "`Check that the invariant (queues = queues$1 & queue_receiving = queue_receiving$1 & first_receiving = first_receiving$1 & queue_sending = queue_sending$1 & first_sending = first_sending$1 & semaphores = semaphores$1 & semaphores_busy = semaphores_busy$1 & semaphores_full = semaphores_full$1 & semaphore$1 = semaphore & semaphores_busy = semaphores_busy$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(semaphore$1).(semaphore$1: QUEUE & not(semaphore$1: queues$1) & (queues$1\/{semaphore$0} = queues$1\/{semaphore$1} & queue_receiving$1\/{semaphore$0|->{}} = queue_receiving$1\/{semaphore$1|->{}} & first_receiving$1\/{semaphore$0|->TASK_NULL} = first_receiving$1\/{semaphore$1|->TASK_NULL} & queue_sending$1\/{semaphore$0|->{}} = queue_sending$1\/{semaphore$1|->{}} & first_sending$1\/{semaphore$0|->TASK_NULL} = first_sending$1\/{semaphore$1|->TASK_NULL} & semaphores$1\/{semaphore$0} = semaphores$1\/{semaphore$1} & (semaphores_busy$1\/{semaphore$0} = semaphores_busy$1\/{semaphore$1} or (semaphores_full$1 = semaphores_full$1\/{semaphore$1} & semaphore$0: semaphores_busy$1) or semaphore$0: semaphores_busy$1) & semaphore$0 = semaphore$1)) or (semaphore$0 = QUEUE_NULL & (semaphore$0: queues$1 & semaphore$0|->{}: queue_receiving$1 & semaphore$0|->TASK_NULL: first_receiving$1 & semaphore$0|->{}: queue_sending$1 & semaphore$0|->TASK_NULL: first_sending$1 & semaphore$0: semaphores$1 & semaphore$0: semaphores_busy$1)));
  ("`createSemaphore preconditions in this component'" & maxCount: QUEUE_LENGTH & initialCount: QUEUE_QUANT & initialCount<=maxCount & "`Local hypotheses'" & semaphore$0: QUEUE & not(semaphore$0: queues$1) & queue_receiving$1\/{semaphore$0|->{}}: QUEUE +-> POW(TASK) & queue_sending$1\/{semaphore$0|->{}}: QUEUE +-> POW(TASK) & queues$1\/{semaphore$0} = dom(queue_receiving$1\/{semaphore$0|->{}}) & queues$1\/{semaphore$0} = dom(queue_sending$1\/{semaphore$0|->{}}) & first_receiving$1\/{semaphore$0|->TASK_NULL}: QUEUE +-> TASK & first_sending$1\/{semaphore$0|->TASK_NULL}: QUEUE +-> TASK & dom(first_receiving$1\/{semaphore$0|->TASK_NULL}) = dom(queue_receiving$1\/{semaphore$0|->{}}) & dom(first_sending$1\/{semaphore$0|->TASK_NULL}) = dom(queue_sending$1\/{semaphore$0|->{}}) & !q1.(q1: queues$1\/{semaphore$0} & q1: dom(first_receiving$1\/{semaphore$0|->TASK_NULL}) & not((queue_receiving$1\/{semaphore$0|->{}})(q1) = {}) => (first_receiving$1\/{semaphore$0|->TASK_NULL})(q1): (queue_receiving$1\/{semaphore$0|->{}})(q1)) & !q1.(q1: queues$1\/{semaphore$0} & q1: dom(first_sending$1\/{semaphore$0|->TASK_NULL}) & not((queue_sending$1\/{semaphore$0|->{}})(q1) = {}) => (first_sending$1\/{semaphore$0|->TASK_NULL})(q1): (queue_sending$1\/{semaphore$0|->{}})(q1)) & queues_msg$1: POW(queues$1\/{semaphore$0}) & !(q1,q2,tk).(q1: queues$1\/{semaphore$0} & q2: queues$1\/{semaphore$0} & tk: TASK & tk: (queue_receiving$1\/{semaphore$0|->{}})(q1) => not(tk: (queue_sending$1\/{semaphore$0|->{}})(q2))) & !(q1,q2,tk).(q1: queues$1\/{semaphore$0} & q2: queues$1\/{semaphore$0} & tk: TASK & tk: (queue_sending$1\/{semaphore$0|->{}})(q2) => not(tk: (queue_receiving$1\/{semaphore$0|->{}})(q1))) & !(q1,q2,tk).(q1: queues$1\/{semaphore$0} & q2: queues$1\/{semaphore$0} & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1\/{semaphore$0|->{}})(q1) => not(tk: (queue_receiving$1\/{semaphore$0|->{}})(q2))) & !(q1,q2,tk).(q1: queues$1\/{semaphore$0} & q2: queues$1\/{semaphore$0} & not(q1 = q2) & tk: TASK & tk: (queue_sending$1\/{semaphore$0|->{}})(q1) => not(tk: (queue_sending$1\/{semaphore$0|->{}})(q2))) & semaphore$0: queues$1\/{semaphore$0} & semaphores$1: POW(queues$1\/{semaphore$0}) & semaphores_busy$1: POW(semaphores$1\/{semaphore$0}) & semaphore$0: semaphores$1\/{semaphore$0} & semaphores_full$1: POW(semaphores$1\/{semaphore$0}) & not(semaphore$0: semaphores_busy$1) & mutexes$1: POW(queues$1\/{semaphore$0}) & not(semaphore$0: queues_msg$1) & not(semaphore$0: mutexes$1) & !que.(que: QUEUE & (not(que: queues$1) & not(que = semaphore$0)) => not(que: mutexes$1)) & !que.(que: QUEUE & (not(que: queues$1) & not(que = semaphore$0)) => not(que: semaphores$1) & not(que = semaphore$0)));
  "`Check that the invariant (queues = queues$1 & queue_receiving = queue_receiving$1 & first_receiving = first_receiving$1 & queue_sending = queue_sending$1 & first_sending = first_sending$1 & semaphores = semaphores$1 & semaphores_busy = semaphores_busy$1 & semaphores_full = semaphores_full$1 & semaphore$1 = semaphore & semaphores_full = semaphores_full$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(semaphore$1).(semaphore$1: QUEUE & not(semaphore$1: queues$1) & (queues$1\/{semaphore$0} = queues$1\/{semaphore$1} & queue_receiving$1\/{semaphore$0|->{}} = queue_receiving$1\/{semaphore$1|->{}} & first_receiving$1\/{semaphore$0|->TASK_NULL} = first_receiving$1\/{semaphore$1|->TASK_NULL} & queue_sending$1\/{semaphore$0|->{}} = queue_sending$1\/{semaphore$1|->{}} & first_sending$1\/{semaphore$0|->TASK_NULL} = first_sending$1\/{semaphore$1|->TASK_NULL} & semaphores$1\/{semaphore$0} = semaphores$1\/{semaphore$1} & (semaphores_busy$1 = semaphores_busy$1\/{semaphore$1} & semaphore$0: semaphores_full$1 or semaphores_full$1\/{semaphore$0} = semaphores_full$1\/{semaphore$1} or semaphore$0: semaphores_full$1) & semaphore$0 = semaphore$1)) or (semaphore$0 = QUEUE_NULL & (semaphore$0: queues$1 & semaphore$0|->{}: queue_receiving$1 & semaphore$0|->TASK_NULL: first_receiving$1 & semaphore$0|->{}: queue_sending$1 & semaphore$0|->TASK_NULL: first_sending$1 & semaphore$0: semaphores$1 & semaphore$0: semaphores_full$1)));
  ("`createSemaphore preconditions in this component'" & maxCount: QUEUE_LENGTH & initialCount: QUEUE_QUANT & initialCount<=maxCount & "`Local hypotheses'" & semaphore$0: QUEUE & not(semaphore$0: queues$1) & queue_receiving$1\/{semaphore$0|->{}}: QUEUE +-> POW(TASK) & queue_sending$1\/{semaphore$0|->{}}: QUEUE +-> POW(TASK) & queues$1\/{semaphore$0} = dom(queue_receiving$1\/{semaphore$0|->{}}) & queues$1\/{semaphore$0} = dom(queue_sending$1\/{semaphore$0|->{}}) & first_receiving$1\/{semaphore$0|->TASK_NULL}: QUEUE +-> TASK & first_sending$1\/{semaphore$0|->TASK_NULL}: QUEUE +-> TASK & dom(first_receiving$1\/{semaphore$0|->TASK_NULL}) = dom(queue_receiving$1\/{semaphore$0|->{}}) & dom(first_sending$1\/{semaphore$0|->TASK_NULL}) = dom(queue_sending$1\/{semaphore$0|->{}}) & !q1.(q1: queues$1\/{semaphore$0} & q1: dom(first_receiving$1\/{semaphore$0|->TASK_NULL}) & not((queue_receiving$1\/{semaphore$0|->{}})(q1) = {}) => (first_receiving$1\/{semaphore$0|->TASK_NULL})(q1): (queue_receiving$1\/{semaphore$0|->{}})(q1)) & !q1.(q1: queues$1\/{semaphore$0} & q1: dom(first_sending$1\/{semaphore$0|->TASK_NULL}) & not((queue_sending$1\/{semaphore$0|->{}})(q1) = {}) => (first_sending$1\/{semaphore$0|->TASK_NULL})(q1): (queue_sending$1\/{semaphore$0|->{}})(q1)) & queues_msg$1: POW(queues$1\/{semaphore$0}) & !(q1,q2,tk).(q1: queues$1\/{semaphore$0} & q2: queues$1\/{semaphore$0} & tk: TASK & tk: (queue_receiving$1\/{semaphore$0|->{}})(q1) => not(tk: (queue_sending$1\/{semaphore$0|->{}})(q2))) & !(q1,q2,tk).(q1: queues$1\/{semaphore$0} & q2: queues$1\/{semaphore$0} & tk: TASK & tk: (queue_sending$1\/{semaphore$0|->{}})(q2) => not(tk: (queue_receiving$1\/{semaphore$0|->{}})(q1))) & !(q1,q2,tk).(q1: queues$1\/{semaphore$0} & q2: queues$1\/{semaphore$0} & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1\/{semaphore$0|->{}})(q1) => not(tk: (queue_receiving$1\/{semaphore$0|->{}})(q2))) & !(q1,q2,tk).(q1: queues$1\/{semaphore$0} & q2: queues$1\/{semaphore$0} & not(q1 = q2) & tk: TASK & tk: (queue_sending$1\/{semaphore$0|->{}})(q1) => not(tk: (queue_sending$1\/{semaphore$0|->{}})(q2))) & semaphore$0: queues$1\/{semaphore$0} & semaphores$1: POW(queues$1\/{semaphore$0}) & semaphores_busy$1: POW(semaphores$1\/{semaphore$0}) & semaphores_full$1: POW(semaphores$1\/{semaphore$0}) & mutexes$1: POW(queues$1\/{semaphore$0}) & not(semaphore$0: queues_msg$1) & not(semaphore$0: mutexes$1) & !que.(que: QUEUE & (not(que: queues$1) & not(que = semaphore$0)) => not(que: mutexes$1)) & !que.(que: QUEUE & (not(que: queues$1) & not(que = semaphore$0)) => not(que: semaphores$1) & not(que = semaphore$0)));
  "`Check that the invariant (queues = queues$1 & queue_receiving = queue_receiving$1 & first_receiving = first_receiving$1 & queue_sending = queue_sending$1 & first_sending = first_sending$1 & semaphores = semaphores$1 & semaphore$1 = semaphore & semaphores = semaphores$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(semaphore$1).(semaphore$1: QUEUE & not(semaphore$1: queues$1) & (queues$1\/{semaphore$0} = queues$1\/{semaphore$1} & queue_receiving$1\/{semaphore$0|->{}} = queue_receiving$1\/{semaphore$1|->{}} & first_receiving$1\/{semaphore$0|->TASK_NULL} = first_receiving$1\/{semaphore$1|->TASK_NULL} & queue_sending$1\/{semaphore$0|->{}} = queue_sending$1\/{semaphore$1|->{}} & first_sending$1\/{semaphore$0|->TASK_NULL} = first_sending$1\/{semaphore$1|->TASK_NULL} & semaphores$1\/{semaphore$0} = semaphores$1\/{semaphore$1} & semaphore$0 = semaphore$1)) or (semaphore$0 = QUEUE_NULL & (semaphore$0: queues$1 & semaphore$0|->{}: queue_receiving$1 & semaphore$0|->TASK_NULL: first_receiving$1 & semaphore$0|->{}: queue_sending$1 & semaphore$0|->TASK_NULL: first_sending$1 & semaphore$0: semaphores$1)));
  ("`takeSemaphore preconditions in previous components'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & not(queue_sending$1(semaphore) = {}));
  (first_sending$1(semaphore): TASK);
  (first_sending$1(semaphore): blocked$1\/suspended$1);
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & semaphore: semaphores_busy$1 & not(xTicksToWait = 0) & xTicksToWait = MAX_DELAY);
  (semaphore: queues$1);
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & semaphore: semaphores_busy$1 & not(xTicksToWait = 0) & xTicksToWait = MAX_DELAY & q1: queues$1);
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & semaphore: semaphores_busy$1 & not(xTicksToWait = 0) & not(xTicksToWait = MAX_DELAY));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & semaphore: semaphores_busy$1 & not(xTicksToWait = 0) & not(xTicksToWait = MAX_DELAY) & q1: queues$1);
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & semaphore: semaphores_full$1 & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & first_sending$1(semaphore): suspended$1 & running$2: n_runable & first_sending$1(semaphore): unblocked$1 & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_sending$1(semaphore)}: FIN(TASK) & unblocked$1-{first_sending$1(semaphore)}: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1-{first_sending$1(semaphore)} = {} & suspended$1-{first_sending$1(semaphore)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_full$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1/\semaphores_full$1-{semaphore} = {} & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_sending$1(semaphore)}\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  "`Check that the invariant (semaphores_full = semaphores_full$1) is preserved by the operation - ref 4.4, 5.5'";
  (queue_sending$1(semaphore)-{first_sending$1(semaphore)}: POW(TASK));
  (queue_sending$1<+{semaphore|->n_sending} = queue_sending$1<+{semaphore|->queue_sending$1(semaphore)-{first_sending$1(semaphore)}});
  (#(n_first$0).(n_first$0: TASK & n_first$0: queue_sending$1(semaphore) & not(n_first$0 = first_sending$1(semaphore)) & first_sending$1<+{semaphore|->n_first} = first_sending$1<+{semaphore|->n_first$0}));
  (first_sending$1(semaphore): tasks$1);
  (#(running$0).(running$0: runable$1\/{first_sending$1(semaphore)} & running$2 = running$0) or running$2 = running$1);
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & semaphore: semaphores_full$1 & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & first_sending$1(semaphore): suspended$1 & running$2: n_runable & not(first_sending$1(semaphore): unblocked$1) & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1-{first_sending$1(semaphore)} = {} & suspended$1-{first_sending$1(semaphore)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_full$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1/\semaphores_full$1-{semaphore} = {} & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_sending$1(semaphore)}\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & semaphore: semaphores_full$1 & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & first_sending$1(semaphore): suspended$1 & first_sending$1(semaphore): unblocked$1 & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_sending$1(semaphore)}: FIN(TASK) & unblocked$1-{first_sending$1(semaphore)}: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1-{first_sending$1(semaphore)} = {} & suspended$1-{first_sending$1(semaphore)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_full$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1/\semaphores_full$1-{semaphore} = {} & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_sending$1(semaphore)}\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & semaphore: semaphores_full$1 & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & first_sending$1(semaphore): suspended$1 & not(first_sending$1(semaphore): unblocked$1) & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1-{first_sending$1(semaphore)} = {} & suspended$1-{first_sending$1(semaphore)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_full$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1/\semaphores_full$1-{semaphore} = {} & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_sending$1(semaphore)}\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & semaphore: semaphores_full$1 & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & not(first_sending$1(semaphore): suspended$1) & running$2: n_runable & first_sending$1(semaphore): unblocked$1 & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_sending$1(semaphore)}: FIN(TASK) & unblocked$1-{first_sending$1(semaphore)}: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_full$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1/\semaphores_full$1-{semaphore} = {} & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & semaphore: semaphores_full$1 & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & not(first_sending$1(semaphore): suspended$1) & running$2: n_runable & not(first_sending$1(semaphore): unblocked$1) & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_full$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1/\semaphores_full$1-{semaphore} = {} & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & semaphore: semaphores_full$1 & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & not(first_sending$1(semaphore): suspended$1) & first_sending$1(semaphore): unblocked$1 & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_sending$1(semaphore)}: FIN(TASK) & unblocked$1-{first_sending$1(semaphore)}: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_full$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1/\semaphores_full$1-{semaphore} = {} & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & semaphore: semaphores_full$1 & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & not(first_sending$1(semaphore): suspended$1) & not(first_sending$1(semaphore): unblocked$1) & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_full$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1/\semaphores_full$1-{semaphore} = {} & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & semaphore: semaphores_full$1 & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & not(first_sending$1(semaphore): blocked$1) & first_sending$1(semaphore): suspended$1 & running$2: n_runable & n_runable: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_sending$1(semaphore)} = {} & suspended$1-{first_sending$1(semaphore)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_full$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1/\semaphores_full$1-{semaphore} = {} & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_sending$1(semaphore)}\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & semaphore: semaphores_full$1 & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & not(first_sending$1(semaphore): blocked$1) & first_sending$1(semaphore): suspended$1 & n_runable: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_sending$1(semaphore)} = {} & suspended$1-{first_sending$1(semaphore)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_full$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1/\semaphores_full$1-{semaphore} = {} & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_sending$1(semaphore)}\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & semaphore: semaphores_full$1 & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & not(first_sending$1(semaphore): blocked$1) & not(first_sending$1(semaphore): suspended$1) & running$2: n_runable & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_full$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1/\semaphores_full$1-{semaphore} = {} & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & semaphore: semaphores_full$1 & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & not(first_sending$1(semaphore): blocked$1) & not(first_sending$1(semaphore): suspended$1) & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_full$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1/\semaphores_full$1-{semaphore} = {} & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & semaphore: semaphores_full$1 & queue_sending$1(semaphore) = {} & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_full$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1/\semaphores_full$1-{semaphore} = {} & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & first_sending$1(semaphore): suspended$1 & running$2: n_runable & first_sending$1(semaphore): unblocked$1 & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_sending$1(semaphore)}: FIN(TASK) & unblocked$1-{first_sending$1(semaphore)}: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1-{first_sending$1(semaphore)} = {} & suspended$1-{first_sending$1(semaphore)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_busy$1\/{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_sending$1(semaphore)}\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  "`Check that the invariant (semaphores_busy = semaphores_busy$1) is preserved by the operation - ref 4.4, 5.5'";
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & first_sending$1(semaphore): suspended$1 & running$2: n_runable & not(first_sending$1(semaphore): unblocked$1) & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1-{first_sending$1(semaphore)} = {} & suspended$1-{first_sending$1(semaphore)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_busy$1\/{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_sending$1(semaphore)}\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & first_sending$1(semaphore): suspended$1 & first_sending$1(semaphore): unblocked$1 & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_sending$1(semaphore)}: FIN(TASK) & unblocked$1-{first_sending$1(semaphore)}: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1-{first_sending$1(semaphore)} = {} & suspended$1-{first_sending$1(semaphore)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_busy$1\/{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_sending$1(semaphore)}\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & first_sending$1(semaphore): suspended$1 & not(first_sending$1(semaphore): unblocked$1) & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1-{first_sending$1(semaphore)} = {} & suspended$1-{first_sending$1(semaphore)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_busy$1\/{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_sending$1(semaphore)}\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & not(first_sending$1(semaphore): suspended$1) & running$2: n_runable & first_sending$1(semaphore): unblocked$1 & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_sending$1(semaphore)}: FIN(TASK) & unblocked$1-{first_sending$1(semaphore)}: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_busy$1\/{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & not(first_sending$1(semaphore): suspended$1) & running$2: n_runable & not(first_sending$1(semaphore): unblocked$1) & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_busy$1\/{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & not(first_sending$1(semaphore): suspended$1) & first_sending$1(semaphore): unblocked$1 & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_sending$1(semaphore)}: FIN(TASK) & unblocked$1-{first_sending$1(semaphore)}: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_busy$1\/{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & not(first_sending$1(semaphore): suspended$1) & not(first_sending$1(semaphore): unblocked$1) & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_busy$1\/{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & not(first_sending$1(semaphore): blocked$1) & first_sending$1(semaphore): suspended$1 & running$2: n_runable & n_runable: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_sending$1(semaphore)} = {} & suspended$1-{first_sending$1(semaphore)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_busy$1\/{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_sending$1(semaphore)}\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & not(first_sending$1(semaphore): blocked$1) & first_sending$1(semaphore): suspended$1 & n_runable: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_sending$1(semaphore)} = {} & suspended$1-{first_sending$1(semaphore)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_busy$1\/{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_sending$1(semaphore)}\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & not(first_sending$1(semaphore): blocked$1) & not(first_sending$1(semaphore): suspended$1) & running$2: n_runable & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_busy$1\/{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & not(first_sending$1(semaphore): blocked$1) & not(first_sending$1(semaphore): suspended$1) & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_busy$1\/{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & first_sending$1(semaphore): suspended$1 & running$2: n_runable & first_sending$1(semaphore): unblocked$1 & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_sending$1(semaphore)}: FIN(TASK) & unblocked$1-{first_sending$1(semaphore)}: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1-{first_sending$1(semaphore)} = {} & suspended$1-{first_sending$1(semaphore)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_sending$1(semaphore)}\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & first_sending$1(semaphore): suspended$1 & running$2: n_runable & not(first_sending$1(semaphore): unblocked$1) & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1-{first_sending$1(semaphore)} = {} & suspended$1-{first_sending$1(semaphore)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_sending$1(semaphore)}\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & first_sending$1(semaphore): suspended$1 & first_sending$1(semaphore): unblocked$1 & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_sending$1(semaphore)}: FIN(TASK) & unblocked$1-{first_sending$1(semaphore)}: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1-{first_sending$1(semaphore)} = {} & suspended$1-{first_sending$1(semaphore)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_sending$1(semaphore)}\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & first_sending$1(semaphore): suspended$1 & not(first_sending$1(semaphore): unblocked$1) & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1-{first_sending$1(semaphore)} = {} & suspended$1-{first_sending$1(semaphore)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_sending$1(semaphore)}\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & not(first_sending$1(semaphore): suspended$1) & running$2: n_runable & first_sending$1(semaphore): unblocked$1 & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_sending$1(semaphore)}: FIN(TASK) & unblocked$1-{first_sending$1(semaphore)}: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & not(first_sending$1(semaphore): suspended$1) & running$2: n_runable & not(first_sending$1(semaphore): unblocked$1) & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & not(first_sending$1(semaphore): suspended$1) & first_sending$1(semaphore): unblocked$1 & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_sending$1(semaphore)}: FIN(TASK) & unblocked$1-{first_sending$1(semaphore)}: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & first_sending$1(semaphore): blocked$1 & not(first_sending$1(semaphore): suspended$1) & not(first_sending$1(semaphore): unblocked$1) & blocked$1-{first_sending$1(semaphore)}: FIN(TASK) & blocked$1-{first_sending$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_sending$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_sending$1(semaphore)} = {} & blocked$1-{first_sending$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_sending$1(semaphore)}\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & not(first_sending$1(semaphore): blocked$1) & first_sending$1(semaphore): suspended$1 & running$2: n_runable & n_runable: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_sending$1(semaphore)} = {} & suspended$1-{first_sending$1(semaphore)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_sending$1(semaphore)))) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_sending$1(semaphore)}\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & not(first_sending$1(semaphore): blocked$1) & first_sending$1(semaphore): suspended$1 & n_runable: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: FIN(TASK) & suspended$1-{first_sending$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_sending$1(semaphore)} = {} & suspended$1-{first_sending$1(semaphore)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_sending$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_sending$1(semaphore)}\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & not(first_sending$1(semaphore): blocked$1) & not(first_sending$1(semaphore): suspended$1) & running$2: n_runable & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & not(queue_sending$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_sending$1(semaphore)} & not(first_sending$1(semaphore): blocked$1) & not(first_sending$1(semaphore): suspended$1) & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & queue_sending$1(semaphore) = {} & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & semaphores_busy$1\/{semaphore}/\semaphores_full$1 = {} & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_busy$1) & n_sending: POW(TASK) & n_sending = queue_sending$1(semaphore)-{first_sending$1(semaphore)} & n_first: TASK & n_first: n_sending & not(semaphore: semaphores_full$1) & queue_sending$1(semaphore) = {} & queue_sending$1<+{semaphore|->n_sending}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->n_first}) = dom(queue_sending$1<+{semaphore|->n_sending}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->n_first}) & not((queue_sending$1<+{semaphore|->n_sending})(q1) = {}) => (first_sending$1<+{semaphore|->n_first})(q1): (queue_sending$1<+{semaphore|->n_sending})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->n_sending})(q1) => not(tk: (queue_sending$1<+{semaphore|->n_sending})(q2))) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & queues$1 = dom(queue_sending$1<+{semaphore|->n_sending}));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & semaphore: semaphores_busy$1 & not(xTicksToWait = 0) & xTicksToWait = MAX_DELAY & running$1: runable$1 & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & queue_receiving$1(semaphore) = {} & running$2: n_runable & n_runable: FIN(TASK) & suspended$1\/{running$1}: FIN(TASK) & running$1: tasks$1 & n_runable/\blocked$1 = {} & not(running$1: blocked$1) & suspended$1\/{running$1}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->running$1}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->running$1}) = dom(queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->running$1}) & not((queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q1) = {}) => (first_receiving$1<+{semaphore|->running$1})(q1): (queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q1) => not(tk: (queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q2))) & (active$1 = TRUE => not(running$2: suspended$1) & not(running$2 = running$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/{running$1}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})}));
  (#(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & blocked$1 = blocked$1\/{running$1} & (queue_receiving$1(semaphore) = {} or (not(queue_receiving$1(semaphore) = {}) & first_receiving$1<+{semaphore|->running$1} = first_receiving$1)) & running$1: suspended$1 or (running$1: runable$1 & #(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) or (not(running$1: runable$1) & (running$1: blocked$1 & (blocked$1 = blocked$1-{running$1} & (running$1: unblocked$1 & unblocked$1 = unblocked$1-{running$1} or not(running$1: unblocked$1))) or not(running$1: blocked$1)) & (n_runable = runable$1 & running$2 = running$1)) & (queue_receiving$1(semaphore) = {} or (not(queue_receiving$1(semaphore) = {}) & first_receiving$1<+{semaphore|->running$1} = first_receiving$1))) or (7|->ERROR_DEFINITION = 8|->ERROR_DEFINITION & (running$2 = running$1 & n_runable = runable$1 & running$1: suspended$1 & queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})} = queue_receiving$1 & first_receiving$1<+{semaphore|->running$1} = first_receiving$1)));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & semaphore: semaphores_busy$1 & not(xTicksToWait = 0) & xTicksToWait = MAX_DELAY & running$1: runable$1 & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & not(queue_receiving$1(semaphore) = {}) & running$2: n_runable & n_runable: FIN(TASK) & suspended$1\/{running$1}: FIN(TASK) & running$1: tasks$1 & n_runable/\blocked$1 = {} & not(running$1: blocked$1) & suspended$1\/{running$1}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})}: QUEUE +-> POW(TASK) & dom(first_receiving$1) = dom(queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1) & not((queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q1) = {}) => first_receiving$1(q1): (queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q1) => not(tk: (queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q2))) & (active$1 = TRUE => not(running$2: suspended$1) & not(running$2 = running$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/{running$1}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})}));
  (#(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & blocked$1 = blocked$1\/{running$1} & (queue_receiving$1(semaphore) = {} & first_receiving$1 = first_receiving$1<+{semaphore|->running$1} or not(queue_receiving$1(semaphore) = {})) & running$1: suspended$1 or (running$1: runable$1 & #(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) or (not(running$1: runable$1) & (running$1: blocked$1 & (blocked$1 = blocked$1-{running$1} & (running$1: unblocked$1 & unblocked$1 = unblocked$1-{running$1} or not(running$1: unblocked$1))) or not(running$1: blocked$1)) & (n_runable = runable$1 & running$2 = running$1)) & (queue_receiving$1(semaphore) = {} & first_receiving$1 = first_receiving$1<+{semaphore|->running$1} or not(queue_receiving$1(semaphore) = {}))) or (7|->ERROR_DEFINITION = 8|->ERROR_DEFINITION & (running$2 = running$1 & n_runable = runable$1 & running$1: suspended$1 & queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})} = queue_receiving$1)));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & semaphore: semaphores_busy$1 & not(xTicksToWait = 0) & not(xTicksToWait = MAX_DELAY) & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & running$2: n_runable & queue_receiving$1(semaphore) = {} & blocked$1\/{running$1}: FIN(TASK) & running$1: tasks$1 & unblocked$1: POW(blocked$1\/{running$1}) & n_runable: FIN(TASK) & not(running$1: n_runable) & n_runable/\blocked$1 = {} & blocked$1\/{running$1}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->running$1}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->running$1}) = dom(queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->running$1}) & not((queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q1) = {}) => (first_receiving$1<+{semaphore|->running$1})(q1): (queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q1) => not(tk: (queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1) & not(running$2 = running$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/(blocked$1\/{running$1})\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})}));
  (#(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & (queue_receiving$1(semaphore) = {} or (not(queue_receiving$1(semaphore) = {}) & first_receiving$1<+{semaphore|->running$1} = first_receiving$1)) or (running$1: runable$1 & #(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & running$1: blocked$1 or (not(running$1: runable$1) & (running$1: blocked$1 & (blocked$1\/{running$1} = blocked$1-{running$1} & (running$1: unblocked$1 & unblocked$1 = unblocked$1-{running$1} or not(running$1: unblocked$1))) or (not(running$1: blocked$1) & running$1: blocked$1)) & (n_runable = runable$1 & running$2 = running$1)) & suspended$1 = suspended$1\/{running$1} & (queue_receiving$1(semaphore) = {} or (not(queue_receiving$1(semaphore) = {}) & first_receiving$1<+{semaphore|->running$1} = first_receiving$1))) or (7|->ERROR_DEFINITION = 8|->ERROR_DEFINITION & (running$1: blocked$1 & running$2 = running$1 & n_runable = runable$1 & queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})} = queue_receiving$1 & first_receiving$1<+{semaphore|->running$1} = first_receiving$1)));
  ("`takeSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & semaphore: semaphores_busy$1 & not(xTicksToWait = 0) & not(xTicksToWait = MAX_DELAY) & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & running$2: n_runable & not(queue_receiving$1(semaphore) = {}) & blocked$1\/{running$1}: FIN(TASK) & running$1: tasks$1 & unblocked$1: POW(blocked$1\/{running$1}) & n_runable: FIN(TASK) & not(running$1: n_runable) & n_runable/\blocked$1 = {} & blocked$1\/{running$1}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})}: QUEUE +-> POW(TASK) & dom(first_receiving$1) = dom(queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1) & not((queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q1) = {}) => first_receiving$1(q1): (queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q1) => not(tk: (queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1) & not(running$2 = running$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_busy$1) => semaphore: semaphores$1 & not(semaphore: semaphores_busy$1) & (not(queue_sending$1(semaphore) = {}) => first_sending$1(semaphore): TASK & first_sending$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_busy$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/(blocked$1\/{running$1})\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})}));
  (#(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & (queue_receiving$1(semaphore) = {} & first_receiving$1 = first_receiving$1<+{semaphore|->running$1} or not(queue_receiving$1(semaphore) = {})) or (running$1: runable$1 & #(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & running$1: blocked$1 or (not(running$1: runable$1) & (running$1: blocked$1 & (blocked$1\/{running$1} = blocked$1-{running$1} & (running$1: unblocked$1 & unblocked$1 = unblocked$1-{running$1} or not(running$1: unblocked$1))) or (not(running$1: blocked$1) & running$1: blocked$1)) & (n_runable = runable$1 & running$2 = running$1)) & suspended$1 = suspended$1\/{running$1} & (queue_receiving$1(semaphore) = {} & first_receiving$1 = first_receiving$1<+{semaphore|->running$1} or not(queue_receiving$1(semaphore) = {}))) or (7|->ERROR_DEFINITION = 8|->ERROR_DEFINITION & (running$1: blocked$1 & running$2 = running$1 & n_runable = runable$1 & queue_receiving$1<+{semaphore|->(queue_receiving$1(semaphore)\/{running$1})} = queue_receiving$1)));
  ("`giveSemaphore preconditions in previous components'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & not(queue_receiving$1(semaphore) = {}));
  (first_receiving$1(semaphore): TASK);
  (first_receiving$1(semaphore): blocked$1\/suspended$1);
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & semaphore: semaphores_full$1 & not(xTicksToWait = 0) & xTicksToWait = MAX_DELAY);
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & semaphore: semaphores_full$1 & not(xTicksToWait = 0) & xTicksToWait = MAX_DELAY & q1: queues$1);
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & semaphore: semaphores_full$1 & not(xTicksToWait = 0) & not(xTicksToWait = MAX_DELAY));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & semaphore: semaphores_full$1 & not(xTicksToWait = 0) & not(xTicksToWait = MAX_DELAY) & q1: queues$1);
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & semaphore: semaphores_busy$1 & first_receiving$1(semaphore): blocked$1 & first_receiving$1(semaphore): suspended$1 & running$2: n_runable & first_receiving$1(semaphore): unblocked$1 & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & unblocked$1-{first_receiving$1(semaphore)}: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1-{first_receiving$1(semaphore)} = {} & suspended$1-{first_receiving$1(semaphore)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & semaphores_busy$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1-{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(semaphore)}\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  "`Check that the invariant (semaphores_busy = semaphores_busy$1 & semaphores_busy = semaphores_busy$1) is preserved by the operation - ref 4.4, 5.5'";
  (semaphore: semaphores_busy$1 or (not(semaphore: semaphores_busy$1) & semaphores_busy$1-{semaphore} = semaphores_busy$1) or semaphores_busy$1-{semaphore} = semaphores_busy$1);
  (queue_receiving$1(semaphore)-{first_receiving$1(semaphore)}: POW(TASK));
  (queue_receiving$1<+{semaphore|->n_receiving} = queue_receiving$1<+{semaphore|->queue_receiving$1(semaphore)-{first_receiving$1(semaphore)}});
  (#(n_first$0).(n_first$0: TASK & n_first$0: queue_receiving$1(semaphore) & not(n_first$0 = first_receiving$1(semaphore)) & first_receiving$1<+{semaphore|->n_first} = first_receiving$1<+{semaphore|->n_first$0}));
  (first_receiving$1(semaphore): tasks$1);
  (#(running$0).(running$0: runable$1\/{first_receiving$1(semaphore)} & running$2 = running$0) or running$2 = running$1);
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & semaphore: semaphores_busy$1 & first_receiving$1(semaphore): blocked$1 & first_receiving$1(semaphore): suspended$1 & running$2: n_runable & not(first_receiving$1(semaphore): unblocked$1) & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1-{first_receiving$1(semaphore)} = {} & suspended$1-{first_receiving$1(semaphore)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & semaphores_busy$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1-{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(semaphore)}\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & semaphore: semaphores_busy$1 & first_receiving$1(semaphore): blocked$1 & first_receiving$1(semaphore): suspended$1 & first_receiving$1(semaphore): unblocked$1 & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & unblocked$1-{first_receiving$1(semaphore)}: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1-{first_receiving$1(semaphore)} = {} & suspended$1-{first_receiving$1(semaphore)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & semaphores_busy$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1-{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(semaphore)}\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & semaphore: semaphores_busy$1 & first_receiving$1(semaphore): blocked$1 & first_receiving$1(semaphore): suspended$1 & not(first_receiving$1(semaphore): unblocked$1) & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1-{first_receiving$1(semaphore)} = {} & suspended$1-{first_receiving$1(semaphore)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & semaphores_busy$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1-{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(semaphore)}\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & semaphore: semaphores_busy$1 & first_receiving$1(semaphore): blocked$1 & not(first_receiving$1(semaphore): suspended$1) & running$2: n_runable & first_receiving$1(semaphore): unblocked$1 & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & unblocked$1-{first_receiving$1(semaphore)}: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & semaphores_busy$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1-{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & semaphore: semaphores_busy$1 & first_receiving$1(semaphore): blocked$1 & not(first_receiving$1(semaphore): suspended$1) & running$2: n_runable & not(first_receiving$1(semaphore): unblocked$1) & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & semaphores_busy$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1-{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & semaphore: semaphores_busy$1 & first_receiving$1(semaphore): blocked$1 & not(first_receiving$1(semaphore): suspended$1) & first_receiving$1(semaphore): unblocked$1 & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & unblocked$1-{first_receiving$1(semaphore)}: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & semaphores_busy$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1-{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & semaphore: semaphores_busy$1 & first_receiving$1(semaphore): blocked$1 & not(first_receiving$1(semaphore): suspended$1) & not(first_receiving$1(semaphore): unblocked$1) & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & semaphores_busy$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1-{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & semaphore: semaphores_busy$1 & not(first_receiving$1(semaphore): blocked$1) & first_receiving$1(semaphore): suspended$1 & running$2: n_runable & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_receiving$1(semaphore)} = {} & suspended$1-{first_receiving$1(semaphore)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & semaphores_busy$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1-{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(semaphore)}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & semaphore: semaphores_busy$1 & not(first_receiving$1(semaphore): blocked$1) & first_receiving$1(semaphore): suspended$1 & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_receiving$1(semaphore)} = {} & suspended$1-{first_receiving$1(semaphore)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & semaphores_busy$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1-{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(semaphore)}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & semaphore: semaphores_busy$1 & not(first_receiving$1(semaphore): blocked$1) & not(first_receiving$1(semaphore): suspended$1) & running$2: n_runable & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & semaphores_busy$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1-{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & semaphore: semaphores_busy$1 & not(first_receiving$1(semaphore): blocked$1) & not(first_receiving$1(semaphore): suspended$1) & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & semaphores_busy$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1-{semaphore}/\semaphores_full$1 = {} & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & not(semaphore: semaphores_busy$1) & first_receiving$1(semaphore): blocked$1 & first_receiving$1(semaphore): suspended$1 & running$2: n_runable & first_receiving$1(semaphore): unblocked$1 & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & unblocked$1-{first_receiving$1(semaphore)}: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1-{first_receiving$1(semaphore)} = {} & suspended$1-{first_receiving$1(semaphore)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(semaphore)}\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & not(semaphore: semaphores_busy$1) & first_receiving$1(semaphore): blocked$1 & first_receiving$1(semaphore): suspended$1 & running$2: n_runable & not(first_receiving$1(semaphore): unblocked$1) & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1-{first_receiving$1(semaphore)} = {} & suspended$1-{first_receiving$1(semaphore)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(semaphore)}\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & not(semaphore: semaphores_busy$1) & first_receiving$1(semaphore): blocked$1 & first_receiving$1(semaphore): suspended$1 & first_receiving$1(semaphore): unblocked$1 & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & unblocked$1-{first_receiving$1(semaphore)}: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1-{first_receiving$1(semaphore)} = {} & suspended$1-{first_receiving$1(semaphore)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(semaphore)}\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & not(semaphore: semaphores_busy$1) & first_receiving$1(semaphore): blocked$1 & first_receiving$1(semaphore): suspended$1 & not(first_receiving$1(semaphore): unblocked$1) & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1-{first_receiving$1(semaphore)} = {} & suspended$1-{first_receiving$1(semaphore)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(semaphore)}\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & not(semaphore: semaphores_busy$1) & first_receiving$1(semaphore): blocked$1 & not(first_receiving$1(semaphore): suspended$1) & running$2: n_runable & first_receiving$1(semaphore): unblocked$1 & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & unblocked$1-{first_receiving$1(semaphore)}: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & not(semaphore: semaphores_busy$1) & first_receiving$1(semaphore): blocked$1 & not(first_receiving$1(semaphore): suspended$1) & running$2: n_runable & not(first_receiving$1(semaphore): unblocked$1) & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & not(semaphore: semaphores_busy$1) & first_receiving$1(semaphore): blocked$1 & not(first_receiving$1(semaphore): suspended$1) & first_receiving$1(semaphore): unblocked$1 & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & unblocked$1-{first_receiving$1(semaphore)}: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & not(semaphore: semaphores_busy$1) & first_receiving$1(semaphore): blocked$1 & not(first_receiving$1(semaphore): suspended$1) & not(first_receiving$1(semaphore): unblocked$1) & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & not(semaphore: semaphores_busy$1) & not(first_receiving$1(semaphore): blocked$1) & first_receiving$1(semaphore): suspended$1 & running$2: n_runable & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_receiving$1(semaphore)} = {} & suspended$1-{first_receiving$1(semaphore)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(semaphore)}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & not(semaphore: semaphores_busy$1) & not(first_receiving$1(semaphore): blocked$1) & first_receiving$1(semaphore): suspended$1 & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_receiving$1(semaphore)} = {} & suspended$1-{first_receiving$1(semaphore)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(semaphore)}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & not(semaphore: semaphores_busy$1) & not(first_receiving$1(semaphore): blocked$1) & not(first_receiving$1(semaphore): suspended$1) & running$2: n_runable & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & not(semaphore: semaphores_busy$1) & not(first_receiving$1(semaphore): blocked$1) & not(first_receiving$1(semaphore): suspended$1) & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & queue_receiving$1(semaphore) = {} & semaphore: semaphores_busy$1 & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & semaphores_busy$1-{semaphore}: POW(semaphores$1) & semaphores_busy$1-{semaphore}/\semaphores_full$1 = {} & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & queue_receiving$1(semaphore) = {} & not(semaphore: semaphores_busy$1) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & first_receiving$1(semaphore): blocked$1 & first_receiving$1(semaphore): suspended$1 & running$2: n_runable & first_receiving$1(semaphore): unblocked$1 & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & unblocked$1-{first_receiving$1(semaphore)}: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1-{first_receiving$1(semaphore)} = {} & suspended$1-{first_receiving$1(semaphore)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(semaphore)}\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & first_receiving$1(semaphore): blocked$1 & first_receiving$1(semaphore): suspended$1 & running$2: n_runable & not(first_receiving$1(semaphore): unblocked$1) & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1-{first_receiving$1(semaphore)} = {} & suspended$1-{first_receiving$1(semaphore)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(semaphore)}\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & first_receiving$1(semaphore): blocked$1 & first_receiving$1(semaphore): suspended$1 & first_receiving$1(semaphore): unblocked$1 & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & unblocked$1-{first_receiving$1(semaphore)}: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1-{first_receiving$1(semaphore)} = {} & suspended$1-{first_receiving$1(semaphore)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(semaphore)}\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & first_receiving$1(semaphore): blocked$1 & first_receiving$1(semaphore): suspended$1 & not(first_receiving$1(semaphore): unblocked$1) & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1-{first_receiving$1(semaphore)} = {} & suspended$1-{first_receiving$1(semaphore)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(semaphore)}\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & first_receiving$1(semaphore): blocked$1 & not(first_receiving$1(semaphore): suspended$1) & running$2: n_runable & first_receiving$1(semaphore): unblocked$1 & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & unblocked$1-{first_receiving$1(semaphore)}: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & first_receiving$1(semaphore): blocked$1 & not(first_receiving$1(semaphore): suspended$1) & running$2: n_runable & not(first_receiving$1(semaphore): unblocked$1) & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & first_receiving$1(semaphore): blocked$1 & not(first_receiving$1(semaphore): suspended$1) & first_receiving$1(semaphore): unblocked$1 & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & unblocked$1-{first_receiving$1(semaphore)}: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & first_receiving$1(semaphore): blocked$1 & not(first_receiving$1(semaphore): suspended$1) & not(first_receiving$1(semaphore): unblocked$1) & blocked$1-{first_receiving$1(semaphore)}: FIN(TASK) & blocked$1-{first_receiving$1(semaphore)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(semaphore)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(semaphore)} = {} & blocked$1-{first_receiving$1(semaphore)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(semaphore)}\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & not(first_receiving$1(semaphore): blocked$1) & first_receiving$1(semaphore): suspended$1 & running$2: n_runable & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_receiving$1(semaphore)} = {} & suspended$1-{first_receiving$1(semaphore)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(semaphore)))) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(semaphore)}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & not(first_receiving$1(semaphore): blocked$1) & first_receiving$1(semaphore): suspended$1 & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: FIN(TASK) & suspended$1-{first_receiving$1(semaphore)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_receiving$1(semaphore)} = {} & suspended$1-{first_receiving$1(semaphore)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(semaphore)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1-{first_receiving$1(semaphore)}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & not(first_receiving$1(semaphore): blocked$1) & not(first_receiving$1(semaphore): suspended$1) & running$2: n_runable & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(semaphore) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(semaphore)} & not(first_receiving$1(semaphore): blocked$1) & not(first_receiving$1(semaphore): suspended$1) & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & not(semaphore: semaphores_full$1) & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(semaphore)-{first_receiving$1(semaphore)} & n_first: TASK & n_first: n_receiving & queue_receiving$1(semaphore) = {} & queue_receiving$1<+{semaphore|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{semaphore|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{semaphore|->n_first}) = dom(queue_receiving$1<+{semaphore|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{semaphore|->n_first}) & not((queue_receiving$1<+{semaphore|->n_receiving})(q1) = {}) => (first_receiving$1<+{semaphore|->n_first})(q1): (queue_receiving$1<+{semaphore|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{semaphore|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{semaphore|->n_receiving})(q2))) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & queues$1 = dom(queue_receiving$1<+{semaphore|->n_receiving}));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & semaphore: semaphores_full$1 & not(xTicksToWait = 0) & xTicksToWait = MAX_DELAY & running$1: runable$1 & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & queue_sending$1(semaphore) = {} & running$2: n_runable & n_runable: FIN(TASK) & suspended$1\/{running$1}: FIN(TASK) & running$1: tasks$1 & n_runable/\blocked$1 = {} & not(running$1: blocked$1) & suspended$1\/{running$1}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->running$1}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->running$1}) = dom(queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->running$1}) & not((queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q1) = {}) => (first_sending$1<+{semaphore|->running$1})(q1): (queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q1) => not(tk: (queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q2))) & (active$1 = TRUE => not(running$2: suspended$1) & not(running$2 = running$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/{running$1}\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})}));
  (#(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & blocked$1 = blocked$1\/{running$1} & (queue_sending$1(semaphore) = {} or (not(queue_sending$1(semaphore) = {}) & first_sending$1<+{semaphore|->running$1} = first_sending$1)) & running$1: suspended$1 or (running$1: runable$1 & #(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) or (not(running$1: runable$1) & (running$1: blocked$1 & (blocked$1 = blocked$1-{running$1} & (running$1: unblocked$1 & unblocked$1 = unblocked$1-{running$1} or not(running$1: unblocked$1))) or not(running$1: blocked$1)) & (n_runable = runable$1 & running$2 = running$1)) & (queue_sending$1(semaphore) = {} or (not(queue_sending$1(semaphore) = {}) & first_sending$1<+{semaphore|->running$1} = first_sending$1))) or (7|->ERROR_DEFINITION = 8|->ERROR_DEFINITION & (running$2 = running$1 & n_runable = runable$1 & running$1: suspended$1 & queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})} = queue_sending$1 & first_sending$1<+{semaphore|->running$1} = first_sending$1)));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & semaphore: semaphores_full$1 & not(xTicksToWait = 0) & xTicksToWait = MAX_DELAY & running$1: runable$1 & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & not(queue_sending$1(semaphore) = {}) & running$2: n_runable & n_runable: FIN(TASK) & suspended$1\/{running$1}: FIN(TASK) & running$1: tasks$1 & n_runable/\blocked$1 = {} & not(running$1: blocked$1) & suspended$1\/{running$1}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})}: QUEUE +-> POW(TASK) & dom(first_sending$1) = dom(queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})}) & !q1.(q1: queues$1 & q1: dom(first_sending$1) & not((queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q1) = {}) => first_sending$1(q1): (queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q1) => not(tk: (queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q2))) & (active$1 = TRUE => not(running$2: suspended$1) & not(running$2 = running$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/{running$1}\/blocked$1\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})}));
  (#(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & blocked$1 = blocked$1\/{running$1} & (queue_sending$1(semaphore) = {} & first_sending$1 = first_sending$1<+{semaphore|->running$1} or not(queue_sending$1(semaphore) = {})) & running$1: suspended$1 or (running$1: runable$1 & #(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) or (not(running$1: runable$1) & (running$1: blocked$1 & (blocked$1 = blocked$1-{running$1} & (running$1: unblocked$1 & unblocked$1 = unblocked$1-{running$1} or not(running$1: unblocked$1))) or not(running$1: blocked$1)) & (n_runable = runable$1 & running$2 = running$1)) & (queue_sending$1(semaphore) = {} & first_sending$1 = first_sending$1<+{semaphore|->running$1} or not(queue_sending$1(semaphore) = {}))) or (7|->ERROR_DEFINITION = 8|->ERROR_DEFINITION & (running$2 = running$1 & n_runable = runable$1 & running$1: suspended$1 & queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})} = queue_sending$1)));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & semaphore: semaphores_full$1 & not(xTicksToWait = 0) & not(xTicksToWait = MAX_DELAY) & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & running$2: n_runable & queue_sending$1(semaphore) = {} & blocked$1\/{running$1}: FIN(TASK) & running$1: tasks$1 & unblocked$1: POW(blocked$1\/{running$1}) & n_runable: FIN(TASK) & not(running$1: n_runable) & n_runable/\blocked$1 = {} & blocked$1\/{running$1}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})}: QUEUE +-> POW(TASK) & first_sending$1<+{semaphore|->running$1}: QUEUE +-> TASK & dom(first_sending$1<+{semaphore|->running$1}) = dom(queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})}) & !q1.(q1: queues$1 & q1: dom(first_sending$1<+{semaphore|->running$1}) & not((queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q1) = {}) => (first_sending$1<+{semaphore|->running$1})(q1): (queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q1) => not(tk: (queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1) & not(running$2 = running$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/(blocked$1\/{running$1})\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})}));
  (#(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & (queue_sending$1(semaphore) = {} or (not(queue_sending$1(semaphore) = {}) & first_sending$1<+{semaphore|->running$1} = first_sending$1)) or (running$1: runable$1 & #(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & running$1: blocked$1 or (not(running$1: runable$1) & (running$1: blocked$1 & (blocked$1\/{running$1} = blocked$1-{running$1} & (running$1: unblocked$1 & unblocked$1 = unblocked$1-{running$1} or not(running$1: unblocked$1))) or (not(running$1: blocked$1) & running$1: blocked$1)) & (n_runable = runable$1 & running$2 = running$1)) & suspended$1 = suspended$1\/{running$1} & (queue_sending$1(semaphore) = {} or (not(queue_sending$1(semaphore) = {}) & first_sending$1<+{semaphore|->running$1} = first_sending$1))) or (7|->ERROR_DEFINITION = 8|->ERROR_DEFINITION & (running$1: blocked$1 & running$2 = running$1 & n_runable = runable$1 & queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})} = queue_sending$1 & first_sending$1<+{semaphore|->running$1} = first_sending$1)));
  ("`giveSemaphore preconditions in this component'" & semaphore: semaphores$1 & xTicksToWait: TICK & not(running$1 = idle$1) & active$1 = TRUE & not(running$1 = TASK_NULL) & "`Local hypotheses'" & semaphore: semaphores_full$1 & not(xTicksToWait = 0) & not(xTicksToWait = MAX_DELAY) & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & running$2: n_runable & not(queue_sending$1(semaphore) = {}) & blocked$1\/{running$1}: FIN(TASK) & running$1: tasks$1 & unblocked$1: POW(blocked$1\/{running$1}) & n_runable: FIN(TASK) & not(running$1: n_runable) & n_runable/\blocked$1 = {} & blocked$1\/{running$1}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})}: QUEUE +-> POW(TASK) & dom(first_sending$1) = dom(queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})}) & !q1.(q1: queues$1 & q1: dom(first_sending$1) & not((queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q1) = {}) => first_sending$1(q1): (queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: (queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q1) => not(tk: (queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1) & not(running$2 = running$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(semaphore: semaphores_full$1) => semaphore: semaphores$1 & (not(queue_receiving$1(semaphore) = {}) => first_receiving$1(semaphore): TASK & first_receiving$1(semaphore): blocked$1\/suspended$1 & active$1 = TRUE)) & (semaphore: semaphores_full$1 => running$1: TASK & running$1: runable$1 & not(running$1 = idle$1) & xTicksToWait: TICK & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1))) & running$1: TASK & running$1: tasks$1 & not(running$1 = idle$1) & semaphore: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & tasks$1 = suspended$1\/(blocked$1\/{running$1})\/n_runable & queues$1 = dom(queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})}));
  (#(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & (queue_sending$1(semaphore) = {} & first_sending$1 = first_sending$1<+{semaphore|->running$1} or not(queue_sending$1(semaphore) = {})) or (running$1: runable$1 & #(n_runable$0).(n_runable$0: POW(tasks$1) & n_runable$0 = runable$1-{running$1} & (n_runable = n_runable$0 & #(running$0).(running$0: n_runable$0 & running$2 = running$0))) & running$1: blocked$1 or (not(running$1: runable$1) & (running$1: blocked$1 & (blocked$1\/{running$1} = blocked$1-{running$1} & (running$1: unblocked$1 & unblocked$1 = unblocked$1-{running$1} or not(running$1: unblocked$1))) or (not(running$1: blocked$1) & running$1: blocked$1)) & (n_runable = runable$1 & running$2 = running$1)) & suspended$1 = suspended$1\/{running$1} & (queue_sending$1(semaphore) = {} & first_sending$1 = first_sending$1<+{semaphore|->running$1} or not(queue_sending$1(semaphore) = {}))) or (7|->ERROR_DEFINITION = 8|->ERROR_DEFINITION & (running$1: blocked$1 & running$2 = running$1 & n_runable = runable$1 & queue_sending$1<+{semaphore|->(queue_sending$1(semaphore)\/{running$1})} = queue_sending$1)));
  ("`Local hypotheses'" & mutex$0: QUEUE & not(mutex$0: queues$1) & queue_receiving$1\/{mutex$0|->{}}: QUEUE +-> POW(TASK) & queue_sending$1\/{mutex$0|->{}}: QUEUE +-> POW(TASK) & queues$1\/{mutex$0} = dom(queue_receiving$1\/{mutex$0|->{}}) & queues$1\/{mutex$0} = dom(queue_sending$1\/{mutex$0|->{}}) & first_receiving$1\/{mutex$0|->TASK_NULL}: QUEUE +-> TASK & first_sending$1\/{mutex$0|->TASK_NULL}: QUEUE +-> TASK & dom(first_receiving$1\/{mutex$0|->TASK_NULL}) = dom(queue_receiving$1\/{mutex$0|->{}}) & dom(first_sending$1\/{mutex$0|->TASK_NULL}) = dom(queue_sending$1\/{mutex$0|->{}}) & !q1.(q1: queues$1\/{mutex$0} & q1: dom(first_receiving$1\/{mutex$0|->TASK_NULL}) & not((queue_receiving$1\/{mutex$0|->{}})(q1) = {}) => (first_receiving$1\/{mutex$0|->TASK_NULL})(q1): (queue_receiving$1\/{mutex$0|->{}})(q1)) & !q1.(q1: queues$1\/{mutex$0} & q1: dom(first_sending$1\/{mutex$0|->TASK_NULL}) & not((queue_sending$1\/{mutex$0|->{}})(q1) = {}) => (first_sending$1\/{mutex$0|->TASK_NULL})(q1): (queue_sending$1\/{mutex$0|->{}})(q1)) & queues_msg$1: POW(queues$1\/{mutex$0}) & !(q1,q2,tk).(q1: queues$1\/{mutex$0} & q2: queues$1\/{mutex$0} & tk: TASK & tk: (queue_receiving$1\/{mutex$0|->{}})(q1) => not(tk: (queue_sending$1\/{mutex$0|->{}})(q2))) & !(q1,q2,tk).(q1: queues$1\/{mutex$0} & q2: queues$1\/{mutex$0} & tk: TASK & tk: (queue_sending$1\/{mutex$0|->{}})(q2) => not(tk: (queue_receiving$1\/{mutex$0|->{}})(q1))) & !(q1,q2,tk).(q1: queues$1\/{mutex$0} & q2: queues$1\/{mutex$0} & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1\/{mutex$0|->{}})(q1) => not(tk: (queue_receiving$1\/{mutex$0|->{}})(q2))) & !(q1,q2,tk).(q1: queues$1\/{mutex$0} & q2: queues$1\/{mutex$0} & not(q1 = q2) & tk: TASK & tk: (queue_sending$1\/{mutex$0|->{}})(q1) => not(tk: (queue_sending$1\/{mutex$0|->{}})(q2))) & semaphores$1: POW(queues$1\/{mutex$0}) & mutex$0: queues$1\/{mutex$0} & mutexes$1: POW(queues$1\/{mutex$0}) & mutex_holder$1\/{mutex$0|->TASK_NULL}: QUEUE +-> TASK & mutexes$1\/{mutex$0} = dom(mutex_holder$1\/{mutex$0|->TASK_NULL}) & mutexes_busy$1: POW(mutexes$1\/{mutex$0}) & !mt.(mt: mutexes_busy$1 => not((mutex_holder$1\/{mutex$0|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes$1\/{mutex$0} & not(mt: mutexes_busy$1) => (mutex_holder$1\/{mutex$0|->TASK_NULL})(mt) = TASK_NULL) & not(mutex$0: queues_msg$1) & mutexes$1\/{mutex$0}/\semaphores$1 = {} & !que.(que: QUEUE & (not(que: queues$1) & not(que = mutex$0)) => not(que: mutexes$1) & not(que = mutex$0)) & !que.(que: QUEUE & (not(que: queues$1) & not(que = mutex$0)) => not(que: semaphores$1)));
  "`Check that the invariant (queues = queues$1 & mutexes = mutexes$1 & queue_receiving = queue_receiving$1 & first_receiving = first_receiving$1 & queue_sending = queue_sending$1 & first_sending = first_sending$1 & mutex_holder = mutex_holder$1 & mutex$1 = mutex & mutex_holder = mutex_holder$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(mutex$1).(mutex$1: QUEUE & not(mutex$1: queues$1) & (queues$1\/{mutex$0} = queues$1\/{mutex$1} & mutexes$1\/{mutex$0} = mutexes$1\/{mutex$1} & queue_receiving$1\/{mutex$0|->{}} = queue_receiving$1\/{mutex$1|->{}} & first_receiving$1\/{mutex$0|->TASK_NULL} = first_receiving$1\/{mutex$1|->TASK_NULL} & queue_sending$1\/{mutex$0|->{}} = queue_sending$1\/{mutex$1|->{}} & first_sending$1\/{mutex$0|->TASK_NULL} = first_sending$1\/{mutex$1|->TASK_NULL} & mutex_holder$1\/{mutex$0|->TASK_NULL} = mutex_holder$1\/{mutex$1|->TASK_NULL} & mutex$0 = mutex$1)) or (mutex$0 = QUEUE_NULL & (mutex$0: queues$1 & mutex$0: mutexes$1 & mutex$0|->{}: queue_receiving$1 & mutex$0|->TASK_NULL: first_receiving$1 & mutex$0|->{}: queue_sending$1 & mutex$0|->TASK_NULL: first_sending$1 & mutex$0|->TASK_NULL: mutex_holder$1)));
  ("`takeMutex preconditions in previous components'" & mutex: mutexes$1 & xTicksToWait: TICK & active$1 = TRUE & not(running$1 = idle$1));
  ("`takeMutex preconditions in this component'" & mutex: mutexes$1 & xTicksToWait: TICK & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & mutex: mutexes_busy$1);
  (mutex_holder$1(mutex): tasks$1);
  (not(mutex_holder$1(mutex) = idle$1));
  (mutex: queues$1);
  ("`takeMutex preconditions in this component'" & mutex: mutexes$1 & xTicksToWait: TICK & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & mutex: mutexes_busy$1 & q1: queues$1);
  ("`takeMutex preconditions in this component'" & mutex: mutexes$1 & xTicksToWait: TICK & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & not(mutex: mutexes_busy$1));
  (not(running$1 = TASK_NULL));
  ("`takeMutex preconditions in this component'" & mutex: mutexes$1 & xTicksToWait: TICK & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & mutex: mutexes_busy$1 & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & running$2: n_runable & queue_receiving$1(mutex) = {} & blocked$1\/{running$1}: FIN(TASK) & running$1: tasks$1 & unblocked$1: POW(blocked$1\/{running$1}) & n_runable: FIN(TASK) & not(running$1: n_runable) & n_runable/\blocked$1 = {} & blocked$1\/{running$1}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{mutex|->(queue_receiving$1(mutex)\/{running$1})}: QUEUE +-> POW(TASK) & first_receiving$1<+{mutex|->running$1}: QUEUE +-> TASK & dom(first_receiving$1<+{mutex|->running$1}) = dom(queue_receiving$1<+{mutex|->(queue_receiving$1(mutex)\/{running$1})}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{mutex|->running$1}) & not((queue_receiving$1<+{mutex|->(queue_receiving$1(mutex)\/{running$1})})(q1) = {}) => (first_receiving$1<+{mutex|->running$1})(q1): (queue_receiving$1<+{mutex|->(queue_receiving$1(mutex)\/{running$1})})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{mutex|->(queue_receiving$1(mutex)\/{running$1})})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{mutex|->(queue_receiving$1(mutex)\/{running$1})})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{mutex|->(queue_receiving$1(mutex)\/{running$1})})(q1) => not(tk: (queue_receiving$1<+{mutex|->(queue_receiving$1(mutex)\/{running$1})})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1) & not(running$2 = running$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (mutex: mutexes_busy$1 => xTicksToWait: TICK & mutex_holder$1(mutex): tasks$1 & not(mutex_holder$1(mutex) = idle$1) & not(running$1 = idle$1) & running$1: runable$1 & active$1 = TRUE & mutex: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(mutex: mutexes_busy$1) => mutex: mutexes$1 & not(mutex: mutexes_busy$1) & running$1: TASK & not(running$1 = TASK_NULL)) & tasks$1 = suspended$1\/(blocked$1\/{running$1})\/n_runable & queues$1 = dom(queue_receiving$1<+{mutex|->(queue_receiving$1(mutex)\/{running$1})}));
  "`Check that the invariant (mutex_holder = mutex_holder$1) is preserved by the operation - ref 4.4, 5.5'";
  ("`takeMutex preconditions in this component'" & mutex: mutexes$1 & xTicksToWait: TICK & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & mutex: mutexes_busy$1 & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & running$2: n_runable & not(queue_receiving$1(mutex) = {}) & blocked$1\/{running$1}: FIN(TASK) & running$1: tasks$1 & unblocked$1: POW(blocked$1\/{running$1}) & n_runable: FIN(TASK) & not(running$1: n_runable) & n_runable/\blocked$1 = {} & blocked$1\/{running$1}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{mutex|->(queue_receiving$1(mutex)\/{running$1})}: QUEUE +-> POW(TASK) & dom(first_receiving$1) = dom(queue_receiving$1<+{mutex|->(queue_receiving$1(mutex)\/{running$1})}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1) & not((queue_receiving$1<+{mutex|->(queue_receiving$1(mutex)\/{running$1})})(q1) = {}) => first_receiving$1(q1): (queue_receiving$1<+{mutex|->(queue_receiving$1(mutex)\/{running$1})})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{mutex|->(queue_receiving$1(mutex)\/{running$1})})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{mutex|->(queue_receiving$1(mutex)\/{running$1})})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{mutex|->(queue_receiving$1(mutex)\/{running$1})})(q1) => not(tk: (queue_receiving$1<+{mutex|->(queue_receiving$1(mutex)\/{running$1})})(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1) & not(running$2 = running$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (mutex: mutexes_busy$1 => xTicksToWait: TICK & mutex_holder$1(mutex): tasks$1 & not(mutex_holder$1(mutex) = idle$1) & not(running$1 = idle$1) & running$1: runable$1 & active$1 = TRUE & mutex: queues$1 & running$1: TASK & !q1.(q1: queues$1 => not(running$1: queue_sending$1(q1)) & not(running$1: queue_receiving$1(q1)))) & (not(mutex: mutexes_busy$1) => mutex: mutexes$1 & not(mutex: mutexes_busy$1) & running$1: TASK & not(running$1 = TASK_NULL)) & tasks$1 = suspended$1\/(blocked$1\/{running$1})\/n_runable & queues$1 = dom(queue_receiving$1<+{mutex|->(queue_receiving$1(mutex)\/{running$1})}));
  ("`giveMutex preconditions in previous components'" & mutex: mutexes$1 & mutex: mutexes_busy$1 & mutex_holder$1(mutex) = running$1 & xTicksToWait: TICK & active$1 = TRUE);
  ("`giveMutex preconditions in this component'" & mutex: mutexes$1 & mutex: mutexes_busy$1 & mutex_holder$1(mutex) = running$1 & xTicksToWait: TICK & active$1 = TRUE & "`Local hypotheses'" & not(queue_receiving$1(mutex) = {}));
  (first_receiving$1(mutex): TASK);
  (first_receiving$1(mutex): tasks$1);
  (first_receiving$1(mutex): blocked$1\/suspended$1);
  (not(running$1 = idle$1));
  ("`giveMutex preconditions in this component'" & mutex: mutexes$1 & mutex: mutexes_busy$1 & mutex_holder$1(mutex) = running$1 & xTicksToWait: TICK & active$1 = TRUE & "`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(mutex)-{first_receiving$1(mutex)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(mutex) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(mutex)} & first_receiving$1(mutex): blocked$1 & first_receiving$1(mutex): suspended$1 & running$2: n_runable & first_receiving$1(mutex): unblocked$1 & blocked$1-{first_receiving$1(mutex)}: FIN(TASK) & blocked$1-{first_receiving$1(mutex)}: POW(tasks$1) & unblocked$1-{first_receiving$1(mutex)}: FIN(TASK) & unblocked$1-{first_receiving$1(mutex)}: POW(blocked$1-{first_receiving$1(mutex)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(mutex)}: FIN(TASK) & suspended$1-{first_receiving$1(mutex)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(mutex)} = {} & blocked$1-{first_receiving$1(mutex)}/\suspended$1-{first_receiving$1(mutex)} = {} & suspended$1-{first_receiving$1(mutex)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{mutex|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{mutex|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{mutex|->n_first}) = dom(queue_receiving$1<+{mutex|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{mutex|->n_first}) & not((queue_receiving$1<+{mutex|->n_receiving})(q1) = {}) => (first_receiving$1<+{mutex|->n_first})(q1): (queue_receiving$1<+{mutex|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q2))) & mutex_holder$1<+{mutex|->TASK_NULL}: QUEUE +-> TASK & mutexes_busy$1-{mutex}: POW(mutexes$1) & !mt.(mt: mutexes_busy$1 & not(mt = mutex) => not((mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes$1 & not(mt: mutexes_busy$1 & not(mt = mutex)) => (mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(mutex)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(mutex)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(mutex)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(mutex)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(queue_receiving$1(mutex) = {}) => first_receiving$1(mutex): TASK & first_receiving$1(mutex): tasks$1 & first_receiving$1(mutex): blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1)) & tasks$1 = suspended$1-{first_receiving$1(mutex)}\/blocked$1-{first_receiving$1(mutex)}\/n_runable & queues$1 = dom(queue_receiving$1<+{mutex|->n_receiving}) & mutexes$1 = dom(mutex_holder$1<+{mutex|->TASK_NULL}));
  (queue_receiving$1(mutex)-{first_receiving$1(mutex)}: POW(TASK));
  (queue_receiving$1<+{mutex|->n_receiving} = queue_receiving$1<+{mutex|->queue_receiving$1(mutex)-{first_receiving$1(mutex)}});
  (#(n_first$0).(n_first$0: TASK & n_first$0: queue_receiving$1(mutex) & not(n_first$0 = first_receiving$1(mutex)) & first_receiving$1<+{mutex|->n_first} = first_receiving$1<+{mutex|->n_first$0}));
  (#(running$0).(running$0: runable$1\/{first_receiving$1(mutex)} & running$2 = running$0) or running$2 = running$1);
  ("`giveMutex preconditions in this component'" & mutex: mutexes$1 & mutex: mutexes_busy$1 & mutex_holder$1(mutex) = running$1 & xTicksToWait: TICK & active$1 = TRUE & "`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(mutex)-{first_receiving$1(mutex)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(mutex) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(mutex)} & first_receiving$1(mutex): blocked$1 & first_receiving$1(mutex): suspended$1 & running$2: n_runable & not(first_receiving$1(mutex): unblocked$1) & blocked$1-{first_receiving$1(mutex)}: FIN(TASK) & blocked$1-{first_receiving$1(mutex)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(mutex)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(mutex)}: FIN(TASK) & suspended$1-{first_receiving$1(mutex)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(mutex)} = {} & blocked$1-{first_receiving$1(mutex)}/\suspended$1-{first_receiving$1(mutex)} = {} & suspended$1-{first_receiving$1(mutex)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{mutex|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{mutex|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{mutex|->n_first}) = dom(queue_receiving$1<+{mutex|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{mutex|->n_first}) & not((queue_receiving$1<+{mutex|->n_receiving})(q1) = {}) => (first_receiving$1<+{mutex|->n_first})(q1): (queue_receiving$1<+{mutex|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q2))) & mutex_holder$1<+{mutex|->TASK_NULL}: QUEUE +-> TASK & mutexes_busy$1-{mutex}: POW(mutexes$1) & !mt.(mt: mutexes_busy$1 & not(mt = mutex) => not((mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes$1 & not(mt: mutexes_busy$1 & not(mt = mutex)) => (mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(mutex)))) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(mutex)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(mutex)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(mutex)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(queue_receiving$1(mutex) = {}) => first_receiving$1(mutex): TASK & first_receiving$1(mutex): tasks$1 & first_receiving$1(mutex): blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1)) & tasks$1 = suspended$1-{first_receiving$1(mutex)}\/blocked$1-{first_receiving$1(mutex)}\/n_runable & queues$1 = dom(queue_receiving$1<+{mutex|->n_receiving}) & mutexes$1 = dom(mutex_holder$1<+{mutex|->TASK_NULL}));
  ("`giveMutex preconditions in this component'" & mutex: mutexes$1 & mutex: mutexes_busy$1 & mutex_holder$1(mutex) = running$1 & xTicksToWait: TICK & active$1 = TRUE & "`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(mutex)-{first_receiving$1(mutex)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(mutex) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(mutex)} & first_receiving$1(mutex): blocked$1 & first_receiving$1(mutex): suspended$1 & first_receiving$1(mutex): unblocked$1 & blocked$1-{first_receiving$1(mutex)}: FIN(TASK) & blocked$1-{first_receiving$1(mutex)}: POW(tasks$1) & unblocked$1-{first_receiving$1(mutex)}: FIN(TASK) & unblocked$1-{first_receiving$1(mutex)}: POW(blocked$1-{first_receiving$1(mutex)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(mutex)}: FIN(TASK) & suspended$1-{first_receiving$1(mutex)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(mutex)} = {} & blocked$1-{first_receiving$1(mutex)}/\suspended$1-{first_receiving$1(mutex)} = {} & suspended$1-{first_receiving$1(mutex)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{mutex|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{mutex|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{mutex|->n_first}) = dom(queue_receiving$1<+{mutex|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{mutex|->n_first}) & not((queue_receiving$1<+{mutex|->n_receiving})(q1) = {}) => (first_receiving$1<+{mutex|->n_first})(q1): (queue_receiving$1<+{mutex|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q2))) & mutex_holder$1<+{mutex|->TASK_NULL}: QUEUE +-> TASK & mutexes_busy$1-{mutex}: POW(mutexes$1) & !mt.(mt: mutexes_busy$1 & not(mt = mutex) => not((mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes$1 & not(mt: mutexes_busy$1 & not(mt = mutex)) => (mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(mutex)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(mutex)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(mutex)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(mutex)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(queue_receiving$1(mutex) = {}) => first_receiving$1(mutex): TASK & first_receiving$1(mutex): tasks$1 & first_receiving$1(mutex): blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1)) & tasks$1 = suspended$1-{first_receiving$1(mutex)}\/blocked$1-{first_receiving$1(mutex)}\/n_runable & queues$1 = dom(queue_receiving$1<+{mutex|->n_receiving}) & mutexes$1 = dom(mutex_holder$1<+{mutex|->TASK_NULL}));
  ("`giveMutex preconditions in this component'" & mutex: mutexes$1 & mutex: mutexes_busy$1 & mutex_holder$1(mutex) = running$1 & xTicksToWait: TICK & active$1 = TRUE & "`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(mutex)-{first_receiving$1(mutex)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(mutex) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(mutex)} & first_receiving$1(mutex): blocked$1 & first_receiving$1(mutex): suspended$1 & not(first_receiving$1(mutex): unblocked$1) & blocked$1-{first_receiving$1(mutex)}: FIN(TASK) & blocked$1-{first_receiving$1(mutex)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(mutex)}) & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(mutex)}: FIN(TASK) & suspended$1-{first_receiving$1(mutex)}: POW(tasks$1) & n_runable/\blocked$1-{first_receiving$1(mutex)} = {} & blocked$1-{first_receiving$1(mutex)}/\suspended$1-{first_receiving$1(mutex)} = {} & suspended$1-{first_receiving$1(mutex)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{mutex|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{mutex|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{mutex|->n_first}) = dom(queue_receiving$1<+{mutex|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{mutex|->n_first}) & not((queue_receiving$1<+{mutex|->n_receiving})(q1) = {}) => (first_receiving$1<+{mutex|->n_first})(q1): (queue_receiving$1<+{mutex|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q2))) & mutex_holder$1<+{mutex|->TASK_NULL}: QUEUE +-> TASK & mutexes_busy$1-{mutex}: POW(mutexes$1) & !mt.(mt: mutexes_busy$1 & not(mt = mutex) => not((mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes$1 & not(mt: mutexes_busy$1 & not(mt = mutex)) => (mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(mutex)))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(mutex)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(mutex)))) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(mutex)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(queue_receiving$1(mutex) = {}) => first_receiving$1(mutex): TASK & first_receiving$1(mutex): tasks$1 & first_receiving$1(mutex): blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1)) & tasks$1 = suspended$1-{first_receiving$1(mutex)}\/blocked$1-{first_receiving$1(mutex)}\/n_runable & queues$1 = dom(queue_receiving$1<+{mutex|->n_receiving}) & mutexes$1 = dom(mutex_holder$1<+{mutex|->TASK_NULL}));
  ("`giveMutex preconditions in this component'" & mutex: mutexes$1 & mutex: mutexes_busy$1 & mutex_holder$1(mutex) = running$1 & xTicksToWait: TICK & active$1 = TRUE & "`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(mutex)-{first_receiving$1(mutex)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(mutex) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(mutex)} & first_receiving$1(mutex): blocked$1 & not(first_receiving$1(mutex): suspended$1) & running$2: n_runable & first_receiving$1(mutex): unblocked$1 & blocked$1-{first_receiving$1(mutex)}: FIN(TASK) & blocked$1-{first_receiving$1(mutex)}: POW(tasks$1) & unblocked$1-{first_receiving$1(mutex)}: FIN(TASK) & unblocked$1-{first_receiving$1(mutex)}: POW(blocked$1-{first_receiving$1(mutex)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(mutex)} = {} & blocked$1-{first_receiving$1(mutex)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{mutex|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{mutex|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{mutex|->n_first}) = dom(queue_receiving$1<+{mutex|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{mutex|->n_first}) & not((queue_receiving$1<+{mutex|->n_receiving})(q1) = {}) => (first_receiving$1<+{mutex|->n_first})(q1): (queue_receiving$1<+{mutex|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q2))) & mutex_holder$1<+{mutex|->TASK_NULL}: QUEUE +-> TASK & mutexes_busy$1-{mutex}: POW(mutexes$1) & !mt.(mt: mutexes_busy$1 & not(mt = mutex) => not((mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes$1 & not(mt: mutexes_busy$1 & not(mt = mutex)) => (mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(mutex)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(mutex)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(queue_receiving$1(mutex) = {}) => first_receiving$1(mutex): TASK & first_receiving$1(mutex): tasks$1 & first_receiving$1(mutex): blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1)) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(mutex)}\/n_runable & queues$1 = dom(queue_receiving$1<+{mutex|->n_receiving}) & mutexes$1 = dom(mutex_holder$1<+{mutex|->TASK_NULL}));
  ("`giveMutex preconditions in this component'" & mutex: mutexes$1 & mutex: mutexes_busy$1 & mutex_holder$1(mutex) = running$1 & xTicksToWait: TICK & active$1 = TRUE & "`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(mutex)-{first_receiving$1(mutex)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(mutex) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(mutex)} & first_receiving$1(mutex): blocked$1 & not(first_receiving$1(mutex): suspended$1) & running$2: n_runable & not(first_receiving$1(mutex): unblocked$1) & blocked$1-{first_receiving$1(mutex)}: FIN(TASK) & blocked$1-{first_receiving$1(mutex)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(mutex)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(mutex)} = {} & blocked$1-{first_receiving$1(mutex)}/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{mutex|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{mutex|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{mutex|->n_first}) = dom(queue_receiving$1<+{mutex|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{mutex|->n_first}) & not((queue_receiving$1<+{mutex|->n_receiving})(q1) = {}) => (first_receiving$1<+{mutex|->n_first})(q1): (queue_receiving$1<+{mutex|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q2))) & mutex_holder$1<+{mutex|->TASK_NULL}: QUEUE +-> TASK & mutexes_busy$1-{mutex}: POW(mutexes$1) & !mt.(mt: mutexes_busy$1 & not(mt = mutex) => not((mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes$1 & not(mt: mutexes_busy$1 & not(mt = mutex)) => (mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2 = first_receiving$1(mutex)))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(mutex)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(queue_receiving$1(mutex) = {}) => first_receiving$1(mutex): TASK & first_receiving$1(mutex): tasks$1 & first_receiving$1(mutex): blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1)) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(mutex)}\/n_runable & queues$1 = dom(queue_receiving$1<+{mutex|->n_receiving}) & mutexes$1 = dom(mutex_holder$1<+{mutex|->TASK_NULL}));
  ("`giveMutex preconditions in this component'" & mutex: mutexes$1 & mutex: mutexes_busy$1 & mutex_holder$1(mutex) = running$1 & xTicksToWait: TICK & active$1 = TRUE & "`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(mutex)-{first_receiving$1(mutex)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(mutex) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(mutex)} & first_receiving$1(mutex): blocked$1 & not(first_receiving$1(mutex): suspended$1) & first_receiving$1(mutex): unblocked$1 & blocked$1-{first_receiving$1(mutex)}: FIN(TASK) & blocked$1-{first_receiving$1(mutex)}: POW(tasks$1) & unblocked$1-{first_receiving$1(mutex)}: FIN(TASK) & unblocked$1-{first_receiving$1(mutex)}: POW(blocked$1-{first_receiving$1(mutex)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(mutex)} = {} & blocked$1-{first_receiving$1(mutex)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{mutex|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{mutex|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{mutex|->n_first}) = dom(queue_receiving$1<+{mutex|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{mutex|->n_first}) & not((queue_receiving$1<+{mutex|->n_receiving})(q1) = {}) => (first_receiving$1<+{mutex|->n_first})(q1): (queue_receiving$1<+{mutex|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q2))) & mutex_holder$1<+{mutex|->TASK_NULL}: QUEUE +-> TASK & mutexes_busy$1-{mutex}: POW(mutexes$1) & !mt.(mt: mutexes_busy$1 & not(mt = mutex) => not((mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes$1 & not(mt: mutexes_busy$1 & not(mt = mutex)) => (mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(mutex)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(mutex)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(queue_receiving$1(mutex) = {}) => first_receiving$1(mutex): TASK & first_receiving$1(mutex): tasks$1 & first_receiving$1(mutex): blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1)) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(mutex)}\/n_runable & queues$1 = dom(queue_receiving$1<+{mutex|->n_receiving}) & mutexes$1 = dom(mutex_holder$1<+{mutex|->TASK_NULL}));
  ("`giveMutex preconditions in this component'" & mutex: mutexes$1 & mutex: mutexes_busy$1 & mutex_holder$1(mutex) = running$1 & xTicksToWait: TICK & active$1 = TRUE & "`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(mutex)-{first_receiving$1(mutex)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(mutex) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(mutex)} & first_receiving$1(mutex): blocked$1 & not(first_receiving$1(mutex): suspended$1) & not(first_receiving$1(mutex): unblocked$1) & blocked$1-{first_receiving$1(mutex)}: FIN(TASK) & blocked$1-{first_receiving$1(mutex)}: POW(tasks$1) & unblocked$1: POW(blocked$1-{first_receiving$1(mutex)}) & n_runable: FIN(TASK) & n_runable/\blocked$1-{first_receiving$1(mutex)} = {} & blocked$1-{first_receiving$1(mutex)}/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{mutex|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{mutex|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{mutex|->n_first}) = dom(queue_receiving$1<+{mutex|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{mutex|->n_first}) & not((queue_receiving$1<+{mutex|->n_receiving})(q1) = {}) => (first_receiving$1<+{mutex|->n_first})(q1): (queue_receiving$1<+{mutex|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q2))) & mutex_holder$1<+{mutex|->TASK_NULL}: QUEUE +-> TASK & mutexes_busy$1-{mutex}: POW(mutexes$1) & !mt.(mt: mutexes_busy$1 & not(mt = mutex) => not((mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes$1 & not(mt: mutexes_busy$1 & not(mt = mutex)) => (mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1 = first_receiving$1(mutex)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1 = first_receiving$1(mutex)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(queue_receiving$1(mutex) = {}) => first_receiving$1(mutex): TASK & first_receiving$1(mutex): tasks$1 & first_receiving$1(mutex): blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1)) & tasks$1 = suspended$1\/blocked$1-{first_receiving$1(mutex)}\/n_runable & queues$1 = dom(queue_receiving$1<+{mutex|->n_receiving}) & mutexes$1 = dom(mutex_holder$1<+{mutex|->TASK_NULL}));
  ("`giveMutex preconditions in this component'" & mutex: mutexes$1 & mutex: mutexes_busy$1 & mutex_holder$1(mutex) = running$1 & xTicksToWait: TICK & active$1 = TRUE & "`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(mutex)-{first_receiving$1(mutex)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(mutex) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(mutex)} & not(first_receiving$1(mutex): blocked$1) & first_receiving$1(mutex): suspended$1 & running$2: n_runable & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(mutex)}: FIN(TASK) & suspended$1-{first_receiving$1(mutex)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_receiving$1(mutex)} = {} & suspended$1-{first_receiving$1(mutex)}/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{mutex|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{mutex|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{mutex|->n_first}) = dom(queue_receiving$1<+{mutex|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{mutex|->n_first}) & not((queue_receiving$1<+{mutex|->n_receiving})(q1) = {}) => (first_receiving$1<+{mutex|->n_first})(q1): (queue_receiving$1<+{mutex|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q2))) & mutex_holder$1<+{mutex|->TASK_NULL}: QUEUE +-> TASK & mutexes_busy$1-{mutex}: POW(mutexes$1) & !mt.(mt: mutexes_busy$1 & not(mt = mutex) => not((mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes$1 & not(mt: mutexes_busy$1 & not(mt = mutex)) => (mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL) & (active$1 = TRUE => not(running$2: suspended$1 & not(running$2 = first_receiving$1(mutex)))) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(mutex)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(queue_receiving$1(mutex) = {}) => first_receiving$1(mutex): TASK & first_receiving$1(mutex): tasks$1 & first_receiving$1(mutex): blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1)) & tasks$1 = suspended$1-{first_receiving$1(mutex)}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{mutex|->n_receiving}) & mutexes$1 = dom(mutex_holder$1<+{mutex|->TASK_NULL}));
  ("`giveMutex preconditions in this component'" & mutex: mutexes$1 & mutex: mutexes_busy$1 & mutex_holder$1(mutex) = running$1 & xTicksToWait: TICK & active$1 = TRUE & "`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(mutex)-{first_receiving$1(mutex)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(mutex) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(mutex)} & not(first_receiving$1(mutex): blocked$1) & first_receiving$1(mutex): suspended$1 & n_runable: FIN(TASK) & suspended$1-{first_receiving$1(mutex)}: FIN(TASK) & suspended$1-{first_receiving$1(mutex)}: POW(tasks$1) & n_runable/\blocked$1 = {} & blocked$1/\suspended$1-{first_receiving$1(mutex)} = {} & suspended$1-{first_receiving$1(mutex)}/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{mutex|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{mutex|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{mutex|->n_first}) = dom(queue_receiving$1<+{mutex|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{mutex|->n_first}) & not((queue_receiving$1<+{mutex|->n_receiving})(q1) = {}) => (first_receiving$1<+{mutex|->n_first})(q1): (queue_receiving$1<+{mutex|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q2))) & mutex_holder$1<+{mutex|->TASK_NULL}: QUEUE +-> TASK & mutexes_busy$1-{mutex}: POW(mutexes$1) & !mt.(mt: mutexes_busy$1 & not(mt = mutex) => not((mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes$1 & not(mt: mutexes_busy$1 & not(mt = mutex)) => (mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL) & (active$1 = TRUE => not(running$1: suspended$1 & not(running$1 = first_receiving$1(mutex)))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: suspended$1 & not(idle$1 = first_receiving$1(mutex)))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(queue_receiving$1(mutex) = {}) => first_receiving$1(mutex): TASK & first_receiving$1(mutex): tasks$1 & first_receiving$1(mutex): blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1)) & tasks$1 = suspended$1-{first_receiving$1(mutex)}\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{mutex|->n_receiving}) & mutexes$1 = dom(mutex_holder$1<+{mutex|->TASK_NULL}));
  ("`giveMutex preconditions in this component'" & mutex: mutexes$1 & mutex: mutexes_busy$1 & mutex_holder$1(mutex) = running$1 & xTicksToWait: TICK & active$1 = TRUE & "`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(mutex)-{first_receiving$1(mutex)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(mutex) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(mutex)} & not(first_receiving$1(mutex): blocked$1) & not(first_receiving$1(mutex): suspended$1) & running$2: n_runable & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{mutex|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{mutex|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{mutex|->n_first}) = dom(queue_receiving$1<+{mutex|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{mutex|->n_first}) & not((queue_receiving$1<+{mutex|->n_receiving})(q1) = {}) => (first_receiving$1<+{mutex|->n_first})(q1): (queue_receiving$1<+{mutex|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q2))) & mutex_holder$1<+{mutex|->TASK_NULL}: QUEUE +-> TASK & mutexes_busy$1-{mutex}: POW(mutexes$1) & !mt.(mt: mutexes_busy$1 & not(mt = mutex) => not((mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes$1 & not(mt: mutexes_busy$1 & not(mt = mutex)) => (mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1)) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(queue_receiving$1(mutex) = {}) => first_receiving$1(mutex): TASK & first_receiving$1(mutex): tasks$1 & first_receiving$1(mutex): blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1)) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{mutex|->n_receiving}) & mutexes$1 = dom(mutex_holder$1<+{mutex|->TASK_NULL}));
  ("`giveMutex preconditions in this component'" & mutex: mutexes$1 & mutex: mutexes_busy$1 & mutex_holder$1(mutex) = running$1 & xTicksToWait: TICK & active$1 = TRUE & "`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(mutex)-{first_receiving$1(mutex)} & n_first: TASK & n_first: n_receiving & not(queue_receiving$1(mutex) = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/{first_receiving$1(mutex)} & not(first_receiving$1(mutex): blocked$1) & not(first_receiving$1(mutex): suspended$1) & n_runable: FIN(TASK) & n_runable/\blocked$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & queue_receiving$1<+{mutex|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{mutex|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{mutex|->n_first}) = dom(queue_receiving$1<+{mutex|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{mutex|->n_first}) & not((queue_receiving$1<+{mutex|->n_receiving})(q1) = {}) => (first_receiving$1<+{mutex|->n_first})(q1): (queue_receiving$1<+{mutex|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q2))) & mutex_holder$1<+{mutex|->TASK_NULL}: QUEUE +-> TASK & mutexes_busy$1-{mutex}: POW(mutexes$1) & !mt.(mt: mutexes_busy$1 & not(mt = mutex) => not((mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes$1 & not(mt: mutexes_busy$1 & not(mt = mutex)) => (mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & (not(queue_receiving$1(mutex) = {}) => first_receiving$1(mutex): TASK & first_receiving$1(mutex): tasks$1 & first_receiving$1(mutex): blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1)) & tasks$1 = suspended$1\/blocked$1\/n_runable & queues$1 = dom(queue_receiving$1<+{mutex|->n_receiving}) & mutexes$1 = dom(mutex_holder$1<+{mutex|->TASK_NULL}));
  ("`giveMutex preconditions in this component'" & mutex: mutexes$1 & mutex: mutexes_busy$1 & mutex_holder$1(mutex) = running$1 & xTicksToWait: TICK & active$1 = TRUE & "`Local hypotheses'" & n_receiving: POW(TASK) & n_receiving = queue_receiving$1(mutex)-{first_receiving$1(mutex)} & n_first: TASK & n_first: n_receiving & queue_receiving$1(mutex) = {} & queue_receiving$1<+{mutex|->n_receiving}: QUEUE +-> POW(TASK) & first_receiving$1<+{mutex|->n_first}: QUEUE +-> TASK & dom(first_receiving$1<+{mutex|->n_first}) = dom(queue_receiving$1<+{mutex|->n_receiving}) & !q1.(q1: queues$1 & q1: dom(first_receiving$1<+{mutex|->n_first}) & not((queue_receiving$1<+{mutex|->n_receiving})(q1) = {}) => (first_receiving$1<+{mutex|->n_first})(q1): (queue_receiving$1<+{mutex|->n_receiving})(q1)) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: (queue_receiving$1<+{mutex|->n_receiving})(q1) => not(tk: (queue_receiving$1<+{mutex|->n_receiving})(q2))) & mutex_holder$1<+{mutex|->TASK_NULL}: QUEUE +-> TASK & mutexes_busy$1-{mutex}: POW(mutexes$1) & !mt.(mt: mutexes_busy$1 & not(mt = mutex) => not((mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL)) & !mt.(mt: mutexes$1 & not(mt: mutexes_busy$1 & not(mt = mutex)) => (mutex_holder$1<+{mutex|->TASK_NULL})(mt) = TASK_NULL) & (not(queue_receiving$1(mutex) = {}) => first_receiving$1(mutex): TASK & first_receiving$1(mutex): tasks$1 & first_receiving$1(mutex): blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1)) & queues$1 = dom(queue_receiving$1<+{mutex|->n_receiving}) & mutexes$1 = dom(mutex_holder$1<+{mutex|->TASK_NULL}));
  ("`incrementTick preconditions in previous components'" & active$1 = TRUE);
  ("`incrementTick preconditions in this component'" & active$1 = TRUE);
  (TICK_INCREMENT(tickCount$1,1): TICK);
  ("`afterIncrementTick preconditions in previous components'" & active$1 = TRUE);
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE);
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first$0: QUEUE +-> TASK & dom(n_first$0) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first$0) & not(n_receiving(q1) = {}) => n_first$0(q1): n_receiving(q1)) & running$2: n_runable & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first$0) = dom(n_receiving) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2: unblocked$1))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_receiving) & queues$1 = dom(n_sending));
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first$0: QUEUE +-> TASK & dom(n_first$0) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first$0) & not(n_receiving(q1) = {}) => n_first$0(q1): n_receiving(q1)) & running$2: n_runable & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first$0) = dom(n_receiving) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2: unblocked$1))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_receiving) & queues$1 = dom(n_sending) & q1: queues$1 & q1: dom(n_first) & not(remove_task(queue_sending$1,unblocked$1)(q1) = {}));
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first$0: QUEUE +-> TASK & dom(n_first$0) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first$0) & not(n_receiving(q1) = {}) => n_first$0(q1): n_receiving(q1)) & running$2: n_runable & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first$0) = dom(n_receiving) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2: unblocked$1))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_receiving) & queues$1 = dom(n_sending) & q1: queues$1 & q1: dom(n_first$0) & not(remove_task(queue_receiving$1,unblocked$1)(q1) = {}));
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first$0: QUEUE +-> TASK & dom(n_first$0) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first$0) & not(n_receiving(q1) = {}) => n_first$0(q1): n_receiving(q1)) & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first$0) = dom(n_receiving) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1: unblocked$1))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_receiving) & queues$1 = dom(n_sending));
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first$0: QUEUE +-> TASK & dom(n_first$0) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first$0) & not(n_receiving(q1) = {}) => n_first$0(q1): n_receiving(q1)) & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first$0) = dom(n_receiving) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1: unblocked$1))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_receiving) & queues$1 = dom(n_sending) & q1: queues$1 & q1: dom(n_first) & not(remove_task(queue_sending$1,unblocked$1)(q1) = {}));
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first$0: QUEUE +-> TASK & dom(n_first$0) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first$0) & not(n_receiving(q1) = {}) => n_first$0(q1): n_receiving(q1)) & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first$0) = dom(n_receiving) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1: unblocked$1))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_receiving) & queues$1 = dom(n_sending) & q1: queues$1 & q1: dom(n_first$0) & not(remove_task(queue_receiving$1,unblocked$1)(q1) = {}));
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & queue_receiving$1 = {} & running$2: n_runable & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2: unblocked$1))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_sending));
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & queue_receiving$1 = {} & running$2: n_runable & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2: unblocked$1))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_sending) & q1: queues$1 & q1: dom(n_first) & not(remove_task(queue_sending$1,unblocked$1)(q1) = {}));
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & queue_receiving$1 = {} & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1: unblocked$1))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_sending));
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & queue_receiving$1 = {} & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1: unblocked$1))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_sending) & q1: queues$1 & q1: dom(n_first) & not(remove_task(queue_sending$1,unblocked$1)(q1) = {}));
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & queue_sending$1 = {} & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_receiving(q1) = {}) => n_first(q1): n_receiving(q1)) & running$2: n_runable & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first) = dom(n_receiving) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2: unblocked$1))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_receiving));
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & queue_sending$1 = {} & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_receiving(q1) = {}) => n_first(q1): n_receiving(q1)) & running$2: n_runable & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first) = dom(n_receiving) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2: unblocked$1))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_receiving) & q1: queues$1 & q1: dom(n_first) & not(remove_task(queue_receiving$1,unblocked$1)(q1) = {}));
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & queue_sending$1 = {} & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_receiving(q1) = {}) => n_first(q1): n_receiving(q1)) & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first) = dom(n_receiving) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1: unblocked$1))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_receiving));
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & queue_sending$1 = {} & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_receiving(q1) = {}) => n_first(q1): n_receiving(q1)) & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & dom(n_first) = dom(n_receiving) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1: unblocked$1))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable & queues$1 = dom(n_receiving) & q1: queues$1 & q1: dom(n_first) & not(remove_task(queue_receiving$1,unblocked$1)(q1) = {}));
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & queue_sending$1 = {} & queue_receiving$1 = {} & running$2: n_runable & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & running$2: TASK & (active$1 = TRUE => not(n_runable = {}) & running$2: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & (active$1 = TRUE => not(running$2: suspended$1)) & (active$1 = TRUE => not(running$2: blocked$1 & not(running$2: unblocked$1))) & (active$1 = TRUE => running$2: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable);
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & not(unblocked$1 = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/unblocked$1 & queue_sending$1 = {} & queue_receiving$1 = {} & blocked$1-unblocked$1: FIN(TASK) & blocked$1-unblocked$1: POW(tasks$1) & {}: FIN(TASK) & {}: POW(blocked$1-unblocked$1) & n_runable: FIN(TASK) & n_runable/\blocked$1-unblocked$1 = {} & blocked$1-unblocked$1/\suspended$1 = {} & suspended$1/\n_runable = {} & (active$1 = TRUE => not(n_runable = {}) & running$1: n_runable & idle$1: n_runable & not(TASK_NULL: tasks$1)) & (active$1 = TRUE => not(running$1: blocked$1 & not(running$1: unblocked$1))) & (active$1 = TRUE => running$1: n_runable) & (active$1 = TRUE => not(idle$1: blocked$1 & not(idle$1: unblocked$1))) & (active$1 = TRUE => idle$1: n_runable) & (active$1 = TRUE => not(n_runable = {})) & unblocked$1: POW(TASK) & tasks$1 = suspended$1\/blocked$1-unblocked$1\/n_runable);
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & unblocked$1 = {} & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first$0: QUEUE +-> TASK & dom(n_first$0) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first$0) & not(n_receiving(q1) = {}) => n_first$0(q1): n_receiving(q1)) & dom(n_first$0) = dom(n_receiving) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & unblocked$1: POW(TASK) & queues$1 = dom(n_receiving) & queues$1 = dom(n_sending));
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & unblocked$1 = {} & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first$0: QUEUE +-> TASK & dom(n_first$0) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first$0) & not(n_receiving(q1) = {}) => n_first$0(q1): n_receiving(q1)) & dom(n_first$0) = dom(n_receiving) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & unblocked$1: POW(TASK) & queues$1 = dom(n_receiving) & queues$1 = dom(n_sending) & q1: queues$1 & q1: dom(n_first) & not(remove_task(queue_sending$1,unblocked$1)(q1) = {}));
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & unblocked$1 = {} & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first$0: QUEUE +-> TASK & dom(n_first$0) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first$0) & not(n_receiving(q1) = {}) => n_first$0(q1): n_receiving(q1)) & dom(n_first$0) = dom(n_receiving) & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & unblocked$1: POW(TASK) & queues$1 = dom(n_receiving) & queues$1 = dom(n_sending) & q1: queues$1 & q1: dom(n_first$0) & not(remove_task(queue_receiving$1,unblocked$1)(q1) = {}));
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & unblocked$1 = {} & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & queue_receiving$1 = {} & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & unblocked$1: POW(TASK) & queues$1 = dom(n_sending));
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & unblocked$1 = {} & not(queue_sending$1 = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending$1) & n_sending = remove_task(queue_sending$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_sending(q1) = {}) => n_first(q1): n_sending(q1)) & queue_receiving$1 = {} & dom(n_first) = dom(n_sending) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_receiving$1(q1) => not(tk: n_sending(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_sending(q2) => not(tk: queue_receiving$1(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_sending(q1) => not(tk: n_sending(q2))) & unblocked$1: POW(TASK) & queues$1 = dom(n_sending) & q1: queues$1 & q1: dom(n_first) & not(remove_task(queue_sending$1,unblocked$1)(q1) = {}));
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & unblocked$1 = {} & queue_sending$1 = {} & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_receiving(q1) = {}) => n_first(q1): n_receiving(q1)) & dom(n_first) = dom(n_receiving) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & unblocked$1: POW(TASK) & queues$1 = dom(n_receiving));
  ("`afterIncrementTick preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & unblocked$1 = {} & queue_sending$1 = {} & not(queue_receiving$1 = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving$1) & n_receiving = remove_task(queue_receiving$1,unblocked$1) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving$1) & !q1.(q1: queues$1 & q1: dom(n_first) & not(n_receiving(q1) = {}) => n_first(q1): n_receiving(q1)) & dom(n_first) = dom(n_receiving) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: n_receiving(q1) => not(tk: queue_sending$1(q2))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & tk: TASK & tk: queue_sending$1(q2) => not(tk: n_receiving(q1))) & !(q1,q2,tk).(q1: queues$1 & q2: queues$1 & not(q1 = q2) & tk: TASK & tk: n_receiving(q1) => not(tk: n_receiving(q2))) & unblocked$1: POW(TASK) & queues$1 = dom(n_receiving) & q1: queues$1 & q1: dom(n_first) & not(remove_task(queue_receiving$1,unblocked$1)(q1) = {}));
  ("`Included,imported and extended machines properties'" & remove_task: (QUEUE +-> POW(TASK))*POW(TASK) +-> (QUEUE +-> POW(TASK)) & dom(remove_task) = (QUEUE +-> POW(TASK))*POW(TASK) & remove_task = %(q_task,unblocked).(q_task: QUEUE +-> POW(TASK) & unblocked: POW(TASK) | %q1.(q1: QUEUE & q1: dom(q_task) | q_task(q1)-unblocked)) & update_first: (QUEUE +-> POW(TASK))*POW(TASK) +-> (QUEUE +-> TASK) & dom(update_first) = (QUEUE +-> POW(TASK))*POW(TASK) & update_first = %(q_task,unblocked).(q_task: QUEUE +-> POW(TASK) & unblocked: POW(TASK) | SET(q1,task).(q1: QUEUE & q1: dom(q_task) & not(q_task(q1): POW(unblocked)) & task: TASK & (task: q_task(q1) & not(task: unblocked)))) & "`Included,imported and extended machines invariants'" & active: BOOL & tasks: FIN(TASK) & blocked: FIN(TASK) & blocked: POW(tasks) & unblocked: FIN(TASK) & unblocked: POW(blocked) & runable: FIN(TASK) & runable: POW(tasks) & suspended: FIN(TASK) & suspended: POW(tasks) & runable/\blocked = {} & blocked/\suspended = {} & suspended/\runable = {} & tasks = suspended\/blocked\/runable & running: TASK & idle: TASK & (active = TRUE => not(runable = {}) & running: runable & idle: runable & not(TASK_NULL: tasks)) & queues: POW(QUEUE) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & queues = dom(queue_receiving) & queues = dom(queue_sending) & first_receiving: QUEUE +-> TASK & first_sending: QUEUE +-> TASK & dom(first_receiving) = dom(queue_receiving) & dom(first_sending) = dom(queue_sending) & !q1.(q1: queues & q1: dom(first_receiving) & not(queue_receiving(q1) = {}) => first_receiving(q1): queue_receiving(q1)) & !q1.(q1: queues & q1: dom(first_sending) & not(queue_sending(q1) = {}) => first_sending(q1): queue_sending(q1)) & queues_msg: POW(queues) & queues_msg_full: POW(queues_msg) & queues_msg_empty: POW(queues_msg) & queues_msg_full/\queues_msg_empty = {} & queue_items: QUEUE +-> POW(ITEM) & queues_msg = dom(queue_items) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_receiving(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_sending(q1) => not(tk: queue_sending(q2))) & semaphores: POW(QUEUE) & semaphores: POW(queues) & semaphores_busy: POW(semaphores) & semaphores_full: POW(semaphores) & semaphores_busy/\semaphores_full = {} & mutexes: POW(queues) & mutex_holder: QUEUE +-> TASK & mutexes = dom(mutex_holder) & mutexes_busy: POW(mutexes) & !mt.(mt: mutexes_busy => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(mt: mutexes_busy) => mutex_holder(mt) = TASK_NULL) & queues_msg/\semaphores = {} & queues_msg/\mutexes = {} & mutexes/\semaphores = {} & "`Included,imported and extended machines assertions'" & (active = TRUE => not(running: suspended)) & (active = TRUE => not(running: blocked)) & (active = TRUE => running: runable) & (active = TRUE => not(idle = TASK_NULL)) & (active = TRUE => not(idle: suspended)) & (active = TRUE => not(idle: blocked)) & (active = TRUE => idle: runable) & (active = TRUE => not(tasks = {})) & (active = TRUE => not(runable = {})) & !que.(que: QUEUE & not(que: queues) => not(que: mutexes)) & !que.(que: QUEUE & not(que: queues) => not(que: semaphores)) & !que.(que: queues_msg & que: queues_msg_full => not(que: queues_msg_empty)) & !que.(que: queues_msg & que: queues_msg_empty => not(que: queues_msg_full)) & "`Seen and used machines assertions'" & BIT: POW(NATURAL) & QUEUE_LENGTH: POW(QUEUE_QUANT) & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES)
END
&
THEORY EnumerateX IS
  SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED};
  COPY_POSITION == {queueSEND_TO_BACK,queueSEND_TO_FRONT};
  QUEUE_TYPE == {TQUE,TSEMAPH,TMUT};
  ERROR_DEFINITION == {errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY,errNO_TASK_TO_RUN,errQUEUE_BLOCKED,errQUEUE_YIELD,errQUEUE_EMPTY,errQUEUE_FULL,pdPASS,pdFAIL,pdTRUE,pdFALSE}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK)
END
