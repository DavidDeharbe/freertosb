
THEORY ProofList IS
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(214) & _f(215) & t_returnPrioritySubstitution.9,(_f(232) => _f(233));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(214) & _f(215) & t_returnPrioritySubstitution.8,(_f(230) => _f(231));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(214) & _f(215) & t_returnPrioritySubstitution.7,(_f(228) => _f(229));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(214) & _f(215) & t_returnPrioritySubstitution.6,(_f(226) => _f(227));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(214) & _f(215) & t_returnPrioritySubstitution.5,(_f(224) => _f(225));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(214) & _f(215) & t_returnPrioritySubstitution.4,(_f(222) => _f(223));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(214) & _f(215) & t_returnPrioritySubstitution.3,(_f(220) => _f(221));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(214) & _f(215) & t_returnPrioritySubstitution.2,(_f(218) => _f(219));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(214) & _f(215) & t_returnPrioritySubstitution.1,(_f(216) => _f(217));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(202) & _f(203) & t_priorityInheritSubstitution.5,(_f(212) => _f(213));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(202) & _f(203) & t_priorityInheritSubstitution.4,(_f(210) => _f(211));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(202) & _f(203) & t_priorityInheritSubstitution.3,(_f(208) => _f(209));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(202) & _f(203) & t_priorityInheritSubstitution.2,(_f(206) => _f(207));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(202) & _f(203) & t_priorityInheritSubstitution.1,(_f(204) => _f(205));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(192) & _f(193) & t_setPrioritySubstitution.4,(_f(200) => _f(201));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(192) & _f(193) & t_setPrioritySubstitution.3,(_f(198) => _f(199));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(192) & _f(193) & t_setPrioritySubstitution.2,(_f(196) => _f(197));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(192) & _f(193) & t_setPrioritySubstitution.1,(_f(194) => _f(195));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(180) & _f(181) & t_removeFromEventListSubstitution.5,(_f(190) => _f(191));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(180) & _f(181) & t_removeFromEventListSubstitution.4,(_f(188) => _f(189));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(180) & _f(181) & t_removeFromEventListSubstitution.3,(_f(186) => _f(187));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(180) & _f(181) & t_removeFromEventListSubstitution.2,(_f(184) => _f(185));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(180) & _f(181) & t_removeFromEventListSubstitution.1,(_f(182) => _f(183));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(168) & _f(169) & t_unblockSubstitution.5,(_f(178) => _f(179));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(168) & _f(169) & t_unblockSubstitution.4,(_f(176) => _f(177));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(168) & _f(169) & t_unblockSubstitution.3,(_f(174) => _f(175));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(168) & _f(169) & t_unblockSubstitution.2,(_f(172) => _f(173));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(168) & _f(169) & t_unblockSubstitution.1,(_f(170) => _f(171));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(164) & _f(165) & t_resumeAllSubstitution.1,(_f(166) => _f(167));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(158) & _f(159) & t_startSchedulerSubstitution.1,(_f(160) => _f(161));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(154) & _f(155) & t_delayTaskSubstitution.1,(_f(156) => _f(157));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(150) & _f(151) & t_getNumberOfTasksSubstitution.1,(_f(152) => _f(153));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(134) & _f(135) & t_resumeSubstitution.5,(_f(144) => _f(145));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(134) & _f(135) & t_resumeSubstitution.4,(_f(142) => _f(143));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(134) & _f(135) & t_resumeSubstitution.3,(_f(140) => _f(141));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(134) & _f(135) & t_resumeSubstitution.2,(_f(138) => _f(139));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(134) & _f(135) & t_resumeSubstitution.1,(_f(136) => _f(137));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(130) & _f(131) & t_suspendSubstitution.1,(_f(132) => _f(133));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(126) & _f(127) & t_yieldSubstitution.1,(_f(128) => _f(129));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(122) & _f(123) & t_deleteSubstitution.1,(_f(124) => _f(125));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(108) & _f(109) & t_createSubstitution.6,(_f(120) => _f(121));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(108) & _f(109) & t_createSubstitution.5,(_f(118) => _f(119));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(108) & _f(109) & t_createSubstitution.4,(_f(116) => _f(117));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(108) & _f(109) & t_createSubstitution.3,(_f(114) => _f(115));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(108) & _f(109) & t_createSubstitution.2,(_f(112) => _f(113));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(108) & _f(109) & t_createSubstitution.1,(_f(110) => _f(111));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.38,(_f(106) => _f(107));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.37,(_f(104) => _f(105));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.36,(_f(102) => _f(103));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.35,(_f(100) => _f(101));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.34,(_f(98) => _f(99));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.33,(_f(96) => _f(97));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.32,(_f(94) => _f(95));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.31,(_f(92) => _f(93));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.30,(_f(90) => _f(91));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.29,(_f(88) => _f(89));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.28,(_f(86) => _f(87));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.27,(_f(84) => _f(85));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.26,(_f(82) => _f(83));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.25,(_f(80) => _f(81));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.24,(_f(78) => _f(79));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.23,(_f(76) => _f(77));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.22,(_f(74) => _f(75));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.21,(_f(72) => _f(73));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.20,(_f(70) => _f(71));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.19,(_f(68) => _f(69));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.18,(_f(66) => _f(67));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.17,(_f(64) => _f(65));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.16,(_f(62) => _f(63));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.15,(_f(60) => _f(61));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.14,(_f(58) => _f(59));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.13,(_f(56) => _f(57));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.12,(_f(54) => _f(55));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.11,(_f(52) => _f(53));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.10,(_f(50) => _f(51));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.9,(_f(48) => _f(49));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.8,(_f(46) => _f(47));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.7,(_f(44) => _f(45));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.6,(_f(42) => _f(43));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.5,(_f(40) => _f(41));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.4,(_f(38) => _f(39));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.3,(_f(36) => _f(37));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.2,(_f(34) => _f(35));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.1,(_f(32) => _f(33));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & Invariants.6,(_f(30) => _f(31));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & Invariants.5,(_f(28) => _f(29));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & Invariants.4,(_f(26) => _f(27));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & Invariants.3,(_f(24) => _f(25));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & Invariants.2,(_f(22) => _f(23));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & Invariants.1,(_f(20) => _f(21));
_f(4) & _f(3) & _f(5) & Properties.3,(_f(18) => _f(19));
_f(4) & _f(3) & _f(5) & Properties.2,(_f(16) => _f(17));
_f(4) & _f(3) & _f(5) & Properties.1,(_f(14) => _f(15))

END
&

THEORY Formulas IS
("`Component constraints'" & btrue);
("`Component properties'" & max_prt: PRIORITY*PRIORITY +-> PRIORITY & dom(max_prt) = PRIORITY*PRIORITY & max_prt = %(tmp_mprt_ready,t_prt).(tmp_mprt_ready: PRIORITY & t_prt: PRIORITY | max({tmp_mprt_ready}\/{t_prt})) & schedule_p: FIN(TASK)*(TASK +-> PRIORITY) +-> FIN(TASK) & schedule_p = %(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) | tasks/\dom(t_priority|>{max(t_priority[tasks])})));
("`Seen and used machines properties'" & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES & configMAX_PRIORITIES<=maxint & 1<=configMAX_PRIORITIES & configTOTAL_HEAP_SIZE: INTEGER & 0<=configTOTAL_HEAP_SIZE & configTOTAL_HEAP_SIZE<=maxint & 0<=configTOTAL_HEAP_SIZE & configMINIMAL_STACK_SIZE: INTEGER & 0<=configMINIMAL_STACK_SIZE & configMINIMAL_STACK_SIZE<=maxint & 0<=configMINIMAL_STACK_SIZE & INCLUDE_uxTaskPriorityGet: BIT & INCLUDE_vTaskDelete: BIT & INCLUDE_vTaskSuspend: BIT & INCLUDE_xTaskGetSchedulerState: BIT & INCLUDE_vTaskPrioritySet: BIT & INCLUDE_xTaskGetCurrentTaskHandle: BIT & INCLUDE_vTaskDelayUntil: BIT & INCLUDE_vTaskDelay: BIT & PRIORITY = 0..configMAX_PRIORITIES-1 & BIT = 0..1 & MAX_DELAY: 0..maxint & 1<=MAX_DELAY & NULL_PARAMETER: PARAMETER & PRIORITY: POW(NAT) & TICK: POW(NAT) & TICK = 0..MAX_DELAY & TICK_INCREMENT: TICK*TICK +-> TICK & dom(TICK_INCREMENT) = TICK*TICK & TICK_INCREMENT = %(tick,inc).(tick: TICK & inc: TICK | (tick+inc) mod MAX_DELAY) & QUEUE_NULL: QUEUE & ITEM_NULL: ITEM & ITEM_EMPTY: ITEM & TASK_NULL: TASK & REMOVE_EVENT: TASK*POW(QUEUE)*(QUEUE +-> POW(TASK)) +-> (QUEUE +-> POW(TASK)) & REMOVE_EVENT = %(task,queues,pending).(task: TASK & queues: POW(QUEUE) & pending: QUEUE +-> POW(TASK) | %queue.(queue: queues & queue: dom(pending) | pending(queue)-{task})) & semGIVE_BLOCK_TIME: TICK & IDLE_PRIORITY: PRIORITY & IDLE_PRIORITY = 0 & QUEUE_LENGTH: POW(NAT) & QUEUE_LENGTH = 1..maxint & QUEUE_QUANT: POW(NAT) & QUEUE_QUANT = 0..maxint & NAME: FIN(INTEGER) & not(NAME = {}) & PARAMETER: FIN(INTEGER) & not(PARAMETER = {}) & TASK: FIN(INTEGER) & not(TASK = {}) & STACK: FIN(INTEGER) & not(STACK = {}) & TASK_CODE: FIN(INTEGER) & not(TASK_CODE = {}) & ITEM: FIN(INTEGER) & not(ITEM = {}) & QUEUE: FIN(INTEGER) & not(QUEUE = {}) & (1..3)*{SCHEDULER_STATE}: FIN(NATURAL*{SCHEDULER_STATE}) & not((1..3)*{SCHEDULER_STATE} = {}) & (1..2)*{COPY_POSITION}: FIN(NATURAL*{COPY_POSITION}) & not((1..2)*{COPY_POSITION} = {}) & (1..3)*{QUEUE_TYPE}: FIN(NATURAL*{QUEUE_TYPE}) & not((1..3)*{QUEUE_TYPE} = {}) & (1..10)*{ERROR_DEFINITION}: FIN(NATURAL*{ERROR_DEFINITION}) & not((1..10)*{ERROR_DEFINITION} = {}));
("`Included,imported and extended machines properties'" & btrue);
("`Previous components properties'" & btrue);
("`Component invariant'" & active: BOOL & t_priority: TASK +-> PRIORITY & dom(t_priority) = tasks & t_bpriority: TASK +-> PRIORITY & dom(t_bpriority) = tasks & (active = TRUE => t_priority(idle) = IDLE_PRIORITY & t_priority(running) = max(t_priority[runable]) & IDLE_PRIORITY<=min(t_priority[tasks])) & btrue);
("`Seen and used machines invariants'" & btrue);
("`Included,imported and extended machines invariants'" & btrue);
("`Previous components invariants'" & active: BOOL & tasks: FIN(TASK) & blocked: FIN(TASK) & blocked: POW(tasks) & unblocked: FIN(TASK) & unblocked: POW(blocked) & runable: FIN(TASK) & runable: POW(tasks) & suspended: FIN(TASK) & suspended: POW(tasks) & runable/\blocked = {} & blocked/\suspended = {} & suspended/\runable = {} & tasks = suspended\/blocked\/runable & running: TASK & idle: TASK & (active = TRUE => not(runable = {}) & running: runable & idle: runable & not(TASK_NULL: tasks)));
("`Component assertions'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) => max(t_priority[tasks-{rtask}])<=max(t_priority[tasks])) & !(tasks,t_priority,rtask,priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) & priority: PRIORITY & max(t_priority[tasks])<=priority & max(t_priority[tasks-{rtask}])<=max(t_priority[tasks]) => priority = max(t_priority[tasks-{rtask}]\/{priority})) & !(tasks,t_priority,rtask,priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) & priority: PRIORITY & priority+1<=max(t_priority[tasks]) & max(t_priority[tasks-{rtask}]) = max(t_priority[tasks]) => max(t_priority[tasks]) = max(t_priority[tasks-{rtask}]\/{priority})));
("`Seen and used machines assertions'" & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES & BIT: POW(NATURAL) & QUEUE_LENGTH: POW(QUEUE_QUANT));
("`Included,imported and extended machines assertions'" & btrue);
("`Previous components assertions'" & (active = TRUE => not(runable = {})) & (active = TRUE => not(tasks = {})) & (active = TRUE => idle: runable) & (active = TRUE => not(idle: blocked)) & (active = TRUE => not(idle: suspended)) & (active = TRUE => not(idle = TASK_NULL)) & (active = TRUE => running: runable) & (active = TRUE => not(running: blocked)) & (active = TRUE => not(running: suspended)));
("`Local hypotheses'" & max_prt: PRIORITY*PRIORITY +-> PRIORITY & dom(max_prt) = PRIORITY*PRIORITY & tmp_mprt_ready: PRIORITY & t_prt: PRIORITY);
({tmp_mprt_ready}\/{t_prt}/\NATURAL: FIN(NATURAL));
("`Local hypotheses'" & max_prt: PRIORITY*PRIORITY +-> PRIORITY & dom(max_prt) = PRIORITY*PRIORITY & max_prt = %(tmp_mprt_ready,t_prt).(tmp_mprt_ready: PRIORITY & t_prt: PRIORITY | max({tmp_mprt_ready}\/{t_prt})) & schedule_p: FIN(TASK)*(TASK +-> PRIORITY) +-> FIN(TASK) & tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)));
(not(t_priority[tasks] = {}));
("`Local hypotheses'" & max_prt: PRIORITY*PRIORITY +-> PRIORITY & dom(max_prt) = PRIORITY*PRIORITY & max_prt = %(tmp_mprt_ready,t_prt).(tmp_mprt_ready: PRIORITY & t_prt: PRIORITY | max({tmp_mprt_ready}\/{t_prt})) & schedule_p: FIN(TASK)*(TASK +-> PRIORITY) +-> FIN(TASK) & tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)));
(t_priority[tasks]/\NATURAL: FIN(NATURAL));
("`Local hypotheses'" & t_priority: TASK +-> PRIORITY & dom(t_priority) = tasks & t_bpriority: TASK +-> PRIORITY & dom(t_bpriority) = tasks & active = TRUE);
(idle: dom(t_priority));
("`Local hypotheses'" & t_priority: TASK +-> PRIORITY & dom(t_priority) = tasks & t_bpriority: TASK +-> PRIORITY & dom(t_bpriority) = tasks & active = TRUE & t_priority(idle) = IDLE_PRIORITY);
(running: dom(t_priority));
("`Local hypotheses'" & t_priority: TASK +-> PRIORITY & dom(t_priority) = tasks & t_bpriority: TASK +-> PRIORITY & dom(t_bpriority) = tasks & active = TRUE & t_priority(idle) = IDLE_PRIORITY);
(not(t_priority[runable] = {}));
("`Local hypotheses'" & t_priority: TASK +-> PRIORITY & dom(t_priority) = tasks & t_bpriority: TASK +-> PRIORITY & dom(t_bpriority) = tasks & active = TRUE & t_priority(idle) = IDLE_PRIORITY);
(t_priority[runable]/\NATURAL: FIN(NATURAL));
("`Local hypotheses'" & t_priority: TASK +-> PRIORITY & dom(t_priority) = tasks & t_bpriority: TASK +-> PRIORITY & dom(t_bpriority) = tasks & active = TRUE & t_priority(idle) = IDLE_PRIORITY & t_priority(running) = max(t_priority[runable]));
(not(t_priority[tasks] = {}));
("`Local hypotheses'" & t_priority: TASK +-> PRIORITY & dom(t_priority) = tasks & t_bpriority: TASK +-> PRIORITY & dom(t_bpriority) = tasks & active = TRUE & t_priority(idle) = IDLE_PRIORITY & t_priority(running) = max(t_priority[runable]));
(t_priority[tasks]/\INTEGER-NATURAL: FIN(INTEGER));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & rtask$0: TASK & rtask$0: tasks$0);
(tasks$0,t_priority$0: dom(schedule_p));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & rtask$0: TASK & rtask$0: tasks$0 & rtask$0: schedule_p(tasks$0,t_priority$0));
(rtask$0: dom(t_priority$0));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & rtask$0: TASK & rtask$0: tasks$0 & rtask$0: schedule_p(tasks$0,t_priority$0));
(not(t_priority$0[tasks$0] = {}));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & rtask$0: TASK & rtask$0: tasks$0 & rtask$0: schedule_p(tasks$0,t_priority$0));
(t_priority$0[tasks$0]/\NATURAL: FIN(NATURAL));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & rtask$0: TASK & rtask$0: tasks$0);
(rtask$0: dom(t_priority$0));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & rtask$0: TASK & rtask$0: tasks$0);
(not(t_priority$0[tasks$0] = {}));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & rtask$0: TASK & rtask$0: tasks$0);
(t_priority$0[tasks$0]/\NATURAL: FIN(NATURAL));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & rtask$0: TASK & rtask$0: tasks$0 & t_priority$0(rtask$0) = max(t_priority$0[tasks$0]) & dtask$0: TASK & dtask$0: tasks$0 & not(rtask$0 = dtask$0));
(rtask$0: dom(t_priority$0));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & rtask$0: TASK & rtask$0: tasks$0 & t_priority$0(rtask$0) = max(t_priority$0[tasks$0]) & dtask$0: TASK & dtask$0: tasks$0 & not(rtask$0 = dtask$0));
(not(t_priority$0[tasks$0-{dtask$0}] = {}));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & rtask$0: TASK & rtask$0: tasks$0 & t_priority$0(rtask$0) = max(t_priority$0[tasks$0]) & dtask$0: TASK & dtask$0: tasks$0 & not(rtask$0 = dtask$0));
(t_priority$0[tasks$0-{dtask$0}]/\NATURAL: FIN(NATURAL));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & run$0: TASK & run$0: tasks$0);
(run$0: dom(t_priority$0));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & run$0: TASK & run$0: tasks$0);
(not(t_priority$0[tasks$0] = {}));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & run$0: TASK & run$0: tasks$0);
(t_priority$0[tasks$0]/\NATURAL: FIN(NATURAL));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & run$0: TASK & run$0: tasks$0 & t_priority$0(run$0) = max(t_priority$0[tasks$0]) & atask$0: TASK & not(atask$0: tasks$0));
(atask$0: dom(t_priority$0));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & run$0: TASK & run$0: tasks$0 & t_priority$0(run$0) = max(t_priority$0[tasks$0]) & atask$0: TASK & not(atask$0: tasks$0));
(run$0: dom(t_priority$0));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & run$0: TASK & run$0: tasks$0 & t_priority$0(run$0) = max(t_priority$0[tasks$0]) & atask$0: TASK & not(atask$0: tasks$0) & t_priority$0(atask$0)+1<=t_priority$0(run$0));
(run$0: dom(t_priority$0));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & run$0: TASK & run$0: tasks$0 & t_priority$0(run$0) = max(t_priority$0[tasks$0]) & atask$0: TASK & not(atask$0: tasks$0) & t_priority$0(atask$0)+1<=t_priority$0(run$0));
(not(t_priority$0[tasks$0\/{atask$0}] = {}));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & run$0: TASK & run$0: tasks$0 & t_priority$0(run$0) = max(t_priority$0[tasks$0]) & atask$0: TASK & not(atask$0: tasks$0) & t_priority$0(atask$0)+1<=t_priority$0(run$0));
(t_priority$0[tasks$0\/{atask$0}]/\NATURAL: FIN(NATURAL));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & tasks$0: POW(dom(t_priority$0)) & not(tasks$0 = {}) & rtask$0: TASK & rtask$0: tasks$0 & not(tasks$0 = {rtask$0}));
(not(t_priority$0[tasks$0-{rtask$0}] = {}));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & tasks$0: POW(dom(t_priority$0)) & not(tasks$0 = {}) & rtask$0: TASK & rtask$0: tasks$0 & not(tasks$0 = {rtask$0}));
(t_priority$0[tasks$0-{rtask$0}]/\NATURAL: FIN(NATURAL));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & tasks$0: POW(dom(t_priority$0)) & not(tasks$0 = {}) & rtask$0: TASK & rtask$0: tasks$0 & not(tasks$0 = {rtask$0}));
(not(t_priority$0[tasks$0] = {}));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & tasks$0: POW(dom(t_priority$0)) & not(tasks$0 = {}) & rtask$0: TASK & rtask$0: tasks$0 & not(tasks$0 = {rtask$0}));
(t_priority$0[tasks$0]/\NATURAL: FIN(NATURAL));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) => max(t_priority[tasks-{rtask}])<=max(t_priority[tasks])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & tasks$0: POW(dom(t_priority$0)) & not(tasks$0 = {}) & rtask$0: TASK & rtask$0: tasks$0 & not(tasks$0 = {rtask$0}) & priority$0: PRIORITY);
(not(t_priority$0[tasks$0] = {}));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) => max(t_priority[tasks-{rtask}])<=max(t_priority[tasks])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & tasks$0: POW(dom(t_priority$0)) & not(tasks$0 = {}) & rtask$0: TASK & rtask$0: tasks$0 & not(tasks$0 = {rtask$0}) & priority$0: PRIORITY);
(t_priority$0[tasks$0]/\NATURAL: FIN(NATURAL));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) => max(t_priority[tasks-{rtask}])<=max(t_priority[tasks])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & tasks$0: POW(dom(t_priority$0)) & not(tasks$0 = {}) & rtask$0: TASK & rtask$0: tasks$0 & not(tasks$0 = {rtask$0}) & priority$0: PRIORITY & max(t_priority$0[tasks$0])<=priority$0);
(not(t_priority$0[tasks$0-{rtask$0}] = {}));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) => max(t_priority[tasks-{rtask}])<=max(t_priority[tasks])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & tasks$0: POW(dom(t_priority$0)) & not(tasks$0 = {}) & rtask$0: TASK & rtask$0: tasks$0 & not(tasks$0 = {rtask$0}) & priority$0: PRIORITY & max(t_priority$0[tasks$0])<=priority$0);
(t_priority$0[tasks$0-{rtask$0}]/\NATURAL: FIN(NATURAL));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) => max(t_priority[tasks-{rtask}])<=max(t_priority[tasks])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & tasks$0: POW(dom(t_priority$0)) & not(tasks$0 = {}) & rtask$0: TASK & rtask$0: tasks$0 & not(tasks$0 = {rtask$0}) & priority$0: PRIORITY & max(t_priority$0[tasks$0])<=priority$0);
(not(t_priority$0[tasks$0] = {}));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) => max(t_priority[tasks-{rtask}])<=max(t_priority[tasks])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & tasks$0: POW(dom(t_priority$0)) & not(tasks$0 = {}) & rtask$0: TASK & rtask$0: tasks$0 & not(tasks$0 = {rtask$0}) & priority$0: PRIORITY & max(t_priority$0[tasks$0])<=priority$0);
(t_priority$0[tasks$0]/\NATURAL: FIN(NATURAL));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) => max(t_priority[tasks-{rtask}])<=max(t_priority[tasks])) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & tasks$0: POW(dom(t_priority$0)) & not(tasks$0 = {}) & rtask$0: TASK & rtask$0: tasks$0 & not(tasks$0 = {rtask$0}) & priority$0: PRIORITY & max(t_priority$0[tasks$0])<=priority$0 & max(t_priority$0[tasks$0-{rtask$0}])<=max(t_priority$0[tasks$0]));
(t_priority$0[tasks$0-{rtask$0}]\/{priority$0}/\NATURAL: FIN(NATURAL));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) => max(t_priority[tasks-{rtask}])<=max(t_priority[tasks])) & !(tasks,t_priority,rtask,priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) & priority: PRIORITY & max(t_priority[tasks])<=priority & max(t_priority[tasks-{rtask}])<=max(t_priority[tasks]) => priority = max(t_priority[tasks-{rtask}]\/{priority})) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & tasks$0: POW(dom(t_priority$0)) & not(tasks$0 = {}) & rtask$0: TASK & rtask$0: tasks$0 & not(tasks$0 = {rtask$0}) & priority$0: PRIORITY);
(not(t_priority$0[tasks$0] = {}));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) => max(t_priority[tasks-{rtask}])<=max(t_priority[tasks])) & !(tasks,t_priority,rtask,priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) & priority: PRIORITY & max(t_priority[tasks])<=priority & max(t_priority[tasks-{rtask}])<=max(t_priority[tasks]) => priority = max(t_priority[tasks-{rtask}]\/{priority})) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & tasks$0: POW(dom(t_priority$0)) & not(tasks$0 = {}) & rtask$0: TASK & rtask$0: tasks$0 & not(tasks$0 = {rtask$0}) & priority$0: PRIORITY);
(t_priority$0[tasks$0]/\NATURAL: FIN(NATURAL));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) => max(t_priority[tasks-{rtask}])<=max(t_priority[tasks])) & !(tasks,t_priority,rtask,priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) & priority: PRIORITY & max(t_priority[tasks])<=priority & max(t_priority[tasks-{rtask}])<=max(t_priority[tasks]) => priority = max(t_priority[tasks-{rtask}]\/{priority})) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & tasks$0: POW(dom(t_priority$0)) & not(tasks$0 = {}) & rtask$0: TASK & rtask$0: tasks$0 & not(tasks$0 = {rtask$0}) & priority$0: PRIORITY & priority$0+1<=max(t_priority$0[tasks$0]));
(not(t_priority$0[tasks$0-{rtask$0}] = {}));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) => max(t_priority[tasks-{rtask}])<=max(t_priority[tasks])) & !(tasks,t_priority,rtask,priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) & priority: PRIORITY & max(t_priority[tasks])<=priority & max(t_priority[tasks-{rtask}])<=max(t_priority[tasks]) => priority = max(t_priority[tasks-{rtask}]\/{priority})) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & tasks$0: POW(dom(t_priority$0)) & not(tasks$0 = {}) & rtask$0: TASK & rtask$0: tasks$0 & not(tasks$0 = {rtask$0}) & priority$0: PRIORITY & priority$0+1<=max(t_priority$0[tasks$0]));
(t_priority$0[tasks$0-{rtask$0}]/\NATURAL: FIN(NATURAL));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) => max(t_priority[tasks-{rtask}])<=max(t_priority[tasks])) & !(tasks,t_priority,rtask,priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) & priority: PRIORITY & max(t_priority[tasks])<=priority & max(t_priority[tasks-{rtask}])<=max(t_priority[tasks]) => priority = max(t_priority[tasks-{rtask}]\/{priority})) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & tasks$0: POW(dom(t_priority$0)) & not(tasks$0 = {}) & rtask$0: TASK & rtask$0: tasks$0 & not(tasks$0 = {rtask$0}) & priority$0: PRIORITY & priority$0+1<=max(t_priority$0[tasks$0]));
(not(t_priority$0[tasks$0] = {}));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) => max(t_priority[tasks-{rtask}])<=max(t_priority[tasks])) & !(tasks,t_priority,rtask,priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) & priority: PRIORITY & max(t_priority[tasks])<=priority & max(t_priority[tasks-{rtask}])<=max(t_priority[tasks]) => priority = max(t_priority[tasks-{rtask}]\/{priority})) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & tasks$0: POW(dom(t_priority$0)) & not(tasks$0 = {}) & rtask$0: TASK & rtask$0: tasks$0 & not(tasks$0 = {rtask$0}) & priority$0: PRIORITY & priority$0+1<=max(t_priority$0[tasks$0]));
(t_priority$0[tasks$0]/\NATURAL: FIN(NATURAL));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) => max(t_priority[tasks-{rtask}])<=max(t_priority[tasks])) & !(tasks,t_priority,rtask,priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) & priority: PRIORITY & max(t_priority[tasks])<=priority & max(t_priority[tasks-{rtask}])<=max(t_priority[tasks]) => priority = max(t_priority[tasks-{rtask}]\/{priority})) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & tasks$0: POW(dom(t_priority$0)) & not(tasks$0 = {}) & rtask$0: TASK & rtask$0: tasks$0 & not(tasks$0 = {rtask$0}) & priority$0: PRIORITY & priority$0+1<=max(t_priority$0[tasks$0]) & max(t_priority$0[tasks$0-{rtask$0}]) = max(t_priority$0[tasks$0]));
(not(t_priority$0[tasks$0] = {}));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) => max(t_priority[tasks-{rtask}])<=max(t_priority[tasks])) & !(tasks,t_priority,rtask,priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) & priority: PRIORITY & max(t_priority[tasks])<=priority & max(t_priority[tasks-{rtask}])<=max(t_priority[tasks]) => priority = max(t_priority[tasks-{rtask}]\/{priority})) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & tasks$0: POW(dom(t_priority$0)) & not(tasks$0 = {}) & rtask$0: TASK & rtask$0: tasks$0 & not(tasks$0 = {rtask$0}) & priority$0: PRIORITY & priority$0+1<=max(t_priority$0[tasks$0]) & max(t_priority$0[tasks$0-{rtask$0}]) = max(t_priority$0[tasks$0]));
(t_priority$0[tasks$0]/\NATURAL: FIN(NATURAL));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & (active = TRUE => t_priority[runable]: FIN(PRIORITY)) & (active = TRUE => !atask.(atask: TASK & atask: runable & not(atask = idle) => not(runable = {atask}))) & (active = TRUE => not(t_priority[runable] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) => max(t_priority[tasks-{rtask}])<=max(t_priority[tasks])) & !(tasks,t_priority,rtask,priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) & priority: PRIORITY & max(t_priority[tasks])<=priority & max(t_priority[tasks-{rtask}])<=max(t_priority[tasks]) => priority = max(t_priority[tasks-{rtask}]\/{priority})) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & tasks$0: POW(dom(t_priority$0)) & not(tasks$0 = {}) & rtask$0: TASK & rtask$0: tasks$0 & not(tasks$0 = {rtask$0}) & priority$0: PRIORITY & priority$0+1<=max(t_priority$0[tasks$0]) & max(t_priority$0[tasks$0-{rtask$0}]) = max(t_priority$0[tasks$0]));
(t_priority$0[tasks$0-{rtask$0}]\/{priority$0}/\NATURAL: FIN(NATURAL));
("`t_create preconditions in previous components'" & priority: PRIORITY);
("`t_create preconditions in this component'" & btrue);
("`Local hypotheses'" & task: TASK & not(task: tasks) & n_runable: POW(tasks) & n_runable = runable\/{task} & not(task = TASK_NULL) & n_priority: TASK +-> PRIORITY & n_priority = t_priority\/{task|->priority} & active = TRUE);
(running: dom(t_priority));
("`Local hypotheses'" & task: TASK & not(task: tasks) & n_runable: POW(tasks) & n_runable = runable\/{task} & not(task = TASK_NULL) & n_priority: TASK +-> PRIORITY & n_priority = t_priority\/{task|->priority} & active = TRUE & t_priority(running)<=priority);
(n_runable,n_priority: dom(schedule_p));
("`Local hypotheses'" & task: TASK & not(task: tasks) & n_runable: POW(tasks) & n_runable = runable\/{task} & not(task = TASK_NULL) & n_priority: TASK +-> PRIORITY & n_priority = t_priority\/{task|->priority} & active = TRUE);
(running: dom(t_priority));
("`Local hypotheses'" & task: TASK & not(task: tasks) & n_runable: POW(tasks) & n_runable = runable\/{task} & not(task = TASK_NULL) & n_priority: TASK +-> PRIORITY & n_priority = t_priority\/{task|->priority} & not(active = TRUE) & not(runable = {}));
(running: dom(t_priority));
("`Local hypotheses'" & task: TASK & not(task: tasks) & n_runable: POW(tasks) & n_runable = runable\/{task} & not(task = TASK_NULL) & n_priority: TASK +-> PRIORITY & n_priority = t_priority\/{task|->priority} & not(active = TRUE) & not(runable = {}) & t_priority(running)<=priority);
(n_runable,n_priority: dom(schedule_p));
("`Local hypotheses'" & task: TASK & not(task: tasks) & n_runable: POW(tasks) & n_runable = runable\/{task} & not(task = TASK_NULL) & n_priority: TASK +-> PRIORITY & n_priority = t_priority\/{task|->priority} & not(active = TRUE) & not(runable = {}));
(running: dom(t_priority));
("`t_delete preconditions in previous components'" & atask: TASK & atask: tasks & not(atask = idle));
("`t_delete preconditions in this component'" & btrue);
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable-{atask} & not(n_runable = {}) & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority & atask: runable & atask = running & active = TRUE);
(n_runable,n_priority: dom(schedule_p));
("`t_yield preconditions in previous components'" & active = TRUE);
("`t_yield preconditions in this component'" & active = TRUE);
("`Local hypotheses'" & btrue);
(runable,t_priority: dom(schedule_p));
("`t_suspend preconditions in previous components'" & stask: TASK & stask: tasks & not(stask = idle));
("`t_suspend preconditions in this component'" & btrue);
("`Local hypotheses'" & stask: runable & n_runable: POW(tasks) & n_runable = runable-{stask} & not(n_runable = {}) & stask = running);
(n_runable,t_priority: dom(schedule_p));
("`t_resume preconditions in previous components'" & rtask: TASK & rtask: suspended & active = TRUE);
("`t_resume preconditions in this component'" & btrue);
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{rtask});
(rtask: dom(t_priority));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{rtask});
(running: dom(t_priority));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{rtask} & t_priority(running)<=t_priority(rtask));
(n_runable,t_priority: dom(schedule_p));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{rtask});
(rtask: dom(t_priority));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{rtask});
(running: dom(t_priority));
("`t_getPriority preconditions in previous components'" & atask: TASK & atask: tasks);
("`t_getPriority preconditions in this component'" & btrue);
("`t_getCurrent preconditions in previous components'" & btrue);
("`t_getCurrent preconditions in this component'" & btrue);
("`t_getNumberOfTasks preconditions in previous components'" & btrue);
("`t_getNumberOfTasks preconditions in this component'" & btrue);
("`Local hypotheses'" & btrue);
(tasks: FIN(tasks));
("`t_delayTask preconditions in previous components'" & task: TASK & task = running & running: runable & not(running = idle) & ticks: TICK);
("`t_delayTask preconditions in this component'" & btrue);
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable-{running} & not(n_runable = {}));
(n_runable,t_priority: dom(schedule_p));
("`t_startScheduler preconditions in previous components'" & active = FALSE);
("`t_startScheduler preconditions in this component'" & btrue);
("`Local hypotheses'" & idle_task: TASK & not(idle_task: tasks) & n_runable: POW(tasks) & n_runable = runable\/{idle_task});
(n_runable,t_priority: dom(schedule_p));
("`t_endScheduler preconditions in previous components'" & active = TRUE);
("`t_endScheduler preconditions in this component'" & btrue);
("`t_resumeAll preconditions in previous components'" & tunblocked: FIN(TASK) & tunblocked: POW(blocked) & tunblocked = unblocked);
("`t_resumeAll preconditions in this component'" & btrue);
("`Local hypotheses'" & not(tunblocked = {}) & n_runable: POW(tasks) & n_runable = runable\/tunblocked);
(n_runable,t_priority: dom(schedule_p));
("`t_unblock preconditions in previous components'" & task: TASK & task: blocked & active = TRUE);
("`t_unblock preconditions in this component'" & btrue);
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{task});
(task: dom(t_priority));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{task});
(running: dom(t_priority));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{task} & t_priority(running)<=t_priority(task));
(n_runable,t_priority: dom(schedule_p));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{task});
(task: dom(t_priority));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{task});
(running: dom(t_priority));
("`t_removeFromEventList preconditions in previous components'" & task: TASK & task: blocked\/suspended & active = TRUE);
("`t_removeFromEventList preconditions in this component'" & btrue);
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{task});
(task: dom(t_priority));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{task});
(running: dom(t_priority));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{task} & t_priority(running)<=t_priority(task));
(n_runable,t_priority: dom(schedule_p));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{task});
(task: dom(t_priority));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{task});
(running: dom(t_priority));
("`t_setPriority preconditions in previous components'" & task: tasks & priority: PRIORITY & not(task = idle) & active = TRUE);
("`t_setPriority preconditions in this component'" & btrue);
("`Local hypotheses'" & n_priority = t_priority<+{task|->priority} & task: runable);
(running: dom(t_priority));
("`Local hypotheses'" & n_priority = t_priority<+{task|->priority} & task: runable & t_priority(running)<=priority & not(task = running));
(runable,n_priority: dom(schedule_p));
("`Local hypotheses'" & n_priority = t_priority<+{task|->priority} & task: runable);
(running: dom(t_priority));
("`Local hypotheses'" & n_priority = t_priority<+{task|->priority} & task: runable & not(t_priority(running)<=priority) & task = running);
(runable,n_priority: dom(schedule_p));
("`t_priorityInherit preconditions in previous components'" & xTicksToWait: TICK & holderTask: tasks & not(holderTask = idle) & not(running = idle) & running: runable & active = TRUE);
("`t_priorityInherit preconditions in this component'" & btrue);
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable-{running} & not(n_runable = {}) & n_priority: TASK +-> PRIORITY);
(running: dom(t_priority));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable-{running} & not(n_runable = {}) & n_priority: TASK +-> PRIORITY & n_priority = t_priority<+{holderTask|->t_priority(running)});
(running: dom(t_priority));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable-{running} & not(n_runable = {}) & n_priority: TASK +-> PRIORITY & n_priority = t_priority<+{holderTask|->t_priority(running)} & t_priority(holderTask)+1<=t_priority(running));
(n_runable,n_priority: dom(schedule_p));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable-{running} & not(n_runable = {}) & n_priority: TASK +-> PRIORITY & n_priority = t_priority<+{holderTask|->t_priority(running)});
(running: dom(t_priority));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable-{running} & not(n_runable = {}) & n_priority: TASK +-> PRIORITY & n_priority = t_priority<+{holderTask|->t_priority(running)} & not(t_priority(holderTask)+1<=t_priority(running)));
(n_runable,t_priority: dom(schedule_p));
("`t_returnPriority preconditions in previous components'" & btask: TASK & btask: tasks & btask: blocked\/suspended & active = TRUE & not(running = idle));
("`t_returnPriority preconditions in this component'" & btrue);
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{btask} & n_priority: TASK +-> PRIORITY);
(running: dom(t_bpriority));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority<+{running|->t_bpriority(running)});
(running: dom(t_bpriority));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority<+{running|->t_bpriority(running)});
(running: dom(t_priority));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority<+{running|->t_bpriority(running)} & not(t_bpriority(running) = t_priority(running)));
(n_runable,n_priority: dom(schedule_p));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority<+{running|->t_bpriority(running)});
(running: dom(t_bpriority));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority<+{running|->t_bpriority(running)});
(running: dom(t_priority));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority<+{running|->t_bpriority(running)} & t_bpriority(running) = t_priority(running));
(running: dom(t_priority));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority<+{running|->t_bpriority(running)} & t_bpriority(running) = t_priority(running) & t_priority(running)<=t_priority(btask));
(n_runable,t_priority: dom(schedule_p));
("`Local hypotheses'" & n_runable: POW(tasks) & n_runable = runable\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority<+{running|->t_bpriority(running)} & t_bpriority(running) = t_priority(running));
(running: dom(t_priority));
("`t_suspendAll preconditions in previous components'" & btrue);
("`t_suspendAll preconditions in this component'" & active = TRUE);
("`t_incrementTick preconditions in previous components'" & btrue);
("`t_incrementTick preconditions in this component'" & active = TRUE & tickCount: TICK);
("`t_beforeResumeAll preconditions in previous components'" & btrue);
("`t_beforeResumeAll preconditions in this component'" & tickCount: TICK & tickIncrement: TICK)

END
&

THEORY EnumerateX IS
(SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED});
(COPY_POSITION == {queueSEND_TO_BACK,queueSEND_TO_FRONT});
(QUEUE_TYPE == {TQUE,TSEMAPH,TMUT});
(ERROR_DEFINITION == {errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY,errNO_TASK_TO_RUN,errQUEUE_BLOCKED,errQUEUE_YIELD,errQUEUE_EMPTY,errQUEUE_FULL,pdPASS,pdFAIL,pdTRUE,pdFALSE});
(SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED});
(COPY_POSITION == {queueSEND_TO_BACK,queueSEND_TO_FRONT});
(QUEUE_TYPE == {TQUE,TSEMAPH,TMUT});
(ERROR_DEFINITION == {errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY,errNO_TASK_TO_RUN,errQUEUE_BLOCKED,errQUEUE_YIELD,errQUEUE_EMPTY,errQUEUE_FULL,pdPASS,pdFAIL,pdTRUE,pdFALSE})

END
