
THEORY ProofList IS
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(120) & _f(121) & t_setPrioritySubstitution.7,(_f(134) => _f(135));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(120) & _f(121) & t_setPrioritySubstitution.6,(_f(132) => _f(133));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(120) & _f(121) & t_setPrioritySubstitution.5,(_f(130) => _f(131));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(120) & _f(121) & t_setPrioritySubstitution.4,(_f(128) => _f(129));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(120) & _f(121) & t_setPrioritySubstitution.3,(_f(126) => _f(127));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(120) & _f(121) & t_setPrioritySubstitution.2,(_f(124) => _f(125));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(120) & _f(121) & t_setPrioritySubstitution.1,(_f(122) => _f(123));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(110) & _f(111) & t_unblockSubstitution.4,(_f(118) => _f(119));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(110) & _f(111) & t_unblockSubstitution.3,(_f(116) => _f(117));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(110) & _f(111) & t_unblockSubstitution.2,(_f(114) => _f(115));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(110) & _f(111) & t_unblockSubstitution.1,(_f(112) => _f(113));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(94) & _f(95) & t_resumeAllSubstitution.7,(_f(108) => _f(109));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(94) & _f(95) & t_resumeAllSubstitution.6,(_f(106) => _f(107));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(94) & _f(95) & t_resumeAllSubstitution.5,(_f(104) => _f(105));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(94) & _f(95) & t_resumeAllSubstitution.4,(_f(102) => _f(103));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(94) & _f(95) & t_resumeAllSubstitution.3,(_f(100) => _f(101));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(94) & _f(95) & t_resumeAllSubstitution.2,(_f(98) => _f(99));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(94) & _f(95) & t_resumeAllSubstitution.1,(_f(96) => _f(97));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(84) & _f(85) & t_startSchedulerSubstitution.3,(_f(90) => _f(91));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(84) & _f(85) & t_startSchedulerSubstitution.2,(_f(88) => _f(89));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(84) & _f(85) & t_startSchedulerSubstitution.1,(_f(86) => _f(87));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(76) & _f(77) & t_delayTaskSubstitution.3,(_f(82) => _f(83));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(76) & _f(77) & t_delayTaskSubstitution.2,(_f(80) => _f(81));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(76) & _f(77) & t_delayTaskSubstitution.1,(_f(78) => _f(79));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(72) & _f(73) & t_getNumberOfTasksSubstitution.1,(_f(74) => _f(75));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(50) & _f(51) & t_resumeSubstitution.8,(_f(66) => _f(67));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(50) & _f(51) & t_resumeSubstitution.7,(_f(64) => _f(65));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(50) & _f(51) & t_resumeSubstitution.6,(_f(62) => _f(63));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(50) & _f(51) & t_resumeSubstitution.5,(_f(60) => _f(61));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(50) & _f(51) & t_resumeSubstitution.4,(_f(58) => _f(59));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(50) & _f(51) & t_resumeSubstitution.3,(_f(56) => _f(57));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(50) & _f(51) & t_resumeSubstitution.2,(_f(54) => _f(55));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(50) & _f(51) & t_resumeSubstitution.1,(_f(52) => _f(53));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(42) & _f(43) & t_suspendSubstitution.3,(_f(48) => _f(49));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(42) & _f(43) & t_suspendSubstitution.2,(_f(46) => _f(47));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(42) & _f(43) & t_suspendSubstitution.1,(_f(44) => _f(45));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & _f(10) & _f(38) & _f(39) & t_deleteSubstitution.1,(_f(40) => _f(41));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.5,(_f(34) => _f(35));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.4,(_f(32) => _f(33));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.3,(_f(30) => _f(31));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.2,(_f(28) => _f(29));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & _f(6) & Assertions.1,(_f(26) => _f(27));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & Invariants.3,(_f(24) => _f(25));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & Invariants.2,(_f(22) => _f(23));
_f(4) & _f(3) & _f(5) & _f(2) & _f(1) & _f(8) & _f(7) & _f(12) & _f(11) & _f(9) & _f(13) & Invariants.1,(_f(20) => _f(21));
_f(4) & _f(3) & _f(5) & Properties.3,(_f(18) => _f(19));
_f(4) & _f(3) & _f(5) & Properties.2,(_f(16) => _f(17));
_f(4) & _f(3) & _f(5) & Properties.1,(_f(14) => _f(15))

END
&

THEORY Formulas IS
("`Component constraints'" & btrue);
("`Component properties'" & PRIORITY = 0..configMAX_PRIORITIES-1 & IDLE_PRIORITY: PRIORITY & IDLE_PRIORITY = 0 & max_prt: PRIORITY*PRIORITY +-> PRIORITY & dom(max_prt) = PRIORITY*PRIORITY & max_prt = %(tmp_mprt_ready,t_prt).(tmp_mprt_ready: PRIORITY & t_prt: PRIORITY | max({tmp_mprt_ready}\/{t_prt})) & schedule_p: FIN(TASK)*(TASK +-> PRIORITY) +-> FIN(TASK) & schedule_p = %(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) | tasks/\dom(t_priority|>{max(t_priority[tasks])})));
("`Seen and used machines properties'" & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES & configMAX_PRIORITIES<=maxint & 1<=configMAX_PRIORITIES & configTOTAL_HEAP_SIZE: INTEGER & 0<=configTOTAL_HEAP_SIZE & configTOTAL_HEAP_SIZE<=maxint & 0<=configTOTAL_HEAP_SIZE & configMINIMAL_STACK_SIZE: INTEGER & 0<=configMINIMAL_STACK_SIZE & configMINIMAL_STACK_SIZE<=maxint & 0<=configMINIMAL_STACK_SIZE & INCLUDE_uxTaskPriorityGet: BIT & INCLUDE_vTaskDelete: BIT & INCLUDE_vTaskSuspend: BIT & INCLUDE_xTaskGetSchedulerState: BIT & INCLUDE_vTaskPrioritySet: BIT & INCLUDE_xTaskGetCurrentTaskHandle: BIT & INCLUDE_vTaskDelayUntil: BIT & INCLUDE_vTaskDelay: BIT & BIT = 0..1 & MAX_DELAY: 0..maxint & 1<=MAX_DELAY & NULL_PARAMETER: PARAMETER & PRIORITY: POW(NAT) & TICK: POW(NAT) & TICK = 0..MAX_DELAY & TICK_INCREMENT: TICK*TICK +-> TICK & dom(TICK_INCREMENT) = TICK*TICK & TICK_INCREMENT = %(tick,inc).(tick: TICK & inc: TICK | (tick+inc) mod MAX_DELAY) & QUEUE_NULL: QUEUE & ITEM_NULL: ITEM & REMOVE_EVENT: TASK*POW(QUEUE)*(QUEUE +-> POW(TASK)) +-> (QUEUE +-> POW(TASK)) & REMOVE_EVENT = %(task,queues,pending).(task: TASK & queues: POW(QUEUE) & pending: QUEUE +-> POW(TASK) | %queue.(queue: queues & queue: dom(pending) | pending(queue)-{task})) & NAME: FIN(INTEGER) & not(NAME = {}) & PARAMETER: FIN(INTEGER) & not(PARAMETER = {}) & TASK: FIN(INTEGER) & not(TASK = {}) & STACK: FIN(INTEGER) & not(STACK = {}) & TASK_CODE: FIN(INTEGER) & not(TASK_CODE = {}) & ITEM: FIN(INTEGER) & not(ITEM = {}) & QUEUE: FIN(INTEGER) & not(QUEUE = {}) & (1..3)*{SCHEDULER_STATE}: FIN(NATURAL*{SCHEDULER_STATE}) & not((1..3)*{SCHEDULER_STATE} = {}) & (1..2)*{COPY_POSITION}: FIN(NATURAL*{COPY_POSITION}) & not((1..2)*{COPY_POSITION} = {}) & (1..10)*{ERROR_DEFINITION}: FIN(NATURAL*{ERROR_DEFINITION}) & not((1..10)*{ERROR_DEFINITION} = {}));
("`Included,imported and extended machines properties'" & btrue);
("`Previous components properties'" & btrue);
("`Component invariant'" & active: BOOL & t_priority: TASK +-> PRIORITY & dom(t_priority) = tasks & (active = TRUE => t_priority(idle) = IDLE_PRIORITY & !tt.(tt: ready => t_priority(tt)<=t_priority(running)) & !tt.(tt: tasks => IDLE_PRIORITY<=t_priority(tt))) & btrue);
("`Seen and used machines invariants'" & btrue);
("`Included,imported and extended machines invariants'" & btrue);
("`Previous components invariants'" & active: BOOL & tasks: FIN(TASK) & idle: TASK & blocked: FIN(TASK) & blocked: POW(tasks) & ready: FIN(TASK) & ready: POW(tasks) & suspended: FIN(TASK) & suspended: POW(tasks) & running: TASK & (active = TRUE => running = idle or idle: ready & running: tasks & not(running: ready) & not(running: blocked) & not(running: suspended) & tasks = {running}\/suspended\/blocked\/ready) & (active = FALSE => tasks = ready) & ready/\blocked = {} & blocked/\suspended = {} & suspended/\ready = {});
("`Component assertions'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & !(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) => schedule_p(tasks,t_priority): POW(tasks)) & !(tasks,t_priority,task$0).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & task$0: tasks & task$0: schedule_p(tasks,t_priority) => t_priority(task$0) = max(t_priority[tasks])));
("`Seen and used machines assertions'" & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES & BIT: POW(NATURAL));
("`Included,imported and extended machines assertions'" & btrue);
("`Previous components assertions'" & (active = TRUE => idle: tasks) & (active = TRUE => not(tasks = {})) & (active = TRUE => not(idle: blocked)) & (active = TRUE => not(idle: suspended)) & (active = TRUE & ready = {} => running = idle));
("`Local hypotheses'" & PRIORITY = 0..configMAX_PRIORITIES-1 & IDLE_PRIORITY: PRIORITY & IDLE_PRIORITY = 0 & max_prt: PRIORITY*PRIORITY +-> PRIORITY & dom(max_prt) = PRIORITY*PRIORITY & tmp_mprt_ready: PRIORITY & t_prt: PRIORITY);
({tmp_mprt_ready}\/{t_prt}/\NATURAL: FIN(NATURAL));
("`Local hypotheses'" & PRIORITY = 0..configMAX_PRIORITIES-1 & IDLE_PRIORITY: PRIORITY & IDLE_PRIORITY = 0 & max_prt: PRIORITY*PRIORITY +-> PRIORITY & dom(max_prt) = PRIORITY*PRIORITY & max_prt = %(tmp_mprt_ready,t_prt).(tmp_mprt_ready: PRIORITY & t_prt: PRIORITY | max({tmp_mprt_ready}\/{t_prt})) & schedule_p: FIN(TASK)*(TASK +-> PRIORITY) +-> FIN(TASK) & tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)));
(not(t_priority[tasks] = {}));
("`Local hypotheses'" & PRIORITY = 0..configMAX_PRIORITIES-1 & IDLE_PRIORITY: PRIORITY & IDLE_PRIORITY = 0 & max_prt: PRIORITY*PRIORITY +-> PRIORITY & dom(max_prt) = PRIORITY*PRIORITY & max_prt = %(tmp_mprt_ready,t_prt).(tmp_mprt_ready: PRIORITY & t_prt: PRIORITY | max({tmp_mprt_ready}\/{t_prt})) & schedule_p: FIN(TASK)*(TASK +-> PRIORITY) +-> FIN(TASK) & tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)));
(t_priority[tasks]/\NATURAL: FIN(NATURAL));
("`Local hypotheses'" & t_priority: TASK +-> PRIORITY & dom(t_priority) = tasks & active = TRUE);
(idle: dom(t_priority));
("`Local hypotheses'" & t_priority: TASK +-> PRIORITY & dom(t_priority) = tasks & active = TRUE & t_priority(idle) = IDLE_PRIORITY & tt: ready);
(tt: dom(t_priority));
("`Local hypotheses'" & t_priority: TASK +-> PRIORITY & dom(t_priority) = tasks & active = TRUE & t_priority(idle) = IDLE_PRIORITY & tt: ready);
(running: dom(t_priority));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)));
(tasks$0,t_priority$0: dom(schedule_p));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & !(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) => schedule_p(tasks,t_priority): POW(tasks)) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & task: tasks$0);
(tasks$0,t_priority$0: dom(schedule_p));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & !(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) => schedule_p(tasks,t_priority): POW(tasks)) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & task: tasks$0 & task: schedule_p(tasks$0,t_priority$0));
(task: dom(t_priority$0));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & !(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) => schedule_p(tasks,t_priority): POW(tasks)) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & task: tasks$0 & task: schedule_p(tasks$0,t_priority$0));
(not(t_priority$0[tasks$0] = {}));
("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active = TRUE => running: dom(t_priority)) & !(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) => schedule_p(tasks,t_priority): POW(tasks)) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & task: tasks$0 & task: schedule_p(tasks$0,t_priority$0));
(t_priority$0[tasks$0]/\NATURAL: FIN(NATURAL));
("`t_create preconditions in previous components'" & active = FALSE & priority: PRIORITY);
("`t_create preconditions in this component'" & btrue);
("`t_delete preconditions in previous components'" & active = TRUE & atask: TASK & atask: tasks & not(atask = idle));
("`t_delete preconditions in this component'" & atask: TASK & atask: tasks & not(atask = idle));
("`Local hypotheses'" & atask = running & task: TASK);
(ready,t_priority: dom(schedule_p));
("`t_suspend preconditions in previous components'" & active = TRUE & atask: TASK & atask: tasks & not(atask = idle));
("`t_suspend preconditions in this component'" & atask: TASK & atask: tasks & not(atask = idle));
("`Local hypotheses'" & atask = running & task: TASK & task: ready);
(task: dom(t_priority));
("`Local hypotheses'" & atask = running & task: TASK & task: ready);
(not(t_priority[ready] = {}));
("`Local hypotheses'" & atask = running & task: TASK & task: ready);
(t_priority[ready]/\NATURAL: FIN(NATURAL));
("`t_resume preconditions in previous components'" & active = TRUE & atask: TASK & atask: suspended);
("`t_resume preconditions in this component'" & btrue);
("`Local hypotheses'" & btrue);
(atask: dom(t_priority));
("`Local hypotheses'" & btrue);
(running: dom(t_priority));
("`Local hypotheses'" & btrue);
(atask: dom(t_priority));
("`Local hypotheses'" & btrue);
(running: dom(t_priority));
("`Local hypotheses'" & not(t_priority(running)+1<=t_priority(atask)));
(atask: dom(t_priority));
("`Local hypotheses'" & not(t_priority(running)+1<=t_priority(atask)));
(running: dom(t_priority));
("`Local hypotheses'" & not(t_priority(running)+1<=t_priority(atask)));
(atask: dom(t_priority));
("`Local hypotheses'" & not(t_priority(running)+1<=t_priority(atask)));
(running: dom(t_priority));
("`t_getPriority preconditions in previous components'" & atask: TASK & atask: tasks);
("`t_getPriority preconditions in this component'" & btrue);
("`t_getCurrent preconditions in previous components'" & active = TRUE);
("`t_getCurrent preconditions in this component'" & btrue);
("`t_getNumberOfTasks preconditions in previous components'" & btrue);
("`t_getNumberOfTasks preconditions in this component'" & btrue);
("`Local hypotheses'" & btrue);
(tasks: FIN(tasks));
("`t_delayTask preconditions in previous components'" & active = TRUE & not(running = idle) & ticks: TICK & not(ticks = 0));
("`t_delayTask preconditions in this component'" & btrue);
("`Local hypotheses'" & task: TASK & task: ready);
(task: dom(t_priority));
("`Local hypotheses'" & task: TASK & task: ready);
(not(t_priority[ready] = {}));
("`Local hypotheses'" & task: TASK & task: ready);
(t_priority[ready]/\NATURAL: FIN(NATURAL));
("`t_startScheduler preconditions in previous components'" & active = FALSE);
("`t_startScheduler preconditions in this component'" & btrue);
("`Local hypotheses'" & idle_task: TASK & not(idle_task: tasks) & task: TASK & (ready = {} => task = idle_task) & not(ready = {}) & task: ready);
(task: dom(t_priority));
("`Local hypotheses'" & idle_task: TASK & not(idle_task: tasks) & task: TASK & (ready = {} => task = idle_task) & not(ready = {}) & task: ready);
(not(t_priority[ready] = {}));
("`Local hypotheses'" & idle_task: TASK & not(idle_task: tasks) & task: TASK & (ready = {} => task = idle_task) & not(ready = {}) & task: ready);
(t_priority[ready]/\NATURAL: FIN(NATURAL));
("`t_endScheduler preconditions in previous components'" & active = TRUE);
("`t_endScheduler preconditions in this component'" & btrue);
("`t_resumeAll preconditions in previous components'" & active = TRUE & tick: TICK);
("`t_resumeAll preconditions in this component'" & active = TRUE & tick: TICK);
("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}));
(running: dom(t_priority));
("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}));
(not(t_priority[unblocked] = {}));
("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}));
(t_priority[unblocked]/\NATURAL: FIN(NATURAL));
("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}) & t_priority(running)<=max(t_priority[unblocked]) & task: TASK);
(unblocked,t_priority: dom(schedule_p));
("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}));
(running: dom(t_priority));
("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}));
(not(t_priority[unblocked] = {}));
("`Local hypotheses'" & unblocked: FIN(TASK) & unblocked: POW(blocked) & not(unblocked = {}));
(t_priority[unblocked]/\NATURAL: FIN(NATURAL));
("`t_unblock preconditions in previous components'" & active = TRUE & task: TASK & task: blocked);
("`t_unblock preconditions in this component'" & active = TRUE & not(blocked = {}) & task: TASK & task: blocked);
("`Local hypotheses'" & btrue);
(task: dom(t_priority));
("`Local hypotheses'" & btrue);
(running: dom(t_priority));
("`Local hypotheses'" & btrue);
(task: dom(t_priority));
("`Local hypotheses'" & btrue);
(running: dom(t_priority));
("`t_setPriority preconditions in previous components'" & task: tasks & priority: PRIORITY & active = TRUE & not(task = idle));
("`t_setPriority preconditions in this component'" & btrue);
("`Local hypotheses'" & task: ready);
(running: dom(t_priority));
("`Local hypotheses'" & task: ready);
(running: dom(t_priority));
("`Local hypotheses'" & not(task: ready & t_priority(running)<=priority) & task = running);
(not(t_priority[ready] = {}));
("`Local hypotheses'" & not(task: ready & t_priority(running)<=priority) & task = running);
(t_priority[ready]/\NATURAL: FIN(NATURAL));
("`Local hypotheses'" & not(task: ready & t_priority(running)<=priority) & task = running & priority+1<=max(t_priority[ready]) & atask: TASK);
(ready,t_priority: dom(schedule_p));
("`Local hypotheses'" & not(task: ready & t_priority(running)<=priority) & task = running);
(not(t_priority[ready] = {}));
("`Local hypotheses'" & not(task: ready & t_priority(running)<=priority) & task = running);
(t_priority[ready]/\NATURAL: FIN(NATURAL))

END
&

THEORY EnumerateX IS
(SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED});
(COPY_POSITION == {queueSEND_TO_BACK,queueSEND_TO_FRONT});
(ERROR_DEFINITION == {errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY,errNO_TASK_TO_RUN,errQUEUE_BLOCKED,errQUEUE_YIELD,errQUEUE_EMPTY,errQUEUE_FULL,pdPASS,pdFAIL,pdTRUE,pdFALSE});
(SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED});
(COPY_POSITION == {queueSEND_TO_BACK,queueSEND_TO_FRONT});
(ERROR_DEFINITION == {errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY,errNO_TASK_TO_RUN,errQUEUE_BLOCKED,errQUEUE_YIELD,errQUEUE_EMPTY,errQUEUE_FULL,pdPASS,pdFAIL,pdTRUE,pdFALSE})

END
