/* Task_rr
 * Author: stepgalvao
 * Creation date: Sat Jun 19 2010
 */
REFINEMENT
 Task_rr
REFINES
 Task_r

SEES
 FreeRTOSConfig ,
 Types ,
 Scheduler

ABSTRACT_VARIABLES
 active ,
 tasks ,
 blocked ,
 runable ,
 suspended ,
 running ,
 idle ,
 t_priority ,
 t_bpriority,
 
 /****************************************************************************************************************************/
 ready
 
INVARIANT
  ready : FIN(TASK)
  ready = runnable - running
  
INITIALISATION
 active := FALSE ||
 tasks := {} ||
 running :: TASK ||
 idle :: TASK ||
 t_priority := {} ||
 t_bpriority := {} ||
 blocked , runable , suspended, ready := {}, {}, {}, {}

OPERATIONS
 result <-- t_create ( priority ) =
 BEGIN
   ANY task , n_runable , n_priority
   WHERE
     task : TASK & task /: tasks &  n_runable <: tasks & n_runable = runable \/ { task } & task /= TASK_NULL & n_priority : TASK +-> PRIORITY & n_priority = t_priority \/ { task |-> priority }
   THEN
     tasks := tasks \/ { task } ||
     runable := n_runable ||
     t_priority := n_priority ||
     t_bpriority := t_bpriority \/ { task |-> priority } ||
     IF active = TRUE
     THEN
       IF priority >= t_priority ( running )
       THEN
         running :: schedule_p ( n_runable , n_priority )
       END
     ELSE
       IF runable = {}
       THEN
         running := task
       ELSE
         IF priority >= t_priority ( running )
         THEN
           running :: schedule_p ( n_runable , n_priority )
         END
       END
     END ||
     result := task
   END
 END
 ;

 t_delete ( atask ) =
 BEGIN
   ANY n_runable , n_priority
   WHERE
     n_runable <: tasks & n_runable = runable - { atask } & n_runable /= {} & n_priority : TASK +-> PRIORITY & n_priority = { atask } <<| t_priority
   THEN
     tasks := tasks - { atask } ||
     t_priority := n_priority ||
     t_bpriority := { atask } <<| t_bpriority ||
     IF atask : runable
     THEN
       runable := n_runable ||
       IF atask = running
       THEN
         IF active = TRUE
         THEN
           running :: schedule_p ( n_runable , n_priority )
         END
       END
     ELSIF atask : blocked
     THEN
       blocked := blocked - { atask }
     ELSIF atask : suspended
     THEN
       suspended := suspended - { atask }
     END
   END
 END
 ;

 t_yield =
 PRE
   active = TRUE
 THEN
   running :: schedule_p ( runable , t_priority )
 END
 ;

 t_suspend ( stask ) =
 BEGIN
   IF stask : runable
   THEN
     ANY n_runable
     WHERE
       n_runable <: tasks & n_runable = runable - { stask } & n_runable /= {}
     THEN
       runable := n_runable ||
       IF stask = running
       THEN
         running :: schedule_p ( n_runable , t_priority )
       END
     END
   ELSIF stask : blocked
   THEN
     blocked := blocked - { stask }
   END ||
   suspended := suspended \/ { stask }
 END
 ;

 t_resume ( rtask ) =
 BEGIN
   ANY n_runable
   WHERE
     n_runable <: tasks & n_runable = runable \/ { rtask }
   THEN
     runable := n_runable ||
     IF t_priority ( rtask ) >= t_priority ( running )
     THEN
       running :: schedule_p ( n_runable , t_priority )
     END
   END ||
   suspended := suspended - { rtask }
 END
 ;

 priority <-- t_getPriority ( atask ) =
 BEGIN
   priority := t_priority ( atask )
 END
 ;

 result <-- t_getCurrent =
 BEGIN
   result := running
 END
 ;

 result <-- t_getNumberOfTasks =
 BEGIN
   result := card ( tasks )
 END
 ;

 t_delayTask ( ticks , task ) =
 BEGIN
   ANY n_runable
   WHERE
     n_runable <: tasks & n_runable = runable - { running } & n_runable /= {}
   THEN
     runable := n_runable ||
     running :: schedule_p ( n_runable , t_priority )
   END ||
   blocked := blocked \/ { running }
 END
 ;

 t_startScheduler =
 BEGIN
   active := TRUE ||
   ANY idle_task , n_runable
   WHERE
     idle_task : TASK & idle_task /: tasks &  n_runable <: tasks & n_runable = runable \/ { idle_task }
   THEN
     idle := idle_task ||
     tasks := tasks \/ { idle_task } ||
     running :: schedule_p ( n_runable , t_priority )
   END
 END
 ;

 t_endScheduler =
 BEGIN
   active := FALSE ||
   tasks := {} ||
   t_priority := {} ||
   t_bpriority := {} ||
   blocked , runable , suspended := {}
 END
 ;

 t_resumeAll ( unblocked ) =
 BEGIN
   IF unblocked /= {}
   THEN
     ANY n_runable
     WHERE
       n_runable <: tasks & n_runable = runable \/ unblocked
     THEN
       runable := n_runable ||
       running :: schedule_p ( n_runable , t_priority )
     END ||
     blocked := blocked - unblocked
   END
 END
 ;

 t_unblock ( task ) =
 BEGIN
   blocked := blocked - { task } ||
   ANY n_runable
   WHERE
     n_runable <: tasks & n_runable = runable \/ { task }
   THEN
     runable := n_runable ||
     IF t_priority ( task ) >= t_priority ( running )
     THEN
       running :: schedule_p ( n_runable , t_priority )
     END
   END
 END
 ;

 t_removeFromEventList ( task ) =
 BEGIN
   IF task : blocked
   THEN
     blocked := blocked - { task }
   END ||
   IF task : suspended
   THEN
     suspended := suspended - { task }
   END ||
   ANY n_runable
   WHERE
     n_runable <: tasks & n_runable = runable \/ { task }
   THEN
     runable := n_runable ||
     IF t_priority ( task ) >= t_priority ( running )
     THEN
       running :: schedule_p ( n_runable , t_priority )
     END
   END
 END
 ;

 t_setPriority ( task , priority ) =
 BEGIN
   ANY n_priority
   WHERE
     n_priority = t_priority <+ { task |-> priority }
   THEN
     t_priority := n_priority ||
     t_bpriority ( task ) := priority ||
     IF task : runable
     THEN
       IF t_priority ( running ) <= priority
       THEN
         IF task /= running
         THEN
           running :: schedule_p ( runable , n_priority )
         END
       ELSE
         IF task = running
         THEN
           running :: schedule_p ( runable , n_priority )
         END
       END
     END
   END
 END
 ;

 t_priorityInherit ( holderTask , xTicksToWait ) =
 BEGIN
   ANY n_runable , n_priority
   WHERE
     n_runable <: tasks & n_runable = runable - { running } & n_runable /= {} & n_priority : TASK +-> PRIORITY & n_priority = t_priority <+ { holderTask |-> t_priority ( running ) }
   THEN
     runable := n_runable ||
     blocked := blocked \/ { running } ||
     IF t_priority ( running ) > t_priority ( holderTask )
     THEN
       t_priority := n_priority ||
       t_bpriority ( holderTask ) := t_priority ( holderTask ) ||
       running :: schedule_p ( n_runable , n_priority )
     ELSE
       running :: schedule_p ( n_runable , t_priority )
     END
   END
 END
 ;

 t_returnPriority ( btask ) =
 BEGIN
   IF btask : blocked
   THEN
     blocked := blocked - { btask }
   END ||
   IF btask : suspended
   THEN
     suspended := suspended - { btask }
   END ||
   ANY n_runable , n_priority
   WHERE
     n_runable <: tasks & n_runable = runable \/ { btask } & n_priority : TASK +-> PRIORITY & n_priority = t_priority <+ { running |-> t_bpriority ( running ) }
   THEN
     runable := n_runable ||
     IF t_bpriority ( running ) /= t_priority ( running )
     THEN
       t_priority := n_priority ||
       running :: schedule_p ( n_runable , n_priority )
     ELSIF t_priority ( btask ) >= t_priority ( running )
     THEN
       running :: schedule_p ( n_runable , t_priority )
     END
   END
 END


END
