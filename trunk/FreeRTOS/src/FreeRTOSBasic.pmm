THEORY User_Pass IS
Operation(Initialisation) & Pattern(a: b) & ff(0) & pr;
Operation(Initialisation) & Pattern(ran(a): POW(a-{b}\/{c})) & ff(0) & pr;
Operation(AssertionLemmas) & Pattern(not(a: b(c))) & ff(0) & pr;
Operation(xTaskCreate) & Pattern(ran(a): POW((b\/{c})-{d}\/{e})) & ff(0) & pr;
Operation(xTaskCreate) & Pattern(a(b): c\/{d}) & ff(0) & pr;
Operation(xTaskCreate) & Pattern(not(a(b) = c)) & ff(0) & pr;
Operation(vTaskDelay) & Pattern(a: b\/{c}\/d) & ff(0) & pr;
Operation(vTaskDelayUntil) & Pattern(a(b,c): d) & ff(0) & pr;
Operation(vTaskDelayUntil) & Pattern(a: b\/{c}\/d) & ff(0) & pr;
Operation(vTaskDelete) & Pattern(ran(a): POW(b-{c}-{d}\/{e})) & ff(0) & pr;
Operation(vTaskDelete) & Pattern(a(b): c) & ff(0) & pr;
Operation(vTaskDelete) & Pattern(not(a(b) = c)) & ff(0) & pr;
Operation(vTaskDelete) & Pattern(a: b\/c) & ff(0) & pr;
Operation(vTaskDelete) & Pattern(a: b-{c}\/d) & ff(0) & pr;
Operation(vTaskDelete) & Pattern(a: b\/c-{d}) & ff(0) & pr;
Operation(vTaskEndScheduler) & Pattern(ran(a): POW(a-{b}\/{c})) & ff(0) & pr;
Operation(vTaskResume) & Pattern(a: b\/c-{d}) & ff(0) & pr;
Operation(xQueueGenericSend) & Pattern(not(a: b(c))) & ff(2) & pr;
Operation(xQueueGenericSend) & Pattern(a: b) & ff(0) & pr;
Operation(xQueueGenericSend) & Pattern(a: b\/{c}\/d) & ff(0) & pr;
Operation(xQueueGenericSend) & Pattern(a: b\/c) & ff(0) & pr;
Operation(xQueueGenericSend) & Pattern(ran(a<+{b|->c}): POW(d-{e}\/{c})) & ff(0) & pr;
Operation(xQueueGenericSend) & Pattern((a<+{b|->c})(d): e) & ff(1) & pr;
Operation(xQueueGenericSend) & Pattern(not((a<+{b|->c})(d) = e)) & ff(0) & pr;
Operation(xQueueGenericSend) & Pattern(a: b-c\/d-c) & ff(0) & pr;
Operation(xQueueGenericSend) & Pattern((a<+{b|->c})(d): e) & ff(0) & pr;
Operation(xQueueGenericSend) & Pattern(not((a<+{b|->c})(d) = e)) & ff(1) & pr;
Operation(xQueueGenericSend) & Pattern(a: b-{c}\/d) & ff(0) & pr;
Operation(xQueueGenericSend) & Pattern(a: b\/(c\/{d})) & ff(0) & pr;
Operation(xTaskResumeAll) & Pattern(a: POW(b)) & ff(0) & pr;
Operation(xTaskResumeAll) & Pattern(a(b,c): d) & ff(0) & pr;
Operation(xTaskResumeAll) & Pattern(a: b\/c) & ff(2) & pr;
Operation(vTaskStartScheduler) & Pattern(ran(a): POW((b\/c)-c\/{d})) & ff(0) & pr;
Operation(vTaskStartScheduler) & Pattern(a(b): c\/{d}) & ff(0) & pr;
Operation(vTaskStartScheduler) & Pattern(not(a(b) = c)) & ff(0) & pr;
Operation(vTaskSuspend) & Pattern(a: b\/(c\/{d})) & ff(0) & pr;
Operation(vTaskSuspend) & Pattern(a: b-c\/(d\/c)) & ff(0) & pr;
Operation(xQueueCreate) & Pattern(a(b): c) & ff(0) & pr;
Operation(xQueueCreate) & Pattern(not(a(b) = c)) & ff(0) & pr;
Operation(vQueueDelete) & Pattern(ran({a}<<|b): POW(c-{d}\/{e})) & ff(0) & pr;
Operation(vQueueDelete) & Pattern(({a}<<|b)(c): d) & ff(0) & pr;
Operation(vQueueDelete) & Pattern(not(({a}<<|b)(c) = d)) & ff(0) & pr;
Operation(vQueueDelete) & Pattern(a: b\/c) & ff(0) & pr;
Operation(vQueueDelete) & Pattern(a(b): c) & ff(0) & pr;
Operation(vQueueDelete) & Pattern(not(a(b) = c)) & ff(0) & pr;
Operation(xQueueGenericReceive) & Pattern(a: b) & ff(0) & pr;
Operation(xQueueGenericReceive) & Pattern(not(a: b(c))) & ff(0) & pr;
Operation(xQueueGenericReceive) & Pattern(a(b): c) & ff(0) & pr;
Operation(xQueueGenericReceive) & Pattern(not(a(b) = c)) & ff(0) & pr;
Operation(xQueueGenericReceive) & Pattern(a: b\/{c}\/d) & ff(0) & pr;
Operation(xQueueGenericReceive) & Pattern(a: b\/(c\/{d})) & ff(0) & pr;
Operation(xQueueGenericReceive) & Pattern(a: b\/c) & ff(0) & pr;
Operation(xQueueGenericReceive) & Pattern(ran(a<+{b|->c}): POW(d-{e}\/{f})) & ff(0) & pr;
Operation(xQueueGenericReceive) & Pattern((a<+{b|->c})(d): e) & ff(0) & pr;
Operation(xQueueGenericReceive) & Pattern(not((a<+{b|->c})(d) = e)) & ff(0) & pr;
Operation(xQueueGenericReceive) & Pattern(a: b-c\/d-c) & ff(0) & pr;
Operation(xQueueGenericReceive) & Pattern(ran(a<+{b|->c}): POW(d-{e}\/{c})) & ff(0) & pr;
Operation(xQueueGenericReceive) & Pattern(not((a<+{b|->c})(d) = e)) & ff(1) & pr;
Operation(xQueueGenericReceive) & Pattern(a: b-c\/d-c) & ff(1) & pr;
Operation(xQueueGenericReceive) & Pattern(a: b-{c}\/d) & ff(0) & pr;
Operation(xQueueGenericReceive) & Pattern(a: b-{c}\/d) & ff(1) & pr;
Operation(incrementTick) & Pattern(a: POW(b)) & ff(0) & pr;
Operation(incrementTick) & Pattern(a(b,c): d) & ff(0) & pr;
Operation(incrementTick) & Pattern(a: b\/c) & ff(2) & pr;
Operation(vSemaphoreCreateBinary) & Pattern(a(b): c) & ff(0) & pr;
Operation(vSemaphoreCreateBinary) & Pattern(not(a(b) = c)) & ff(0) & pr;
Operation(xSemaphoreCreateCounting) & Pattern(a<=b) & ff(0) & pr;
Operation(xSemaphoreCreateCounting) & Pattern(a(b): c) & ff(0) & pr;
Operation(xSemaphoreCreateCounting) & Pattern(not(a(b) = c)) & ff(0) & pr;
Operation(xQueueCreateMutex) & Pattern(ran(a\/{b|->c}): POW(d-{e}\/{c})) & ff(0) & pr;
Operation(xQueueCreateMutex) & Pattern((a\/{b|->c})(d): e) & ff(0) & pr;
Operation(xQueueCreateMutex) & Pattern(not((a\/{b|->c})(d) = e)) & ff(0) & pr;
Operation(xSemaphoreCreateRecursiveMutex) & Pattern(ran(a\/{b|->c}): POW(d-{e}\/{c})) & ff(0) & pr;
Operation(xSemaphoreCreateRecursiveMutex) & Pattern((a\/{b|->c})(d): e) & ff(0) & pr;
Operation(xSemaphoreCreateRecursiveMutex) & Pattern(not((a\/{b|->c})(d) = e)) & ff(0) & pr;
Operation(xTaskResumeAll) & Pattern(a: b-c\/d) & ff(0) & dd & ah(task: remove_task(queue_sending,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
Operation(xTaskResumeAll) & Pattern(a: b-c\/d) & ff(0) & dd & ah(task: remove_task(queue_receiving,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
Operation(xTaskResumeAll) & Pattern(a(b,c): d) & ff(0) & dd & pr;
Operation(xTaskResumeAll) & Pattern(a: b\/c) & ff(0) & dd & ah(task: remove_task(queue_sending,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
Operation(incrementTick) & Pattern(a: b-c\/d) & ff(0) & dd & ah(task: remove_task(queue_sending,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
Operation(incrementTick) & Pattern(a: b-c\/d) & ff(0) & dd & ah(task: remove_task(queue_receiving,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
Operation(incrementTick) & Pattern(a: b\/c) & ff(0) & dd & ah(task: remove_task(queue_sending,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
Operation(incrementTick) & Pattern(a: b\/c) & ff(0) & dd & ah(task: remove_task(queue_receiving,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
Operation(incrementTick) & Pattern(a(b,c): d) & ff(0) & dd & pr;
Operation(xTaskResumeAll) & Pattern(a: b\/c) & ff(0) & dd & pr & ah(task: remove_task(queue_receiving,unblocked)(que)) & eh(remove_task,_h,Goal) & pr;
Operation(xTaskResumeAll) & Pattern(a(b,c): d) & ff(0) & dd & ah(task/:queue_sending(que)) & pr & ah(queue_sending = {}) & pr;
Operation(xTaskResumeAll) & Pattern(a: b-c\/d) & ff(0) & dd & ah(task/:queue_receiving(que)) & ah(queue_receiving = {}) & pr & pr;
Operation(incrementTick) & Pattern(a: b-c\/d) & ff(0) & dd & ah(queue_receiving = remove_task(queue_receiving,unblocked)) & pr & dd & ah(task: queue_receiving(que)) & eh(queue_receiving,_h,Goal) & eh(remove_task,_h,Goal) & pr;
Operation(xTaskResumeAll) & Pattern(a: b-c\/d) & ff(0) & dd & ah(queue_sending = remove_task(queue_sending,unblocked)) & pr & dd & pr & ah(task: queue_sending(que)) & eh(queue_sending,_h,Goal) & eh(remove_task,_h,Goal) & pr;
Operation(incrementTick) & Pattern(a: b-c\/d) & ff(0) & dd & ah(task/:queue_sending(que)) & ah(queue_sending = {}) & pr & dd & ah(not(task: queue_sending(que)) & task: queue_sending(que)) & pr & pr;
Operation(xQueueGenericSend) & Pattern(ran(a<+{b|->c}): POW(d-{e}\/{c})) & ff(1) & dc(pxQueue = que$0) & pr & dd & dd & pr;
Operation(xQueueGenericReceive) & Pattern(a: b\/{c}\/d) & ff(0) & dc(pxQueue = que) & pr & dd & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked\/suspended)) & pr & pr & ah((queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(que) = queue_receiving(que)) & pr & dd & ah(task: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(que)) & eh((queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(que),_h,Goal) & pr;
Operation(xQueueGenericReceive) & Pattern(not((a<+{b|->c})(d) = e)) & ff(0) & dc(mt = pxQueue) & pr & dd & dd & ah((mutex_holder<+{pxQueue|->running})(mt) = mutex_holder(mt)) & pr & dd & eh((mutex_holder<+{pxQueue|->running})(mt),_h,Goal) & ph(mt,!mt.(mt: queues & mt: mutexes_busy => mutex_holder(mt): tasks & mutex_holder(mt)/=idle)) & pr & ah(mt/:{pxQueue}) & pr & dd & pr;
Operation(xQueueGenericReceive) & Pattern((a<+{b|->c})(d): e) & ff(0) & dc(pxQueue = mt) & pr & dd & dd & ah((mutex_holder<+{pxQueue|->running})(mt) = mutex_holder(mt)) & pr & dd & eh((mutex_holder<+{pxQueue|->running})(mt),_h,Goal) & ph(mt,!mt.(mt: queues & mt: mutexes_busy => mutex_holder(mt): tasks & mutex_holder(mt)/=idle)) & pr & ah(mt/:{pxQueue}) & pr & dd & pr & pr;
Operation(xQueueGenericReceive) & Pattern(not((a<+{b|->c})(d) = e)) & ff(0) & dc(pxQueue = mt) & pr & dd & dd & ah((mutex_holder<+{pxQueue|->running})(mt) = mutex_holder(mt)) & pr & dd & ph(mt,!mt.(mt: queues & mt: mutexes_busy => mutex_holder(mt): tasks & mutex_holder(mt)/=idle)) & pr & ah(mt/:{pxQueue}) & pr & dd & pr & pr;
Operation(xSemaphoreCreateCounting) & Pattern(a: b\/c) & ff(0) & dc(semaphore$0 = que) & pr & dd & dd & ah((queue_receiving\/{semaphore$0|->{}})(que) = queue_receiving(que)) & pr & dd & ah(task: (queue_receiving\/{semaphore$0|->{}})(que)) & eh((queue_receiving\/{semaphore$0|->{}})(que),_h,Goal) & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked)) & ah(que/:{semaphore$0}) & pr & dd & pr & pr & pr;
Operation(xQueueCreateMutex) & Pattern(a: b\/c) & ff(0) & dc(mutex = que) & pr & dd & dd & ah((queue_receiving\/{mutex|->{}})(que) = queue_receiving(que)) & pr & dd & ah(task: (queue_receiving\/{mutex|->{}})(que)) & eh((queue_receiving\/{mutex|->{}})(que),_h,Goal) & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked)) & ah(que/:{mutex}) & pr & dd & pr & pr & pr;
Operation(xSemaphoreCreateRecursiveMutex) & Pattern(a: b\/c) & ff(0) & dc(mutex = que) & pr & dd & dd & ah((queue_sending\/{mutex|->{}})(que) = queue_sending(que)) & pr & dd & ah(task: (queue_sending\/{mutex|->{}})(que)) & eh((queue_sending\/{mutex|->{}})(que),_h,Goal) & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked)) & ah(que/:{mutex}) & pr & dd & pr & pr & pr;
Operation(xSemaphoreCreateRecursiveMutex) & Pattern(a: b\/c) & ff(0) & dc(mutex = que) & pr & dd & dd & ah((queue_receiving\/{mutex|->{}})(que) = queue_receiving(que)) & pr & dd & ah(task: (queue_receiving\/{mutex|->{}})(que)) & eh((queue_receiving\/{mutex|->{}})(que),_h,Goal) & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked)) & ah(que/:{mutex}) & pr & dd & pr & pr & pr;
Operation(xQueueCreateMutex) & Pattern(a: b\/c) & ff(0) & dc(mutex = que) & pr & dd & dc(mutex = que) & pr & dd & dd & ah((queue_sending\/{mutex|->{}})(que) = queue_sending(que)) & pr & dd & ah(task: (queue_sending\/{mutex|->{}})(que)) & eh((queue_sending\/{mutex|->{}})(que),_h,Goal) & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked)) & ah(que/:{mutex}) & pr & dd & pr & pr & pr;
Operation(xQueueGenericSend) & Pattern(a: b\/(c\/{d})) & ff(1) & dc(pxQueue = que) & pr & dd & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked\/suspended)) & pr & pr & ah((queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(que) = queue_sending(que)) & pr & dd & ah(task: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(que)) & eh((queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(que),_h,Goal) & pr;
Operation(xQueueGenericReceive) & Pattern(a: b\/{c}\/d) & ff(1) & dc(pxQueue = que) & pr & dd & dd & ah((queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(que) = queue_receiving(que)) & pr & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked\/suspended)) & pr & pr & ah((queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(que) = queue_receiving(que)) & dd & ah(task: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(que)) & eh((queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(que),_h,Goal) & pr;
Operation(xQueueGenericReceive) & Pattern(a: b\/(c\/{d})) & ff(1) & dc(pxQueue = que) & pr & dd & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked\/suspended)) & pr & pr & ah((queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(que) = queue_receiving(que)) & pr & dd & ah(task: (queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(que)) & eh((queue_receiving<+{pxQueue|->(queue_receiving(pxQueue)\/{running})})(que),_h,Goal) & pr;
Operation(xQueueGenericSend) & Pattern(a: b\/{c}\/d) & ff(0) & dc(task = running) & pr & dd & dd & dc(pxQueue = que) & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked\/suspended)) & pr & pr & ah((queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(que) = queue_sending(pxQueue)\/{running}) & eh(pxQueue,_h,Goal) & pr & dd & ah(task: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(que)) & eh((queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(que),_h,Goal) & dd & pr & dd & pr & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked\/suspended)) & pr & pr & ah((queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(que) = queue_sending(que)) & ah(pxQueue/=que) & pr & pr & pr & dd & ah(task: (queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(que)) & eh((queue_sending<+{pxQueue|->(queue_sending(pxQueue)\/{running})})(que),_h,Goal) & dd & pr;
Operation(xQueueGenericSend) & Pattern(a: b-{c}\/d) & ff(0) & dc(pxQueue = que$0) & pr & dd & dd & ah(task/=task$0) & ah((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0) = queue_receiving(que$0)) & pr & ah(pxQueue/=que$0) & pr & pr & dd & ah(task$0: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0)) & eh((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0),_h,Goal) & dd & ph(que$0,pxQueue,task$0,!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_receiving(q1) => tk/:queue_receiving(q2))) & pr & pr & pr & pr & pr & dd & pr & dd & ph(que$0,task$0,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked\/suspended)) & pr & pr & ah((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0) = queue_receiving(que$0)) & ah(pxQueue/=que$0) & pr & pr & pr & dd & ah(task$0: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0)) & eh((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0),_h,Goal) & pr;
Operation(xQueueCreate) & Pattern(a: b\/c) & ff(2) & dc(pxQueue = que) & pr & dd & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked\/suspended)) & pr & pr & ah(task: (queue_sending\/{pxQueue|->{}})(que) & pxQueue/=que) & pr & pr & pr;
Operation(xQueueCreate) & Pattern(a: b\/c) & ff(2) & dc(pxQueue = que) & pr & dd & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked\/suspended)) & pr & pr & ah(task: (queue_receiving\/{pxQueue|->{}})(que) & pxQueue/=que) & pr & pr & pr;
Operation(vSemaphoreCreateBinary) & Pattern(a: b\/c) & ff(2) & dc(semaphore$0 = que) & pr & dd & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked\/suspended)) & pr & pr & ah(task: (queue_sending\/{semaphore$0|->{}})(que) & semaphore$0/=que) & pr & pr & pr;
Operation(vSemaphoreCreateBinary) & Pattern(a: b\/c) & ff(2) & dc(semaphore$0 = que) & pr & dd & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked\/suspended)) & pr & pr & ah(task: (queue_receiving\/{semaphore$0|->{}})(que) & semaphore$0/=que) & pr & pr & pr;
Operation(xSemaphoreCreateCounting) & Pattern(a: b\/c) & ff(2) & dc(semaphore$0 = que) & pr & dd & dd & ph(que,task,!(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked\/suspended)) & pr & pr & ah(task: (queue_sending\/{semaphore$0|->{}})(que) & semaphore$0/=que) & pr & pr & pr;
Operation(xQueueGenericSend) & Pattern(a: b-{c}\/d) & ff(1) & dc(pxQueue = que$0) & pr & dd & dd & ah(task$0/=task) & ah((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0) = queue_receiving(que$0)) & pr & dd & ah(task$0: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0)) & eh((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0),_h,Goal) & dd & ph(que$0,pxQueue,task$0,!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_receiving(q1) => tk/:queue_receiving(q2))) & pr & pr & pr & pr & pr & dd & ah(not(task$0: queue_receiving(pxQueue)) & task: queue_receiving(pxQueue)) & pr & pr & pr & dd & ph(que$0,task$0,!(que,task).(que: queues & task: TASK & task: queue_receiving(que) => task: blocked\/suspended)) & pr & pr & ah((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0) = queue_receiving(que$0)) & pr & dd & ah(task$0: (queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0)) & eh((queue_receiving<+{pxQueue|->queue_receiving(pxQueue)-{task}})(que$0),_h,Goal) & dd & pr;
Operation(xQueueGenericReceive) & Pattern(a: b-{c}\/d) & ff(1) & dc(pxQueue = que$0) & pr & dd & dd & ah((queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0) = queue_sending(que$0)) & pr & dd & ah(task$0: (queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0)) & eh((queue_sending<+{pxQueue|->queue_sending(pxQueue)-{task}})(que$0),_h,Goal) & dd & ah(task$0/=task) & ph(pxQueue,que$0,task,!(q1,q2,tk).(q1: queues & q2: queues & q1/=q2 & tk: TASK & tk: queue_sending(q1) => tk/:queue_sending(q2))) & pr & pr & pr & pr & pr & dd & ah(task$0: queue_sending(que$0) & task/:queue_sending(que$0)) & pr & pr & pr & dd & ph(que$0,task$0,!(que,task).(que: queues & task: TASK & task: queue_sending(que) => task: blocked\/suspended)) & pr & pr & pr & pr
END
