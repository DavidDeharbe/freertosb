/* Queue_r
 * Author: Stephenson GalvÃ£o
 * Creation date:  Thu Dec 03 2009
 */
REFINEMENT
   Queue_r
REFINES
   Queue

SEES
   Types

ABSTRACT_VARIABLES
    queues,
    queue_receiving,
    queue_sending,
    queue_size,
    queue_items_r,
    queue_type,
    queue_holder,
    queue_recursive
   
INVARIANT
    queue_size : QUEUE +-> NAT &
    queue_items_r : QUEUE +-> iseq(ITEM) &
    dom( queue_items_r ) = dom( queue_items ) &
	dom( queue_size ) = queues &
	!queue.( queue : queues => ran(queue_items_r(queue)) = queue_items(queue) )
	
CONSTANTS
    queue_is_full
    
PROPERTIES
    queue_is_full:QUEUE * (QUEUE+->iseq(ITEM)) * (QUEUE+->NAT) --> BOOL &
    queue_is_full = %(queue,items,queue_size).(queue:QUEUE & items:(QUEUE+->iseq(ITEM)) & queue_size:(QUEUE+->NAT)
        																				| bool(queue_size(queue) = size(items(queue))))
INITIALISATION
    queues := {} ||
    queue_receiving := {} ||
    queue_sending := {} ||
    queue_size := {} ||
    queue_items_r := {}||
    queue_type:={}||
    queue_holder:={}||
    queue_recursive:={}

OPERATIONS
    
    xQueueHandle <-- xQueueCreate(uxQueueLength, uxItemSize) =
	BEGIN
    	CHOICE
			ANY
			    queue 
			WHERE
			    queue : QUEUE & 
			    queue /: queues
			THEN	
			    queues := queues \/ {queue}||
			    queue_size := queue_size \/ { queue |-> uxQueueLength } ||
		    	queue_items_r := queue_items_r \/ { queue |->  [] } ||
		    	queue_receiving := queue_receiving \/ {queue |-> {}} ||
		    	queue_sending := queue_sending \/ {queue |-> {}}||
		    	queue_type:=queue_type\/{queue|->TQUE}||
		    	xQueueHandle := queue
			END		    
     	OR
        	xQueueHandle:=QUEUE_NULL
     	END
   	END; 
   
    queueDelete(queue) =
	BEGIN
	    queues := queues - {queue}||
	    queue_size := {queue} <<| queue_size ||
	    queue_items_r := {queue} <<| queue_items_r ||
		queue_receiving := {queue} <<| queue_receiving ||
		queue_sending := {queue} <<| queue_sending||
		queue_type := {queue} <<|queue_type||
		queue_holder:={queue}<<|queue_holder||
		queue_recursive:={queue}<<|queue_recursive
   	END;
   
    sendItem(pxQueue, pxItem, task, copy_position) =
    BEGIN IF pxItem /: ran(queue_items_r(pxQueue) ) THEN
           IF copy_position = queueSEND_TO_BACK THEN
               queue_items_r(pxQueue) := queue_items_r(pxQueue) <- pxItem
           ELSE
               queue_items_r(pxQueue) := pxItem -> queue_items_r(pxQueue) 
           END
       END ||
       queue_receiving(pxQueue) := queue_receiving(pxQueue) - {task}
	END;
  
	insertTaskWaitingToSend(pxQueue, pxTask) =
	BEGIN
    	queue_sending(pxQueue) := queue_sending(pxQueue) \/ {pxTask}
	END;
	
	insertTaskWaitingToRecived(pxQueue, pxTask) =
	BEGIN
    	queue_receiving(pxQueue) := queue_receiving(pxQueue) \/ {pxTask}
	END;
   
    xItem <-- receivedItem(pxQueue, justPeeking, task,rTask) =
    BEGIN
        xItem := first( queue_items_r(pxQueue) ) ||
        IF justPeeking = FALSE THEN 
            queue_items_r(pxQueue) := tail( queue_items_r(pxQueue) ) ||
            queue_sending(pxQueue) := queue_sending(pxQueue) - {task}
        END||
        IF queue_type(pxQueue)=TMUT THEN
            queue_holder(pxQueue):= rTask
        END
    END;
	
    removeFromEventListQueue(task) =
    BEGIN
        ANY
            receiving, sending,holder
        WHERE
            receiving = REMOVE_EVENT(task, queues, queue_receiving) &
            sending = REMOVE_EVENT(task, queues, queue_sending)&
            holder = queue_holder |> {task}
        THEN
            queue_receiving := queue_receiving <+ receiving ||
            queue_sending := queue_sending <+ sending||
            queue_holder:=queue_holder - holder ||
            queue_items_r:=queue_items_r <+ %(queue).(queue:dom(holder)|[ITEM_NULL])
        END
        
        
    END
     ;
     
    q_endScheduler=
    BEGIN
        queues := {} ||
        queue_receiving := {} ||
        queue_sending := {} ||
        queue_size := {} ||
        queue_items_r := {}||
        queue_type:={}||
        queue_holder:={}||
        queue_recursive:={}
    END;
     
     
    semaphore<--createSemaphore(maxCount, initialCount)=
    BEGIN
        ANY
            queue,
            initialItems,
            initialSeq
        WHERE
            
            queue : QUEUE & 
            queue /: queues &
            initialItems<:ITEM &
            initialItems/={}&
            initialSeq:seq(ITEM) &
            ran(initialSeq)=initialItems&
            size(initialSeq)=initialCount
        THEN	
            queues := queues \/ {queue}||
            queue_size:=queue_size\/{queue|->maxCount}||
            queue_items_r := queue_items_r \/ {queue |-> initialSeq} ||
            queue_receiving := queue_receiving \/ {queue |-> {}} ||
            queue_sending := queue_sending \/ {queue |-> {}}||
            queue_type:= queue_type\/{queue |-> TSEMAPH}||
            semaphore := queue
        END	
    END;
    
    mutex<--createMutex=
    BEGIN
        ANY
            queue,
            initialItems,
            initialSeq
            
        WHERE
            queue : QUEUE & 
            queue /: queues &
            initialItems : POW(ITEM)&
            initialItems/={}&
            initialSeq:seq(ITEM) &
            ran(initialSeq)=initialItems&
            size(initialSeq)=1
        THEN	
            queues := queues \/ {queue} ||
            queue_size:=queue_size\/{queue|->1}||
            queue_items_r := queue_items_r \/ {queue |-> initialSeq} ||
            queue_receiving := queue_receiving \/ {queue |-> {}} ||
            queue_sending := queue_sending \/ {queue |-> {}} ||
            queue_type := queue_type\/{queue |-> TMUT} ||
            queue_recursive:=queue_recursive\/{queue|->0}||
            mutex := queue
        END	
    END
 	

END
