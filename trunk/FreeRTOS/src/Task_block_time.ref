/* Task_block_time
* Author: stepgalvao
* Creation date: Mon Jun 21 2010
*/
REFINEMENT
  Task_block_time
  
REFINES
  Task_priority
  
SEES
  FreeRTOSConfig ,
  Types
  
ABSTRACT_VARIABLES
  tickCount,		
  tickMissed,
  active ,
  tasks ,
  blocked ,
  runable ,
  suspended ,
  running ,
  idle ,
  unblocked,
  t_priority ,
  t_bpriority,
  t_tblock
  
INVARIANT
  t_tblock: TASK +-> TICK &
  dom(t_tblock) = blocked
  
INITIALISATION
  tickCount := 0 ||
  tickMissed := 0 ||
  active := FALSE ||
  tasks := {} ||
  running :: TASK ||
  idle :: TASK ||
  t_priority := {} ||
  t_bpriority := {} ||
  t_tblock:= {}||
  blocked, runable, suspended,unblocked := {}, {}, {},{}
  
OPERATIONS
  
  t_delete (atask)=
  BEGIN
    ANY 
      n_runable,
      n_priority
    WHERE
      n_runable<:tasks &
      n_runable = runable - {atask} &
      n_runable /={} &
      n_priority:TASK +-> PRIORITY &
      n_priority = {atask} <<| t_priority
    THEN
      tasks := tasks - { atask } || 
      t_priority := n_priority||
      t_bpriority:= {atask} <<| t_bpriority||
      IF atask : runable  THEN
        runable := n_runable||        
        IF atask = running THEN
          IF active = TRUE THEN 
            running::schedule_p(n_runable,n_priority)
          END
        END
      ELSIF atask : blocked  THEN
        blocked := blocked - { atask }||
        IF atask:unblocked THEN
          unblocked := unblocked - {atask}
        END||
        t_tblock:=  {atask} <<| t_tblock 
      ELSIF atask : suspended THEN
        suspended := suspended - { atask }
      END
    END
  END;    
  
  
  t_suspend (stask)=
  BEGIN
    IF stask : runable THEN
      ANY n_runable 
      WHERE 
        n_runable<:tasks&
        n_runable=runable-{stask}&
        n_runable/={}
      THEN
        runable:=n_runable||
        IF stask=running THEN
          running::schedule_p(n_runable,t_priority)
        END
      END                
    ELSIF stask : blocked THEN
      blocked := blocked - { stask }||
      IF stask:unblocked THEN
        unblocked := unblocked - {stask}
      END||
      t_tblock := {stask} <<| t_tblock  
    END||
    suspended := suspended \/ { stask } 
  END;
  
  
  t_delayTask(ticks,task)=/*tickCount*/
  BEGIN
    ANY
      n_runable
    WHERE
      n_runable <: tasks &
      n_runable = runable-{running}&
      n_runable/={}
    THEN
      runable:= n_runable ||
      running::schedule_p(n_runable,t_priority)
    END||
    blocked := blocked \/ {running}||
    t_tblock := t_tblock \/ {running |-> ticks}
  END;
  
  
  
  t_endScheduler =
  BEGIN
    active := FALSE ||
    tasks := {} ||
    t_priority:= {} ||
    t_bpriority:={} ||
    t_tblock:={}||
    blocked , runable , suspended,unblocked := {},{},{},{}
  END;
  
  
  t_removeFromEventList(task)=
  BEGIN
    IF 
      task: blocked 
    THEN
      blocked:= blocked - {task}||
      t_tblock:= {task} <<| t_tblock||
      IF task:unblocked THEN
        unblocked:=unblocked -{task}
      END
    END||
    IF
      task:suspended
    THEN
      suspended:= suspended - {task}
    END||  
    ANY
      n_runable
    WHERE
      n_runable<:tasks &
      n_runable = runable \/ {task}
    THEN
      runable := n_runable||
      IF t_priority(task) >= t_priority(running) THEN
        running :: schedule_p(n_runable,t_priority)
      END     
    END
  END;
  
  
  t_priorityInherit(holderTask,xTicksToWait)=
  BEGIN
    ANY 
      n_runable,
      n_priority
    WHERE
      n_runable <: tasks &
      n_runable = runable-{running} & 
      n_runable /={} &
      n_priority:TASK +-> PRIORITY & 
      n_priority = t_priority <+ {holderTask|->t_priority(running)} 
    THEN
      runable := n_runable ||
      blocked := blocked \/ {running}||
      t_tblock:= t_tblock \/ {running|->xTicksToWait}||
      IF t_priority(running) > t_priority(holderTask) 
      THEN
        t_priority:= n_priority||
        t_bpriority(holderTask):= t_priority(holderTask)||
        running::schedule_p(n_runable,n_priority)
      ELSE
        running::schedule_p(n_runable,t_priority)
      END
    END
  END;
  
  t_returnPriority(btask)=
  BEGIN
    IF 
      btask: blocked 
    THEN
      blocked:= blocked - {btask}||
      IF btask:unblocked THEN
        unblocked:=unblocked - {btask}
      END||
      t_tblock:= {btask} <<| t_tblock
    END||
    IF
      btask:suspended
    THEN
      suspended:= suspended - {btask}
    END||
    ANY
      n_runable,
      n_priority
    WHERE
      n_runable<:tasks &
      n_runable = runable \/ {btask} &
      n_priority :TASK +-> PRIORITY &
      n_priority = t_priority <+ {running|->t_bpriority(running)}
    THEN
      runable := n_runable||
      IF t_bpriority(running)/= t_priority(running) THEN
        t_priority := n_priority||
        running :: schedule_p(n_runable,n_priority)
      ELSIF t_priority(btask) >= t_priority(running) THEN
        running :: schedule_p(n_runable,t_priority)
      END
    END
  END;
  
  t_resumeAll(tunblocked) = 
  BEGIN
    IF tunblocked /= {} THEN
      ANY
        n_runable
      WHERE
        n_runable<:tasks &
        n_runable = runable \/ tunblocked
      THEN
        runable:=n_runable ||
        running::schedule_p(n_runable,t_priority)
      END||
      blocked := blocked - tunblocked||
      unblocked:={}||
      t_tblock:= unblocked <<| t_tblock
    END
  END;
  
  t_beforeResumeAll=
  BEGIN
    tickCount := TICK_INCREMENT(tickCount, tickMissed)||
    tickMissed:=0||
    CHOICE   
      ANY n_unblocked
      WHERE
        n_unblocked : FIN ( TASK ) & 
        n_unblocked <: blocked &
        n_unblocked <: {task|task: blocked & tickCount<=t_tblock(task) & t_tblock(task) <= TICK_INCREMENT(tickCount,tickMissed)}
      THEN
        unblocked := n_unblocked
      END
    OR 
      ANY n_unblocked
      WHERE
        n_unblocked : FIN ( TASK ) & 
         n_unblocked <:blocked&
        n_unblocked <: {task|task:blocked & ((tickCount<=t_tblock(task) & t_tblock(task)<=MAXINT) or
            																								t_tblock(task)<=TICK_INCREMENT(tickCount,tickMissed)) }
      THEN
        unblocked := n_unblocked
      END
    END
  END;
  
  t_incrementTick=
  BEGIN
    IF active = TRUE THEN
      tickCount := TICK_INCREMENT(tickCount, 1)||
      ANY 
        n_unblocked
      WHERE
        n_unblocked : FIN(TASK)&
        n_unblocked = {task|task:blocked & t_tblock(task)=TICK_INCREMENT(tickCount, 1)}
      THEN
        unblocked := n_unblocked
      END
    ELSE
      tickMissed:=TICK_INCREMENT(tickMissed, 1)
    END
    
  END
  
  
END
