/* Task_r

\brief Refinement of Task Core .

Module responsible for specific the features priority in the task concepts.


Author: Stephenson Galvao, David Deharbe
Creation date: Sun Mar 8 2009
Universidade Federal do Rio Grande do Norte
Departamento de Informatica e Matematica Aplicada
Programa de Pos-Graduacao em Sistemas e Computacao
Formal Methods and Languages Laboratory

*/
REFINEMENT
    Task_r
    
REFINES
    Task
    
SEES
    FreeRTOSConfig ,
    Types
    
CONSTANTS
    max_prt,
    IDLE_PRIORITY
    
    
PROPERTIES
    PRIORITY = 0..(configMAX_PRIORITIES-1) &
    
    IDLE_PRIORITY : PRIORITY &
    IDLE_PRIORITY = 0 &
     
    max_prt: PRIORITY * PRIORITY --> PRIORITY &
    max_prt = %(tmp_mprt_ready,t_prt).(tmp_mprt_ready : PRIORITY & t_prt : PRIORITY | max({tmp_mprt_ready,t_prt}))
    
ABSTRACT_VARIABLES
    active,
    tasks ,
    blocked ,
    running ,
    ready ,
    suspended,
    idle,
    t_priority
    
INVARIANT
    active : BOOL &
    
    t_priority : TASK +-> PRIORITY & 
    dom(t_priority) = tasks &
    (active = TRUE =>
        t_priority(idle) = IDLE_PRIORITY &
        (!(tt).(tt : ready => (t_priority (tt) <= t_priority(running)))) &
        (!(tt).(tt : tasks => (IDLE_PRIORITY <= t_priority(tt)))))
    
ASSERTIONS
    PRIORITY <: NATURAL &
    active = TRUE => (running : dom(t_priority))
    
INITIALISATION
    active := FALSE ||
    tasks := {} ||
    running :: TASK ||
    idle :: TASK ||
    t_priority := {} ||
    blocked , ready , suspended := {},{},{}
    
OPERATIONS
    /**	
    \brief Task creation
    
    \do 
    This method create a new task. The task created can have the state ready or running. This choice 
    depend both of the priorities of the tasks in ready state and the priority of the new task created
    and will be implement in future refinement. The parameter priority is declared but not used.
    
    \parameters
    
    priority - The priority of the task
    
    \note 
    The actual function takes the handled as a parameter passed by reference.
    
    **/
    result <-- t_create (priority) =
    BEGIN	
        ANY
            task
        WHERE
            task : TASK &
            task /: tasks
        THEN     	    
            tasks := { task } \/ tasks ||
            t_priority:= t_priority \/ {task|->priority}||
            ready := {task} \/ ready ||
            result := task
        END                  
    END;
    
    /**
    \brief Delete Task
    
    \do	
    Delete a task managed by FreeRTOS. If the task that will be delete is the current task, a ready 
    task will became the running task. The NULL task can't be deleted. 
    
    \parameters 
    aTask - Task that will be deleted
    
    \question
    can it delete the idle task?
    R - the handle to idle task is not visible for user
    when the task that gonna delete is the unique task in tasks, what do it do?
    R- I don't allow this. The handle for idle task can't be take.
    
    **/
    t_delete (atask)=
    PRE
        atask : TASK &
        atask : tasks &
        atask /= idle
    THEN
        tasks := tasks - { atask } || 	
        t_priority:= { atask } <<| t_priority ||
        IF atask = running	THEN
            ANY
                task
            WHERE 
                task : TASK &
                task : ready &
                t_priority(task) = max (t_priority[ready])
            THEN
                running := task ||
                ready := ready - { task }
            END		
        ELSIF atask : ready  THEN
            ready := ready - { atask }
        ELSIF atask : blocked  THEN
            blocked := blocked - { atask }
        ELSIF atask : suspended THEN
            suspended := suspended - { atask }
        END
    END;
    
    /**
    \brief Suspend Task
    
    \do	
    This method suspend the passed task. If the task that will be suspend is 
    the current task, a task with the state ready will choice to be the current task.
    
    \parameters 
    atask- Task that will be suspend
    
    **/
    t_suspend (atask)=
    PRE
        atask : TASK &
        atask : tasks &
        atask /= idle
    THEN
        IF atask = running THEN
            ANY
                task 
            WHERE
                task : TASK &
                task : ready &
                t_priority(task) = max(t_priority[ready])
            THEN
                running := task ||
                ready := ready - { task }
            END
        ELSIF atask : ready THEN
            ready := ready - { atask }
        ELSIF atask : blocked THEN
            blocked := blocked - { atask }
        END ||
        suspended := suspended \/ { atask }
    END;
    
    /**
    \brief	Resume Task
    
    \do	
    This method resume a suspended tasks. The resumed task can go to ready or running state depend 
    the priority of resumed tasks (this choice will be specific in future refinement)
    
    \parameters 
    atask - Task that will be resume
    
    **/
    t_resume (atask) =
    BEGIN   
        IF t_priority(atask) > t_priority(running) THEN
            ready := ready \/ { running } ||
            running := atask
        ELSIF t_priority(atask) = t_priority(running) THEN
            CHOICE
	            ready := ready \/ { running } ||
    	        running := atask
    	    OR
    	        ready := ready \/ { atask }
    	    END
        ELSE
            ready := ready \/ { atask }
        END ||
        suspended := suspended - { atask }	
    END;
    /**
    \brief	Get Task Priority
    
    \do	
    This method get the priority of the task passed, but here this only return a priority available. 
    It will implement in future refinement.
    
    \parameters 
    atask - Task that will be returned the priority
    
    \returns
    priority - a priority belong of Priority set
    
    **/
    priority <-- t_getPriority(atask)=
    BEGIN
        priority :: PRIORITY
    END;
    
    /**
    \brief	Get Current Task
    
    \do	
    Return the currently running task
    
    \returns
    result - The currently running task
    
    **/
    result <-- t_getCurrent =
    BEGIN
        result := running
    END;
    
    /**
    \brief	Get Number of Task
    
    \do	
    Get the number of tasks managed by the FreeRTOS
    
    \returns
    numberOfTasks -  number of tasks managed by the FreeRTOS
    
    **/
    result <-- t_getNumberOfTasks =
    BEGIN
        result := card(tasks)
    END;
    
    /**
    \brief	Delay Task
    
    \do	
    Change the state of the current task for the blocked state during the number tick passed. 
    But here it only change the state of task leaving the feature time of block for the next refinement
    
    
    \paramenters
    tick - The tick that the task should be unbloked. Is declared but no used here
    
    **/
    t_delayTask (ticks)=
    BEGIN
        blocked := blocked \/ { running } ||
        ANY
            task 
        WHERE
            task : TASK &
            task : ready & 
            t_priority(task) = max(t_priority[ready])    	    
        THEN   		    
            running := task ||
            ready := ready - { task } 
        END
    END;
    
    /**
    \brief	Start Scheduler
    
    \do	
    Start the scheduler and create the idle task		
    
    \return 
    
    **/
    t_startScheduler = 
    BEGIN
        active := TRUE ||
        blocked, suspended := {}, {} ||
        ANY
            idle_task 
        WHERE
            idle_task : TASK & 
            idle_task /: tasks 
        THEN
            tasks := tasks \/ { idle_task } ||
            t_priority := t_priority \/ { idle_task |-> IDLE_PRIORITY } ||
            idle := idle_task ||
            ANY 
                task
            WHERE
                task : TASK &
                (ready = {} => task = idle_task) &
                (ready /= {} => task : ready & t_priority(task) = max(t_priority[ready]))
            THEN
                running := task ||           	        
                ready := (ready \/ { idle_task }) - { task }
            END
        END
    END;
    
    /**
    \brief	End Scheduler
    
    \do	
    End the task of schuler
    **/
    t_endScheduler =
    BEGIN
        active := FALSE ||
        tasks := {} ||
        t_priority:= {} ||
        blocked , ready , suspended := {},{},{}
    END;
    
    
    /**
    \brief	Resume All
    
    \do	
    Method used for resume the scheduler. It increment the tick with missed ticks and verify the list of 
    blocked tasks to unblock the tasks with expired timers.
    **/
    t_resumeAll (tick) = 
    PRE
        active = TRUE &
        tick : TICK
    THEN
        ANY
            unblocked
        WHERE
            unblocked : FIN(TASK) &
            unblocked <: blocked
        THEN
            IF unblocked /= {} THEN
                IF t_priority(running) <= max(t_priority[unblocked])  THEN
                    ANY
                        task
                    WHERE
                        task : TASK &
                        task : unblocked &
                        task : tasks &
                        t_priority(running) <= t_priority(task) &
                        t_priority(task) = max(t_priority[unblocked])
                    THEN
                        running := task ||
                        ready := ready \/ { running } \/ (unblocked - { task })
                    END
                    
                ELSE
                    ready := ready \/ unblocked
                END ||
                blocked := blocked - unblocked
            END
        END
    END;
    
    /**
    \brief	Remove From Block List
    
    \do
    Unblock the given task
    
    **/
    t_unblock(task)=
    PRE
        active = TRUE &
        blocked /= {} &
        task : TASK &
        task : blocked
    THEN
        blocked := blocked - { task } ||
        IF t_priority(task) >= t_priority(running) THEN
            running := task ||
            ready := ready \/ { running }
        ELSE
            ready := ready \/ { task }
        END
    END
    ;
    
/*
SG->DD
Adicionei mais essa operação
falta apenas uma obrigação de prova sobre essa operação
*/
    
    t_setPriority (task, priority)=
    BEGIN
        t_priority(task) := priority ||
        IF task : ready & t_priority(running) <= priority 
        THEN
            running := task ||        
            ready := (ready \/{running})-{task}
        ELSIF task = running & priority < max(t_priority[ready])  THEN
            ANY
                task
            WHERE
                task : TASK &
                task : tasks &
                task : ready &
                t_priority(task) = max(t_priority[ready])
            THEN
                running := task ||
                ready := (ready \/ { running }) - { task }
            END
        END
    END
END

