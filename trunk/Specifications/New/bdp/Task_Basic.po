THEORY ProofList IS
  _f(1) & _f(2) & _f(29) & _f(179) & removeFromBlockedList.12,(_f(187) & _f(56) => _f(192));
  _f(1) & _f(2) & _f(29) & _f(179) & removeFromBlockedList.11,(_f(187) & _f(54) => _f(191));
  _f(1) & _f(2) & _f(29) & _f(179) & removeFromBlockedList.10,(_f(187) & _f(50) => _f(190));
  _f(1) & _f(2) & _f(29) & _f(179) & removeFromBlockedList.9,(_f(187) & _f(42) => _f(189));
  _f(1) & _f(2) & _f(29) & _f(179) & removeFromBlockedList.8,(_f(187) & _f(34) => _f(188));
  _f(1) & _f(2) & _f(29) & _f(179) & removeFromBlockedList.7,(_f(180) & _f(56) => _f(186));
  _f(1) & _f(2) & _f(29) & _f(179) & removeFromBlockedList.6,(_f(180) & _f(54) => _f(185));
  _f(1) & _f(2) & _f(29) & _f(179) & removeFromBlockedList.5,(_f(180) & _f(113) => _f(184));
  _f(1) & _f(2) & _f(29) & _f(179) & removeFromBlockedList.4,(_f(180) & _f(50) => _f(183));
  _f(1) & _f(2) & _f(29) & _f(179) & removeFromBlockedList.3,(_f(180) & _f(78) => _f(161));
  _f(1) & _f(2) & _f(29) & _f(179) & removeFromBlockedList.2,(_f(180) & _f(42) => _f(182));
  _f(1) & _f(2) & _f(29) & _f(179) & removeFromBlockedList.1,(_f(180) & _f(34) => _f(181));
  _f(1) & _f(2) & _f(29) & incrementTick.28,(_f(178) & _f(177) => _f(174));
  _f(1) & _f(2) & _f(29) & incrementTick.27,(_f(178) & _f(56) => _f(172));
  _f(1) & _f(2) & _f(29) & incrementTick.26,(_f(178) & _f(54) => _f(171));
  _f(1) & _f(2) & _f(29) & incrementTick.25,(_f(178) & _f(50) => _f(170));
  _f(1) & _f(2) & _f(29) & incrementTick.24,(_f(178) & _f(42) => _f(169));
  _f(1) & _f(2) & _f(29) & incrementTick.23,(_f(178) & _f(34) => _f(168));
  _f(1) & _f(2) & _f(29) & incrementTick.22,(_f(176) & _f(177) => _f(174));
  _f(1) & _f(2) & _f(29) & incrementTick.21,(_f(176) & _f(56) => _f(165));
  _f(1) & _f(2) & _f(29) & incrementTick.20,(_f(176) & _f(54) => _f(164));
  _f(1) & _f(2) & _f(29) & incrementTick.19,(_f(176) & _f(50) => _f(163));
  _f(1) & _f(2) & _f(29) & incrementTick.18,(_f(176) & _f(48) => _f(162));
  _f(1) & _f(2) & _f(29) & incrementTick.17,(_f(176) & _f(78) => _f(161));
  _f(1) & _f(2) & _f(29) & incrementTick.16,(_f(176) & _f(42) => _f(160));
  _f(1) & _f(2) & _f(29) & incrementTick.15,(_f(176) & _f(34) => _f(159));
  _f(1) & _f(2) & _f(29) & incrementTick.14,(_f(175) & _f(150) => _f(174));
  _f(1) & _f(2) & _f(29) & incrementTick.13,(_f(175) & _f(56) => _f(172));
  _f(1) & _f(2) & _f(29) & incrementTick.12,(_f(175) & _f(54) => _f(171));
  _f(1) & _f(2) & _f(29) & incrementTick.11,(_f(175) & _f(50) => _f(170));
  _f(1) & _f(2) & _f(29) & incrementTick.10,(_f(175) & _f(42) => _f(169));
  _f(1) & _f(2) & _f(29) & incrementTick.9,(_f(175) & _f(34) => _f(168));
  _f(1) & _f(2) & _f(29) & incrementTick.8,(_f(173) & _f(150) => _f(174));
  _f(1) & _f(2) & _f(29) & incrementTick.7,(_f(173) & _f(56) => _f(165));
  _f(1) & _f(2) & _f(29) & incrementTick.6,(_f(173) & _f(54) => _f(164));
  _f(1) & _f(2) & _f(29) & incrementTick.5,(_f(173) & _f(50) => _f(163));
  _f(1) & _f(2) & _f(29) & incrementTick.4,(_f(173) & _f(48) => _f(162));
  _f(1) & _f(2) & _f(29) & incrementTick.3,(_f(173) & _f(78) => _f(161));
  _f(1) & _f(2) & _f(29) & incrementTick.2,(_f(173) & _f(42) => _f(160));
  _f(1) & _f(2) & _f(29) & incrementTick.1,(_f(173) & _f(34) => _f(159));
  _f(1) & _f(2) & _f(29) & xTaskResumeAll.14,(_f(167) & _f(150) => _f(166));
  _f(1) & _f(2) & _f(29) & xTaskResumeAll.13,(_f(167) & _f(56) => _f(172));
  _f(1) & _f(2) & _f(29) & xTaskResumeAll.12,(_f(167) & _f(54) => _f(171));
  _f(1) & _f(2) & _f(29) & xTaskResumeAll.11,(_f(167) & _f(50) => _f(170));
  _f(1) & _f(2) & _f(29) & xTaskResumeAll.10,(_f(167) & _f(42) => _f(169));
  _f(1) & _f(2) & _f(29) & xTaskResumeAll.9,(_f(167) & _f(34) => _f(168));
  _f(1) & _f(2) & _f(29) & xTaskResumeAll.8,(_f(158) & _f(150) => _f(166));
  _f(1) & _f(2) & _f(29) & xTaskResumeAll.7,(_f(158) & _f(56) => _f(165));
  _f(1) & _f(2) & _f(29) & xTaskResumeAll.6,(_f(158) & _f(54) => _f(164));
  _f(1) & _f(2) & _f(29) & xTaskResumeAll.5,(_f(158) & _f(50) => _f(163));
  _f(1) & _f(2) & _f(29) & xTaskResumeAll.4,(_f(158) & _f(48) => _f(162));
  _f(1) & _f(2) & _f(29) & xTaskResumeAll.3,(_f(158) & _f(78) => _f(161));
  _f(1) & _f(2) & _f(29) & xTaskResumeAll.2,(_f(158) & _f(42) => _f(160));
  _f(1) & _f(2) & _f(29) & xTaskResumeAll.1,(_f(158) & _f(34) => _f(159));
  _f(1) & _f(2) & _f(29) & _f(157) & vTaskEndScheduler.12,(_f(56) => _f(26));
  _f(1) & _f(2) & _f(29) & _f(157) & vTaskEndScheduler.11,(_f(54) => _f(24));
  _f(1) & _f(2) & _f(29) & _f(157) & vTaskEndScheduler.10,(_f(52) => _f(22));
  _f(1) & _f(2) & _f(29) & _f(157) & vTaskEndScheduler.9,(_f(113) => _f(20));
  _f(1) & _f(2) & _f(29) & _f(157) & vTaskEndScheduler.8,(_f(50) => _f(18));
  _f(1) & _f(2) & _f(29) & _f(157) & vTaskEndScheduler.7,(_f(46) => _f(16));
  _f(1) & _f(2) & _f(29) & _f(157) & vTaskEndScheduler.6,(_f(42) => _f(14));
  _f(1) & _f(2) & _f(29) & _f(157) & vTaskEndScheduler.5,(_f(40) => _f(12));
  _f(1) & _f(2) & _f(29) & _f(157) & vTaskEndScheduler.4,(_f(38) => _f(10));
  _f(1) & _f(2) & _f(29) & _f(157) & vTaskEndScheduler.3,(_f(36) => _f(8));
  _f(1) & _f(2) & _f(29) & _f(157) & vTaskEndScheduler.2,(_f(34) => _f(6));
  _f(1) & _f(2) & _f(29) & _f(157) & vTaskEndScheduler.1,(_f(32) => _f(4));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.28,(_f(151) & _f(150) => _f(28));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.27,(_f(151) & _f(56) => _f(156));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.26,(_f(151) & _f(54) => _f(155));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.25,(_f(151) & _f(52) => _f(147));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.24,(_f(151) & _f(50) => _f(154));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.23,(_f(151) & _f(48) => _f(145));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.22,(_f(151) & _f(46) => _f(144));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.21,(_f(151) & _f(44) => _f(143));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.20,(_f(151) & _f(42) => _f(153));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.19,(_f(151) & _f(40) => _f(141));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.18,(_f(151) & _f(38) => _f(140));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.17,(_f(151) & _f(36) => _f(139));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.16,(_f(151) & _f(34) => _f(152));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.15,(_f(151) & _f(32) => _f(137));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.14,(_f(136) & _f(150) => _f(28));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.13,(_f(136) & _f(56) => _f(149));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.12,(_f(136) & _f(54) => _f(148));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.11,(_f(136) & _f(52) => _f(147));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.10,(_f(136) & _f(50) => _f(146));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.9,(_f(136) & _f(48) => _f(145));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.8,(_f(136) & _f(46) => _f(144));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.7,(_f(136) & _f(44) => _f(143));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.6,(_f(136) & _f(42) => _f(142));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.5,(_f(136) & _f(40) => _f(141));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.4,(_f(136) & _f(38) => _f(140));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.3,(_f(136) & _f(36) => _f(139));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.2,(_f(136) & _f(34) => _f(138));
  _f(1) & _f(2) & _f(29) & _f(135) & vTaskStartScheduler.1,(_f(136) & _f(32) => _f(137));
  _f(1) & _f(2) & _f(29) & _f(132) & vTaskDelayUntil.9,(_f(124) & _f(56) => _f(131));
  _f(1) & _f(2) & _f(29) & _f(132) & vTaskDelayUntil.8,(_f(124) & _f(54) => _f(130));
  _f(1) & _f(2) & _f(29) & _f(132) & vTaskDelayUntil.7,(_f(124) & _f(50) => _f(129));
  _f(1) & _f(2) & _f(29) & _f(132) & vTaskDelayUntil.6,(_f(124) & _f(48) => _f(80));
  _f(1) & _f(2) & _f(29) & _f(132) & vTaskDelayUntil.5,(_f(124) & _f(78) => _f(79));
  _f(1) & _f(2) & _f(29) & _f(132) & vTaskDelayUntil.4,(_f(124) & _f(44) => _f(134));
  _f(1) & _f(2) & _f(29) & _f(132) & vTaskDelayUntil.3,(_f(124) & _f(42) => _f(127));
  _f(1) & _f(2) & _f(29) & _f(132) & vTaskDelayUntil.2,(_f(124) & _f(38) => _f(133));
  _f(1) & _f(2) & _f(29) & _f(132) & vTaskDelayUntil.1,(_f(124) & _f(34) => _f(125));
  _f(1) & _f(2) & _f(29) & _f(123) & vTaskDelay.9,(_f(124) & _f(56) => _f(131));
  _f(1) & _f(2) & _f(29) & _f(123) & vTaskDelay.8,(_f(124) & _f(54) => _f(130));
  _f(1) & _f(2) & _f(29) & _f(123) & vTaskDelay.7,(_f(124) & _f(50) => _f(129));
  _f(1) & _f(2) & _f(29) & _f(123) & vTaskDelay.6,(_f(124) & _f(48) => _f(80));
  _f(1) & _f(2) & _f(29) & _f(123) & vTaskDelay.5,(_f(124) & _f(78) => _f(79));
  _f(1) & _f(2) & _f(29) & _f(123) & vTaskDelay.4,(_f(124) & _f(44) => _f(128));
  _f(1) & _f(2) & _f(29) & _f(123) & vTaskDelay.3,(_f(124) & _f(42) => _f(127));
  _f(1) & _f(2) & _f(29) & _f(123) & vTaskDelay.2,(_f(124) & _f(38) => _f(126));
  _f(1) & _f(2) & _f(29) & _f(123) & vTaskDelay.1,(_f(124) & _f(34) => _f(125));
  _f(1) & _f(2) & _f(29) & _f(107) & vTaskResume.12,(_f(117) & _f(56) => _f(122));
  _f(1) & _f(2) & _f(29) & _f(107) & vTaskResume.11,(_f(117) & _f(54) => _f(121));
  _f(1) & _f(2) & _f(29) & _f(107) & vTaskResume.10,(_f(117) & _f(50) => _f(120));
  _f(1) & _f(2) & _f(29) & _f(107) & vTaskResume.9,(_f(117) & _f(42) => _f(119));
  _f(1) & _f(2) & _f(29) & _f(107) & vTaskResume.8,(_f(117) & _f(34) => _f(118));
  _f(1) & _f(2) & _f(29) & _f(107) & vTaskResume.7,(_f(108) & _f(56) => _f(116));
  _f(1) & _f(2) & _f(29) & _f(107) & vTaskResume.6,(_f(108) & _f(54) => _f(115));
  _f(1) & _f(2) & _f(29) & _f(107) & vTaskResume.5,(_f(108) & _f(113) => _f(114));
  _f(1) & _f(2) & _f(29) & _f(107) & vTaskResume.4,(_f(108) & _f(50) => _f(112));
  _f(1) & _f(2) & _f(29) & _f(107) & vTaskResume.3,(_f(108) & _f(78) => _f(111));
  _f(1) & _f(2) & _f(29) & _f(107) & vTaskResume.2,(_f(108) & _f(42) => _f(110));
  _f(1) & _f(2) & _f(29) & _f(107) & vTaskResume.1,(_f(108) & _f(34) => _f(109));
  _f(1) & _f(2) & _f(29) & _f(94) & vTaskSuspend.12,(_f(101) & _f(56) => _f(106));
  _f(1) & _f(2) & _f(29) & _f(94) & vTaskSuspend.11,(_f(101) & _f(54) => _f(105));
  _f(1) & _f(2) & _f(29) & _f(94) & vTaskSuspend.10,(_f(101) & _f(50) => _f(104));
  _f(1) & _f(2) & _f(29) & _f(94) & vTaskSuspend.9,(_f(101) & _f(42) => _f(103));
  _f(1) & _f(2) & _f(29) & _f(94) & vTaskSuspend.8,(_f(101) & _f(34) => _f(102));
  _f(1) & _f(2) & _f(29) & _f(94) & vTaskSuspend.7,(_f(95) & _f(56) => _f(100));
  _f(1) & _f(2) & _f(29) & _f(94) & vTaskSuspend.6,(_f(95) & _f(54) => _f(99));
  _f(1) & _f(2) & _f(29) & _f(94) & vTaskSuspend.5,(_f(95) & _f(50) => _f(98));
  _f(1) & _f(2) & _f(29) & _f(94) & vTaskSuspend.4,(_f(95) & _f(48) => _f(80));
  _f(1) & _f(2) & _f(29) & _f(94) & vTaskSuspend.3,(_f(95) & _f(78) => _f(79));
  _f(1) & _f(2) & _f(29) & _f(94) & vTaskSuspend.2,(_f(95) & _f(42) => _f(97));
  _f(1) & _f(2) & _f(29) & _f(94) & vTaskSuspend.1,(_f(95) & _f(34) => _f(96));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.30,(_f(86) & _f(56) => _f(93));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.29,(_f(86) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.28,(_f(86) & _f(52) => _f(91));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.27,(_f(86) & _f(50) => _f(90));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.26,(_f(86) & _f(48) => _f(89));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.25,(_f(86) & _f(46) => _f(77));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.24,(_f(86) & _f(44) => _f(76));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.23,(_f(86) & _f(42) => _f(88));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.22,(_f(86) & _f(40) => _f(74));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.21,(_f(86) & _f(38) => _f(73));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.20,(_f(86) & _f(36) => _f(72));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.19,(_f(86) & _f(34) => _f(87));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.18,(_f(86) & _f(32) => _f(70));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.17,(_f(86) & _f(68) => _f(69));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.16,(_f(67) & _f(56) => _f(85));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.15,(_f(67) & _f(54) => _f(84));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.14,(_f(67) & _f(52) => _f(83));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.13,(_f(67) & _f(50) => _f(82));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.12,(_f(67) & _f(48) => _f(81));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.11,(_f(67) & _f(48) => _f(80));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.10,(_f(67) & _f(78) => _f(79));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.9,(_f(67) & _f(46) => _f(77));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.8,(_f(67) & _f(44) => _f(76));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.7,(_f(67) & _f(42) => _f(75));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.6,(_f(67) & _f(40) => _f(74));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.5,(_f(67) & _f(38) => _f(73));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.4,(_f(67) & _f(36) => _f(72));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.3,(_f(67) & _f(34) => _f(71));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.2,(_f(67) & _f(32) => _f(70));
  _f(1) & _f(2) & _f(29) & _f(66) & vTaskDelete.1,(_f(67) & _f(68) => _f(69));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.26,(_f(58) & _f(56) => _f(65));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.25,(_f(58) & _f(54) => _f(64));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.24,(_f(58) & _f(52) => _f(63));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.23,(_f(58) & _f(50) => _f(62));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.22,(_f(58) & _f(48) => _f(61));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.21,(_f(58) & _f(46) => _f(47));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.20,(_f(58) & _f(44) => _f(45));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.19,(_f(58) & _f(42) => _f(60));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.18,(_f(58) & _f(40) => _f(41));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.17,(_f(58) & _f(38) => _f(39));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.16,(_f(58) & _f(36) => _f(37));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.15,(_f(58) & _f(34) => _f(59));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.14,(_f(58) & _f(32) => _f(33));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.13,(_f(31) & _f(56) => _f(57));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.12,(_f(31) & _f(54) => _f(55));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.11,(_f(31) & _f(52) => _f(53));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.10,(_f(31) & _f(50) => _f(51));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.9,(_f(31) & _f(48) => _f(49));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.8,(_f(31) & _f(46) => _f(47));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.7,(_f(31) & _f(44) => _f(45));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.6,(_f(31) & _f(42) => _f(43));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.5,(_f(31) & _f(40) => _f(41));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.4,(_f(31) & _f(38) => _f(39));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.3,(_f(31) & _f(36) => _f(37));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.2,(_f(31) & _f(34) => _f(35));
  _f(1) & _f(2) & _f(29) & _f(30) & createTask.1,(_f(31) & _f(32) => _f(33));
  _f(1) & _f(2) & Initialisation.13,(_f(27) => _f(28));
  _f(1) & _f(2) & Initialisation.12,(_f(25) => _f(26));
  _f(1) & _f(2) & Initialisation.11,(_f(23) => _f(24));
  _f(1) & _f(2) & Initialisation.10,(_f(21) => _f(22));
  _f(1) & _f(2) & Initialisation.9,(_f(19) => _f(20));
  _f(1) & _f(2) & Initialisation.8,(_f(17) => _f(18));
  _f(1) & _f(2) & Initialisation.7,(_f(15) => _f(16));
  _f(1) & _f(2) & Initialisation.6,(_f(13) => _f(14));
  _f(1) & _f(2) & Initialisation.5,(_f(11) => _f(12));
  _f(1) & _f(2) & Initialisation.4,(_f(9) => _f(10));
  _f(1) & _f(2) & Initialisation.3,(_f(7) => _f(8));
  _f(1) & _f(2) & Initialisation.2,(_f(5) => _f(6));
  _f(1) & _f(2) & Initialisation.1,(_f(3) => _f(4))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES & 1<=configMAX_PRIORITIES & configTOTAL_HEAP_SIZE: INTEGER & 0<=configTOTAL_HEAP_SIZE & configMINIMAL_STACK_SIZE: INTEGER & 0<=configMINIMAL_STACK_SIZE & INCLUDE_uxTaskPriorityGet: BIT & INCLUDE_vTaskDelete: BIT & INCLUDE_vTaskSuspend: BIT & INCLUDE_xTaskGetSchedulerState: BIT & INCLUDE_vTaskPrioritySet: BIT & INCLUDE_xTaskGetCurrentTaskHandle: BIT & configUSE_PREEMPTION: BIT & configUSE_IDLE_HOOK: BIT & configUSE_TICK_HOOK: BIT & configCPU_CLOCK_HZ: INTEGER & 0<=configCPU_CLOCK_HZ & configTICK_RATE_HZ: INTEGER & 0<=configTICK_RATE_HZ & configMAX_TASK_NAME_LEN: INTEGER & 0<=configMAX_TASK_NAME_LEN & configUSE_TRACE_FACILITY: BIT & configUSE_16_BIT_TICKS: BIT & configIDLE_SHOULD_YIELD: BIT & configUSE_USE_MUTEXES: BIT & configUSE_RECURSIVE_MUTEXES: BIT & configUSE_COUNTING_SEMAPHORES: BIT & configUSE_ALTERNATIVE_API: BIT & configCHECK_FOR_STACK_OVERFLOW: BIT & configQUEUE_REGISTRY_SIZE: BIT & configUSE_CO_ROUTINES: BIT & configMAX_CO_ROUTINE_PRIORITIES: INTEGER & 0<=configMAX_CO_ROUTINE_PRIORITIES & configKERNEL_INTERRUPT_PRIORITY: INTEGER & 0<=configKERNEL_INTERRUPT_PRIORITY & configMAX_SYSCALL_INTERRUPT_PRIORITY: INTEGER & 0<=configMAX_SYSCALL_INTERRUPT_PRIORITY & INCLUDE_vTaskCleanUpResources: BIT & INCLUDE_vTaskDelayUntil: BIT & INCLUDE_vTaskDelay: BIT & BIT = {0}\/{1} & ERROR_DEFINITION = { -5}\/{ -4}\/{ -2}\/{ -1} & pdTRUE: BIT & pdTRUE = 0 & pdFALSE: BIT & pdFALSE = 1 & pdPASS: BIT & pdPASS = 1 & pdFAIL: BIT & pdFAIL = 0 & errQUEUE_EMPTY: BIT & errQUEUE_EMPTY = 0 & errQUEUE_FULL: BIT & errQUEUE_FULL = 0 & errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY: ERROR_DEFINITION & errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY = -1 & errNO_TASK_TO_RUN: ERROR_DEFINITION & errNO_TASK_TO_RUN = -2 & errQUEUE_BLOCKED: ERROR_DEFINITION & errQUEUE_BLOCKED = -4 & errQUEUE_YIELD: ERROR_DEFINITION & errQUEUE_YIELD = -5 & MAX_DELAY: INTEGER & 0<=MAX_DELAY & NULL_PARAMETER: PARAMETER & POINTER: FIN(INTEGER) & not(POINTER = {}) & NAME: FIN(INTEGER) & not(NAME = {}) & PARAMETER: FIN(INTEGER) & not(PARAMETER = {}) & "`Component properties'" & PRIORITY = 0..configMAX_PRIORITIES-1 & TICK = 0..MAX_DELAY & TASK_NULL: TASK & NAME_NULL: NAME & READY_PRIORITIES: (TASK +-> (1..5)*{TASK_STATE})*(TASK +-> PRIORITY) +-> POW(PRIORITY) & dom(READY_PRIORITIES) = (TASK +-> (1..5)*{TASK_STATE})*(TASK +-> PRIORITY) & READY_PRIORITIES = %(tk_state,tk_prt).(tk_state: TASK +-> (1..5)*{TASK_STATE} & tk_prt: TASK +-> PRIORITY | ran(dom(tk_state|>{3|->TASK_STATE})<|tk_prt)) & TICK_INCREMENT: TICK*TICK +-> TICK & dom(TICK_INCREMENT) = TICK*TICK & TICK_INCREMENT = %(tick,inc).(tick: TICK & inc: TICK | (tick+inc) mod MAX_DELAY) & tskIDLE_PRIORITY: PRIORITY & tskIDLE_PRIORITY = 1 & UNBLOCK_TASKS: POW(TASK) +-> (TASK +-> (1..5)*{TASK_STATE}) & dom(UNBLOCK_TASKS) = POW(TASK) & UNBLOCK_TASKS = %bTasks.(bTasks: POW(TASK) | UNION(tk).(tk: bTasks | SET(rTask).(rTask = tk|->(3|->TASK_STATE)))) & TASK_CODE: FIN(INTEGER) & not(TASK_CODE = {}) & STACK: FIN(INTEGER) & not(STACK = {}) & TASK: FIN(INTEGER) & not(TASK = {}) & (1..5)*{TASK_STATE}: FIN(NATURAL*{TASK_STATE}) & not((1..5)*{TASK_STATE} = {}) & (1..3)*{SCHEDULER_STATE}: FIN(NATURAL*{SCHEDULER_STATE}) & not((1..3)*{SCHEDULER_STATE} = {}));
  ("`Seen and used machines assertions'" & ERROR_DEFINITION: POW(INTEGER) & BIT: POW(NATURAL));
  "`Check that the invariant (task_name: TASK +-> NAME) is established by the initialisation - ref 3.3'";
  ({TASK_NULL|->NAME_NULL}: TASK +-> NAME);
  "`Check that the invariant (task_state: TASK +-> TASK_STATE) is established by the initialisation - ref 3.3'";
  ({TASK_NULL|->(1|->TASK_STATE)}: TASK +-> (1..5)*{TASK_STATE});
  "`Check that the invariant (task_priority: TASK +-> PRIORITY) is established by the initialisation - ref 3.3'";
  ({TASK_NULL|->0}: TASK +-> PRIORITY);
  "`Check that the invariant (task_value: TASK +-> TICK) is established by the initialisation - ref 3.3'";
  ({TASK_NULL|->0}: TASK +-> TICK);
  "`Check that the invariant (tasks = dom(task_priority)) is established by the initialisation - ref 3.3'";
  ({TASK_NULL} = dom({TASK_NULL|->0}));
  "`Check that the invariant (tasks = dom(task_state)) is established by the initialisation - ref 3.3'";
  ({TASK_NULL} = dom({TASK_NULL|->(1|->TASK_STATE)}));
  "`Check that the invariant (tasks = dom(task_name)) is established by the initialisation - ref 3.3'";
  ({TASK_NULL} = dom({TASK_NULL|->NAME_NULL}));
  "`Check that the invariant (task_state(current_task) = running) is established by the initialisation - ref 3.3'";
  ({TASK_NULL|->(1|->TASK_STATE)}(TASK_NULL) = 1|->TASK_STATE);
  "`Check that the invariant (max_priority: PRIORITY) is established by the initialisation - ref 3.3'";
  (0: PRIORITY);
  "`Check that the invariant (max_priority = task_priority(current_task)) is established by the initialisation - ref 3.3'";
  (0 = {TASK_NULL|->0}(TASK_NULL));
  "`Check that the invariant (max_priority>=max(READY_PRIORITIES(task_state,task_priority))) is established by the initialisation - ref 3.3'";
  (max(READY_PRIORITIES({TASK_NULL|->(1|->TASK_STATE)},{TASK_NULL|->0}))<=0);
  "`Check that the invariant (card(task_state|>{running})<=1) is established by the initialisation - ref 3.3'";
  (card({TASK_NULL|->(1|->TASK_STATE)}|>{1|->TASK_STATE})<=1);
  "`Check that the invariant (tickCount: TICK) is established by the initialisation - ref 3.3'";
  (0: TICK);
  ("`Component invariant'" & tasks: POW(TASK) & task_name: TASK +-> NAME & task_state: TASK +-> (1..5)*{TASK_STATE} & task_priority: TASK +-> PRIORITY & task_value: TASK +-> TICK & tasks = dom(task_priority) & tasks = dom(task_state) & tasks = dom(task_value) & tasks = dom(task_name) & current_task: TASK & current_task: tasks & task_state(current_task) = 1|->TASK_STATE & max_priority: PRIORITY & max_priority = task_priority(current_task) & max(READY_PRIORITIES(task_state,task_priority))<=max_priority & card(task_state|>{1|->TASK_STATE})<=1 & scheduler: (1..3)*{SCHEDULER_STATE} & tickCount: TICK & tickMissed: TICK);
  ("`createTask preconditions in this component'" & taskCode: TASK_CODE & name: NAME & stackDepth: INTEGER & 0<=stackDepth & parameters: POW(PARAMETER) & priority: PRIORITY);
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & max_priority+1<=priority);
  "`Check that the invariant (task_name: TASK +-> NAME) is preserved by the operation - ref 3.4'";
  (task_name\/{task|->name}: TASK +-> NAME);
  "`Check that the invariant (task_state: TASK +-> TASK_STATE) is preserved by the operation - ref 3.4'";
  (task_state<+{current_task|->(3|->TASK_STATE)}\/{task|->(1|->TASK_STATE)}: TASK +-> (1..5)*{TASK_STATE});
  "`Check that the invariant (task_priority: TASK +-> PRIORITY) is preserved by the operation - ref 3.4'";
  (task_priority\/{task|->priority}: TASK +-> PRIORITY);
  "`Check that the invariant (task_value: TASK +-> TICK) is preserved by the operation - ref 3.4'";
  (task_value\/{task|->0}: TASK +-> TICK);
  "`Check that the invariant (tasks = dom(task_priority)) is preserved by the operation - ref 3.4'";
  (tasks\/{task} = dom(task_priority\/{task|->priority}));
  "`Check that the invariant (tasks = dom(task_state)) is preserved by the operation - ref 3.4'";
  (tasks\/{task} = dom(task_state<+{current_task|->(3|->TASK_STATE)}\/{task|->(1|->TASK_STATE)}));
  "`Check that the invariant (tasks = dom(task_value)) is preserved by the operation - ref 3.4'";
  (tasks\/{task} = dom(task_value\/{task|->0}));
  "`Check that the invariant (tasks = dom(task_name)) is preserved by the operation - ref 3.4'";
  (tasks\/{task} = dom(task_name\/{task|->name}));
  "`Check that the invariant (current_task: tasks) is preserved by the operation - ref 3.4'";
  (task: tasks\/{task});
  "`Check that the invariant (task_state(current_task) = running) is preserved by the operation - ref 3.4'";
  ((task_state<+{current_task|->(3|->TASK_STATE)}\/{task|->(1|->TASK_STATE)})(task) = 1|->TASK_STATE);
  "`Check that the invariant (max_priority = task_priority(current_task)) is preserved by the operation - ref 3.4'";
  (priority = (task_priority\/{task|->priority})(task));
  "`Check that the invariant (max_priority>=max(READY_PRIORITIES(task_state,task_priority))) is preserved by the operation - ref 3.4'";
  (max(READY_PRIORITIES(task_state<+{current_task|->(3|->TASK_STATE)}\/{task|->(1|->TASK_STATE)},task_priority\/{task|->priority}))<=priority);
  "`Check that the invariant (card(task_state|>{running})<=1) is preserved by the operation - ref 3.4'";
  (card(task_state<+{current_task|->(3|->TASK_STATE)}\/{task|->(1|->TASK_STATE)}|>{1|->TASK_STATE})<=1);
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & not(max_priority+1<=priority));
  (task_state<+{task|->(3|->TASK_STATE)}: TASK +-> (1..5)*{TASK_STATE});
  (tasks\/{task} = dom(task_state<+{task|->(3|->TASK_STATE)}));
  (current_task: tasks\/{task});
  ((task_state<+{task|->(3|->TASK_STATE)})(current_task) = 1|->TASK_STATE);
  (max_priority = (task_priority\/{task|->priority})(current_task));
  (max(READY_PRIORITIES(task_state<+{task|->(3|->TASK_STATE)},task_priority\/{task|->priority}))<=max_priority);
  (card(task_state<+{task|->(3|->TASK_STATE)}|>{1|->TASK_STATE})<=1);
  ("`vTaskDelete preconditions in this component'" & INCLUDE_vTaskDelete = 1 & pxTaskToDelete: tasks & not(task_state(pxTaskToDelete) = 5|->TASK_STATE));
  ("`Local hypotheses'" & pxTaskToDelete = current_task & mpriority: PRIORITY & mpriority = max(READY_PRIORITIES(task_state,task_priority)) & ctk: dom({pxTaskToDelete}<<|task_priority) & task_priority(ctk) = mpriority & task_state(ctk) = 3|->TASK_STATE);
  "`Check that the invariant (tasks: POW(TASK)) is preserved by the operation - ref 3.4'";
  (tasks-{pxTaskToDelete}: POW(TASK));
  ({pxTaskToDelete}<<|task_name: TASK +-> NAME);
  ({current_task}<<|task_state<+{ctk|->(1|->TASK_STATE)}: TASK +-> (1..5)*{TASK_STATE});
  ({pxTaskToDelete}<<|task_priority: TASK +-> PRIORITY);
  ({pxTaskToDelete}<<|task_value: TASK +-> TICK);
  (tasks-{pxTaskToDelete} = dom({pxTaskToDelete}<<|task_priority));
  (tasks-{pxTaskToDelete} = dom({current_task}<<|task_state<+{ctk|->(1|->TASK_STATE)}));
  (tasks-{pxTaskToDelete} = dom({pxTaskToDelete}<<|task_value));
  (tasks-{pxTaskToDelete} = dom({pxTaskToDelete}<<|task_name));
  "`Check that the invariant (current_task: TASK) is preserved by the operation - ref 3.4'";
  (ctk: TASK);
  (ctk: tasks);
  (not(ctk = pxTaskToDelete));
  (({current_task}<<|task_state<+{ctk|->(1|->TASK_STATE)})(ctk) = 1|->TASK_STATE);
  (mpriority = ({pxTaskToDelete}<<|task_priority)(ctk));
  (max(READY_PRIORITIES({current_task}<<|task_state<+{ctk|->(1|->TASK_STATE)},{pxTaskToDelete}<<|task_priority))<=mpriority);
  (card({current_task}<<|task_state<+{ctk|->(1|->TASK_STATE)}|>{1|->TASK_STATE})<=1);
  ("`Local hypotheses'" & not(pxTaskToDelete = current_task));
  ({pxTaskToDelete}<<|task_state: TASK +-> (1..5)*{TASK_STATE});
  (tasks-{pxTaskToDelete} = dom({pxTaskToDelete}<<|task_state));
  (not(current_task = pxTaskToDelete));
  (({pxTaskToDelete}<<|task_state)(current_task) = 1|->TASK_STATE);
  (max_priority = ({pxTaskToDelete}<<|task_priority)(current_task));
  (max(READY_PRIORITIES({pxTaskToDelete}<<|task_state,{pxTaskToDelete}<<|task_priority))<=max_priority);
  (card({pxTaskToDelete}<<|task_state|>{1|->TASK_STATE})<=1);
  ("`vTaskSuspend preconditions in this component'" & INCLUDE_vTaskSuspend = 1 & pxTaskToSuspend: tasks);
  ("`Local hypotheses'" & not(task_state(pxTaskToSuspend) = 4|->TASK_STATE) & pxTaskToSuspend = current_task & mprt: PRIORITY & mprt = max(READY_PRIORITIES(task_state,task_priority)) & ctk: dom({pxTaskToSuspend}<<|task_priority) & task_priority(ctk) = mprt & task_state(ctk) = 3|->TASK_STATE);
  (task_state<+{pxTaskToSuspend|->(4|->TASK_STATE)}<+{ctk|->(1|->TASK_STATE)}: TASK +-> (1..5)*{TASK_STATE});
  (tasks = dom(task_state<+{pxTaskToSuspend|->(4|->TASK_STATE)}<+{ctk|->(1|->TASK_STATE)}));
  ((task_state<+{pxTaskToSuspend|->(4|->TASK_STATE)}<+{ctk|->(1|->TASK_STATE)})(ctk) = 1|->TASK_STATE);
  (max(READY_PRIORITIES(task_state<+{pxTaskToSuspend|->(4|->TASK_STATE)}<+{ctk|->(1|->TASK_STATE)},task_priority))<=mprt);
  (card(task_state<+{pxTaskToSuspend|->(4|->TASK_STATE)}<+{ctk|->(1|->TASK_STATE)}|>{1|->TASK_STATE})<=1);
  ("`Local hypotheses'" & not(task_state(pxTaskToSuspend) = 4|->TASK_STATE) & not(pxTaskToSuspend = current_task));
  (task_state<+{pxTaskToSuspend|->(4|->TASK_STATE)}: TASK +-> (1..5)*{TASK_STATE});
  (tasks = dom(task_state<+{pxTaskToSuspend|->(4|->TASK_STATE)}));
  ((task_state<+{pxTaskToSuspend|->(4|->TASK_STATE)})(current_task) = 1|->TASK_STATE);
  (max(READY_PRIORITIES(task_state<+{pxTaskToSuspend|->(4|->TASK_STATE)},task_priority))<=max_priority);
  (card(task_state<+{pxTaskToSuspend|->(4|->TASK_STATE)}|>{1|->TASK_STATE})<=1);
  ("`vTaskResume preconditions in this component'" & INCLUDE_vTaskSuspend = 1 & pxTaskToResume: tasks & task_state(pxTaskToResume) = 4|->TASK_STATE);
  ("`Local hypotheses'" & max_priority+1<=task_priority(pxTaskToResume));
  (task_state<+{current_task|->(3|->TASK_STATE)}<+{pxTaskToResume|->(1|->TASK_STATE)}: TASK +-> (1..5)*{TASK_STATE});
  (tasks = dom(task_state<+{current_task|->(3|->TASK_STATE)}<+{pxTaskToResume|->(1|->TASK_STATE)}));
  (pxTaskToResume: TASK);
  ((task_state<+{current_task|->(3|->TASK_STATE)}<+{pxTaskToResume|->(1|->TASK_STATE)})(pxTaskToResume) = 1|->TASK_STATE);
  "`Check that the invariant (max_priority: PRIORITY) is preserved by the operation - ref 3.4'";
  (task_priority(pxTaskToResume): PRIORITY);
  (max(READY_PRIORITIES(task_state<+{current_task|->(3|->TASK_STATE)}<+{pxTaskToResume|->(1|->TASK_STATE)},task_priority))<=task_priority(pxTaskToResume));
  (card(task_state<+{current_task|->(3|->TASK_STATE)}<+{pxTaskToResume|->(1|->TASK_STATE)}|>{1|->TASK_STATE})<=1);
  ("`Local hypotheses'" & not(max_priority+1<=task_priority(pxTaskToResume)));
  (task_state<+{pxTaskToResume|->(3|->TASK_STATE)}: TASK +-> (1..5)*{TASK_STATE});
  (tasks = dom(task_state<+{pxTaskToResume|->(3|->TASK_STATE)}));
  ((task_state<+{pxTaskToResume|->(3|->TASK_STATE)})(current_task) = 1|->TASK_STATE);
  (max(READY_PRIORITIES(task_state<+{pxTaskToResume|->(3|->TASK_STATE)},task_priority))<=max_priority);
  (card(task_state<+{pxTaskToResume|->(3|->TASK_STATE)}|>{1|->TASK_STATE})<=1);
  ("`vTaskDelay preconditions in this component'" & xTicksToDelay: TICK & not(xTicksToDelay = 0) & INCLUDE_vTaskDelay = 1);
  ("`Local hypotheses'" & mprt: PRIORITY & mprt = max(READY_PRIORITIES(task_state,task_priority)) & ctk: dom({current_task}<<|task_priority) & task_priority(ctk) = mprt & task_state(ctk) = 3|->TASK_STATE);
  (task_state<+{current_task|->(2|->TASK_STATE)}<+{ctk|->(1|->TASK_STATE)}: TASK +-> (1..5)*{TASK_STATE});
  (task_value<+{current_task|->TICK_INCREMENT(tickCount,xTicksToDelay)}: TASK +-> TICK);
  (tasks = dom(task_state<+{current_task|->(2|->TASK_STATE)}<+{ctk|->(1|->TASK_STATE)}));
  (tasks = dom(task_value<+{current_task|->TICK_INCREMENT(tickCount,xTicksToDelay)}));
  ((task_state<+{current_task|->(2|->TASK_STATE)}<+{ctk|->(1|->TASK_STATE)})(ctk) = 1|->TASK_STATE);
  (max(READY_PRIORITIES(task_state<+{current_task|->(2|->TASK_STATE)}<+{ctk|->(1|->TASK_STATE)},task_priority))<=mprt);
  (card(task_state<+{current_task|->(2|->TASK_STATE)}<+{ctk|->(1|->TASK_STATE)}|>{1|->TASK_STATE})<=1);
  ("`vTaskDelayUntil preconditions in this component'" & pxPreviousWakeTime: TICK & xTimeIncrement: TICK & INCLUDE_vTaskDelayUntil = 1);
  (task_value<+{current_task|->TICK_INCREMENT(pxPreviousWakeTime,xTimeIncrement)}: TASK +-> TICK);
  (tasks = dom(task_value<+{current_task|->TICK_INCREMENT(pxPreviousWakeTime,xTimeIncrement)}));
  ("`vTaskStartScheduler preconditions in this component'" & scheduler = 1|->SCHEDULER_STATE);
  ("`Local hypotheses'" & idle_name: NAME & idle_task: TASK & not(idle_task: tasks) & tasks = {TASK_NULL});
  (task_name\/{idle_task|->idle_name}: TASK +-> NAME);
  (task_state<+{idle_task|->(1|->TASK_STATE)}: TASK +-> (1..5)*{TASK_STATE});
  (task_priority\/{idle_task|->tskIDLE_PRIORITY}: TASK +-> PRIORITY);
  (task_value\/{idle_task|->0}: TASK +-> TICK);
  (tasks\/{idle_task} = dom(task_priority\/{idle_task|->tskIDLE_PRIORITY}));
  (tasks\/{idle_task} = dom(task_state<+{idle_task|->(1|->TASK_STATE)}));
  (tasks\/{idle_task} = dom(task_value\/{idle_task|->0}));
  (tasks\/{idle_task} = dom(task_name\/{idle_task|->idle_name}));
  (current_task: tasks\/{idle_task});
  ((task_state<+{idle_task|->(1|->TASK_STATE)})(current_task) = 1|->TASK_STATE);
  (max_priority = (task_priority\/{idle_task|->tskIDLE_PRIORITY})(current_task));
  (max(READY_PRIORITIES(task_state<+{idle_task|->(1|->TASK_STATE)},task_priority\/{idle_task|->tskIDLE_PRIORITY}))<=max_priority);
  (card(task_state<+{idle_task|->(1|->TASK_STATE)}|>{1|->TASK_STATE})<=1);
  "`Check that the invariant (tickCount: TICK) is preserved by the operation - ref 3.4'";
  ("`Local hypotheses'" & idle_name: NAME & idle_task: TASK & not(idle_task: tasks) & not(tasks = {TASK_NULL}));
  (task_state<+{idle_task|->(3|->TASK_STATE)}: TASK +-> (1..5)*{TASK_STATE});
  (tasks\/{idle_task} = dom(task_state<+{idle_task|->(3|->TASK_STATE)}));
  ((task_state<+{idle_task|->(3|->TASK_STATE)})(current_task) = 1|->TASK_STATE);
  (max(READY_PRIORITIES(task_state<+{idle_task|->(3|->TASK_STATE)},task_priority\/{idle_task|->tskIDLE_PRIORITY}))<=max_priority);
  (card(task_state<+{idle_task|->(3|->TASK_STATE)}|>{1|->TASK_STATE})<=1);
  ("`vTaskEndScheduler preconditions in this component'" & scheduler = 2|->SCHEDULER_STATE);
  ("`Local hypotheses'" & scheduler = 3|->SCHEDULER_STATE & blockedTasks = SET(bTask).(bTask: tasks & task_state(bTask) = 2|->TASK_STATE & tickCount<=task_value(bTask) & task_value(bTask)<=TICK_INCREMENT(tickCount,tickMissed)) & mprt: PRIORITY & mprt = max(ran(dom(UNBLOCK_TASKS(blockedTasks))<|task_priority)) & task: dom(UNBLOCK_TASKS(blockedTasks)) & task: dom(task_priority) & task_priority(task) = mprt & max_priority+1<=mprt);
  (task_state<+UNBLOCK_TASKS(blockedTasks)<+({current_task|->(3|->TASK_STATE)}\/{task|->(1|->TASK_STATE)}): TASK +-> (1..5)*{TASK_STATE});
  (tasks = dom(task_state<+UNBLOCK_TASKS(blockedTasks)<+({current_task|->(3|->TASK_STATE)}\/{task|->(1|->TASK_STATE)})));
  (task: TASK);
  (task: tasks);
  ((task_state<+UNBLOCK_TASKS(blockedTasks)<+({current_task|->(3|->TASK_STATE)}\/{task|->(1|->TASK_STATE)}))(task) = 1|->TASK_STATE);
  (max(READY_PRIORITIES(task_state<+UNBLOCK_TASKS(blockedTasks)<+({current_task|->(3|->TASK_STATE)}\/{task|->(1|->TASK_STATE)}),task_priority))<=mprt);
  (card(task_state<+UNBLOCK_TASKS(blockedTasks)<+({current_task|->(3|->TASK_STATE)}\/{task|->(1|->TASK_STATE)})|>{1|->TASK_STATE})<=1);
  (TICK_INCREMENT(tickCount,tickMissed): TICK);
  ("`Local hypotheses'" & scheduler = 3|->SCHEDULER_STATE & blockedTasks = SET(bTask).(bTask: tasks & task_state(bTask) = 2|->TASK_STATE & tickCount<=task_value(bTask) & task_value(bTask)<=TICK_INCREMENT(tickCount,tickMissed)) & mprt: PRIORITY & mprt = max(ran(dom(UNBLOCK_TASKS(blockedTasks))<|task_priority)) & task: dom(UNBLOCK_TASKS(blockedTasks)) & task: dom(task_priority) & task_priority(task) = mprt & not(max_priority+1<=mprt));
  (task_state<+UNBLOCK_TASKS(blockedTasks): TASK +-> (1..5)*{TASK_STATE});
  (tasks = dom(task_state<+UNBLOCK_TASKS(blockedTasks)));
  ((task_state<+UNBLOCK_TASKS(blockedTasks))(current_task) = 1|->TASK_STATE);
  (max(READY_PRIORITIES(task_state<+UNBLOCK_TASKS(blockedTasks),task_priority))<=max_priority);
  (card(task_state<+UNBLOCK_TASKS(blockedTasks)|>{1|->TASK_STATE})<=1);
  ("`Local hypotheses'" & scheduler = 2|->SCHEDULER_STATE & blockedTasks = SET(bTask).(bTask: tasks & task_state(bTask) = 2|->TASK_STATE & task_value(bTask) = TICK_INCREMENT(tickCount,1)) & mprt: PRIORITY & mprt = max(ran(dom(UNBLOCK_TASKS(blockedTasks))<|task_priority)) & task: dom(UNBLOCK_TASKS(blockedTasks)) & task: dom(task_priority) & task_priority(task) = mprt & max_priority+1<=mprt);
  (TICK_INCREMENT(tickCount,1): TICK);
  ("`Local hypotheses'" & scheduler = 2|->SCHEDULER_STATE & blockedTasks = SET(bTask).(bTask: tasks & task_state(bTask) = 2|->TASK_STATE & task_value(bTask) = TICK_INCREMENT(tickCount,1)) & mprt: PRIORITY & mprt = max(ran(dom(UNBLOCK_TASKS(blockedTasks))<|task_priority)) & task: dom(UNBLOCK_TASKS(blockedTasks)) & task: dom(task_priority) & task_priority(task) = mprt & not(max_priority+1<=mprt));
  ("`Local hypotheses'" & not(scheduler = 2|->SCHEDULER_STATE) & blockedTasks = SET(bTask).(bTask: tasks & task_state(bTask) = 2|->TASK_STATE & task_value(bTask) = TICK_INCREMENT(tickCount,1)) & mprt: PRIORITY & mprt = max(ran(dom(UNBLOCK_TASKS(blockedTasks))<|task_priority)) & task: dom(UNBLOCK_TASKS(blockedTasks)) & task: dom(task_priority) & task_priority(task) = mprt & max_priority+1<=mprt);
  "`Check that the invariant (tickMissed: TICK) is preserved by the operation - ref 3.4'";
  ("`Local hypotheses'" & not(scheduler = 2|->SCHEDULER_STATE) & blockedTasks = SET(bTask).(bTask: tasks & task_state(bTask) = 2|->TASK_STATE & task_value(bTask) = TICK_INCREMENT(tickCount,1)) & mprt: PRIORITY & mprt = max(ran(dom(UNBLOCK_TASKS(blockedTasks))<|task_priority)) & task: dom(UNBLOCK_TASKS(blockedTasks)) & task: dom(task_priority) & task_priority(task) = mprt & not(max_priority+1<=mprt));
  ("`removeFromBlockedList preconditions in this component'" & task: tasks & task_state(task) = 2|->TASK_STATE & not(task = current_task));
  ("`Local hypotheses'" & max_priority+1<=task_priority(task));
  (task_state<+({current_task|->(3|->TASK_STATE)}\/{task|->(1|->TASK_STATE)}): TASK +-> (1..5)*{TASK_STATE});
  (tasks = dom(task_state<+({current_task|->(3|->TASK_STATE)}\/{task|->(1|->TASK_STATE)})));
  ((task_state<+({current_task|->(3|->TASK_STATE)}\/{task|->(1|->TASK_STATE)}))(task) = 1|->TASK_STATE);
  (task_priority(task): PRIORITY);
  (max(READY_PRIORITIES(task_state<+({current_task|->(3|->TASK_STATE)}\/{task|->(1|->TASK_STATE)}),task_priority))<=task_priority(task));
  (card(task_state<+({current_task|->(3|->TASK_STATE)}\/{task|->(1|->TASK_STATE)})|>{1|->TASK_STATE})<=1);
  ("`Local hypotheses'" & not(max_priority+1<=task_priority(task)));
  (task_state<+{task|->(1|->TASK_STATE)}: TASK +-> (1..5)*{TASK_STATE});
  (tasks = dom(task_state<+{task|->(1|->TASK_STATE)}));
  ((task_state<+{task|->(1|->TASK_STATE)})(current_task) = 1|->TASK_STATE);
  (max(READY_PRIORITIES(task_state<+{task|->(1|->TASK_STATE)},task_priority))<=max_priority);
  (card(task_state<+{task|->(1|->TASK_STATE)}|>{1|->TASK_STATE})<=1)
END
&
THEORY EnumerateX IS
  TASK_STATE == {running,blocked,ready,suspended,deleted};
  SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, local_op == OK)
END
