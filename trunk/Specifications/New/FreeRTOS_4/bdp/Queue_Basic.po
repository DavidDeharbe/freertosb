THEORY ProofList IS
  _f(1) & _f(2) & _f(16) & _f(59) & removeFromEventListQueue.4,(_f(60) & _f(31) => _f(64));
  _f(1) & _f(2) & _f(16) & _f(59) & removeFromEventListQueue.3,(_f(60) & _f(29) => _f(63));
  _f(1) & _f(2) & _f(16) & _f(59) & removeFromEventListQueue.2,(_f(60) & _f(23) => _f(62));
  _f(1) & _f(2) & _f(16) & _f(59) & removeFromEventListQueue.1,(_f(60) & _f(21) => _f(61));
  _f(1) & _f(2) & _f(16) & _f(51) & recivedItem.5,(_f(57) & _f(36) => _f(58));
  _f(1) & _f(2) & _f(16) & _f(51) & recivedItem.4,(_f(52) & _f(31) => _f(56));
  _f(1) & _f(2) & _f(16) & _f(51) & recivedItem.3,(_f(52) & _f(27) => _f(55));
  _f(1) & _f(2) & _f(16) & _f(51) & recivedItem.2,(_f(52) & _f(23) => _f(54));
  _f(1) & _f(2) & _f(16) & _f(51) & recivedItem.1,(_f(52) & _f(19) => _f(53));
  _f(1) & _f(2) & _f(16) & _f(48) & insertTaskWaitingToRecived.2,(_f(29) => _f(50));
  _f(1) & _f(2) & _f(16) & _f(48) & insertTaskWaitingToRecived.1,(_f(21) => _f(49));
  _f(1) & _f(2) & _f(16) & _f(45) & insertTaskWaitingToSend.2,(_f(31) => _f(47));
  _f(1) & _f(2) & _f(16) & _f(45) & insertTaskWaitingToSend.1,(_f(23) => _f(46));
  _f(1) & _f(2) & _f(16) & _f(38) & sendItem.5,(_f(43) & _f(36) => _f(44));
  _f(1) & _f(2) & _f(16) & _f(38) & sendItem.4,(_f(29) => _f(42));
  _f(1) & _f(2) & _f(16) & _f(38) & sendItem.3,(_f(27) => _f(41));
  _f(1) & _f(2) & _f(16) & _f(38) & sendItem.2,(_f(21) => _f(40));
  _f(1) & _f(2) & _f(16) & _f(38) & sendItem.1,(_f(19) => _f(39));
  _f(1) & _f(2) & _f(16) & _f(17) & xQueueCreate.9,(_f(35) & _f(36) => _f(37));
  _f(1) & _f(2) & _f(16) & _f(17) & xQueueCreate.8,(_f(18) & _f(33) => _f(34));
  _f(1) & _f(2) & _f(16) & _f(17) & xQueueCreate.7,(_f(18) & _f(31) => _f(32));
  _f(1) & _f(2) & _f(16) & _f(17) & xQueueCreate.6,(_f(18) & _f(29) => _f(30));
  _f(1) & _f(2) & _f(16) & _f(17) & xQueueCreate.5,(_f(18) & _f(27) => _f(28));
  _f(1) & _f(2) & _f(16) & _f(17) & xQueueCreate.4,(_f(18) & _f(25) => _f(26));
  _f(1) & _f(2) & _f(16) & _f(17) & xQueueCreate.3,(_f(18) & _f(23) => _f(24));
  _f(1) & _f(2) & _f(16) & _f(17) & xQueueCreate.2,(_f(18) & _f(21) => _f(22));
  _f(1) & _f(2) & _f(16) & _f(17) & xQueueCreate.1,(_f(18) & _f(19) => _f(20));
  _f(1) & _f(2) & Initialisation.6,(_f(13) & _f(14) => _f(15));
  _f(1) & _f(2) & Initialisation.5,(_f(11) => _f(12));
  _f(1) & _f(2) & Initialisation.4,(_f(9) => _f(10));
  _f(1) & _f(2) & Initialisation.3,(_f(7) => _f(8));
  _f(1) & _f(2) & Initialisation.2,(_f(5) => _f(6));
  _f(1) & _f(2) & Initialisation.1,(_f(3) => _f(4))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & BIT = {0}\/{1} & ERROR_DEFINITION = { -5}\/{ -4}\/{ -2}\/{ -1} & pdTRUE: BIT & pdTRUE = 0 & pdFALSE: BIT & pdFALSE = 1 & pdPASS: BIT & pdPASS = 1 & pdFAIL: BIT & pdFAIL = 0 & errQUEUE_EMPTY: BIT & errQUEUE_EMPTY = 0 & errQUEUE_FULL: BIT & errQUEUE_FULL = 0 & errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY: ERROR_DEFINITION & errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY = -1 & errNO_TASK_TO_RUN: ERROR_DEFINITION & errNO_TASK_TO_RUN = -2 & errQUEUE_BLOCKED: ERROR_DEFINITION & errQUEUE_BLOCKED = -4 & errQUEUE_YIELD: ERROR_DEFINITION & errQUEUE_YIELD = -5 & MAX_DELAY: INTEGER & 0<=MAX_DELAY & NULL_PARAMETER: PARAMETER & POINTER: FIN(INTEGER) & not(POINTER = {}) & NAME: FIN(INTEGER) & not(NAME = {}) & PARAMETER: FIN(INTEGER) & not(PARAMETER = {}) & PRIORITY = 0..configMAX_PRIORITIES-1 & TICK = 0..MAX_DELAY & TASK_NULL: TASK & NAME_NULL: NAME & READY_PRIORITIES: (TASK +-> (1..5)*{TASK_STATE})*(TASK +-> PRIORITY) +-> POW(PRIORITY) & dom(READY_PRIORITIES) = (TASK +-> (1..5)*{TASK_STATE})*(TASK +-> PRIORITY) & READY_PRIORITIES = %(tk_state,tk_prt).(tk_state: TASK +-> (1..5)*{TASK_STATE} & tk_prt: TASK +-> PRIORITY | ran(dom(tk_state|>{3|->TASK_STATE})<|tk_prt)) & TICK_INCREMENT: TICK*TICK +-> TICK & dom(TICK_INCREMENT) = TICK*TICK & TICK_INCREMENT = %(tick,inc).(tick: TICK & inc: TICK | (tick+inc) mod MAX_DELAY) & tskIDLE_PRIORITY: PRIORITY & tskIDLE_PRIORITY = 1 & UNBLOCK_TASKS: POW(TASK) +-> (TASK +-> (1..5)*{TASK_STATE}) & dom(UNBLOCK_TASKS) = POW(TASK) & UNBLOCK_TASKS = %bTasks.(bTasks: POW(TASK) | UNION(tk).(tk: bTasks | SET(rTask).(rTask = tk|->(3|->TASK_STATE)))) & TASK_CODE: FIN(INTEGER) & not(TASK_CODE = {}) & STACK: FIN(INTEGER) & not(STACK = {}) & TASK: FIN(INTEGER) & not(TASK = {}) & (1..5)*{TASK_STATE}: FIN(NATURAL*{TASK_STATE}) & not((1..5)*{TASK_STATE} = {}) & (1..3)*{SCHEDULER_STATE}: FIN(NATURAL*{SCHEDULER_STATE}) & not((1..3)*{SCHEDULER_STATE} = {}) & "`Component properties'" & QUEUE_NULL: QUEUE & ITEM_NULL: ITEM & QUEUE_ISFULL: QUEUE*(QUEUE +-> POW(ITEM))*(QUEUE +-> NAT) +-> BOOL & dom(QUEUE_ISFULL) = QUEUE*(QUEUE +-> POW(ITEM))*(QUEUE +-> NAT) & QUEUE_ISFULL = %(queue,q_it,q_vl).(queue: QUEUE & q_it: QUEUE +-> POW(ITEM) & q_vl: QUEUE +-> NAT & queue: dom(q_vl) & queue: dom(q_it) | bool(q_vl(queue)<=card(q_it(queue)))) & QUEUE_ISEMPTY: QUEUE*(QUEUE +-> POW(ITEM)) +-> BOOL & dom(QUEUE_ISEMPTY) = QUEUE*(QUEUE +-> POW(ITEM)) & QUEUE_ISEMPTY = %(queue,q_it).(queue: QUEUE & q_it: QUEUE +-> POW(ITEM) & queue: dom(q_it) | bool(q_it(queue) = {})) & QUEUES_WITH_TASK: TASK*POW(QUEUE)*(QUEUE +-> POW(TASK))*(QUEUE +-> POW(TASK)) +-> POW(QUEUE) & dom(QUEUES_WITH_TASK) = TASK*POW(QUEUE)*(QUEUE +-> POW(TASK))*(QUEUE +-> POW(TASK)) & QUEUES_WITH_TASK = %(tk,ques,q_tkR,q_tkS).(tk: TASK & ques: POW(QUEUE) & q_tkR: QUEUE +-> POW(TASK) & q_tkS: QUEUE +-> POW(TASK) & ques = dom(q_tkR) & ques = dom(q_tkS) | SET(que).(que: ques & (tk: q_tkR(que) or tk: q_tkS(que)))) & REMOVE_EVENT: TASK*POW(QUEUE)*(QUEUE +-> POW(TASK))*(QUEUE +-> POW(TASK)) +-> (QUEUE +-> POW(TASK))*(QUEUE +-> POW(TASK)) & dom(REMOVE_EVENT) = TASK*POW(QUEUE)*(QUEUE +-> POW(TASK))*(QUEUE +-> POW(TASK)) & REMOVE_EVENT = %(tk,ques,q_tkR,q_tkS).(tk: TASK & ques: POW(QUEUE) & q_tkR: QUEUE +-> POW(TASK) & q_tkS: QUEUE +-> POW(TASK) | UNION(que).(que: ques | SET(et).(et = que|->q_tkS(que)-{tk})),UNION(que).(que: ques | SET(et).(et = que|->q_tkR(que)-{tk}))) & ITEM: FIN(INTEGER) & not(ITEM = {}) & COPY_POSITION: FIN(INTEGER) & not(COPY_POSITION = {}) & QUEUE: FIN(INTEGER) & not(QUEUE = {}));
  ("`Seen and used machines invariants'" & tasks: POW(TASK) & task_name: TASK +-> NAME & task_state: TASK +-> (1..5)*{TASK_STATE} & task_priority: TASK +-> PRIORITY & task_value: TASK +-> TICK & tasks = dom(task_priority) & tasks = dom(task_state) & tasks = dom(task_value) & tasks = dom(task_name) & current_task: TASK & current_task: tasks & task_state(current_task) = 1|->TASK_STATE & max_priority: PRIORITY & max_priority = task_priority(current_task) & max(READY_PRIORITIES(task_state,task_priority))<=max_priority & card(task_state|>{1|->TASK_STATE})<=1 & scheduler: (1..3)*{SCHEDULER_STATE} & tickCount: TICK & tickMissed: TICK & "`Seen and used machines assertions'" & ERROR_DEFINITION: POW(INTEGER) & BIT: POW(NATURAL));
  "`Check that the invariant (queue_itens: QUEUE +-> POW(ITEM)) is established by the initialisation - ref 3.3'";
  ({QUEUE_NULL|->{}}: QUEUE +-> POW(ITEM));
  "`Check that the invariant (queue_tkRecived: QUEUE +-> POW(TASK)) is established by the initialisation - ref 3.3'";
  ({QUEUE_NULL|->{}}: QUEUE +-> POW(TASK));
  "`Check that the invariant (queue_length: QUEUE +-> NAT) is established by the initialisation - ref 3.3'";
  ({QUEUE_NULL|->card({})}: QUEUE +-> NAT);
  "`Check that the invariant (queues = dom(queue_itens)) is established by the initialisation - ref 3.3'";
  ({QUEUE_NULL} = dom({QUEUE_NULL|->{}}));
  "`Check that the invariant (queues = dom(queue_length)) is established by the initialisation - ref 3.3'";
  ({QUEUE_NULL} = dom({QUEUE_NULL|->card({})}));
  ("`Local hypotheses'" & queue = QUEUE_NULL);
  "`Check that the invariant (!queue.(queue: queues => card(queue_itens(queue))<=queue_length(queue))) is established by the initialisation - ref 3.3'";
  (card({QUEUE_NULL|->{}}(queue))<={QUEUE_NULL|->card({})}(queue));
  ("`Component invariant'" & queues: POW(QUEUE) & queue_itens: QUEUE +-> POW(ITEM) & queue_tkRecived: QUEUE +-> POW(TASK) & queue_tkSend: QUEUE +-> POW(TASK) & queue_length: QUEUE +-> NAT & queues = dom(queue_itens) & queues = dom(queue_tkRecived) & queues = dom(queue_tkSend) & queues = dom(queue_length) & !queue.(queue: queues => card(queue_itens(queue))<=queue_length(queue)));
  ("`xQueueCreate preconditions in this component'" & uxQueueLength: INTEGER & 0<=uxQueueLength & uxQueueLength<=2147483647 & uxItemSize: INTEGER & 0<=uxItemSize & uxItemSize<=2147483647);
  ("`Local hypotheses'" & queue: QUEUE & not(queue: queues));
  "`Check that the invariant (queue_itens: QUEUE +-> POW(ITEM)) is preserved by the operation - ref 3.4'";
  (queue_itens\/{queue|->{}}: QUEUE +-> POW(ITEM));
  "`Check that the invariant (queue_tkRecived: QUEUE +-> POW(TASK)) is preserved by the operation - ref 3.4'";
  (queue_tkRecived\/{queue|->{}}: QUEUE +-> POW(TASK));
  "`Check that the invariant (queue_tkSend: QUEUE +-> POW(TASK)) is preserved by the operation - ref 3.4'";
  (queue_tkSend\/{queue|->{}}: QUEUE +-> POW(TASK));
  "`Check that the invariant (queue_length: QUEUE +-> NAT) is preserved by the operation - ref 3.4'";
  (queue_length\/{queue|->uxQueueLength}: QUEUE +-> NAT);
  "`Check that the invariant (queues = dom(queue_itens)) is preserved by the operation - ref 3.4'";
  (queues\/{queue} = dom(queue_itens\/{queue|->{}}));
  "`Check that the invariant (queues = dom(queue_tkRecived)) is preserved by the operation - ref 3.4'";
  (queues\/{queue} = dom(queue_tkRecived\/{queue|->{}}));
  "`Check that the invariant (queues = dom(queue_tkSend)) is preserved by the operation - ref 3.4'";
  (queues\/{queue} = dom(queue_tkSend\/{queue|->{}}));
  "`Check that the invariant (queues = dom(queue_length)) is preserved by the operation - ref 3.4'";
  (queues\/{queue} = dom(queue_length\/{queue|->uxQueueLength}));
  ("`Local hypotheses'" & queue: QUEUE & not(queue: queues) & queue$0: queues\/{queue});
  "`Check that the invariant (!queue.(queue: queues => card(queue_itens(queue))<=queue_length(queue))) is preserved by the operation - ref 3.4'";
  (card((queue_itens\/{queue|->{}})(queue$0))<=(queue_length\/{queue|->uxQueueLength})(queue$0));
  ("`sendItem preconditions in this component'" & pxQueue: queues & QUEUE_ISFULL(pxQueue,queue_itens,queue_length) = FALSE & pxItem: ITEM & task: TASK & task: queue_tkRecived(pxQueue) & copy_position: COPY_POSITION);
  (queue_itens<+{pxQueue|->(queue_itens(pxQueue)\/{pxItem})}: QUEUE +-> POW(ITEM));
  (queue_tkRecived<+{pxQueue|->queue_tkRecived(pxQueue)-{task}}: QUEUE +-> POW(TASK));
  (queues = dom(queue_itens<+{pxQueue|->(queue_itens(pxQueue)\/{pxItem})}));
  (queues = dom(queue_tkRecived<+{pxQueue|->queue_tkRecived(pxQueue)-{task}}));
  ("`Local hypotheses'" & queue: queues);
  (card((queue_itens<+{pxQueue|->(queue_itens(pxQueue)\/{pxItem})})(queue))<=queue_length(queue));
  ("`insertTaskWaitingToSend preconditions in this component'" & pxQueue: queues & pxTask: TASK);
  (queue_tkSend<+{pxQueue|->(queue_tkSend(pxQueue)\/{pxTask})}: QUEUE +-> POW(TASK));
  (queues = dom(queue_tkSend<+{pxQueue|->(queue_tkSend(pxQueue)\/{pxTask})}));
  ("`insertTaskWaitingToRecived preconditions in this component'" & pxQueue: queues & pxTask: TASK);
  (queue_tkRecived<+{pxQueue|->(queue_tkRecived(pxQueue)\/{pxTask})}: QUEUE +-> POW(TASK));
  (queues = dom(queue_tkRecived<+{pxQueue|->(queue_tkRecived(pxQueue)\/{pxTask})}));
  ("`recivedItem preconditions in this component'" & pxQueue: queues & QUEUE_ISEMPTY(pxQueue,queue_itens) = FALSE & justPeeking: BIT & task: TASK & task: queue_tkSend(pxQueue));
  ("`Local hypotheses'" & item: ITEM & item: queue_itens(pxQueue) & justPeeking = pdFALSE);
  (queue_itens<+{pxQueue|->queue_itens(pxQueue)-{item}}: QUEUE +-> POW(ITEM));
  (queue_tkSend<+{pxQueue|->queue_tkSend(pxQueue)-{task}}: QUEUE +-> POW(TASK));
  (queues = dom(queue_itens<+{pxQueue|->queue_itens(pxQueue)-{item}}));
  (queues = dom(queue_tkSend<+{pxQueue|->queue_tkSend(pxQueue)-{task}}));
  ("`Local hypotheses'" & item: ITEM & item: queue_itens(pxQueue) & justPeeking = pdFALSE & queue: queues);
  (card((queue_itens<+{pxQueue|->queue_itens(pxQueue)-{item}})(queue))<=queue_length(queue));
  ("`removeFromEventListQueue preconditions in this component'" & task: TASK);
  ("`Local hypotheses'" & queuesTask: POW(QUEUE) & queuesTask = QUEUES_WITH_TASK(task,queues,queue_tkRecived,queue_tkSend) & q_tkRecived: QUEUE +-> POW(TASK) & q_tkSend: QUEUE +-> POW(TASK) & q_tkRecived,q_tkSend = REMOVE_EVENT(task,queues,queue_tkRecived,queue_tkSend));
  (queue_tkRecived<+q_tkRecived: QUEUE +-> POW(TASK));
  (queue_tkSend<+q_tkSend: QUEUE +-> POW(TASK));
  (queues = dom(queue_tkRecived<+q_tkRecived));
  (queues = dom(queue_tkSend<+q_tkSend))
END
&
THEORY EnumerateX IS
  TASK_STATE == {running,blocked,ready,suspended,deleted};
  SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, local_op == OK)
END
