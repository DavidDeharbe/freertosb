THEORY ProofList IS
  _f(1) & _f(2) & _f(3) & _f(211) & xTaskResumeAll.2,(_f(208) => _f(213));
  _f(1) & _f(2) & _f(3) & _f(211) & xTaskResumeAll.1,(_f(208) => _f(212));
  _f(1) & _f(2) & _f(3) & vTaskSuspendAll.2,(_f(208) => _f(210));
  _f(1) & _f(2) & _f(3) & vTaskSuspendAll.1,(_f(208) => _f(209));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.62,(_f(207) & _f(31) => _f(197));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.61,(_f(207) & _f(23) => _f(196));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.60,(_f(207) & _f(72) => _f(195));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.59,(_f(207) & _f(70) => _f(194));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.58,(_f(207) & _f(65) => _f(193));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.57,(_f(206) & _f(31) => _f(191));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.56,(_f(206) & _f(21) => _f(190));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.55,(_f(206) & _f(72) => _f(189));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.54,(_f(206) & _f(72) => _f(171));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.53,(_f(206) & _f(68) => _f(188));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.52,(_f(206) & _f(63) => _f(187));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.51,(_f(202) & _f(31) => _f(185));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.50,(_f(205) & _f(29) => _f(80));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.49,(_f(204) & _f(26) => _f(183));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.48,(_f(202) & _f(17) => _f(181));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.47,(_f(203) & _f(15) => _f(16));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.46,(_f(202) & _f(11) => _f(179));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.45,(_f(202) & _f(11) => _f(178));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.44,(_f(198) & _f(31) => _f(176));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.43,(_f(201) & _f(29) => _f(46));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.42,(_f(200) & _f(26) => _f(174));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.41,(_f(198) & _f(23) => _f(172));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.40,(_f(198) & _f(23) => _f(171));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.39,(_f(198) & _f(21) => _f(170));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.38,(_f(198) & _f(21) => _f(169));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.37,(_f(198) & _f(19) => _f(168));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.36,(_f(198) & _f(17) => _f(167));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.35,(_f(198) & _f(61) => _f(166));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.34,(_f(199) & _f(15) => _f(16));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.33,(_f(198) & _f(11) => _f(164));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.32,(_f(198) & _f(11) => _f(163));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.31,(_f(192) & _f(31) => _f(197));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.30,(_f(192) & _f(23) => _f(196));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.29,(_f(192) & _f(72) => _f(195));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.28,(_f(192) & _f(70) => _f(194));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.27,(_f(192) & _f(65) => _f(193));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.26,(_f(186) & _f(31) => _f(191));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.25,(_f(186) & _f(21) => _f(190));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.24,(_f(186) & _f(72) => _f(189));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.23,(_f(186) & _f(72) => _f(171));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.22,(_f(186) & _f(68) => _f(188));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.21,(_f(186) & _f(63) => _f(187));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.20,(_f(177) & _f(31) => _f(185));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.19,(_f(184) & _f(29) => _f(80));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.18,(_f(182) & _f(26) => _f(183));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.17,(_f(177) & _f(17) => _f(181));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.16,(_f(180) & _f(15) => _f(16));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.15,(_f(177) & _f(11) => _f(179));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.14,(_f(177) & _f(11) => _f(178));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.13,(_f(162) & _f(31) => _f(176));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.12,(_f(175) & _f(29) => _f(46));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.11,(_f(173) & _f(26) => _f(174));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.10,(_f(162) & _f(23) => _f(172));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.9,(_f(162) & _f(23) => _f(171));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.8,(_f(162) & _f(21) => _f(170));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.7,(_f(162) & _f(21) => _f(169));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.6,(_f(162) & _f(19) => _f(168));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.5,(_f(162) & _f(17) => _f(167));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.4,(_f(162) & _f(61) => _f(166));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.3,(_f(165) & _f(15) => _f(16));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.2,(_f(162) & _f(11) => _f(164));
  _f(1) & _f(2) & _f(3) & _f(161) & vTaskPrioritySet.1,(_f(162) & _f(11) => _f(163));
  _f(1) & _f(2) & _f(3) & _f(141) & vTaskResume.21,(_f(157) & _f(104) => _f(160));
  _f(1) & _f(2) & _f(3) & _f(141) & vTaskResume.20,(_f(159) & _f(132) => _f(154));
  _f(1) & _f(2) & _f(3) & _f(141) & vTaskResume.19,(_f(157) & _f(127) => _f(152));
  _f(1) & _f(2) & _f(3) & _f(141) & vTaskResume.18,(_f(157) & _f(125) => _f(151));
  _f(1) & _f(2) & _f(3) & _f(141) & vTaskResume.17,(_f(157) & _f(98) => _f(150));
  _f(1) & _f(2) & _f(3) & _f(141) & vTaskResume.16,(_f(157) & _f(121) => _f(149));
  _f(1) & _f(2) & _f(3) & _f(141) & vTaskResume.15,(_f(157) & _f(147) => _f(148));
  _f(1) & _f(2) & _f(3) & _f(141) & vTaskResume.14,(_f(158) & _f(118) => _f(146));
  _f(1) & _f(2) & _f(3) & _f(141) & vTaskResume.13,(_f(157) & _f(114) => _f(144));
  _f(1) & _f(2) & _f(3) & _f(141) & vTaskResume.12,(_f(157) & _f(114) => _f(143));
  _f(1) & _f(2) & _f(3) & _f(141) & vTaskResume.11,(_f(142) & _f(104) => _f(156));
  _f(1) & _f(2) & _f(3) & _f(141) & vTaskResume.10,(_f(155) & _f(135) => _f(80));
  _f(1) & _f(2) & _f(3) & _f(141) & vTaskResume.9,(_f(153) & _f(132) => _f(154));
  _f(1) & _f(2) & _f(3) & _f(141) & vTaskResume.8,(_f(142) & _f(127) => _f(152));
  _f(1) & _f(2) & _f(3) & _f(141) & vTaskResume.7,(_f(142) & _f(125) => _f(151));
  _f(1) & _f(2) & _f(3) & _f(141) & vTaskResume.6,(_f(142) & _f(98) => _f(150));
  _f(1) & _f(2) & _f(3) & _f(141) & vTaskResume.5,(_f(142) & _f(121) => _f(149));
  _f(1) & _f(2) & _f(3) & _f(141) & vTaskResume.4,(_f(142) & _f(147) => _f(148));
  _f(1) & _f(2) & _f(3) & _f(141) & vTaskResume.3,(_f(145) & _f(118) => _f(146));
  _f(1) & _f(2) & _f(3) & _f(141) & vTaskResume.2,(_f(142) & _f(114) => _f(144));
  _f(1) & _f(2) & _f(3) & _f(141) & vTaskResume.1,(_f(142) & _f(114) => _f(143));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.25,(_f(137) & _f(104) => _f(140));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.24,(_f(139) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.23,(_f(137) & _f(129) => _f(130));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.22,(_f(137) & _f(127) => _f(128));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.21,(_f(137) & _f(125) => _f(126));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.20,(_f(137) & _f(100) => _f(124));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.19,(_f(137) & _f(98) => _f(123));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.18,(_f(137) & _f(121) => _f(122));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.17,(_f(137) & _f(119) => _f(120));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.16,(_f(138) & _f(118) => _f(16));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.15,(_f(137) & _f(114) => _f(116));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.14,(_f(137) & _f(114) => _f(115));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.13,(_f(113) & _f(104) => _f(136));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.12,(_f(134) & _f(135) => _f(80));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.11,(_f(131) & _f(132) => _f(133));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.10,(_f(113) & _f(129) => _f(130));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.9,(_f(113) & _f(127) => _f(128));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.8,(_f(113) & _f(125) => _f(126));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.7,(_f(113) & _f(100) => _f(124));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.6,(_f(113) & _f(98) => _f(123));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.5,(_f(113) & _f(121) => _f(122));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.4,(_f(113) & _f(119) => _f(120));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.3,(_f(117) & _f(118) => _f(16));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.2,(_f(113) & _f(114) => _f(116));
  _f(1) & _f(2) & _f(3) & _f(112) & vTaskSuspend.1,(_f(113) & _f(114) => _f(115));
  _f(1) & _f(2) & _f(3) & _f(90) & prvIdleTask.14,(_f(93) & _f(111) => _f(84));
  _f(1) & _f(2) & _f(3) & _f(90) & prvIdleTask.13,(_f(93) & _f(111) => _f(83));
  _f(1) & _f(2) & _f(3) & _f(90) & prvIdleTask.12,(_f(93) & _f(109) => _f(110));
  _f(1) & _f(2) & _f(3) & _f(90) & prvIdleTask.11,(_f(93) & _f(106) => _f(108));
  _f(1) & _f(2) & _f(3) & _f(90) & prvIdleTask.10,(_f(93) & _f(106) => _f(107));
  _f(1) & _f(2) & _f(3) & _f(90) & prvIdleTask.9,(_f(93) & _f(104) => _f(105));
  _f(1) & _f(2) & _f(3) & _f(90) & prvIdleTask.8,(_f(93) & _f(102) => _f(103));
  _f(1) & _f(2) & _f(3) & _f(90) & prvIdleTask.7,(_f(93) & _f(100) => _f(101));
  _f(1) & _f(2) & _f(3) & _f(90) & prvIdleTask.6,(_f(93) & _f(98) => _f(99));
  _f(1) & _f(2) & _f(3) & _f(90) & prvIdleTask.5,(_f(93) & _f(96) => _f(97));
  _f(1) & _f(2) & _f(3) & _f(90) & prvIdleTask.4,(_f(93) & _f(94) => _f(95));
  _f(1) & _f(2) & _f(3) & _f(90) & prvIdleTask.3,(_f(91) & _f(92) => _f(9));
  _f(1) & _f(2) & _f(3) & _f(90) & prvIdleTask.2,(_f(91) & _f(92) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(90) & prvIdleTask.1,(_f(91) & _f(92) => _f(7));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.36,(_f(85) & _f(82) => _f(84));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.35,(_f(85) & _f(82) => _f(83));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.34,(_f(85) & _f(31) => _f(89));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.33,(_f(88) & _f(29) => _f(46));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.32,(_f(87) & _f(26) => _f(78));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.31,(_f(85) & _f(23) => _f(76));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.30,(_f(85) & _f(21) => _f(75));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.29,(_f(85) & _f(19) => _f(74));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.28,(_f(85) & _f(72) => _f(73));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.27,(_f(85) & _f(70) => _f(71));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.26,(_f(85) & _f(68) => _f(69));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.25,(_f(85) & _f(17) => _f(67));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.24,(_f(85) & _f(65) => _f(66));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.23,(_f(85) & _f(63) => _f(64));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.22,(_f(85) & _f(61) => _f(62));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.21,(_f(86) & _f(15) => _f(16));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.20,(_f(85) & _f(11) => _f(59));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.19,(_f(85) & _f(11) => _f(58));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.18,(_f(57) & _f(82) => _f(84));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.17,(_f(57) & _f(82) => _f(83));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.16,(_f(57) & _f(31) => _f(81));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.15,(_f(79) & _f(29) => _f(80));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.14,(_f(77) & _f(26) => _f(78));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.13,(_f(57) & _f(23) => _f(76));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.12,(_f(57) & _f(21) => _f(75));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.11,(_f(57) & _f(19) => _f(74));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.10,(_f(57) & _f(72) => _f(73));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.9,(_f(57) & _f(70) => _f(71));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.8,(_f(57) & _f(68) => _f(69));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.7,(_f(57) & _f(17) => _f(67));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.6,(_f(57) & _f(65) => _f(66));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.5,(_f(57) & _f(63) => _f(64));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.4,(_f(57) & _f(61) => _f(62));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.3,(_f(60) & _f(15) => _f(16));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.2,(_f(57) & _f(11) => _f(59));
  _f(1) & _f(2) & _f(3) & _f(56) & vTaskDelete.1,(_f(57) & _f(11) => _f(58));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.68,(_f(52) & _f(36) => _f(37));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.67,(_f(52) & _f(33) => _f(35));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.66,(_f(52) & _f(33) => _f(34));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.65,(_f(52) & _f(31) => _f(47));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.64,(_f(55) & _f(29) => _f(46));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.63,(_f(54) & _f(26) => _f(27));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.62,(_f(52) & _f(23) => _f(24));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.61,(_f(52) & _f(21) => _f(22));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.60,(_f(52) & _f(19) => _f(20));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.59,(_f(52) & _f(17) => _f(18));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.58,(_f(53) & _f(15) => _f(16));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.57,(_f(52) & _f(11) => _f(13));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.56,(_f(52) & _f(11) => _f(12));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.55,(_f(48) & _f(36) => _f(37));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.54,(_f(48) & _f(33) => _f(35));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.53,(_f(48) & _f(33) => _f(34));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.52,(_f(48) & _f(31) => _f(32));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.51,(_f(51) & _f(29) => _f(30));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.50,(_f(50) & _f(26) => _f(27));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.49,(_f(48) & _f(23) => _f(24));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.48,(_f(48) & _f(21) => _f(22));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.47,(_f(48) & _f(19) => _f(20));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.46,(_f(48) & _f(17) => _f(18));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.45,(_f(49) & _f(15) => _f(16));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.44,(_f(48) & _f(11) => _f(13));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.43,(_f(48) & _f(11) => _f(12));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.42,(_f(42) & _f(36) => _f(37));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.41,(_f(42) & _f(33) => _f(35));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.40,(_f(42) & _f(33) => _f(34));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.39,(_f(42) & _f(31) => _f(47));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.38,(_f(45) & _f(29) => _f(46));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.37,(_f(44) & _f(26) => _f(27));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.36,(_f(42) & _f(23) => _f(24));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.35,(_f(42) & _f(21) => _f(22));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.34,(_f(42) & _f(19) => _f(20));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.33,(_f(42) & _f(17) => _f(18));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.32,(_f(43) & _f(15) => _f(16));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.31,(_f(42) & _f(11) => _f(13));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.30,(_f(42) & _f(11) => _f(12));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.29,(_f(38) & _f(36) => _f(37));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.28,(_f(38) & _f(33) => _f(35));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.27,(_f(38) & _f(33) => _f(34));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.26,(_f(38) & _f(31) => _f(32));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.25,(_f(41) & _f(29) => _f(30));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.24,(_f(40) & _f(26) => _f(27));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.23,(_f(38) & _f(23) => _f(24));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.22,(_f(38) & _f(21) => _f(22));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.21,(_f(38) & _f(19) => _f(20));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.20,(_f(38) & _f(17) => _f(18));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.19,(_f(39) & _f(15) => _f(16));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.18,(_f(38) & _f(11) => _f(13));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.17,(_f(38) & _f(11) => _f(12));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.16,(_f(10) & _f(36) => _f(37));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.15,(_f(10) & _f(33) => _f(35));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.14,(_f(10) & _f(33) => _f(34));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.13,(_f(10) & _f(31) => _f(32));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.12,(_f(28) & _f(29) => _f(30));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.11,(_f(25) & _f(26) => _f(27));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.10,(_f(10) & _f(23) => _f(24));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.9,(_f(10) & _f(21) => _f(22));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.8,(_f(10) & _f(19) => _f(20));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.7,(_f(10) & _f(17) => _f(18));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.6,(_f(14) & _f(15) => _f(16));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.5,(_f(10) & _f(11) => _f(13));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.4,(_f(10) & _f(11) => _f(12));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.3,(_f(5) & _f(6) => _f(9));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.2,(_f(5) & _f(6) => _f(8));
  _f(1) & _f(2) & _f(3) & _f(4) & xTaskCreate.1,(_f(5) & _f(6) => _f(7))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & BIT = {0}\/{1} & ERROR_DEFINITION = { -5}\/{ -4}\/{ -2}\/{ -1} & pdTRUE: BIT & pdTRUE = 0 & pdFALSE: BIT & pdFALSE = 1 & pdPASS: BIT & pdPASS = 1 & pdFAIL: BIT & pdFAIL = 0 & errQUEUE_EMPTY: BIT & errQUEUE_EMPTY = 0 & errQUEUE_FULL: BIT & errQUEUE_FULL = 0 & errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY: ERROR_DEFINITION & errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY = -1 & errNO_TASK_TO_RUN: ERROR_DEFINITION & errNO_TASK_TO_RUN = -2 & errQUEUE_BLOCKED: ERROR_DEFINITION & errQUEUE_BLOCKED = -4 & errQUEUE_YIELD: ERROR_DEFINITION & errQUEUE_YIELD = -5 & pointer: POINTER & POINTER: FIN(INTEGER) & not(POINTER = {}) & NAME: FIN(INTEGER) & not(NAME = {}) & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES & configTOTAL_HEAP_SIZE: INTEGER & 0<=configTOTAL_HEAP_SIZE & configMINIMAL_STACK_SIZE: INTEGER & 0<=configMINIMAL_STACK_SIZE & INCLUDE_uxTaskPriorityGet: BIT & INCLUDE_vTaskDelete: BIT & INCLUDE_vTaskSuspend: BIT & INCLUDE_xTaskGetSchedulerState: BIT & INCLUDE_vTaskPrioritySet: BIT & INCLUDE_xTaskGetCurrentTaskHandle: BIT & configUSE_PREEMPTION: BIT & configUSE_IDLE_HOOK: BIT & configUSE_TICK_HOOK: BIT & configCPU_CLOCK_HZ: INTEGER & 0<=configCPU_CLOCK_HZ & configTICK_RATE_HZ: INTEGER & 0<=configTICK_RATE_HZ & configMAX_TASK_NAME_LEN: INTEGER & 0<=configMAX_TASK_NAME_LEN & configUSE_TRACE_FACILITY: BIT & configUSE_16_BIT_TICKS: BIT & configIDLE_SHOULD_YIELD: BIT & configUSE_USE_MUTEXES: BIT & configUSE_RECURSIVE_MUTEXES: BIT & configUSE_COUNTING_SEMAPHORES: BIT & configUSE_ALTERNATIVE_API: BIT & configCHECK_FOR_STACK_OVERFLOW: BIT & configQUEUE_REGISTRY_SIZE: BIT & configUSE_CO_ROUTINES: BIT & configMAX_CO_ROUTINE_PRIORITIES: INTEGER & 0<=configMAX_CO_ROUTINE_PRIORITIES & configKERNEL_INTERRUPT_PRIORITY: INTEGER & 0<=configKERNEL_INTERRUPT_PRIORITY & configMAX_SYSCALL_INTERRUPT_PRIORITY: INTEGER & 0<=configMAX_SYSCALL_INTERRUPT_PRIORITY & INCLUDE_vTaskCleanUpResources: BIT & INCLUDE_vTaskDelayUntil: BIT & INCLUDE_vTaskDelay: BIT & "`Component properties'" & PRIORITIES = 0..configMAX_PRIORITIES-1 & TASK = NAME*PRIORITIES*TASK_CODE*STACK & tskIDLE_PRIORITY: PRIORITIES & tskIDLE_PRIORITY = 0 & tskIDLE_STACK_SIZE: INTEGER & 0<=tskIDLE_STACK_SIZE & tskIDLE_STACK_SIZE = configMINIMAL_STACK_SIZE & getName: TASK +-> NAME & dom(getName) = TASK & getName = %(nm,pr,tc,stk).(nm,pr,tc,stk: TASK | nm) & getPriority: TASK +-> PRIORITIES & dom(getPriority) = TASK & getPriority = %(nm,pr,tc,stk).(nm,pr,tc,stk: TASK | pr) & getCode: TASK +-> TASK_CODE & dom(getCode) = TASK & getCode = %(nm,pr,tc,stk).(nm,pr,tc,stk: TASK | tc) & getStack: TASK +-> STACK & dom(getStack) = TASK & getStack = %(nm,pr,tc,stk).(nm,pr,tc,stk: TASK | stk) & TASK_NULL: TASK & PARAMETER_NULL: PARAMETER & taskSCHEDULER_NOT_STARTED: INTEGER & 0<=taskSCHEDULER_NOT_STARTED & taskSCHEDULER_RUNNING: INTEGER & 0<=taskSCHEDULER_RUNNING & taskSCHEDULER_SUSPENDED: INTEGER & 0<=taskSCHEDULER_SUSPENDED & taskSCHEDULER_NOT_STARTED = 0 & taskSCHEDULER_RUNNING = 1 & taskSCHEDULER_SUSPENDED = 2 & TASK_CODE: FIN(INTEGER) & not(TASK_CODE = {}) & PARAMETER: FIN(INTEGER) & not(PARAMETER = {}));
  ("`Included,imported and extended machines properties'" & STACK = POINTER*NATURAL & STACK_NULL: STACK & HEAP_SIZE = 0..configTOTAL_HEAP_SIZE & portMalloc: HEAP_SIZE*HEAP_SIZE +-> HEAP_SIZE*STACK & dom(portMalloc) = HEAP_SIZE*HEAP_SIZE & portMalloc = %(heap,sz).(heap: HEAP_SIZE & sz: HEAP_SIZE & 0<=heap-sz | heap-sz,(pointer,sz)) & portMalloc = %(heap,sz).(heap: HEAP_SIZE & sz: HEAP_SIZE & heap-sz+1<=0 | 0,STACK_NULL) & portFree: HEAP_SIZE*POINTER*HEAP_SIZE +-> HEAP_SIZE & dom(portFree) = HEAP_SIZE*POINTER*HEAP_SIZE & portFree = %(heap,pt,sz).(heap: HEAP_SIZE & pt: POINTER & sz: HEAP_SIZE & heap+sz<=configTOTAL_HEAP_SIZE | heap+sz) & portFree = %(heap,pt,sz).(heap: HEAP_SIZE & pt: POINTER & sz: HEAP_SIZE & configTOTAL_HEAP_SIZE+1<=heap+sz | heap) & "`Included,imported and extended machines invariants'" & heap: HEAP_SIZE & "`Seen and used machines assertions'" & ERROR_DEFINITION: POW(INTEGER) & BIT: POW(NATURAL));
  ("`Component invariant'" & tasks: POW(TASK) & pxCurrentTCB: TASK & pxReadyTasksLists: PRIORITIES +-> POW(TASK) & pxReadyTasksLists~: POW(TASK) +-> PRIORITIES & !(pr,tk).(pr: PRIORITIES & tk: TASK & tk: pxReadyTasksLists(pr) => getPriority(tk) = pr) & readyTasks: POW(TASK) & xTasksWaitingTermination: POW(TASK) & xSuspendedTaskList: POW(TASK) & pxDelayedTaskList: POW(TASK) & readyTasks = UNION(pr).(pr: PRIORITIES | SET(tk).(tk: TASK & tk: pxReadyTasksLists(pr))) & xSuspendedTaskList/\xTasksWaitingTermination = {} & pxDelayedTaskList/\xTasksWaitingTermination = {} & pxDelayedTaskList/\xSuspendedTaskList = {} & readyTasks/\xTasksWaitingTermination = {} & xSuspendedTaskList/\readyTasks = {} & pxDelayedTaskList/\readyTasks = {} & !(p1,p2).(p1: PRIORITIES & p2: PRIORITIES & not(p1 = p2) => pxReadyTasksLists(p1)/\pxReadyTasksLists(p2) = {}) & !tk.(tk: readyTasks => getPriority(tk)<=getPriority(pxCurrentTCB)) & tasks = xSuspendedTaskList\/xTasksWaitingTermination\/pxDelayedTaskList\/readyTasks\/{pxCurrentTCB} & uxCurrentNumberOfTasks: INTEGER & 0<=uxCurrentNumberOfTasks & uxCurrentNumberOfTasks = card(tasks) & uxTopUsedPriority: PRIORITIES & uxTasksDeleted: INTEGER & 0<=uxTasksDeleted & xSchedulerRunning: BIT & uxSchedulerSuspended: INTEGER & 0<=uxSchedulerSuspended);
  ("`xTaskCreate preconditions in this component'" & pvTaskCode: TASK_CODE & pcName: NAME & usStackDepth: INTEGER & 0<=usStackDepth & pvParameters: POW(PARAMETER) & uxPriority: PRIORITIES);
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & stack: STACK & new_heap: HEAP_SIZE & new_heap,stack = portMalloc(heap,usStackDepth) & task = (pcName,uxPriority,pvTaskCode)|->stack);
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  (new_heap: INTEGER);
  (0<=new_heap);
  (new_heap<=configTOTAL_HEAP_SIZE);
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & stack: STACK & new_heap: HEAP_SIZE & new_heap,stack = portMalloc(heap,usStackDepth) & task = (pcName,uxPriority,pvTaskCode)|->stack & not(stack = STACK_NULL) & uxTopUsedPriority<=uxPriority & uxCurrentNumberOfTasks = 0);
  "`Check that the invariant (pxReadyTasksLists: PRIORITIES >+> POW(TASK)) is preserved by the operation - ref 3.4'";
  (pxReadyTasksLists<+{uxPriority|->(pxReadyTasksLists(uxPriority)\/{task})}: PRIORITIES +-> POW(TASK));
  ((pxReadyTasksLists<+{uxPriority|->(pxReadyTasksLists(uxPriority)\/{task})})~: POW(TASK) +-> PRIORITIES);
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & stack: STACK & new_heap: HEAP_SIZE & new_heap,stack = portMalloc(heap,usStackDepth) & task = (pcName,uxPriority,pvTaskCode)|->stack & not(stack = STACK_NULL) & uxTopUsedPriority<=uxPriority & uxCurrentNumberOfTasks = 0 & pr: PRIORITIES & tk: TASK & tk: (pxReadyTasksLists<+{uxPriority|->(pxReadyTasksLists(uxPriority)\/{task})})(pr));
  "`Check that the invariant (!(pr,tk).(pr: PRIORITIES & tk: TASK & tk: pxReadyTasksLists(pr) => getPriority(tk) = pr)) is preserved by the operation - ref 3.4'";
  (getPriority(tk) = pr);
  "`Check that the invariant (readyTasks = UNION(pr).(pr: PRIORITIES | {tk | tk: TASK & tk: pxReadyTasksLists(pr)})) is preserved by the operation - ref 3.4'";
  (readyTasks\/{task} = UNION(pr).(pr: PRIORITIES | SET(tk).(tk: TASK & tk: (pxReadyTasksLists<+{uxPriority|->(pxReadyTasksLists(uxPriority)\/{task})})(pr))));
  "`Check that the invariant (readyTasks/\xTasksWaitingTermination = {}) is preserved by the operation - ref 3.4'";
  (readyTasks\/{task}/\xTasksWaitingTermination = {});
  "`Check that the invariant (xSuspendedTaskList/\readyTasks = {}) is preserved by the operation - ref 3.4'";
  (not(task: xSuspendedTaskList));
  "`Check that the invariant (pxDelayedTaskList/\readyTasks = {}) is preserved by the operation - ref 3.4'";
  (not(task: pxDelayedTaskList));
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & stack: STACK & new_heap: HEAP_SIZE & new_heap,stack = portMalloc(heap,usStackDepth) & task = (pcName,uxPriority,pvTaskCode)|->stack & not(stack = STACK_NULL) & uxTopUsedPriority<=uxPriority & uxCurrentNumberOfTasks = 0 & p1: PRIORITIES & p2: PRIORITIES & not(p1 = p2));
  "`Check that the invariant (!(p1,p2).(p1: PRIORITIES & p2: PRIORITIES & p1/=p2 => pxReadyTasksLists(p1)/\pxReadyTasksLists(p2) = {})) is preserved by the operation - ref 3.4'";
  ((pxReadyTasksLists<+{uxPriority|->(pxReadyTasksLists(uxPriority)\/{task})})(p1)/\(pxReadyTasksLists<+{uxPriority|->(pxReadyTasksLists(uxPriority)\/{task})})(p2) = {});
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & stack: STACK & new_heap: HEAP_SIZE & new_heap,stack = portMalloc(heap,usStackDepth) & task = (pcName,uxPriority,pvTaskCode)|->stack & not(stack = STACK_NULL) & uxTopUsedPriority<=uxPriority & uxCurrentNumberOfTasks = 0 & tk: readyTasks\/{task});
  "`Check that the invariant (!tk.(tk: readyTasks => getPriority(tk)<=getPriority(pxCurrentTCB))) is preserved by the operation - ref 3.4'";
  (getPriority(tk)<=getPriority(task));
  "`Check that the invariant (tasks = xSuspendedTaskList\/xTasksWaitingTermination\/pxDelayedTaskList\/readyTasks\/{pxCurrentTCB}) is preserved by the operation - ref 3.4'";
  (tasks\/{task} = xSuspendedTaskList\/xTasksWaitingTermination\/pxDelayedTaskList\/(readyTasks\/{task})\/{task});
  "`Check that the invariant (uxCurrentNumberOfTasks: NATURAL) is preserved by the operation - ref 3.4'";
  (uxCurrentNumberOfTasks+1: INTEGER);
  (0<=uxCurrentNumberOfTasks+1);
  "`Check that the invariant (uxCurrentNumberOfTasks = card(tasks)) is preserved by the operation - ref 3.4'";
  (uxCurrentNumberOfTasks+1 = card(tasks\/{task}));
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & stack: STACK & new_heap: HEAP_SIZE & new_heap,stack = portMalloc(heap,usStackDepth) & task = (pcName,uxPriority,pvTaskCode)|->stack & not(stack = STACK_NULL) & uxTopUsedPriority<=uxPriority & not(uxCurrentNumberOfTasks = 0) & xSchedulerRunning = pdFALSE);
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & stack: STACK & new_heap: HEAP_SIZE & new_heap,stack = portMalloc(heap,usStackDepth) & task = (pcName,uxPriority,pvTaskCode)|->stack & not(stack = STACK_NULL) & uxTopUsedPriority<=uxPriority & not(uxCurrentNumberOfTasks = 0) & xSchedulerRunning = pdFALSE & pr: PRIORITIES & tk: TASK & tk: (pxReadyTasksLists<+{uxPriority|->(pxReadyTasksLists(uxPriority)\/{task})})(pr));
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & stack: STACK & new_heap: HEAP_SIZE & new_heap,stack = portMalloc(heap,usStackDepth) & task = (pcName,uxPriority,pvTaskCode)|->stack & not(stack = STACK_NULL) & uxTopUsedPriority<=uxPriority & not(uxCurrentNumberOfTasks = 0) & xSchedulerRunning = pdFALSE & p1: PRIORITIES & p2: PRIORITIES & not(p1 = p2));
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & stack: STACK & new_heap: HEAP_SIZE & new_heap,stack = portMalloc(heap,usStackDepth) & task = (pcName,uxPriority,pvTaskCode)|->stack & not(stack = STACK_NULL) & uxTopUsedPriority<=uxPriority & not(uxCurrentNumberOfTasks = 0) & xSchedulerRunning = pdFALSE & tk: readyTasks\/{task});
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & stack: STACK & new_heap: HEAP_SIZE & new_heap,stack = portMalloc(heap,usStackDepth) & task = (pcName,uxPriority,pvTaskCode)|->stack & not(stack = STACK_NULL) & uxTopUsedPriority<=uxPriority & not(uxCurrentNumberOfTasks = 0) & not(uxTopUsedPriority<=uxPriority & xSchedulerRunning = pdFALSE));
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & stack: STACK & new_heap: HEAP_SIZE & new_heap,stack = portMalloc(heap,usStackDepth) & task = (pcName,uxPriority,pvTaskCode)|->stack & not(stack = STACK_NULL) & uxTopUsedPriority<=uxPriority & not(uxCurrentNumberOfTasks = 0) & not(uxTopUsedPriority<=uxPriority & xSchedulerRunning = pdFALSE) & pr: PRIORITIES & tk: TASK & tk: (pxReadyTasksLists<+{uxPriority|->(pxReadyTasksLists(uxPriority)\/{task})})(pr));
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & stack: STACK & new_heap: HEAP_SIZE & new_heap,stack = portMalloc(heap,usStackDepth) & task = (pcName,uxPriority,pvTaskCode)|->stack & not(stack = STACK_NULL) & uxTopUsedPriority<=uxPriority & not(uxCurrentNumberOfTasks = 0) & not(uxTopUsedPriority<=uxPriority & xSchedulerRunning = pdFALSE) & p1: PRIORITIES & p2: PRIORITIES & not(p1 = p2));
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & stack: STACK & new_heap: HEAP_SIZE & new_heap,stack = portMalloc(heap,usStackDepth) & task = (pcName,uxPriority,pvTaskCode)|->stack & not(stack = STACK_NULL) & uxTopUsedPriority<=uxPriority & not(uxCurrentNumberOfTasks = 0) & not(uxTopUsedPriority<=uxPriority & xSchedulerRunning = pdFALSE) & tk: readyTasks\/{task});
  (getPriority(tk)<=getPriority(pxCurrentTCB));
  (tasks\/{task} = xSuspendedTaskList\/xTasksWaitingTermination\/pxDelayedTaskList\/(readyTasks\/{task})\/{pxCurrentTCB});
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & stack: STACK & new_heap: HEAP_SIZE & new_heap,stack = portMalloc(heap,usStackDepth) & task = (pcName,uxPriority,pvTaskCode)|->stack & not(stack = STACK_NULL) & not(uxTopUsedPriority<=uxPriority) & uxCurrentNumberOfTasks = 0);
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & stack: STACK & new_heap: HEAP_SIZE & new_heap,stack = portMalloc(heap,usStackDepth) & task = (pcName,uxPriority,pvTaskCode)|->stack & not(stack = STACK_NULL) & not(uxTopUsedPriority<=uxPriority) & uxCurrentNumberOfTasks = 0 & pr: PRIORITIES & tk: TASK & tk: (pxReadyTasksLists<+{uxPriority|->(pxReadyTasksLists(uxPriority)\/{task})})(pr));
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & stack: STACK & new_heap: HEAP_SIZE & new_heap,stack = portMalloc(heap,usStackDepth) & task = (pcName,uxPriority,pvTaskCode)|->stack & not(stack = STACK_NULL) & not(uxTopUsedPriority<=uxPriority) & uxCurrentNumberOfTasks = 0 & p1: PRIORITIES & p2: PRIORITIES & not(p1 = p2));
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & stack: STACK & new_heap: HEAP_SIZE & new_heap,stack = portMalloc(heap,usStackDepth) & task = (pcName,uxPriority,pvTaskCode)|->stack & not(stack = STACK_NULL) & not(uxTopUsedPriority<=uxPriority) & uxCurrentNumberOfTasks = 0 & tk: readyTasks\/{task});
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & stack: STACK & new_heap: HEAP_SIZE & new_heap,stack = portMalloc(heap,usStackDepth) & task = (pcName,uxPriority,pvTaskCode)|->stack & not(stack = STACK_NULL) & not(uxTopUsedPriority<=uxPriority) & not(uxCurrentNumberOfTasks = 0) & not(uxTopUsedPriority<=uxPriority & xSchedulerRunning = pdFALSE));
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & stack: STACK & new_heap: HEAP_SIZE & new_heap,stack = portMalloc(heap,usStackDepth) & task = (pcName,uxPriority,pvTaskCode)|->stack & not(stack = STACK_NULL) & not(uxTopUsedPriority<=uxPriority) & not(uxCurrentNumberOfTasks = 0) & not(uxTopUsedPriority<=uxPriority & xSchedulerRunning = pdFALSE) & pr: PRIORITIES & tk: TASK & tk: (pxReadyTasksLists<+{uxPriority|->(pxReadyTasksLists(uxPriority)\/{task})})(pr));
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & stack: STACK & new_heap: HEAP_SIZE & new_heap,stack = portMalloc(heap,usStackDepth) & task = (pcName,uxPriority,pvTaskCode)|->stack & not(stack = STACK_NULL) & not(uxTopUsedPriority<=uxPriority) & not(uxCurrentNumberOfTasks = 0) & not(uxTopUsedPriority<=uxPriority & xSchedulerRunning = pdFALSE) & p1: PRIORITIES & p2: PRIORITIES & not(p1 = p2));
  ("`Local hypotheses'" & task: TASK & not(task: tasks) & stack: STACK & new_heap: HEAP_SIZE & new_heap,stack = portMalloc(heap,usStackDepth) & task = (pcName,uxPriority,pvTaskCode)|->stack & not(stack = STACK_NULL) & not(uxTopUsedPriority<=uxPriority) & not(uxCurrentNumberOfTasks = 0) & not(uxTopUsedPriority<=uxPriority & xSchedulerRunning = pdFALSE) & tk: readyTasks\/{task});
  ("`vTaskDelete preconditions in this component'" & pxTaskToDelete: TASK & INCLUDE_vTaskDelete = 1 & not(pxTaskToDelete: xTasksWaitingTermination) & pxTaskToDelete: tasks);
  ("`Local hypotheses'" & priority: PRIORITIES & priority = getPriority(pxTaskToDelete) & pxCurrentTCB = pxTaskToDelete);
  (pxReadyTasksLists<+{priority|->pxReadyTasksLists(priority)-{pxTaskToDelete}}: PRIORITIES +-> POW(TASK));
  ((pxReadyTasksLists<+{priority|->pxReadyTasksLists(priority)-{pxTaskToDelete}})~: POW(TASK) +-> PRIORITIES);
  ("`Local hypotheses'" & priority: PRIORITIES & priority = getPriority(pxTaskToDelete) & pxCurrentTCB = pxTaskToDelete & pr: PRIORITIES & tk: TASK & tk: (pxReadyTasksLists<+{priority|->pxReadyTasksLists(priority)-{pxTaskToDelete}})(pr));
  "`Check that the invariant (readyTasks <: TASK) is preserved by the operation - ref 3.4'";
  (readyTasks-{pxTaskToDelete}: POW(TASK));
  "`Check that the invariant (xSuspendedTaskList <: TASK) is preserved by the operation - ref 3.4'";
  (xSuspendedTaskList-{pxTaskToDelete}: POW(TASK));
  "`Check that the invariant (pxDelayedTaskList <: TASK) is preserved by the operation - ref 3.4'";
  (pxDelayedTaskList-{pxTaskToDelete}: POW(TASK));
  (readyTasks-{pxTaskToDelete} = UNION(pr).(pr: PRIORITIES | SET(tk).(tk: TASK & tk: (pxReadyTasksLists<+{priority|->pxReadyTasksLists(priority)-{pxTaskToDelete}})(pr))));
  "`Check that the invariant (xSuspendedTaskList/\xTasksWaitingTermination = {}) is preserved by the operation - ref 3.4'";
  (xSuspendedTaskList-{pxTaskToDelete}/\xTasksWaitingTermination = {});
  "`Check that the invariant (pxDelayedTaskList/\xTasksWaitingTermination = {}) is preserved by the operation - ref 3.4'";
  (pxDelayedTaskList-{pxTaskToDelete}/\xTasksWaitingTermination = {});
  "`Check that the invariant (pxDelayedTaskList/\xSuspendedTaskList = {}) is preserved by the operation - ref 3.4'";
  (pxDelayedTaskList-{pxTaskToDelete}/\xSuspendedTaskList-{pxTaskToDelete} = {});
  (readyTasks-{pxTaskToDelete}/\xTasksWaitingTermination = {});
  (xSuspendedTaskList-{pxTaskToDelete}/\readyTasks-{pxTaskToDelete} = {});
  (pxDelayedTaskList-{pxTaskToDelete}/\readyTasks-{pxTaskToDelete} = {});
  ("`Local hypotheses'" & priority: PRIORITIES & priority = getPriority(pxTaskToDelete) & pxCurrentTCB = pxTaskToDelete & p1: PRIORITIES & p2: PRIORITIES & not(p1 = p2));
  ((pxReadyTasksLists<+{priority|->pxReadyTasksLists(priority)-{pxTaskToDelete}})(p1)/\(pxReadyTasksLists<+{priority|->pxReadyTasksLists(priority)-{pxTaskToDelete}})(p2) = {});
  ("`Local hypotheses'" & priority: PRIORITIES & priority = getPriority(pxTaskToDelete) & pxCurrentTCB = pxTaskToDelete & tk: readyTasks & not(tk = pxTaskToDelete));
  (getPriority(tk)<=getPriority(TASK_NULL));
  (tasks = xSuspendedTaskList-{pxTaskToDelete}\/(xTasksWaitingTermination\/{pxTaskToDelete})\/pxDelayedTaskList-{pxTaskToDelete}\/readyTasks-{pxTaskToDelete}\/{TASK_NULL});
  "`Check that the invariant (uxTasksDeleted: NATURAL) is preserved by the operation - ref 3.4'";
  (uxTasksDeleted-1: INTEGER);
  (0<=uxTasksDeleted-1);
  ("`Local hypotheses'" & priority: PRIORITIES & priority = getPriority(pxTaskToDelete) & not(pxCurrentTCB = pxTaskToDelete));
  ("`Local hypotheses'" & priority: PRIORITIES & priority = getPriority(pxTaskToDelete) & not(pxCurrentTCB = pxTaskToDelete) & pr: PRIORITIES & tk: TASK & tk: (pxReadyTasksLists<+{priority|->pxReadyTasksLists(priority)-{pxTaskToDelete}})(pr));
  ("`Local hypotheses'" & priority: PRIORITIES & priority = getPriority(pxTaskToDelete) & not(pxCurrentTCB = pxTaskToDelete) & p1: PRIORITIES & p2: PRIORITIES & not(p1 = p2));
  ("`Local hypotheses'" & priority: PRIORITIES & priority = getPriority(pxTaskToDelete) & not(pxCurrentTCB = pxTaskToDelete) & tk: readyTasks & not(tk = pxTaskToDelete));
  (tasks = xSuspendedTaskList-{pxTaskToDelete}\/(xTasksWaitingTermination\/{pxTaskToDelete})\/pxDelayedTaskList-{pxTaskToDelete}\/readyTasks-{pxTaskToDelete}\/{pxCurrentTCB});
  ("`prvIdleTask preconditions in this component'" & pvParameters: PARAMETER);
  ("`Local hypotheses'" & task: TASK & task: xTasksWaitingTermination & pt: POINTER & tam: INTEGER & 0<=tam & tam = card(xTasksWaitingTermination) & sz: INTEGER & 0<=sz & pt,sz = getStack(task) & new_heap: HEAP_SIZE & new_heap = portFree(heap,pt,sz));
  "`Check preconditions of called operation, or While loop construction, or Assert predicates'";
  ("`Local hypotheses'" & task: TASK & task: xTasksWaitingTermination & pt: POINTER & tam: INTEGER & 0<=tam & tam = card(xTasksWaitingTermination) & sz: INTEGER & 0<=sz & pt,sz = getStack(task) & new_heap: HEAP_SIZE & new_heap = portFree(heap,pt,sz) & 1<=uxTasksDeleted & 1<=tam);
  "`Check that the invariant (tasks <: TASK) is preserved by the operation - ref 3.4'";
  (tasks-{task}: POW(TASK));
  "`Check that the invariant (xTasksWaitingTermination <: TASK) is preserved by the operation - ref 3.4'";
  (xTasksWaitingTermination-{task}: POW(TASK));
  "`Check that the invariant (xSuspendedTaskList/\xTasksWaitingTermination = {}) is preserved by the operation - ref 3.4'";
  (xSuspendedTaskList/\xTasksWaitingTermination-{task} = {});
  "`Check that the invariant (pxDelayedTaskList/\xTasksWaitingTermination = {}) is preserved by the operation - ref 3.4'";
  (pxDelayedTaskList/\xTasksWaitingTermination-{task} = {});
  "`Check that the invariant (readyTasks/\xTasksWaitingTermination = {}) is preserved by the operation - ref 3.4'";
  (readyTasks/\xTasksWaitingTermination-{task} = {});
  "`Check that the invariant (tasks = xSuspendedTaskList\/xTasksWaitingTermination\/pxDelayedTaskList\/readyTasks\/{pxCurrentTCB}) is preserved by the operation - ref 3.4'";
  (tasks-{task} = xSuspendedTaskList\/xTasksWaitingTermination-{task}\/pxDelayedTaskList\/readyTasks\/{pxCurrentTCB});
  "`Check that the invariant (uxCurrentNumberOfTasks: NATURAL) is preserved by the operation - ref 3.4'";
  (uxCurrentNumberOfTasks-1: INTEGER);
  (0<=uxCurrentNumberOfTasks-1);
  "`Check that the invariant (uxCurrentNumberOfTasks = card(tasks)) is preserved by the operation - ref 3.4'";
  (uxCurrentNumberOfTasks-1 = card(tasks-{task}));
  "`Check that the invariant (uxTasksDeleted: NATURAL) is preserved by the operation - ref 3.4'";
  ("`vTaskSuspend preconditions in this component'" & INCLUDE_vTaskSuspend = 1 & pxTaskToSuspend: TASK & pxTaskToSuspend: tasks);
  ("`Local hypotheses'" & not(pxTaskToSuspend: xSuspendedTaskList) & pxCurrentTCB = pxTaskToSuspend);
  "`Check that the invariant (pxReadyTasksLists: PRIORITIES >+> POW(TASK)) is preserved by the operation - ref 3.4'";
  (pxReadyTasksLists<+{getPriority(pxTaskToSuspend)|->pxReadyTasksLists(getPriority(pxTaskToSuspend))-{pxTaskToSuspend}}: PRIORITIES +-> POW(TASK));
  ((pxReadyTasksLists<+{getPriority(pxTaskToSuspend)|->pxReadyTasksLists(getPriority(pxTaskToSuspend))-{pxTaskToSuspend}})~: POW(TASK) +-> PRIORITIES);
  ("`Local hypotheses'" & not(pxTaskToSuspend: xSuspendedTaskList) & pxCurrentTCB = pxTaskToSuspend & pr: PRIORITIES & tk: TASK & tk: (pxReadyTasksLists<+{getPriority(pxTaskToSuspend)|->pxReadyTasksLists(getPriority(pxTaskToSuspend))-{pxTaskToSuspend}})(pr));
  "`Check that the invariant (!(pr,tk).(pr: PRIORITIES & tk: TASK & tk: pxReadyTasksLists(pr) => getPriority(tk) = pr)) is preserved by the operation - ref 3.4'";
  "`Check that the invariant (pxDelayedTaskList <: TASK) is preserved by the operation - ref 3.4'";
  (pxDelayedTaskList-{pxTaskToSuspend}: POW(TASK));
  "`Check that the invariant (readyTasks = UNION(pr).(pr: PRIORITIES | {tk | tk: TASK & tk: pxReadyTasksLists(pr)})) is preserved by the operation - ref 3.4'";
  (readyTasks = UNION(pr).(pr: PRIORITIES | SET(tk).(tk: TASK & tk: (pxReadyTasksLists<+{getPriority(pxTaskToSuspend)|->pxReadyTasksLists(getPriority(pxTaskToSuspend))-{pxTaskToSuspend}})(pr))));
  (xSuspendedTaskList\/{pxTaskToSuspend}/\xTasksWaitingTermination = {});
  (pxDelayedTaskList-{pxTaskToSuspend}/\xTasksWaitingTermination = {});
  "`Check that the invariant (pxDelayedTaskList/\xSuspendedTaskList = {}) is preserved by the operation - ref 3.4'";
  (pxDelayedTaskList-{pxTaskToSuspend}/\xSuspendedTaskList = {});
  "`Check that the invariant (xSuspendedTaskList/\readyTasks = {}) is preserved by the operation - ref 3.4'";
  (xSuspendedTaskList\/{pxTaskToSuspend}/\readyTasks = {});
  "`Check that the invariant (pxDelayedTaskList/\readyTasks = {}) is preserved by the operation - ref 3.4'";
  (pxDelayedTaskList-{pxTaskToSuspend}/\readyTasks = {});
  ("`Local hypotheses'" & not(pxTaskToSuspend: xSuspendedTaskList) & pxCurrentTCB = pxTaskToSuspend & p1: PRIORITIES & p2: PRIORITIES & not(p1 = p2));
  "`Check that the invariant (!(p1,p2).(p1: PRIORITIES & p2: PRIORITIES & p1/=p2 => pxReadyTasksLists(p1)/\pxReadyTasksLists(p2) = {})) is preserved by the operation - ref 3.4'";
  ((pxReadyTasksLists<+{getPriority(pxTaskToSuspend)|->pxReadyTasksLists(getPriority(pxTaskToSuspend))-{pxTaskToSuspend}})(p1)/\(pxReadyTasksLists<+{getPriority(pxTaskToSuspend)|->pxReadyTasksLists(getPriority(pxTaskToSuspend))-{pxTaskToSuspend}})(p2) = {});
  ("`Local hypotheses'" & not(pxTaskToSuspend: xSuspendedTaskList) & pxCurrentTCB = pxTaskToSuspend & tk: readyTasks);
  "`Check that the invariant (!tk.(tk: readyTasks => getPriority(tk)<=getPriority(pxCurrentTCB))) is preserved by the operation - ref 3.4'";
  (tasks = xSuspendedTaskList\/{pxTaskToSuspend}\/xTasksWaitingTermination\/pxDelayedTaskList-{pxTaskToSuspend}\/readyTasks\/{TASK_NULL});
  ("`Local hypotheses'" & not(pxTaskToSuspend: xSuspendedTaskList) & not(pxCurrentTCB = pxTaskToSuspend));
  ("`Local hypotheses'" & not(pxTaskToSuspend: xSuspendedTaskList) & not(pxCurrentTCB = pxTaskToSuspend) & pr: PRIORITIES & tk: TASK & tk: (pxReadyTasksLists<+{getPriority(pxTaskToSuspend)|->pxReadyTasksLists(getPriority(pxTaskToSuspend))-{pxTaskToSuspend}})(pr));
  ("`Local hypotheses'" & not(pxTaskToSuspend: xSuspendedTaskList) & not(pxCurrentTCB = pxTaskToSuspend) & p1: PRIORITIES & p2: PRIORITIES & not(p1 = p2));
  (tasks = xSuspendedTaskList\/{pxTaskToSuspend}\/xTasksWaitingTermination\/pxDelayedTaskList-{pxTaskToSuspend}\/readyTasks\/{pxCurrentTCB});
  ("`vTaskResume preconditions in this component'" & INCLUDE_vTaskSuspend = 1 & pxTaskToResume: xSuspendedTaskList);
  ("`Local hypotheses'" & pr: PRIORITIES & pr = getPriority(pxTaskToResume) & getPriority(pxCurrentTCB)<=pr);
  (pxReadyTasksLists<+{pr|->(pxReadyTasksLists(pr)\/{pxTaskToResume})}: PRIORITIES +-> POW(TASK));
  ((pxReadyTasksLists<+{pr|->(pxReadyTasksLists(pr)\/{pxTaskToResume})})~: POW(TASK) +-> PRIORITIES);
  ("`Local hypotheses'" & pr: PRIORITIES & pr = getPriority(pxTaskToResume) & getPriority(pxCurrentTCB)<=pr & pr$0: PRIORITIES & tk$0: TASK & tk$0: (pxReadyTasksLists<+{pr|->(pxReadyTasksLists(pr)\/{pxTaskToResume})})(pr$0));
  (getPriority(tk$0) = pr$0);
  "`Check that the invariant (xSuspendedTaskList <: TASK) is preserved by the operation - ref 3.4'";
  (xSuspendedTaskList-{pxTaskToResume}: POW(TASK));
  (readyTasks = UNION(pr$0).(pr$0: PRIORITIES | SET(tk).(tk: TASK & tk: (pxReadyTasksLists<+{pr|->(pxReadyTasksLists(pr)\/{pxTaskToResume})})(pr$0))));
  (xSuspendedTaskList-{pxTaskToResume}/\xTasksWaitingTermination = {});
  (pxDelayedTaskList/\xSuspendedTaskList-{pxTaskToResume} = {});
  (xSuspendedTaskList-{pxTaskToResume}/\readyTasks = {});
  ("`Local hypotheses'" & pr: PRIORITIES & pr = getPriority(pxTaskToResume) & getPriority(pxCurrentTCB)<=pr & p1: PRIORITIES & p2: PRIORITIES & not(p1 = p2));
  ((pxReadyTasksLists<+{pr|->(pxReadyTasksLists(pr)\/{pxTaskToResume})})(p1)/\(pxReadyTasksLists<+{pr|->(pxReadyTasksLists(pr)\/{pxTaskToResume})})(p2) = {});
  ("`Local hypotheses'" & pr: PRIORITIES & pr = getPriority(pxTaskToResume) & getPriority(pxCurrentTCB)<=pr & tk: readyTasks);
  (tasks = xSuspendedTaskList-{pxTaskToResume}\/xTasksWaitingTermination\/pxDelayedTaskList\/readyTasks\/{TASK_NULL});
  ("`Local hypotheses'" & pr: PRIORITIES & pr = getPriority(pxTaskToResume) & not(getPriority(pxCurrentTCB)<=pr));
  ("`Local hypotheses'" & pr: PRIORITIES & pr = getPriority(pxTaskToResume) & not(getPriority(pxCurrentTCB)<=pr) & pr$0: PRIORITIES & tk$0: TASK & tk$0: (pxReadyTasksLists<+{pr|->(pxReadyTasksLists(pr)\/{pxTaskToResume})})(pr$0));
  ("`Local hypotheses'" & pr: PRIORITIES & pr = getPriority(pxTaskToResume) & not(getPriority(pxCurrentTCB)<=pr) & p1: PRIORITIES & p2: PRIORITIES & not(p1 = p2));
  (tasks = xSuspendedTaskList-{pxTaskToResume}\/xTasksWaitingTermination\/pxDelayedTaskList\/readyTasks\/{pxCurrentTCB});
  ("`vTaskPrioritySet preconditions in this component'" & pxTask: TASK & uxNewPriority: PRIORITIES & INCLUDE_vTaskPrioritySet = 1);
  ("`Local hypotheses'" & name: NAME & priority: PRIORITIES & task_code: TASK_CODE & stack: STACK & name,priority,task_code,stack = pxTask & new_task: TASK & not(new_task: tasks) & new_task = (name,uxNewPriority,task_code)|->stack & not(uxNewPriority = priority) & uxTopUsedPriority+1<=uxNewPriority & pxTask: readyTasks & priority+1<=uxNewPriority);
  (pxReadyTasksLists<+({priority|->pxReadyTasksLists(priority)-{pxTask}}\/{uxNewPriority|->(pxReadyTasksLists(uxNewPriority)\/{new_task})}): PRIORITIES +-> POW(TASK));
  ((pxReadyTasksLists<+({priority|->pxReadyTasksLists(priority)-{pxTask}}\/{uxNewPriority|->(pxReadyTasksLists(uxNewPriority)\/{new_task})}))~: POW(TASK) +-> PRIORITIES);
  ("`Local hypotheses'" & name: NAME & priority: PRIORITIES & task_code: TASK_CODE & stack: STACK & name,priority,task_code,stack = pxTask & new_task: TASK & not(new_task: tasks) & new_task = (name,uxNewPriority,task_code)|->stack & not(uxNewPriority = priority) & uxTopUsedPriority+1<=uxNewPriority & pxTask: readyTasks & priority+1<=uxNewPriority & pr: PRIORITIES & tk: TASK & tk: (pxReadyTasksLists<+({priority|->pxReadyTasksLists(priority)-{pxTask}}\/{uxNewPriority|->(pxReadyTasksLists(uxNewPriority)\/{new_task})}))(pr));
  (readyTasks-{pxTask}: POW(TASK));
  (readyTasks-{pxTask}\/{new_task} = UNION(pr).(pr: PRIORITIES | SET(tk).(tk: TASK & tk: (pxReadyTasksLists<+({priority|->pxReadyTasksLists(priority)-{pxTask}}\/{uxNewPriority|->(pxReadyTasksLists(uxNewPriority)\/{new_task})}))(pr))));
  (readyTasks-{pxTask}\/{new_task}/\xTasksWaitingTermination = {});
  (not(new_task: xSuspendedTaskList));
  (xSuspendedTaskList/\readyTasks-{pxTask} = {});
  (not(new_task: pxDelayedTaskList));
  (pxDelayedTaskList/\readyTasks-{pxTask} = {});
  ("`Local hypotheses'" & name: NAME & priority: PRIORITIES & task_code: TASK_CODE & stack: STACK & name,priority,task_code,stack = pxTask & new_task: TASK & not(new_task: tasks) & new_task = (name,uxNewPriority,task_code)|->stack & not(uxNewPriority = priority) & uxTopUsedPriority+1<=uxNewPriority & pxTask: readyTasks & priority+1<=uxNewPriority & p1: PRIORITIES & p2: PRIORITIES & not(p1 = p2));
  ((pxReadyTasksLists<+({priority|->pxReadyTasksLists(priority)-{pxTask}}\/{uxNewPriority|->(pxReadyTasksLists(uxNewPriority)\/{new_task})}))(p1)/\(pxReadyTasksLists<+({priority|->pxReadyTasksLists(priority)-{pxTask}}\/{uxNewPriority|->(pxReadyTasksLists(uxNewPriority)\/{new_task})}))(p2) = {});
  ("`Local hypotheses'" & name: NAME & priority: PRIORITIES & task_code: TASK_CODE & stack: STACK & name,priority,task_code,stack = pxTask & new_task: TASK & not(new_task: tasks) & new_task = (name,uxNewPriority,task_code)|->stack & not(uxNewPriority = priority) & uxTopUsedPriority+1<=uxNewPriority & pxTask: readyTasks & priority+1<=uxNewPriority & tk: readyTasks-{pxTask}\/{new_task});
  (tasks = xSuspendedTaskList\/xTasksWaitingTermination\/pxDelayedTaskList\/(readyTasks-{pxTask}\/{new_task})\/{pxCurrentTCB});
  ("`Local hypotheses'" & name: NAME & priority: PRIORITIES & task_code: TASK_CODE & stack: STACK & name,priority,task_code,stack = pxTask & new_task: TASK & not(new_task: tasks) & new_task = (name,uxNewPriority,task_code)|->stack & not(uxNewPriority = priority) & uxTopUsedPriority+1<=uxNewPriority & pxTask: readyTasks & not(priority+1<=uxNewPriority));
  (pxReadyTasksLists<+{getPriority(pxCurrentTCB)|->(pxReadyTasksLists(getPriority(pxCurrentTCB))\/{pxCurrentTCB})}: PRIORITIES +-> POW(TASK));
  ((pxReadyTasksLists<+{getPriority(pxCurrentTCB)|->(pxReadyTasksLists(getPriority(pxCurrentTCB))\/{pxCurrentTCB})})~: POW(TASK) +-> PRIORITIES);
  ("`Local hypotheses'" & name: NAME & priority: PRIORITIES & task_code: TASK_CODE & stack: STACK & name,priority,task_code,stack = pxTask & new_task: TASK & not(new_task: tasks) & new_task = (name,uxNewPriority,task_code)|->stack & not(uxNewPriority = priority) & uxTopUsedPriority+1<=uxNewPriority & pxTask: readyTasks & not(priority+1<=uxNewPriority) & pr: PRIORITIES & tk: TASK & tk: (pxReadyTasksLists<+{getPriority(pxCurrentTCB)|->(pxReadyTasksLists(getPriority(pxCurrentTCB))\/{pxCurrentTCB})})(pr));
  (readyTasks = UNION(pr).(pr: PRIORITIES | SET(tk).(tk: TASK & tk: (pxReadyTasksLists<+{getPriority(pxCurrentTCB)|->(pxReadyTasksLists(getPriority(pxCurrentTCB))\/{pxCurrentTCB})})(pr))));
  ("`Local hypotheses'" & name: NAME & priority: PRIORITIES & task_code: TASK_CODE & stack: STACK & name,priority,task_code,stack = pxTask & new_task: TASK & not(new_task: tasks) & new_task = (name,uxNewPriority,task_code)|->stack & not(uxNewPriority = priority) & uxTopUsedPriority+1<=uxNewPriority & pxTask: readyTasks & not(priority+1<=uxNewPriority) & p1: PRIORITIES & p2: PRIORITIES & not(p1 = p2));
  ((pxReadyTasksLists<+{getPriority(pxCurrentTCB)|->(pxReadyTasksLists(getPriority(pxCurrentTCB))\/{pxCurrentTCB})})(p1)/\(pxReadyTasksLists<+{getPriority(pxCurrentTCB)|->(pxReadyTasksLists(getPriority(pxCurrentTCB))\/{pxCurrentTCB})})(p2) = {});
  ("`Local hypotheses'" & name: NAME & priority: PRIORITIES & task_code: TASK_CODE & stack: STACK & name,priority,task_code,stack = pxTask & new_task: TASK & not(new_task: tasks) & new_task = (name,uxNewPriority,task_code)|->stack & not(uxNewPriority = priority) & uxTopUsedPriority+1<=uxNewPriority & pxTask: readyTasks & not(priority+1<=uxNewPriority) & tk: readyTasks);
  (tasks = xSuspendedTaskList\/xTasksWaitingTermination\/pxDelayedTaskList\/readyTasks\/{TASK_NULL});
  ("`Local hypotheses'" & name: NAME & priority: PRIORITIES & task_code: TASK_CODE & stack: STACK & name,priority,task_code,stack = pxTask & new_task: TASK & not(new_task: tasks) & new_task = (name,uxNewPriority,task_code)|->stack & not(uxNewPriority = priority) & uxTopUsedPriority+1<=uxNewPriority & not(pxTask: readyTasks) & pxTask: xSuspendedTaskList);
  (xSuspendedTaskList-{pxTask}: POW(TASK));
  (xSuspendedTaskList-{pxTask}\/{new_task}/\xTasksWaitingTermination = {});
  (pxDelayedTaskList/\xSuspendedTaskList-{pxTask} = {});
  (xSuspendedTaskList-{pxTask}\/{new_task}/\readyTasks = {});
  (tasks = xSuspendedTaskList-{pxTask}\/{new_task}\/xTasksWaitingTermination\/pxDelayedTaskList\/readyTasks\/{pxCurrentTCB});
  ("`Local hypotheses'" & name: NAME & priority: PRIORITIES & task_code: TASK_CODE & stack: STACK & name,priority,task_code,stack = pxTask & new_task: TASK & not(new_task: tasks) & new_task = (name,uxNewPriority,task_code)|->stack & not(uxNewPriority = priority) & uxTopUsedPriority+1<=uxNewPriority & not(pxTask: readyTasks) & not(pxTask: xSuspendedTaskList));
  (pxDelayedTaskList-{pxTask}: POW(TASK));
  (pxDelayedTaskList-{pxTask}\/{new_task}/\xTasksWaitingTermination = {});
  (pxDelayedTaskList-{pxTask}\/{new_task}/\xSuspendedTaskList = {});
  (pxDelayedTaskList-{pxTask}\/{new_task}/\readyTasks = {});
  (tasks = xSuspendedTaskList\/xTasksWaitingTermination\/(pxDelayedTaskList-{pxTask}\/{new_task})\/readyTasks\/{pxCurrentTCB});
  ("`Local hypotheses'" & name: NAME & priority: PRIORITIES & task_code: TASK_CODE & stack: STACK & name,priority,task_code,stack = pxTask & new_task: TASK & not(new_task: tasks) & new_task = (name,uxNewPriority,task_code)|->stack & not(uxNewPriority = priority) & not(uxTopUsedPriority+1<=uxNewPriority) & pxTask: readyTasks & priority+1<=uxNewPriority);
  ("`Local hypotheses'" & name: NAME & priority: PRIORITIES & task_code: TASK_CODE & stack: STACK & name,priority,task_code,stack = pxTask & new_task: TASK & not(new_task: tasks) & new_task = (name,uxNewPriority,task_code)|->stack & not(uxNewPriority = priority) & not(uxTopUsedPriority+1<=uxNewPriority) & pxTask: readyTasks & priority+1<=uxNewPriority & pr: PRIORITIES & tk: TASK & tk: (pxReadyTasksLists<+({priority|->pxReadyTasksLists(priority)-{pxTask}}\/{uxNewPriority|->(pxReadyTasksLists(uxNewPriority)\/{new_task})}))(pr));
  ("`Local hypotheses'" & name: NAME & priority: PRIORITIES & task_code: TASK_CODE & stack: STACK & name,priority,task_code,stack = pxTask & new_task: TASK & not(new_task: tasks) & new_task = (name,uxNewPriority,task_code)|->stack & not(uxNewPriority = priority) & not(uxTopUsedPriority+1<=uxNewPriority) & pxTask: readyTasks & priority+1<=uxNewPriority & p1: PRIORITIES & p2: PRIORITIES & not(p1 = p2));
  ("`Local hypotheses'" & name: NAME & priority: PRIORITIES & task_code: TASK_CODE & stack: STACK & name,priority,task_code,stack = pxTask & new_task: TASK & not(new_task: tasks) & new_task = (name,uxNewPriority,task_code)|->stack & not(uxNewPriority = priority) & not(uxTopUsedPriority+1<=uxNewPriority) & pxTask: readyTasks & priority+1<=uxNewPriority & tk: readyTasks-{pxTask}\/{new_task});
  ("`Local hypotheses'" & name: NAME & priority: PRIORITIES & task_code: TASK_CODE & stack: STACK & name,priority,task_code,stack = pxTask & new_task: TASK & not(new_task: tasks) & new_task = (name,uxNewPriority,task_code)|->stack & not(uxNewPriority = priority) & not(uxTopUsedPriority+1<=uxNewPriority) & pxTask: readyTasks & not(priority+1<=uxNewPriority));
  ("`Local hypotheses'" & name: NAME & priority: PRIORITIES & task_code: TASK_CODE & stack: STACK & name,priority,task_code,stack = pxTask & new_task: TASK & not(new_task: tasks) & new_task = (name,uxNewPriority,task_code)|->stack & not(uxNewPriority = priority) & not(uxTopUsedPriority+1<=uxNewPriority) & pxTask: readyTasks & not(priority+1<=uxNewPriority) & pr: PRIORITIES & tk: TASK & tk: (pxReadyTasksLists<+{getPriority(pxCurrentTCB)|->(pxReadyTasksLists(getPriority(pxCurrentTCB))\/{pxCurrentTCB})})(pr));
  ("`Local hypotheses'" & name: NAME & priority: PRIORITIES & task_code: TASK_CODE & stack: STACK & name,priority,task_code,stack = pxTask & new_task: TASK & not(new_task: tasks) & new_task = (name,uxNewPriority,task_code)|->stack & not(uxNewPriority = priority) & not(uxTopUsedPriority+1<=uxNewPriority) & pxTask: readyTasks & not(priority+1<=uxNewPriority) & p1: PRIORITIES & p2: PRIORITIES & not(p1 = p2));
  ("`Local hypotheses'" & name: NAME & priority: PRIORITIES & task_code: TASK_CODE & stack: STACK & name,priority,task_code,stack = pxTask & new_task: TASK & not(new_task: tasks) & new_task = (name,uxNewPriority,task_code)|->stack & not(uxNewPriority = priority) & not(uxTopUsedPriority+1<=uxNewPriority) & pxTask: readyTasks & not(priority+1<=uxNewPriority) & tk: readyTasks);
  ("`Local hypotheses'" & name: NAME & priority: PRIORITIES & task_code: TASK_CODE & stack: STACK & name,priority,task_code,stack = pxTask & new_task: TASK & not(new_task: tasks) & new_task = (name,uxNewPriority,task_code)|->stack & not(uxNewPriority = priority) & not(uxTopUsedPriority+1<=uxNewPriority) & not(pxTask: readyTasks) & pxTask: xSuspendedTaskList);
  ("`Local hypotheses'" & name: NAME & priority: PRIORITIES & task_code: TASK_CODE & stack: STACK & name,priority,task_code,stack = pxTask & new_task: TASK & not(new_task: tasks) & new_task = (name,uxNewPriority,task_code)|->stack & not(uxNewPriority = priority) & not(uxTopUsedPriority+1<=uxNewPriority) & not(pxTask: readyTasks) & not(pxTask: xSuspendedTaskList));
  "`Check that the invariant (uxSchedulerSuspended: NATURAL) is preserved by the operation - ref 3.4'";
  (uxSchedulerSuspended+1: INTEGER);
  (0<=uxSchedulerSuspended+1);
  ("`xTaskResumeAll preconditions in this component'" & 1<=uxSchedulerSuspended);
  (uxSchedulerSuspended-1: INTEGER);
  (0<=uxSchedulerSuspended-1)
END
&
THEORY EnumerateX 
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, local_op == OK)
END
