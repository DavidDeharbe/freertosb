/* Queue_r
* Author: Stephenson Galvão
* Creation date:  Thu Dec 03 2009
*/
REFINEMENT
  Queue_r
REFINES
  Queue
  
SEES
  Types,
  Scheduler
  
ABSTRACT_VARIABLES
  
  queues,
  queues_msg,
  queues_msg_empty,
   queues_msg_full,
  
  semaphores,
  semaphores_busy,
  
  mutexes,
  mutexes_busy,
  
  queue_receiving, 
  queue_sending,
  mutex_holder,
 	first_sending,
  first_receiving,
  
  
  /************************************************************************************************************************/

  queue_size,
  queue_items_r,
  queue_quant
  
INVARIANT
  queue_size : QUEUE +-> QUEUE_LENGTH &
  queue_quant : QUEUE +-> QUEUE_QUANT &
  queue_items_r : QUEUE +-> iseq(ITEM) &
  
  dom(queue_size) = queues &
  dom(queue_quant) = queues &
  dom(queue_items_r) = dom(queue_items) &
  
  
  !queue.(queue:queues => queue_quant(queue) <= queue_size(queue) )&
  
  !queue.(queue:queues_msg => 
    ran(queue_items_r(queue)) = queue_items(queue) &
    size(queue_items_r(queue))=queue_quant(queue)) &
  
  !queue.(queue:queues_msg_empty=>queue_quant(queue)=0)&
  !queue.(queue:queues_msg_full=>queue_quant(queue)=queue_size(queue)) &
  !queue.(queue:queues_msg & queue_quant(queue)=queue_size(queue) =>queue:queues_msg_full)&
  !queue.(queue:queues_msg & queue_quant(queue)=queue_size(queue) =>queue:queues_msg_full)&
  !queue.(queue:queues_msg & queue_quant(queue)=0 =>queue:queues_msg_empty)&
  
  
  !queue.(queue:queues_msg & queue/:queues_msg_full=>queue_quant(queue)<queue_size(queue)) &
  !queue.(queue:queues_msg & queue/:queues_msg_empty=>queue_quant(queue)>0) &
  !queue.(queue:queues_msg & queue_quant(queue)>0 => queue/:queues_msg_empty) &
  !queue.(queue:queues_msg & queue_quant(queue)<queue_size(queue) => queue/:queues_msg_full)&

  
  
  !semaphore.(semaphore:semaphores_busy => queue_quant(semaphore)=0) &
  !semaphore.(semaphore:semaphores & queue_quant(semaphore)=0 =>semaphore:semaphores_busy) &
    
  !semaphore.(semaphore:semaphores & semaphore/:semaphores_busy => queue_quant(semaphore)/=0) &
  !semaphore.(semaphore:semaphores & queue_quant(semaphore)/=0 => semaphore/:semaphores_busy) &
  
  !mutex.(mutex:mutexes => queue_size(mutex)=1) &
  
  !mutex.(mutex:mutexes_busy => queue_quant(mutex)=0 ) &
  !mutex.(mutex:mutexes & queue_quant(mutex)=0 => mutex:mutexes_busy) &
  
  !mutex.(mutex:mutexes & mutex/:mutexes_busy => queue_quant(mutex)=1 ) &
  !mutex.(mutex:mutexes & queue_quant(mutex)=1 => mutex/:mutexes_busy)
  
  
  
  
/*
CONSTANTS
  queue_is_full
  
PROPERTIES
  queue_is_full:QUEUE * (QUEUE+->iseq(ITEM)) * (QUEUE+->NAT) --> BOOL &
  queue_is_full = %(queue,items,queue_size).(queue:QUEUE & items:(QUEUE+->iseq(ITEM)) & queue_size:(QUEUE+->NAT)
  | bool(queue_size(queue) = size(items(queue))))
*/
INITIALISATION
  
  queues := {}||
  queues_msg:={}||
  queue_receiving := {}||
  queue_sending := {}||
  semaphores:={}||
  semaphores_busy:={}||
  mutexes:={}||
  mutexes_busy:={}||
  mutex_holder:={}||
  queue_size := {} ||
  queue_items_r := {}||
  queue_quant:={}||
  queues_msg_empty:={}||
  queues_msg_full:={}||
  first_sending :={}||
  first_receiving :={}
OPERATIONS
  
  xQueueHandle <-- q_queueCreate(uxQueueLength, uxItemSize) =
  BEGIN   
    ANY
      pxQueue 
    WHERE
      pxQueue : QUEUE & 
      pxQueue /: queues
    THEN	
      queues := queues \/ {pxQueue}||
      queues_msg:= queues_msg \/ {pxQueue}||
      queue_items_r := queue_items_r \/ {pxQueue |-> []} ||
      queue_size:= queue_size \/ {pxQueue|->uxQueueLength}||
      queue_receiving := queue_receiving \/ {pxQueue |-> {}} ||
      queue_sending := queue_sending \/ {pxQueue |-> {}}||
      queue_quant:=queue_quant\/ {pxQueue |-> 0}||
      queues_msg_empty:=queues_msg_empty\/{pxQueue}||
      xQueueHandle:=pxQueue||
      first_sending:=first_sending\/{pxQueue|->TASK_NULL}||
      first_receiving:=first_receiving\/{pxQueue|->TASK_NULL}
    END		    
  END;
  
  
  q_queueDelete(pxQueue) =
  BEGIN
    queues := queues - {pxQueue}||
    queues_msg := queues_msg - {pxQueue} ||
    queue_items_r := {pxQueue} <<| queue_items_r  ||
    queue_size := {pxQueue} <<| queue_size||
    queue_receiving := {pxQueue} <<| queue_receiving ||
    queue_sending := {pxQueue} <<| queue_sending ||
    first_sending := {pxQueue} <<| first_sending||
		first_receiving := {pxQueue} <<| first_receiving||
    queue_quant:={pxQueue}<<|queue_quant||
    queues_msg_empty:=queues_msg_empty- {pxQueue}||
    queues_msg_full:=queues_msg_full- {pxQueue}
  END;
  
   q_sendItem(pxQueue, pxItem, copy_position) =
  BEGIN
    IF copy_position = queueSEND_TO_BACK THEN
      queue_items_r(pxQueue) := queue_items_r(pxQueue) <- pxItem
    ELSE
      queue_items_r(pxQueue) := pxItem -> queue_items_r(pxQueue) 
    END||
    IF queue_receiving(pxQueue)/={} THEN
      ANY n_receiving, n_first
      WHERE
        n_receiving:POW(TASK) &
        n_first:TASK &
        n_receiving = (queue_receiving(pxQueue)-{first_receiving(pxQueue)})&
        n_first:n_receiving
      THEN
        queue_receiving(pxQueue) := n_receiving||
      	first_receiving(pxQueue):= n_first
      END
    END|| 
    IF pxQueue:queues_msg_empty THEN
      queues_msg_empty := queues_msg_empty-{pxQueue}
    END||
    IF queue_quant(pxQueue)+1=queue_size(pxQueue) THEN
      queues_msg_full := queues_msg_full\/{pxQueue}
    END||
    queue_quant(pxQueue):= queue_quant(pxQueue)+1
  END;
  
  xItem <-- q_receivedItem(pxQueue,justPeeking) =
  BEGIN
    xItem:=first(queue_items_r(pxQueue))||
    IF justPeeking = FALSE THEN        	    
      IF queue_sending(pxQueue)/={} THEN
        ANY n_sending,n_first
        WHERE
          n_sending:POW(TASK) &
          n_first:TASK &
          n_sending = (queue_sending(pxQueue) - {first_sending(pxQueue)}) &
          n_first:n_sending
        THEN
          queue_items_r(pxQueue) := tail( queue_items_r(pxQueue) ) ||
          queue_sending(pxQueue) := n_sending||            
          first_sending(pxQueue):=n_first||
          IF pxQueue: queues_msg_full THEN
            queues_msg_full:=queues_msg_full-{pxQueue}
          END ||
          IF queue_quant(pxQueue)-1 = 0 THEN
            queues_msg_empty := queues_msg_empty\/{pxQueue}
          END||
          queue_quant(pxQueue):= queue_quant(pxQueue)-1
        END
      END
    END
  END;
  
  q_insertTaskWaitingToSend(pxQueue, pxTask) =
  BEGIN
    queue_sending(pxQueue) := queue_sending(pxQueue) \/ {pxTask}||
    IF queue_sending(pxQueue)={} THEN
      first_sending(pxQueue):=pxTask
    END
  END;
  
  q_insertTaskWaitingToReceive(pxQueue, pxTask) =
  BEGIN
    queue_receiving(pxQueue) := queue_receiving(pxQueue) \/ {pxTask}||
    IF queue_receiving(pxQueue)={} THEN
      first_receiving(pxQueue):=pxTask
    END
  END	;
  
  q_removeFromEventListQueue(task) =
  BEGIN
    ANY
      pxQueue, n_receiving , n_first
    WHERE
      pxQueue:queues &
      task:queue_receiving(pxQueue) &
      n_receiving: POW(TASK) &
      n_receiving = queue_receiving(pxQueue)-{first_receiving(pxQueue)} &
      n_first:TASK&
      n_first: queue_receiving(pxQueue)
    THEN
      queue_receiving(pxQueue) := n_receiving||
     	first_receiving(pxQueue):=n_first
    END ||
    ANY
      pxQueue, n_sending ,n_first
    WHERE
      pxQueue:queues &
      n_sending: POW(TASK) &
      n_first:TASK &
      task:queue_sending(pxQueue) &
      n_sending = queue_sending(pxQueue) -{first_sending(pxQueue)} &
      n_first = first_sending(pxQueue)
    THEN
      queue_sending(pxQueue) := n_sending||
			first_sending(pxQueue):=n_first
    END
  END; 
  
  rSemaphore<--q_createSemaphore(maxCount,initialCount)=
  BEGIN
    ANY 
      semaphore
    WHERE
      semaphore:QUEUE &
      semaphore/:queues
    THEN
      queues:= queues \/ {semaphore} ||
      queue_receiving := queue_receiving \/ {semaphore |-> {}} ||
      first_receiving := first_receiving \/ {semaphore|-> TASK_NULL}||
      queue_sending := queue_sending \/ {semaphore |-> {}}||
      first_sending := first_sending \/ {semaphore|-> TASK_NULL}||
      semaphores:= semaphores \/ {semaphore} ||
      queue_size:= queue_size \/ {semaphore |->maxCount}||
      queue_quant:=queue_quant\/ {semaphore |-> initialCount}||
      IF initialCount=0 THEN
        semaphores_busy:=semaphores_busy\/{semaphore}
      ELSE
        skip
      END||
      rSemaphore:=semaphore
    END
  END;
  
  /* @TODO Colocar o conjunto de semáforos de acordo com a quantidade de itens inseridos
  */
  
  q_deleteSemaphore(semaphore)=
  PRE
    semaphore:semaphores
  THEN
    queues := queues - {semaphore}||
    semaphores := semaphores - {semaphore} ||
    queue_receiving := {semaphore} <<| queue_receiving ||
    queue_sending := {semaphore} <<| queue_sending ||
    queue_size:= {semaphore} <<|queue_size||
    queue_quant:= {semaphore} <<| queue_quant||
    IF 
      semaphore:semaphores_busy 
    THEN
      semaphores_busy := semaphores_busy-{semaphore}
    END
  END;
  
 	q_takeSemaphore(semaphore)=
  BEGIN
    queue_quant(semaphore):=queue_quant(semaphore)-1||
    IF queue_quant(semaphore)-1 =0 THEN
      semaphores_busy:= semaphores_busy \/ {semaphore}
    END||
    ANY
      n_sending,n_first
    WHERE
      n_sending:POW(TASK) &
      n_sending=queue_sending(semaphore)-{first_sending(semaphore)} &
      n_first:TASK&
      n_first:n_sending
    THEN
      queue_sending(semaphore):=n_sending||
      first_sending(semaphore):=n_first
    END
  END;
  
  q_giveSemaphore(semaphore)=
  BEGIN
    IF queue_quant(semaphore)<queue_size(semaphore)
    THEN
      queue_quant(semaphore):=queue_quant(semaphore)+1||
      IF queue_quant(semaphore)=0 THEN
        semaphores_busy := semaphores_busy - {semaphore}
      END||
      ANY n_receiving, n_first
      WHERE
        n_receiving:POW(TASK) &
        n_receiving = queue_receiving(semaphore)-{first_receiving(semaphore)}&
        n_first:TASK &
        n_first: n_receiving
      THEN
        queue_receiving(semaphore):=n_receiving ||
        first_receiving(semaphore):=n_first
      END
    END
  END;

  
  rMutex<--q_createMutex =
  BEGIN
    ANY 
      mutex
    WHERE
      mutex : QUEUE &
      mutex /: queues 
    THEN
      queues:=queues\/{mutex}||
      mutexes:=mutexes\/{mutex}||
      queue_receiving := queue_receiving \/ {mutex |-> {}} ||
      queue_sending := queue_sending\/ {mutex|-> {}}||
      mutex_holder := mutex_holder\/ {mutex|-> TASK_NULL}||
      queue_size:= queue_size \/ {mutex |->1}||
      queue_quant:=queue_quant\/ {mutex |-> 1}||
      rMutex:=mutex
    END
  END;
  
  q_takeMutex(mutex,task)=
  BEGIN
    queue_quant(mutex) := queue_quant(mutex)-1||
    mutexes_busy := mutexes_busy \/ {mutex}||
    mutex_holder(mutex):=task 
  END;
  
  q_giveMutex(mutex)=
  BEGIN
    queue_quant(mutex) := queue_quant(mutex)+1||
    mutexes_busy:=mutexes_busy-{mutex}||
    mutex_holder(mutex):=TASK_NULL||
    ANY n_receiving, n_first
    WHERE
      n_receiving:POW(TASK)&
      n_receiving = queue_receiving(mutex)-{first_receiving(mutex)} &
      n_first:TASK &
      n_first:n_receiving
    THEN
      queue_receiving(mutex):= n_receiving||
      first_receiving(mutex):= n_first
    END
  END;
  
  q_endScheduler=
  BEGIN
    queues := {}||
    queues_msg:={}||
    queue_receiving := {}||
    first_receiving:={}||
    queue_sending := {}||
    first_sending :={}||
    semaphores:={}||
    semaphores_busy:={}||
    mutexes:={}||
    mutexes_busy:={}||
    mutex_holder:={}||
    queue_quant:={}||
    queue_size:={}||
    queues_msg_empty:={}||
    queues_msg_full:={}||
    queue_items_r:={}
  END;
  
  q_resumeAll(unblocked)=
  BEGIN
    IF queue_sending/={} 
    THEN
      ANY 
        n_sending,n_first
      WHERE
        n_sending:QUEUE +-> POW(TASK) &
        dom(n_sending) = dom(queue_sending) &
        n_sending = remove_task(queue_sending,unblocked) &
        n_first:QUEUE +-> TASK &
        dom(n_first) = dom(first_sending) &
        !(q1).(q1:queues & q1:dom(n_first) & n_sending(q1)/={} => n_first(q1):n_sending(q1)) 
      THEN
        queue_sending:=n_sending||
        first_sending:=n_first
      END  
    END||
    
    IF queue_receiving/={} 
    THEN
      ANY 
        n_receiving,n_first
      WHERE
        n_receiving:QUEUE +-> POW(TASK) &
        dom(n_receiving) = dom(queue_receiving)&
        n_receiving = remove_task(queue_receiving,unblocked) &
        n_first:QUEUE +-> TASK &
        dom(n_first) = dom(first_receiving) &
        !(q1).(q1:queues & q1:dom(n_first) & n_receiving(q1)/={} => n_first(q1):n_receiving(q1)) 
      THEN
        queue_receiving:=n_receiving||
        first_receiving:=n_first
      END  
    END
  END
  
  
END
