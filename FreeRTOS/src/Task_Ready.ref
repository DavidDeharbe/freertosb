/* Task_Ready
 * Author: stepgalvao
 * Creation date: Sat Jun 19 2010
 */
REFINEMENT
 Task_Ready
REFINES
 Task

SEES
 FreeRTOSConfig ,
 Types ,
 Scheduler

ABSTRACT_VARIABLES
 active ,
 tasks ,
 blocked ,
 runable ,
 suspended ,
 running ,
 idle,
 
 /**************************************************************************************************************************/
 ready
 
INVARIANT
  ready : FIN(TASK) &
  ready<:runable &
  ready = runable - {running}
  
  
ASSERTIONS
  running/:ready
  
INITIALISATION
 active := FALSE ||
 tasks , blocked , runable , suspended, ready := {}, {}, {}, {}, {} ||
 idle :: TASK ||
 running :: TASK

OPERATIONS
  result <-- t_create ( priority ) =
  BEGIN
    ANY task , n_ready, nrunning
    WHERE
      task : TASK & 
      task /: tasks &  
      n_ready <: tasks & 
      n_ready = runable \/ { task } & 
      task /= TASK_NULL &
      nrunning : n_ready
    THEN
      tasks := tasks \/ { task } ||
      CHOICE
        ready := n_ready
      OR
        running:= nrunning||
        ready:= n_ready - {nrunning}
      END ||
      result := task
    END
  END
  ;

  t_delete ( atask ) =
  BEGIN
    tasks := tasks - { atask } ||
    IF atask : runable THEN
      runable := runable- { atask }||
      IF atask = running THEN
        IF active = TRUE THEN
          ANY nrunning
          WHERE
            nrunning:ready
          THEN
            running:=nrunning||
            ready := ready - {nrunning}
          END
        END
      ELSE
        ready := ready - { atask }
      END
    ELSIF atask : blocked THEN
      blocked := blocked - { atask }
    ELSIF atask : suspended THEN
      suspended := suspended - { atask }
    END
  END;
    
  t_yield =
  BEGIN
    ANY nrunning
    WHERE
      nrunning:ready
    THEN
      running:=nrunning||
      ready := ready - {nrunning} \/ {running}
    END
  END;
  
  t_suspend ( stask ) =
  BEGIN
    IF stask : runable THEN
      ANY n_runable
      WHERE
        n_runable <: tasks & 
        n_runable = runable - { stask }
      THEN
        runable := n_runable ||
        IF stask = running THEN
          ANY
            nrunning
          WHERE
            nrunning:ready
          THEN
            running := nrunning||
            ready := (ready -{nrunning}) - {stask}
          END
        ELSE
          ready:= ready - {stask}
        END
      END
    ELSIF stask : blocked THEN
      blocked := blocked - { stask }
    END ||
    suspended := suspended \/ { stask }
  END;

 t_resume (rtask) =
 BEGIN
   ANY n_runable
   WHERE
     n_runable <: tasks & 
		 n_runable = runable \/ { rtask }
   THEN
     runable := n_runable ||
     CHOICE
       ANY
         nrunning, nready
       WHERE
         nready<:tasks &
         nready = ready \/ {rtask} &
         nrunning:nready
       THEN
         running := nrunning||
         ready:= (nready-{nrunning})\/{running}
       END
     OR
       ready := ready\/{rtask}
     END
   END ||
   suspended := suspended - { rtask }
 END
 ;

 priority <-- t_getPriority ( atask ) =
 PRE
   atask : TASK & atask : tasks
 THEN
   priority :: PRIORITY
 END
 ;

 result <-- t_getCurrent =
 BEGIN
   result := running
 END
 ;

 result <-- t_getNumberOfTasks =
 BEGIN
   result := card ( tasks )
 END
 ;

  t_delayTask ( ticks , task ) =
  BEGIN
    ANY n_runable
    WHERE
      n_runable <: tasks & 
      n_runable = runable - { running }
    THEN
      runable := n_runable ||
      ANY 
        nrunning
      WHERE
        nrunning:ready
      THEN
        running:=nrunning||
        ready:=(ready-{nrunning})
      END
    END ||
    blocked := blocked \/ { running }
  END;

 t_startScheduler =
 BEGIN
   active := TRUE ||
   ANY idle_task , n_runable
   WHERE
     idle_task : TASK & idle_task /: tasks &  n_runable <: tasks & n_runable = runable \/ { idle_task }
   THEN
     idle := idle_task ||
     tasks := tasks \/ { idle_task } ||
     running :: n_runable
   END
 END
 ;

 t_endScheduler =
 BEGIN
   active := FALSE ||
   tasks , blocked , suspended , runable, ready := {},{},{},{},{} 
 END
 ;

  t_resumeAll ( unblocked ) =
  BEGIN
    IF unblocked /= {}
    THEN
      ANY n_runable, nready
      WHERE
        n_runable <: tasks &
        nready<:tasks & 
        n_runable = runable \/ unblocked&
        nready=ready\/unblocked
      THEN
        runable := n_runable ||
        CHOICE
          ANY 
            nrunning
          WHERE
            nrunning : nready
          THEN
            running := nrunning||
            ready:= (nready-{nrunning})\/{running}
          END
        OR
          ready:=nready
        END
      END ||
      blocked := blocked - unblocked
    END
  END;

  t_unblock ( task ) =
  BEGIN
    blocked := blocked - { task } ||
    ANY n_runable, nready
    WHERE
      n_runable <: tasks & 
      nready <:tasks & 
      n_runable = runable \/ { task } & 
      nready = ready\/{ task }
    THEN
      runable := n_runable ||
      CHOICE
        ANY
          nrunning
        WHERE
          nrunning:nready
        THEN
          running:= nrunning||
          ready:= (nready -{nrunning})\/{running}
        END
      OR
        ready := nready
      END
    END
  END;

 t_removeFromEventList ( task ) =
 BEGIN
   IF task : blocked
   THEN
     blocked := blocked - { task }
   END ||
   IF task : suspended
   THEN
     suspended := suspended - { task }
   END ||
   ANY n_runable, nready
   WHERE
     n_runable <: tasks &
     nready<:tasks &
     n_runable = runable \/ { task } &
     nready = ready \/ { task }
   THEN
     runable := n_runable ||
     CHOICE
       ANY
         nrunning
       WHERE
         nrunning:nready
       THEN
         running := nrunning||
         ready:= (nready -{nrunning}) \/{running}
       END
     OR
       ready:=nready
     END
   END
 END;

 t_setPriority ( task , priority ) =
 BEGIN
   CHOICE
     ANY
       nrunning
     WHERE
       nrunning:ready
     THEN
       running := nrunning ||
       ready:= (ready\/{running})-{nrunning}
     END
   OR
     skip
   END
 END
 ;

 t_suspendAll =
 PRE
   active = TRUE
 THEN
   active := FALSE
 END
 ;

 t_priorityInherit ( holderTask , xTicksToWait ) =
 BEGIN
   ANY n_runable, nrunning
   WHERE
     n_runable <: tasks & 
     n_runable = runable - {running} &
     nrunning:ready
   THEN
     running :=nrunning ||
     ready:= (ready - {nrunning})||
     runable := n_runable
   END ||
   blocked := blocked \/ { running }
 END
 ;

 t_returnPriority ( btask ) =
 BEGIN
   IF btask : blocked
   THEN
     blocked := blocked - { btask }
   END ||
   IF btask : suspended
   THEN
     suspended := suspended - { btask }
   END ||
   ANY n_runable,nready,nrunning
   WHERE
     n_runable <: tasks & 
     nready<:tasks&
     n_runable = runable \/ {btask}&
     nready= ready \/ {btask}&
     nrunning:nready
   THEN
     runable := n_runable ||
     CHOICE
       running:=nrunning||
       ready:=(nready-{nrunning})\/{running}
     OR
       ready:=nready
     END
   END
 END


END
