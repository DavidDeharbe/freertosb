THEORY ProofList IS
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.72,(_f(187) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.71,(_f(187) & _f(54) => _f(101));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.70,(_f(187) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.69,(_f(186) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.68,(_f(186) & _f(54) => _f(98));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.67,(_f(186) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.66,(_f(186) & _f(46) => _f(170));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.65,(_f(185) & _f(54) => _f(158));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.64,(_f(185) & _f(54) => _f(56));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.63,(_f(185) & _f(54) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.62,(_f(185) & _f(48) => _f(154));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.61,(_f(185) & _f(46) => _f(170));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.60,(_f(184) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.59,(_f(184) & _f(54) => _f(101));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.58,(_f(184) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.57,(_f(183) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.56,(_f(183) & _f(54) => _f(98));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.55,(_f(183) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.54,(_f(183) & _f(46) => _f(170));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.53,(_f(182) & _f(54) => _f(158));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.52,(_f(182) & _f(54) => _f(56));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.51,(_f(182) & _f(54) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.50,(_f(182) & _f(48) => _f(154));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.49,(_f(182) & _f(46) => _f(170));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.48,(_f(181) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.47,(_f(181) & _f(54) => _f(101));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.46,(_f(181) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.45,(_f(180) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.44,(_f(180) & _f(54) => _f(98));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.43,(_f(180) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.42,(_f(180) & _f(46) => _f(170));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.41,(_f(179) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.40,(_f(179) & _f(54) => _f(101));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.39,(_f(179) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.38,(_f(178) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.37,(_f(178) & _f(54) => _f(98));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.36,(_f(178) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.35,(_f(178) & _f(46) => _f(170));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.34,(_f(177) & _f(54) => _f(158));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.33,(_f(177) & _f(54) => _f(56));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.32,(_f(177) & _f(54) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.31,(_f(177) & _f(48) => _f(154));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.30,(_f(177) & _f(46) => _f(170));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.29,(_f(176) & _f(54) => _f(158));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.28,(_f(176) & _f(54) => _f(56));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.27,(_f(176) & _f(54) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.26,(_f(176) & _f(48) => _f(154));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.25,(_f(176) & _f(46) => _f(170));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.24,(_f(175) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.23,(_f(175) & _f(54) => _f(101));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.22,(_f(175) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.21,(_f(174) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.20,(_f(174) & _f(54) => _f(98));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.19,(_f(174) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.18,(_f(174) & _f(46) => _f(170));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.17,(_f(173) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.16,(_f(173) & _f(54) => _f(101));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.15,(_f(173) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.14,(_f(172) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.13,(_f(172) & _f(54) => _f(98));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.12,(_f(172) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.11,(_f(172) & _f(46) => _f(170));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.10,(_f(171) & _f(54) => _f(158));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.9,(_f(171) & _f(54) => _f(56));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.8,(_f(171) & _f(54) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.7,(_f(171) & _f(48) => _f(154));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.6,(_f(171) & _f(46) => _f(170));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.5,(_f(169) & _f(54) => _f(158));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.4,(_f(169) & _f(54) => _f(56));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.3,(_f(169) & _f(54) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.2,(_f(169) & _f(48) => _f(154));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(168) & t_returnPriority.1,(_f(169) & _f(46) => _f(170));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(163) & t_priorityInherit.15,(_f(167) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(163) & t_priorityInherit.14,(_f(167) & _f(54) => _f(98));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(163) & t_priorityInherit.13,(_f(167) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(163) & t_priorityInherit.12,(_f(167) & _f(59) => _f(113));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(163) & t_priorityInherit.11,(_f(167) & _f(59) => _f(70));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(163) & t_priorityInherit.10,(_f(167) & _f(59) => _f(112));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(163) & t_priorityInherit.9,(_f(164) & _f(54) => _f(158));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(163) & t_priorityInherit.8,(_f(164) & _f(54) => _f(56));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(163) & t_priorityInherit.7,(_f(164) & _f(54) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(163) & t_priorityInherit.6,(_f(164) & _f(52) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(163) & t_priorityInherit.5,(_f(164) & _f(50) => _f(165));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(163) & t_priorityInherit.4,(_f(164) & _f(48) => _f(154));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(163) & t_priorityInherit.3,(_f(164) & _f(44) => _f(113));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(163) & t_priorityInherit.2,(_f(164) & _f(44) => _f(70));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(163) & t_priorityInherit.1,(_f(164) & _f(44) => _f(112));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.37,(_f(162) & _f(54) => _f(158));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.36,(_f(162) & _f(54) => _f(81));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.35,(_f(162) & _f(54) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.34,(_f(162) & _f(52) => _f(156));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.33,(_f(162) & _f(50) => _f(155));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.32,(_f(162) & _f(48) => _f(154));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.31,(_f(162) & _f(126) => _f(153));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.30,(_f(161) & _f(54) => _f(158));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.29,(_f(161) & _f(54) => _f(81));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.28,(_f(161) & _f(54) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.27,(_f(161) & _f(52) => _f(156));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.26,(_f(161) & _f(50) => _f(155));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.25,(_f(161) & _f(48) => _f(154));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.24,(_f(161) & _f(126) => _f(153));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.23,(_f(160) & _f(54) => _f(158));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.22,(_f(160) & _f(54) => _f(157));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.21,(_f(160) & _f(54) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.20,(_f(160) & _f(52) => _f(156));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.19,(_f(160) & _f(50) => _f(155));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.18,(_f(160) & _f(48) => _f(154));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.17,(_f(160) & _f(126) => _f(153));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.16,(_f(160) & _f(46) => _f(152));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.15,(_f(159) & _f(54) => _f(158));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.14,(_f(159) & _f(54) => _f(81));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.13,(_f(159) & _f(54) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.12,(_f(159) & _f(52) => _f(156));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.11,(_f(159) & _f(50) => _f(155));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.10,(_f(159) & _f(48) => _f(154));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.9,(_f(159) & _f(126) => _f(153));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.8,(_f(151) & _f(54) => _f(158));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.7,(_f(151) & _f(54) => _f(157));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.6,(_f(151) & _f(54) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.5,(_f(151) & _f(52) => _f(156));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.4,(_f(151) & _f(50) => _f(155));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.3,(_f(151) & _f(48) => _f(154));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.2,(_f(151) & _f(126) => _f(153));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(150) & t_setPriority.1,(_f(151) & _f(46) => _f(152));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.54,(_f(149) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.53,(_f(149) & _f(54) => _f(101));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.52,(_f(149) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.51,(_f(149) & _f(139) => _f(45));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.50,(_f(148) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.49,(_f(148) & _f(54) => _f(98));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.48,(_f(148) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.47,(_f(148) & _f(46) => _f(137));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.46,(_f(148) & _f(139) => _f(45));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.45,(_f(147) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.44,(_f(147) & _f(54) => _f(101));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.43,(_f(147) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.42,(_f(147) & _f(139) => _f(45));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.41,(_f(146) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.40,(_f(146) & _f(54) => _f(98));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.39,(_f(146) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.38,(_f(146) & _f(46) => _f(137));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.37,(_f(146) & _f(139) => _f(45));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.36,(_f(145) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.35,(_f(145) & _f(54) => _f(101));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.34,(_f(145) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.33,(_f(145) & _f(139) => _f(45));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.32,(_f(144) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.31,(_f(144) & _f(54) => _f(101));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.30,(_f(144) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.29,(_f(144) & _f(139) => _f(45));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.28,(_f(143) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.27,(_f(143) & _f(54) => _f(98));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.26,(_f(143) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.25,(_f(143) & _f(46) => _f(137));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.24,(_f(143) & _f(139) => _f(45));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.23,(_f(142) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.22,(_f(142) & _f(54) => _f(98));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.21,(_f(142) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.20,(_f(142) & _f(46) => _f(137));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.19,(_f(142) & _f(139) => _f(45));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.18,(_f(141) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.17,(_f(141) & _f(54) => _f(101));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.16,(_f(141) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.15,(_f(141) & _f(139) => _f(45));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.14,(_f(140) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.13,(_f(140) & _f(54) => _f(101));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.12,(_f(140) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.11,(_f(140) & _f(139) => _f(45));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.10,(_f(138) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.9,(_f(138) & _f(54) => _f(98));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.8,(_f(138) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.7,(_f(138) & _f(46) => _f(137));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.6,(_f(138) & _f(139) => _f(45));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.5,(_f(136) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.4,(_f(136) & _f(54) => _f(98));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.3,(_f(136) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.2,(_f(136) & _f(46) => _f(137));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(135) & t_removeFromEventList.1,(_f(136) & _f(44) => _f(45));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(127) & t_resumeAll.3,(_f(133) & _f(134) => _f(98));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(127) & t_resumeAll.2,(_f(128) & _f(131) => _f(132));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(127) & t_resumeAll.1,(_f(128) & _f(129) => _f(130));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(124) & t_endScheduler.2,(_f(125) & _f(48) => _f(7));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(124) & t_endScheduler.1,(_f(125) & _f(126) => _f(5));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(115) & t_startScheduler.8,(_f(116) & _f(54) => _f(123));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(115) & t_startScheduler.7,(_f(116) & _f(54) => _f(91));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(115) & t_startScheduler.6,(_f(116) & _f(54) => _f(122));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(115) & t_startScheduler.5,(_f(116) & _f(52) => _f(121));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(115) & t_startScheduler.4,(_f(116) & _f(48) => _f(120));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(115) & t_startScheduler.3,(_f(116) & _f(69) => _f(119));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(115) & t_startScheduler.2,(_f(116) & _f(69) => _f(118));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(115) & t_startScheduler.1,(_f(116) & _f(44) => _f(117));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(110) & t_delayTask.4,(_f(114) & _f(54) => _f(98));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(110) & t_delayTask.3,(_f(111) & _f(69) => _f(113));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(110) & t_delayTask.2,(_f(111) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(110) & t_delayTask.1,(_f(111) & _f(44) => _f(112));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(107) & t_getPriority.1,(_f(108) & _f(44) => _f(109));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(102) & t_resume.9,(_f(106) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(102) & t_resume.8,(_f(106) & _f(54) => _f(101));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(102) & t_resume.7,(_f(106) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(102) & t_resume.6,(_f(106) & _f(59) => _f(104));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(102) & t_resume.5,(_f(103) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(102) & t_resume.4,(_f(103) & _f(54) => _f(98));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(102) & t_resume.3,(_f(103) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(102) & t_resume.2,(_f(103) & _f(46) => _f(105));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(102) & t_resume.1,(_f(103) & _f(44) => _f(104));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(93) & t_suspend.6,(_f(100) & _f(54) => _f(101));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(93) & t_suspend.5,(_f(99) & _f(67) => _f(95));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(93) & t_suspend.4,(_f(97) & _f(54) => _f(98));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(93) & t_suspend.3,(_f(94) & _f(69) => _f(96));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(93) & t_suspend.2,(_f(94) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(93) & t_suspend.1,(_f(94) & _f(67) => _f(95));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(88) & t_yield.4,(_f(89) & _f(54) => _f(92));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(88) & t_yield.3,(_f(89) & _f(54) => _f(91));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(88) & t_yield.2,(_f(89) & _f(54) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(88) & t_yield.1,(_f(89) & _f(44) => _f(70));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.44,(_f(87) & _f(54) => _f(75));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.43,(_f(87) & _f(54) => _f(81));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.42,(_f(87) & _f(54) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.41,(_f(86) & _f(52) => _f(74));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.40,(_f(86) & _f(50) => _f(73));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.39,(_f(86) & _f(48) => _f(72));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.38,(_f(85) & _f(54) => _f(75));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.37,(_f(85) & _f(54) => _f(81));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.36,(_f(85) & _f(54) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.35,(_f(84) & _f(52) => _f(74));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.34,(_f(84) & _f(50) => _f(73));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.33,(_f(84) & _f(48) => _f(72));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.32,(_f(83) & _f(54) => _f(75));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.31,(_f(83) & _f(54) => _f(81));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.30,(_f(83) & _f(54) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.29,(_f(82) & _f(52) => _f(74));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.28,(_f(82) & _f(50) => _f(73));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.27,(_f(82) & _f(48) => _f(72));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.26,(_f(80) & _f(54) => _f(75));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.25,(_f(80) & _f(54) => _f(81));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.24,(_f(80) & _f(54) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.23,(_f(79) & _f(52) => _f(74));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.22,(_f(79) & _f(50) => _f(73));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.21,(_f(79) & _f(48) => _f(72));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.20,(_f(78) & _f(54) => _f(75));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.19,(_f(78) & _f(54) => _f(60));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.18,(_f(78) & _f(54) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.17,(_f(77) & _f(52) => _f(74));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.16,(_f(77) & _f(50) => _f(73));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.15,(_f(77) & _f(48) => _f(72));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.14,(_f(77) & _f(67) => _f(68));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.13,(_f(76) & _f(52) => _f(74));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.12,(_f(76) & _f(50) => _f(73));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.11,(_f(76) & _f(48) => _f(72));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.10,(_f(76) & _f(67) => _f(68));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.9,(_f(66) & _f(54) => _f(75));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.8,(_f(66) & _f(54) => _f(56));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.7,(_f(66) & _f(54) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.6,(_f(66) & _f(52) => _f(74));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.5,(_f(66) & _f(50) => _f(73));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.4,(_f(66) & _f(48) => _f(72));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.3,(_f(66) & _f(69) => _f(71));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.2,(_f(66) & _f(69) => _f(70));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(65) & t_delete.1,(_f(66) & _f(67) => _f(68));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.29,(_f(64) & _f(52) => _f(53));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.28,(_f(64) & _f(50) => _f(51));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.27,(_f(64) & _f(48) => _f(49));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.26,(_f(64) & _f(59) => _f(45));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.25,(_f(63) & _f(52) => _f(53));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.24,(_f(63) & _f(50) => _f(51));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.23,(_f(63) & _f(48) => _f(49));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.22,(_f(63) & _f(46) => _f(47));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.21,(_f(63) & _f(59) => _f(45));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.20,(_f(61) & _f(52) => _f(53));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.19,(_f(61) & _f(50) => _f(51));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.18,(_f(61) & _f(48) => _f(49));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.17,(_f(61) & _f(46) => _f(62));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.16,(_f(61) & _f(59) => _f(45));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.15,(_f(58) & _f(54) => _f(57));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.14,(_f(58) & _f(54) => _f(60));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.13,(_f(58) & _f(54) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.12,(_f(58) & _f(52) => _f(53));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.11,(_f(58) & _f(50) => _f(51));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.10,(_f(58) & _f(48) => _f(49));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.9,(_f(58) & _f(59) => _f(45));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.8,(_f(43) & _f(54) => _f(57));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.7,(_f(43) & _f(54) => _f(56));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.6,(_f(43) & _f(54) => _f(55));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.5,(_f(43) & _f(52) => _f(53));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.4,(_f(43) & _f(50) => _f(51));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.3,(_f(43) & _f(48) => _f(49));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.2,(_f(43) & _f(46) => _f(47));
  _f(1) & _f(2) & _f(8) & _f(41) & _f(42) & t_create.1,(_f(43) & _f(44) => _f(45));
  _f(1) & _f(2) & _f(8) & AssertionLemmas.11,(_f(38) & _f(39) => _f(40));
  _f(1) & _f(2) & _f(8) & AssertionLemmas.10,(_f(35) & _f(36) => _f(37));
  _f(1) & _f(2) & _f(8) & AssertionLemmas.9,(_f(32) & _f(33) => _f(34));
  _f(1) & _f(2) & _f(8) & AssertionLemmas.8,(_f(29) & _f(30) => _f(31));
  _f(1) & _f(2) & _f(8) & AssertionLemmas.7,(_f(26) & _f(27) => _f(28));
  _f(1) & _f(2) & _f(8) & AssertionLemmas.6,(_f(23) & _f(24) => _f(25));
  _f(1) & _f(2) & _f(8) & AssertionLemmas.5,(_f(20) & _f(21) => _f(22));
  _f(1) & _f(2) & _f(8) & AssertionLemmas.4,(_f(17) & _f(18) => _f(19));
  _f(1) & _f(2) & _f(8) & AssertionLemmas.3,(_f(14) & _f(15) => _f(16));
  _f(1) & _f(2) & _f(8) & AssertionLemmas.2,(_f(11) & _f(12) => _f(13));
  _f(1) & _f(2) & _f(8) & AssertionLemmas.1,(_f(9) => _f(10));
  _f(1) & _f(2) & Initialisation.2,(_f(3) & _f(6) => _f(7));
  _f(1) & _f(2) & Initialisation.1,(_f(3) & _f(4) => _f(5))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES & configMAX_PRIORITIES<=2147483647 & 1<=configMAX_PRIORITIES & configTOTAL_HEAP_SIZE: INTEGER & 0<=configTOTAL_HEAP_SIZE & configTOTAL_HEAP_SIZE<=2147483647 & configMINIMAL_STACK_SIZE: INTEGER & 0<=configMINIMAL_STACK_SIZE & configMINIMAL_STACK_SIZE<=2147483647 & INCLUDE_uxTaskPriorityGet: BIT & INCLUDE_vTaskDelete: BIT & INCLUDE_vTaskSuspend: BIT & INCLUDE_xTaskGetSchedulerState: BIT & INCLUDE_vTaskPrioritySet: BIT & INCLUDE_xTaskGetCurrentTaskHandle: BIT & INCLUDE_vTaskDelayUntil: BIT & INCLUDE_vTaskDelay: BIT & PRIORITY = 0..configMAX_PRIORITIES-1 & BIT = 0..1 & MAX_DELAY: 0..2147483647 & 1<=MAX_DELAY & NULL_PARAMETER: PARAMETER & PRIORITY: POW(NAT) & TICK: POW(NAT) & TICK = 0..MAX_DELAY & TICK_INCREMENT: TICK*TICK +-> TICK & dom(TICK_INCREMENT) = TICK*TICK & TICK_INCREMENT = %(tick,inc).(tick: TICK & inc: TICK | (tick+inc) mod MAX_DELAY) & QUEUE_NULL: QUEUE & ITEM_NULL: ITEM & ITEM_EMPTY: ITEM & TASK_NULL: TASK & REMOVE_EVENT: TASK*POW(QUEUE)*(QUEUE +-> POW(TASK)) +-> (QUEUE +-> POW(TASK)) & REMOVE_EVENT = %(task,queues,pending).(task: TASK & queues: POW(QUEUE) & pending: QUEUE +-> POW(TASK) | %queue.(queue: queues & queue: dom(pending) | pending(queue)-{task})) & semGIVE_BLOCK_TIME: TICK & IDLE_PRIORITY: PRIORITY & IDLE_PRIORITY = 0 & QUEUE_LENGTH: POW(NAT) & QUEUE_LENGTH = 1..2147483647 & QUEUE_QUANT: POW(NAT) & QUEUE_QUANT = 0..2147483647 & NAME: FIN(INTEGER) & not(NAME = {}) & PARAMETER: FIN(INTEGER) & not(PARAMETER = {}) & TASK: FIN(INTEGER) & not(TASK = {}) & STACK: FIN(INTEGER) & not(STACK = {}) & TASK_CODE: FIN(INTEGER) & not(TASK_CODE = {}) & ITEM: FIN(INTEGER) & not(ITEM = {}) & QUEUE: FIN(INTEGER) & not(QUEUE = {}) & (1..3)*{SCHEDULER_STATE}: FIN(NATURAL*{SCHEDULER_STATE}) & not((1..3)*{SCHEDULER_STATE} = {}) & (1..2)*{COPY_POSITION}: FIN(NATURAL*{COPY_POSITION}) & not((1..2)*{COPY_POSITION} = {}) & (1..3)*{QUEUE_TYPE}: FIN(NATURAL*{QUEUE_TYPE}) & not((1..3)*{QUEUE_TYPE} = {}) & (1..10)*{ERROR_DEFINITION}: FIN(NATURAL*{ERROR_DEFINITION}) & not((1..10)*{ERROR_DEFINITION} = {}) & "`Component properties'" & max_prt: PRIORITY*PRIORITY +-> PRIORITY & dom(max_prt) = PRIORITY*PRIORITY & max_prt = %(tmp_mprt_ready,t_prt).(tmp_mprt_ready: PRIORITY & t_prt: PRIORITY | max({tmp_mprt_ready}\/{t_prt})) & schedule_p: FIN(TASK)*(TASK +-> PRIORITY) +-> FIN(TASK) & schedule_p = %(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) | tasks/\dom(t_priority|>{max(t_priority[tasks])})));
  ("`Seen and used machines assertions'" & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES & BIT: POW(NATURAL) & QUEUE_LENGTH: POW(QUEUE_QUANT));
  ("`Local hypotheses'" & running$2: TASK & idle$2: TASK);
  "`Check that the invariant (t_priority$1: TASK +-> PRIORITY) is established by the initialisation - ref 4.3, 5.4'";
  ({}: TASK +-> PRIORITY);
  "`Check that the invariant (dom(t_priority$1) = tasks$1) is established by the initialisation - ref 4.3, 5.4'";
  (dom({}) = {});
  ("`Previous components invariants'" & active$1: BOOL & tickCount$1: TICK & tickMissed$1: TICK & tasks$1: FIN(TASK) & blocked$1: FIN(TASK) & blocked$1: POW(tasks$1) & unblocked$1: FIN(TASK) & unblocked$1: POW(blocked$1) & runable$1: FIN(TASK) & runable$1: POW(tasks$1) & suspended$1: FIN(TASK) & suspended$1: POW(tasks$1) & runable$1/\blocked$1 = {} & blocked$1/\suspended$1 = {} & suspended$1/\runable$1 = {} & tasks$1 = suspended$1\/blocked$1\/runable$1 & running$1: TASK & idle$1: TASK & (active$1 = TRUE => not(runable$1 = {}) & running$1: runable$1 & idle$1: runable$1 & not(TASK_NULL: tasks$1)) & "`Previous components assertions'" & (active$1 = TRUE => not(runable$1 = {})) & (active$1 = TRUE => not(tasks$1 = {})) & (active$1 = TRUE => idle$1: runable$1) & (active$1 = TRUE => not(idle$1: blocked$1)) & (active$1 = TRUE => not(idle$1: suspended$1)) & (active$1 = TRUE => not(idle$1 = TASK_NULL)) & (active$1 = TRUE => running$1: runable$1) & (active$1 = TRUE => not(running$1: blocked$1)) & (active$1 = TRUE => not(running$1: suspended$1)) & "`Component invariant'" & t_priority$1: TASK +-> PRIORITY & dom(t_priority$1) = tasks$1 & t_bpriority$1: TASK +-> PRIORITY & dom(t_bpriority$1) = tasks$1 & (active$1 = TRUE => t_priority$1(idle$1) = IDLE_PRIORITY & t_priority$1(running$1) = max(t_priority$1[runable$1]) & IDLE_PRIORITY<=min(t_priority$1[tasks$1])) & tickCount = tickCount$1 & tickMissed = tickMissed$1 & active = active$1 & tasks = tasks$1 & blocked = blocked$1 & runable = runable$1 & suspended = suspended$1 & running = running$1 & idle = idle$1 & unblocked = unblocked$1);
  "`Check assertion (PRIORITY <: NATURAL) deduction - ref 3.2, 4.2, 5.3'";
  (PRIORITY: POW(NATURAL));
  ("`Local hypotheses'" & PRIORITY: POW(NATURAL) & active$1 = TRUE);
  "`Check assertion (active = TRUE => running: dom(t_priority)) deduction - ref 3.2, 4.2, 5.3'";
  (running$1: dom(t_priority$1));
  ("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active$1 = TRUE => running$1: dom(t_priority$1)) & active$1 = TRUE);
  "`Check assertion (active = TRUE => {t_priority[runable]} <: FIN(PRIORITY)) deduction - ref 3.2, 4.2, 5.3'";
  (t_priority$1[runable$1]: FIN(PRIORITY));
  ("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active$1 = TRUE => running$1: dom(t_priority$1)) & (active$1 = TRUE => t_priority$1[runable$1]: FIN(PRIORITY)) & active$1 = TRUE & atask: TASK & atask: runable$1 & not(atask = idle$1));
  "`Check assertion (active = TRUE => !atask.(atask: TASK & atask: runable & atask/=idle => runable/={atask})) deduction - ref 3.2, 4.2, 5.3'";
  (not(runable$1 = {atask}));
  ("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active$1 = TRUE => running$1: dom(t_priority$1)) & (active$1 = TRUE => t_priority$1[runable$1]: FIN(PRIORITY)) & (active$1 = TRUE => !atask.(atask: TASK & atask: runable$1 & not(atask = idle$1) => not(runable$1 = {atask}))) & active$1 = TRUE);
  "`Check assertion (active = TRUE => t_priority[runable]/={}) deduction - ref 3.2, 4.2, 5.3'";
  (not(t_priority$1[runable$1] = {}));
  ("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active$1 = TRUE => running$1: dom(t_priority$1)) & (active$1 = TRUE => t_priority$1[runable$1]: FIN(PRIORITY)) & (active$1 = TRUE => !atask.(atask: TASK & atask: runable$1 & not(atask = idle$1) => not(runable$1 = {atask}))) & (active$1 = TRUE => not(t_priority$1[runable$1] = {})) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & rtask$0: TASK & rtask$0: tasks$0 & rtask$0: schedule_p(tasks$0,t_priority$0));
  "`Check assertion (!(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks]))) deduction - ref 3.2, 4.2, 5.3'";
  (t_priority$0(rtask$0) = max(t_priority$0[tasks$0]));
  ("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active$1 = TRUE => running$1: dom(t_priority$1)) & (active$1 = TRUE => t_priority$1[runable$1]: FIN(PRIORITY)) & (active$1 = TRUE => !atask.(atask: TASK & atask: runable$1 & not(atask = idle$1) => not(runable$1 = {atask}))) & (active$1 = TRUE => not(t_priority$1[runable$1] = {})) & !(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & (tasks: POW(dom(t_priority)) & not(!(rtask$0).(rtask$0: TASK & rtask$0: tasks & rtask$0: schedule_p(tasks,t_priority) => t_priority(rtask$0) = max(t_priority[tasks])))) => tasks = {}) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & rtask$0: TASK & rtask$0: tasks$0 & t_priority$0(rtask$0) = max(t_priority$0[tasks$0]) & dtask$0: TASK & dtask$0: tasks$0 & not(rtask$0 = dtask$0));
  "`Check assertion (!(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & rtask/=dtask => t_priority(rtask) = max(t_priority[tasks-{dtask}]))) deduction - ref 3.2, 4.2, 5.3'";
  (t_priority$0(rtask$0) = max(t_priority$0[tasks$0-{dtask$0}]));
  ("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active$1 = TRUE => running$1: dom(t_priority$1)) & (active$1 = TRUE => t_priority$1[runable$1]: FIN(PRIORITY)) & (active$1 = TRUE => !atask.(atask: TASK & atask: runable$1 & not(atask = idle$1) => not(runable$1 = {atask}))) & (active$1 = TRUE => not(t_priority$1[runable$1] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & (tasks: POW(dom(t_priority)) & not(!(rtask,dtask$2).(rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask$2: TASK & dtask$2: tasks & not(rtask = dtask$2) => t_priority(rtask) = max(t_priority[tasks-{dtask$2}])))) => tasks = {}) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & run$0: TASK & run$0: tasks$0 & t_priority$0(run$0) = max(t_priority$0[tasks$0]) & atask$0: TASK & not(atask$0: tasks$0) & t_priority$0(atask$0)+1<=t_priority$0(run$0));
  "`Check assertion (!(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & atask/:tasks & t_priority(atask)<t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}]))) deduction - ref 3.2, 4.2, 5.3'";
  (t_priority$0(run$0) = max(t_priority$0[tasks$0\/{atask$0}]));
  ("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active$1 = TRUE => running$1: dom(t_priority$1)) & (active$1 = TRUE => t_priority$1[runable$1]: FIN(PRIORITY)) & (active$1 = TRUE => !atask.(atask: TASK & atask: runable$1 & not(atask = idle$1) => not(runable$1 = {atask}))) & (active$1 = TRUE => not(t_priority$1[runable$1] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & (tasks: POW(dom(t_priority)) & not(!(run,atask$2).(run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask$2: TASK & not(atask$2: tasks) & t_priority(atask$2)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask$2}])))) => tasks = {}) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & tasks$0: POW(dom(t_priority$0)) & not(tasks$0 = {}) & rtask$0: TASK & rtask$0: tasks$0 & not(tasks$0 = {rtask$0}));
  "`Check assertion (!(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks <: dom(t_priority) & tasks/={} & rtask: TASK & rtask: tasks & tasks/={rtask} => max(t_priority[tasks-{rtask}])<=max(t_priority[tasks]))) deduction - ref 3.2, 4.2, 5.3'";
  (max(t_priority$0[tasks$0-{rtask$0}])<=max(t_priority$0[tasks$0]));
  ("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active$1 = TRUE => running$1: dom(t_priority$1)) & (active$1 = TRUE => t_priority$1[runable$1]: FIN(PRIORITY)) & (active$1 = TRUE => !atask.(atask: TASK & atask: runable$1 & not(atask = idle$1) => not(runable$1 = {atask}))) & (active$1 = TRUE => not(t_priority$1[runable$1] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & !(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(!(rtask$1).(rtask$1: TASK & rtask$1: tasks & not(tasks = {rtask$1}) => max(t_priority[tasks-{rtask$1}])<=max(t_priority[tasks]))) => tasks = {}) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & tasks$0: POW(dom(t_priority$0)) & not(tasks$0 = {}) & rtask$0: TASK & rtask$0: tasks$0 & not(tasks$0 = {rtask$0}) & priority$0: PRIORITY & max(t_priority$0[tasks$0])<=priority$0 & max(t_priority$0[tasks$0-{rtask$0}])<=max(t_priority$0[tasks$0]));
  "`Check assertion (!(tasks,t_priority,rtask,priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks <: dom(t_priority) & tasks/={} & rtask: TASK & rtask: tasks & tasks/={rtask} & priority: PRIORITY & max(t_priority[tasks])<=priority & max(t_priority[tasks-{rtask}])<=max(t_priority[tasks]) => priority = max(t_priority[tasks-{rtask}]\/{priority}))) deduction - ref 3.2, 4.2, 5.3'";
  (priority$0 = max(t_priority$0[tasks$0-{rtask$0}]\/{priority$0}));
  ("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active$1 = TRUE => running$1: dom(t_priority$1)) & (active$1 = TRUE => t_priority$1[runable$1]: FIN(PRIORITY)) & (active$1 = TRUE => !atask.(atask: TASK & atask: runable$1 & not(atask = idle$1) => not(runable$1 = {atask}))) & (active$1 = TRUE => not(t_priority$1[runable$1] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) => max(t_priority[tasks-{rtask}])<=max(t_priority[tasks])) & !(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(!rtask.(rtask: TASK & rtask: tasks & (max(t_priority[tasks-{rtask}])<=max(t_priority[tasks]) & not(!(priority$2).(priority$2: PRIORITY & max(t_priority[tasks])<=priority$2 => priority$2 = max(t_priority[tasks-{rtask}]\/{priority$2})))) => tasks = {rtask})) => tasks = {}) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & tasks$0: POW(dom(t_priority$0)) & not(tasks$0 = {}) & rtask$0: TASK & rtask$0: tasks$0 & not(tasks$0 = {rtask$0}) & priority$0: PRIORITY & priority$0+1<=max(t_priority$0[tasks$0]) & max(t_priority$0[tasks$0-{rtask$0}]) = max(t_priority$0[tasks$0]));
  "`Check assertion (!(tasks,t_priority,rtask,priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks <: dom(t_priority) & tasks/={} & rtask: TASK & rtask: tasks & tasks/={rtask} & priority: PRIORITY & priority+1<=max(t_priority[tasks]) & max(t_priority[tasks-{rtask}]) = max(t_priority[tasks]) => max(t_priority[tasks]) = max(t_priority[tasks-{rtask}]\/{priority}))) deduction - ref 3.2, 4.2, 5.3'";
  (max(t_priority$0[tasks$0]) = max(t_priority$0[tasks$0-{rtask$0}]\/{priority$0}));
  ("`Component assertions'" & PRIORITY: POW(NATURAL) & (active$1 = TRUE => running$1: dom(t_priority$1)) & (active$1 = TRUE => t_priority$1[runable$1]: FIN(PRIORITY)) & (active$1 = TRUE => !atask.(atask: TASK & atask: runable$1 & not(atask = idle$1) => not(runable$1 = {atask}))) & (active$1 = TRUE => not(t_priority$1[runable$1] = {})) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & rtask: schedule_p(tasks,t_priority) => t_priority(rtask) = max(t_priority[tasks])) & !(tasks,t_priority,rtask,dtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & rtask: TASK & rtask: tasks & t_priority(rtask) = max(t_priority[tasks]) & dtask: TASK & dtask: tasks & not(rtask = dtask) => t_priority(rtask) = max(t_priority[tasks-{dtask}])) & !(tasks,t_priority,run,atask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & run: TASK & run: tasks & t_priority(run) = max(t_priority[tasks]) & atask: TASK & not(atask: tasks) & t_priority(atask)+1<=t_priority(run) => t_priority(run) = max(t_priority[tasks\/{atask}])) & !(tasks,t_priority,rtask).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) => max(t_priority[tasks-{rtask}])<=max(t_priority[tasks])) & !(tasks,t_priority,rtask,priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) & priority: PRIORITY & max(t_priority[tasks])<=priority & max(t_priority[tasks-{rtask}])<=max(t_priority[tasks]) => priority = max(t_priority[tasks-{rtask}]\/{priority})) & !(tasks,t_priority,rtask,priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks: POW(dom(t_priority)) & not(tasks = {}) & rtask: TASK & rtask: tasks & not(tasks = {rtask}) & priority: PRIORITY & priority+1<=max(t_priority[tasks]) & max(t_priority[tasks-{rtask}]) = max(t_priority[tasks]) => max(t_priority[tasks]) = max(t_priority[tasks-{rtask}]\/{priority})));
  ("`t_create preconditions in previous components'" & priority: PRIORITY);
  ("`t_create preconditions in this component'" & priority: PRIORITY & "`Local hypotheses'" & task: TASK & not(task: tasks$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{task} & not(task = TASK_NULL) & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1\/{task|->priority} & t_priority$1(running$1)<=priority & running$2: schedule_p(n_runable,n_priority) & active$1 = TRUE);
  "`Check operation refinement - ref 4.4, 5.5'";
  (task: tasks$1);
  "`Check that the invariant (running = running$1 & running = running$1) is preserved by the operation - ref 4.4, 5.5'";
  (running$2 = running$1 or #(running$0).(running$0: runable$1\/{task} & running$2 = running$0));
  "`Check that the invariant (dom(t_priority$1) = tasks$1) is preserved by the operation - ref 4.4, 5.5'";
  (dom(n_priority) = tasks$1\/{task});
  "`Check that the invariant (t_bpriority$1: TASK +-> PRIORITY) is preserved by the operation - ref 4.4, 5.5'";
  (t_bpriority$1\/{task|->priority}: TASK +-> PRIORITY);
  "`Check that the invariant (dom(t_bpriority$1) = tasks$1) is preserved by the operation - ref 4.4, 5.5'";
  (dom(t_bpriority$1\/{task|->priority}) = tasks$1\/{task});
  "`Check that the invariant (active$1 = TRUE => t_priority$1(idle$1) = IDLE_PRIORITY & t_priority$1(running$1) = max(t_priority$1[runable$1]) & IDLE_PRIORITY<=min(t_priority$1[tasks$1])) is preserved by the operation - ref 4.4, 5.5'";
  (n_priority(idle$1) = IDLE_PRIORITY);
  (n_priority(running$2) = max(n_priority[n_runable]));
  (IDLE_PRIORITY<=min(n_priority[tasks$1\/{task}]));
  ("`t_create preconditions in this component'" & priority: PRIORITY & "`Local hypotheses'" & task: TASK & not(task: tasks$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{task} & not(task = TASK_NULL) & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1\/{task|->priority} & not(t_priority$1(running$1)<=priority) & active$1 = TRUE);
  "`Check that the invariant (unblocked = unblocked$1) is preserved by the operation - ref 4.4, 5.5'";
  (n_priority(running$1) = max(n_priority[n_runable]));
  ("`t_create preconditions in this component'" & priority: PRIORITY & "`Local hypotheses'" & task: TASK & not(task: tasks$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{task} & not(task = TASK_NULL) & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1\/{task|->priority} & not(active$1 = TRUE) & runable$1 = {});
  (task = running$1 or #(running$0).(running$0: runable$1\/{task} & task = running$0));
  ("`t_create preconditions in this component'" & priority: PRIORITY & "`Local hypotheses'" & task: TASK & not(task: tasks$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{task} & not(task = TASK_NULL) & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1\/{task|->priority} & not(active$1 = TRUE) & not(runable$1 = {}) & t_priority$1(running$1)<=priority & running$2: schedule_p(n_runable,n_priority));
  ("`t_create preconditions in this component'" & priority: PRIORITY & "`Local hypotheses'" & task: TASK & not(task: tasks$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{task} & not(task = TASK_NULL) & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1\/{task|->priority} & not(active$1 = TRUE) & not(runable$1 = {}) & not(t_priority$1(running$1)<=priority));
  ("`t_delete preconditions in previous components'" & atask: TASK & atask: tasks$1 & not(atask = idle$1));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1-{atask} & not(n_runable = {}) & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & atask: runable$1 & atask = running$1 & running$2: schedule_p(n_runable,n_priority) & active$1 = TRUE);
  "`Check that the invariant (blocked = blocked$1) is preserved by the operation - ref 4.4, 5.5'";
  (runable$1-{atask}: POW(tasks$1));
  "`Check that the invariant (runable = runable$1) is preserved by the operation - ref 4.4, 5.5'";
  (running$2: runable$1);
  (not(running$2 = atask));
  (dom(n_priority) = tasks$1-{atask});
  ({atask}<<|t_bpriority$1: TASK +-> PRIORITY);
  (dom({atask}<<|t_bpriority$1) = tasks$1-{atask});
  (IDLE_PRIORITY<=min(n_priority[tasks$1-{atask}]));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1-{atask} & not(n_runable = {}) & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & atask: runable$1 & atask = running$1 & not(active$1 = TRUE));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1-{atask} & not(n_runable = {}) & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & atask: runable$1 & not(atask = running$1));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1-{atask} & not(n_runable = {}) & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & atask: runable$1 & not(atask = running$1) & active$1 = TRUE);
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1-{atask} & not(n_runable = {}) & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & not(atask: runable$1) & atask: blocked$1 & atask: unblocked$1);
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1-{atask} & not(n_runable = {}) & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & not(atask: runable$1) & atask: blocked$1 & atask: unblocked$1 & active$1 = TRUE);
  (n_priority(running$1) = max(n_priority[runable$1]));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1-{atask} & not(n_runable = {}) & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & not(atask: runable$1) & atask: blocked$1 & not(atask: unblocked$1));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1-{atask} & not(n_runable = {}) & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & not(atask: runable$1) & atask: blocked$1 & not(atask: unblocked$1) & active$1 = TRUE);
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1-{atask} & not(n_runable = {}) & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & not(atask: runable$1) & not(atask: blocked$1) & atask: suspended$1);
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1-{atask} & not(n_runable = {}) & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & not(atask: runable$1) & not(atask: blocked$1) & atask: suspended$1 & active$1 = TRUE);
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1-{atask} & not(n_runable = {}) & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & not(atask: runable$1) & not(atask: blocked$1) & not(atask: suspended$1));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1-{atask} & not(n_runable = {}) & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & not(atask: runable$1) & not(atask: blocked$1) & not(atask: suspended$1) & active$1 = TRUE);
  ("`t_yield preconditions in previous components'" & active$1 = TRUE);
  ("`t_yield preconditions in this component'" & active$1 = TRUE & "`Local hypotheses'" & running$2: schedule_p(runable$1,t_priority$1));
  (t_priority$1(idle$1) = IDLE_PRIORITY);
  (t_priority$1(running$2) = max(t_priority$1[runable$1]));
  (IDLE_PRIORITY<=min(t_priority$1[tasks$1]));
  ("`t_suspend preconditions in previous components'" & stask: TASK & stask: tasks$1 & not(stask = idle$1));
  ("`t_suspend preconditions in this component'" & stask: TASK & stask: tasks$1 & not(stask = idle$1) & "`Local hypotheses'" & stask: runable$1 & n_runable: POW(tasks$1) & n_runable = runable$1-{stask} & not(n_runable = {}) & stask = running$1 & running$2: schedule_p(n_runable,t_priority$1));
  (runable$1-{stask}: POW(tasks$1));
  (not(running$2 = stask));
  ("`t_suspend preconditions in this component'" & stask: TASK & stask: tasks$1 & not(stask = idle$1) & "`Local hypotheses'" & stask: runable$1 & n_runable: POW(tasks$1) & n_runable = runable$1-{stask} & not(n_runable = {}) & stask = running$1 & running$2: schedule_p(n_runable,t_priority$1) & active$1 = TRUE);
  (t_priority$1(running$2) = max(t_priority$1[n_runable]));
  ("`t_suspend preconditions in this component'" & stask: TASK & stask: tasks$1 & not(stask = idle$1) & "`Local hypotheses'" & stask: runable$1 & n_runable: POW(tasks$1) & n_runable = runable$1-{stask} & not(n_runable = {}) & not(stask = running$1));
  ("`t_suspend preconditions in this component'" & stask: TASK & stask: tasks$1 & not(stask = idle$1) & "`Local hypotheses'" & stask: runable$1 & n_runable: POW(tasks$1) & n_runable = runable$1-{stask} & not(n_runable = {}) & not(stask = running$1) & active$1 = TRUE);
  (t_priority$1(running$1) = max(t_priority$1[n_runable]));
  ("`t_resume preconditions in previous components'" & rtask: TASK & rtask: suspended$1 & active$1 = TRUE);
  ("`t_resume preconditions in this component'" & rtask: TASK & rtask: suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{rtask} & t_priority$1(running$1)<=t_priority$1(rtask) & running$2: schedule_p(n_runable,t_priority$1));
  (rtask: tasks$1);
  (#(running$0).(running$0: runable$1\/{rtask} & running$2 = running$0) or running$2 = running$1);
  ("`t_resume preconditions in this component'" & rtask: TASK & rtask: suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{rtask} & not(t_priority$1(running$1)<=t_priority$1(rtask)));
  ("`t_getPriority preconditions in previous components'" & atask: TASK & atask: tasks$1);
  ("`t_getPriority preconditions in this component'" & atask: TASK & atask: tasks$1);
  (t_priority$1(atask): PRIORITY);
  ("`t_delayTask preconditions in previous components'" & task: TASK & task = running$1 & running$1: runable$1 & not(running$1 = idle$1) & ticks: TICK);
  ("`t_delayTask preconditions in this component'" & task: TASK & task = running$1 & running$1: runable$1 & not(running$1 = idle$1) & ticks: TICK & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & not(n_runable = {}) & running$2: schedule_p(n_runable,t_priority$1));
  (runable$1-{running$1}: POW(tasks$1));
  (not(running$2 = running$1));
  ("`t_delayTask preconditions in this component'" & task: TASK & task = running$1 & running$1: runable$1 & not(running$1 = idle$1) & ticks: TICK & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & not(n_runable = {}) & running$2: schedule_p(n_runable,t_priority$1) & active$1 = TRUE);
  ("`t_startScheduler preconditions in previous components'" & active$1 = FALSE);
  ("`t_startScheduler preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & idle_task: TASK & not(idle_task: tasks$1) & n_runable: POW(tasks$1) & n_runable = runable$1\/{idle_task} & running$2: schedule_p(n_runable,t_priority$1));
  (idle_task: tasks$1);
  (runable$1 = runable$1\/{idle_task});
  (running$2: runable$1\/{idle_task});
  (dom(t_priority$1) = tasks$1\/{idle_task});
  (dom(t_bpriority$1) = tasks$1\/{idle_task});
  (t_priority$1(idle_task) = IDLE_PRIORITY);
  (IDLE_PRIORITY<=min(t_priority$1[tasks$1\/{idle_task}]));
  ("`t_endScheduler preconditions in previous components'" & active$1 = TRUE);
  ("`t_endScheduler preconditions in this component'" & active$1 = TRUE);
  "`Check that the invariant (t_priority$1: TASK +-> PRIORITY) is preserved by the operation - ref 4.4, 5.5'";
  ("`t_resumeAll preconditions in previous components'" & tunblocked: FIN(TASK) & tunblocked: POW(blocked$1) & tunblocked = unblocked$1);
  ("`t_resumeAll preconditions in this component'" & tunblocked: FIN(TASK) & tunblocked: POW(blocked$1) & tunblocked = unblocked$1 & "`Local hypotheses'" & not(tunblocked = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/tunblocked & running$2: schedule_p(n_runable,t_priority$1));
  "`Check operation refinement - ref 4.4, 5.5'";
  (runable$1\/tunblocked: POW(tasks$1));
  "`Check that the invariant (running = running$1 & running = running$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(running$0).(running$0: runable$1\/tunblocked & running$2 = running$0) or running$2 = running$1);
  ("`t_resumeAll preconditions in this component'" & tunblocked: FIN(TASK) & tunblocked: POW(blocked$1) & tunblocked = unblocked$1 & "`Local hypotheses'" & not(tunblocked = {}) & n_runable: POW(tasks$1) & n_runable = runable$1\/tunblocked & running$2: schedule_p(n_runable,t_priority$1) & active$1 = TRUE);
  "`Check that the invariant (active$1 = TRUE => t_priority$1(idle$1) = IDLE_PRIORITY & t_priority$1(running$1) = max(t_priority$1[runable$1]) & IDLE_PRIORITY<=min(t_priority$1[tasks$1])) is preserved by the operation - ref 4.4, 5.5'";
  ("`t_removeFromEventList preconditions in previous components'" & task: TASK & task: blocked$1\/suspended$1 & active$1 = TRUE);
  ("`t_removeFromEventList preconditions in this component'" & task: TASK & task: blocked$1\/suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{task} & task: blocked$1 & task: suspended$1 & t_priority$1(running$1)<=t_priority$1(task) & running$2: schedule_p(n_runable,t_priority$1) & task: unblocked$1);
  (#(running$0).(running$0: runable$1\/{task} & running$2 = running$0) or running$2 = running$1);
  ("`t_removeFromEventList preconditions in this component'" & task: TASK & task: blocked$1\/suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{task} & task: blocked$1 & task: suspended$1 & t_priority$1(running$1)<=t_priority$1(task) & running$2: schedule_p(n_runable,t_priority$1) & not(task: unblocked$1));
  "`Check that the invariant (suspended = suspended$1) is preserved by the operation - ref 4.4, 5.5'";
  ("`t_removeFromEventList preconditions in this component'" & task: TASK & task: blocked$1\/suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{task} & task: blocked$1 & task: suspended$1 & not(t_priority$1(running$1)<=t_priority$1(task)) & task: unblocked$1);
  ("`t_removeFromEventList preconditions in this component'" & task: TASK & task: blocked$1\/suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{task} & task: blocked$1 & task: suspended$1 & not(t_priority$1(running$1)<=t_priority$1(task)) & not(task: unblocked$1));
  ("`t_removeFromEventList preconditions in this component'" & task: TASK & task: blocked$1\/suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{task} & task: blocked$1 & not(task: suspended$1) & t_priority$1(running$1)<=t_priority$1(task) & running$2: schedule_p(n_runable,t_priority$1) & task: unblocked$1);
  ("`t_removeFromEventList preconditions in this component'" & task: TASK & task: blocked$1\/suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{task} & task: blocked$1 & not(task: suspended$1) & t_priority$1(running$1)<=t_priority$1(task) & running$2: schedule_p(n_runable,t_priority$1) & not(task: unblocked$1));
  ("`t_removeFromEventList preconditions in this component'" & task: TASK & task: blocked$1\/suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{task} & task: blocked$1 & not(task: suspended$1) & not(t_priority$1(running$1)<=t_priority$1(task)) & task: unblocked$1);
  ("`t_removeFromEventList preconditions in this component'" & task: TASK & task: blocked$1\/suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{task} & task: blocked$1 & not(task: suspended$1) & not(t_priority$1(running$1)<=t_priority$1(task)) & not(task: unblocked$1));
  ("`t_removeFromEventList preconditions in this component'" & task: TASK & task: blocked$1\/suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{task} & not(task: blocked$1) & task: suspended$1 & t_priority$1(running$1)<=t_priority$1(task) & running$2: schedule_p(n_runable,t_priority$1));
  ("`t_removeFromEventList preconditions in this component'" & task: TASK & task: blocked$1\/suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{task} & not(task: blocked$1) & task: suspended$1 & not(t_priority$1(running$1)<=t_priority$1(task)));
  ("`t_removeFromEventList preconditions in this component'" & task: TASK & task: blocked$1\/suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{task} & not(task: blocked$1) & not(task: suspended$1) & t_priority$1(running$1)<=t_priority$1(task) & running$2: schedule_p(n_runable,t_priority$1));
  ("`t_removeFromEventList preconditions in this component'" & task: TASK & task: blocked$1\/suspended$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{task} & not(task: blocked$1) & not(task: suspended$1) & not(t_priority$1(running$1)<=t_priority$1(task)));
  ("`t_setPriority preconditions in previous components'" & task: tasks$1 & priority: PRIORITY & not(task = idle$1) & active$1 = TRUE);
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & not(task = idle$1) & active$1 = TRUE & "`Local hypotheses'" & n_priority = t_priority$1<+{task|->priority} & task: runable$1 & t_priority$1(running$1)<=priority & not(task = running$1) & running$2: schedule_p(runable$1,n_priority));
  (#(running$0).(running$0: runable$1 & running$2 = running$0) or running$2 = running$1);
  (n_priority: TASK +-> PRIORITY);
  (dom(n_priority) = tasks$1);
  (t_bpriority$1<+{task|->priority}: TASK +-> PRIORITY);
  (dom(t_bpriority$1<+{task|->priority}) = tasks$1);
  (n_priority(running$2) = max(n_priority[runable$1]));
  (IDLE_PRIORITY<=min(n_priority[tasks$1]));
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & not(task = idle$1) & active$1 = TRUE & "`Local hypotheses'" & n_priority = t_priority$1<+{task|->priority} & task: runable$1 & t_priority$1(running$1)<=priority & task = running$1);
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & not(task = idle$1) & active$1 = TRUE & "`Local hypotheses'" & n_priority = t_priority$1<+{task|->priority} & task: runable$1 & not(t_priority$1(running$1)<=priority) & task = running$1 & running$2: schedule_p(runable$1,n_priority));
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & not(task = idle$1) & active$1 = TRUE & "`Local hypotheses'" & n_priority = t_priority$1<+{task|->priority} & task: runable$1 & not(t_priority$1(running$1)<=priority) & not(task = running$1));
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & not(task = idle$1) & active$1 = TRUE & "`Local hypotheses'" & n_priority = t_priority$1<+{task|->priority} & not(task: runable$1));
  ("`t_priorityInherit preconditions in previous components'" & xTicksToWait: TICK & holderTask: tasks$1 & not(holderTask = idle$1) & not(running$1 = idle$1) & running$1: runable$1 & active$1 = TRUE);
  ("`t_priorityInherit preconditions in this component'" & xTicksToWait: TICK & holderTask: tasks$1 & not(holderTask = idle$1) & not(running$1 = idle$1) & running$1: runable$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & not(n_runable = {}) & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1<+{holderTask|->t_priority$1(running$1)} & t_priority$1(holderTask)+1<=t_priority$1(running$1) & running$2: schedule_p(n_runable,n_priority));
  (t_bpriority$1<+{holderTask|->t_priority$1(holderTask)}: TASK +-> PRIORITY);
  (dom(t_bpriority$1<+{holderTask|->t_priority$1(holderTask)}) = tasks$1);
  ("`t_priorityInherit preconditions in this component'" & xTicksToWait: TICK & holderTask: tasks$1 & not(holderTask = idle$1) & not(running$1 = idle$1) & running$1: runable$1 & active$1 = TRUE & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1-{running$1} & not(n_runable = {}) & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1<+{holderTask|->t_priority$1(running$1)} & not(t_priority$1(holderTask)+1<=t_priority$1(running$1)) & running$2: schedule_p(n_runable,t_priority$1));
  ("`t_returnPriority preconditions in previous components'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1));
  ("`t_returnPriority preconditions in this component'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1<+{running$1|->t_bpriority$1(running$1)} & btask: blocked$1 & btask: suspended$1 & not(t_bpriority$1(running$1) = t_priority$1(running$1)) & running$2: schedule_p(n_runable,n_priority) & btask: unblocked$1);
  (#(running$0).(running$0: runable$1\/{btask} & running$2 = running$0) or running$2 = running$1);
  ("`t_returnPriority preconditions in this component'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1<+{running$1|->t_bpriority$1(running$1)} & btask: blocked$1 & btask: suspended$1 & not(t_bpriority$1(running$1) = t_priority$1(running$1)) & running$2: schedule_p(n_runable,n_priority) & not(btask: unblocked$1));
  ("`t_returnPriority preconditions in this component'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1<+{running$1|->t_bpriority$1(running$1)} & btask: blocked$1 & btask: suspended$1 & t_bpriority$1(running$1) = t_priority$1(running$1) & btask: unblocked$1 & t_priority$1(running$1)<=t_priority$1(btask) & running$2: schedule_p(n_runable,t_priority$1));
  ("`t_returnPriority preconditions in this component'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1<+{running$1|->t_bpriority$1(running$1)} & btask: blocked$1 & btask: suspended$1 & t_bpriority$1(running$1) = t_priority$1(running$1) & btask: unblocked$1 & not(t_priority$1(running$1)<=t_priority$1(btask)));
  ("`t_returnPriority preconditions in this component'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1<+{running$1|->t_bpriority$1(running$1)} & btask: blocked$1 & btask: suspended$1 & t_bpriority$1(running$1) = t_priority$1(running$1) & not(btask: unblocked$1) & t_priority$1(running$1)<=t_priority$1(btask) & running$2: schedule_p(n_runable,t_priority$1));
  ("`t_returnPriority preconditions in this component'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1<+{running$1|->t_bpriority$1(running$1)} & btask: blocked$1 & btask: suspended$1 & t_bpriority$1(running$1) = t_priority$1(running$1) & not(btask: unblocked$1) & not(t_priority$1(running$1)<=t_priority$1(btask)));
  ("`t_returnPriority preconditions in this component'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1<+{running$1|->t_bpriority$1(running$1)} & btask: blocked$1 & not(btask: suspended$1) & not(t_bpriority$1(running$1) = t_priority$1(running$1)) & running$2: schedule_p(n_runable,n_priority) & btask: unblocked$1);
  ("`t_returnPriority preconditions in this component'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1<+{running$1|->t_bpriority$1(running$1)} & btask: blocked$1 & not(btask: suspended$1) & not(t_bpriority$1(running$1) = t_priority$1(running$1)) & running$2: schedule_p(n_runable,n_priority) & not(btask: unblocked$1));
  ("`t_returnPriority preconditions in this component'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1<+{running$1|->t_bpriority$1(running$1)} & btask: blocked$1 & not(btask: suspended$1) & t_bpriority$1(running$1) = t_priority$1(running$1) & btask: unblocked$1 & t_priority$1(running$1)<=t_priority$1(btask) & running$2: schedule_p(n_runable,t_priority$1));
  ("`t_returnPriority preconditions in this component'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1<+{running$1|->t_bpriority$1(running$1)} & btask: blocked$1 & not(btask: suspended$1) & t_bpriority$1(running$1) = t_priority$1(running$1) & btask: unblocked$1 & not(t_priority$1(running$1)<=t_priority$1(btask)));
  ("`t_returnPriority preconditions in this component'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1<+{running$1|->t_bpriority$1(running$1)} & btask: blocked$1 & not(btask: suspended$1) & t_bpriority$1(running$1) = t_priority$1(running$1) & not(btask: unblocked$1) & t_priority$1(running$1)<=t_priority$1(btask) & running$2: schedule_p(n_runable,t_priority$1));
  ("`t_returnPriority preconditions in this component'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1<+{running$1|->t_bpriority$1(running$1)} & btask: blocked$1 & not(btask: suspended$1) & t_bpriority$1(running$1) = t_priority$1(running$1) & not(btask: unblocked$1) & not(t_priority$1(running$1)<=t_priority$1(btask)));
  ("`t_returnPriority preconditions in this component'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1<+{running$1|->t_bpriority$1(running$1)} & not(btask: blocked$1) & btask: suspended$1 & not(t_bpriority$1(running$1) = t_priority$1(running$1)) & running$2: schedule_p(n_runable,n_priority));
  ("`t_returnPriority preconditions in this component'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1<+{running$1|->t_bpriority$1(running$1)} & not(btask: blocked$1) & btask: suspended$1 & t_bpriority$1(running$1) = t_priority$1(running$1) & t_priority$1(running$1)<=t_priority$1(btask) & running$2: schedule_p(n_runable,t_priority$1));
  ("`t_returnPriority preconditions in this component'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1<+{running$1|->t_bpriority$1(running$1)} & not(btask: blocked$1) & btask: suspended$1 & t_bpriority$1(running$1) = t_priority$1(running$1) & not(t_priority$1(running$1)<=t_priority$1(btask)));
  ("`t_returnPriority preconditions in this component'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1<+{running$1|->t_bpriority$1(running$1)} & not(btask: blocked$1) & not(btask: suspended$1) & not(t_bpriority$1(running$1) = t_priority$1(running$1)) & running$2: schedule_p(n_runable,n_priority));
  ("`t_returnPriority preconditions in this component'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1<+{running$1|->t_bpriority$1(running$1)} & not(btask: blocked$1) & not(btask: suspended$1) & t_bpriority$1(running$1) = t_priority$1(running$1) & t_priority$1(running$1)<=t_priority$1(btask) & running$2: schedule_p(n_runable,t_priority$1));
  ("`t_returnPriority preconditions in this component'" & btask: TASK & btask: tasks$1 & btask: blocked$1\/suspended$1 & active$1 = TRUE & not(running$1 = idle$1) & "`Local hypotheses'" & n_runable: POW(tasks$1) & n_runable = runable$1\/{btask} & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1<+{running$1|->t_bpriority$1(running$1)} & not(btask: blocked$1) & not(btask: suspended$1) & t_bpriority$1(running$1) = t_priority$1(running$1) & not(t_priority$1(running$1)<=t_priority$1(btask)))
END
&
THEORY EnumerateX IS
  SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED};
  COPY_POSITION == {queueSEND_TO_BACK,queueSEND_TO_FRONT};
  QUEUE_TYPE == {TQUE,TSEMAPH,TMUT};
  ERROR_DEFINITION == {errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY,errNO_TASK_TO_RUN,errQUEUE_BLOCKED,errQUEUE_YIELD,errQUEUE_EMPTY,errQUEUE_FULL,pdPASS,pdFAIL,pdTRUE,pdFALSE}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK)
END
