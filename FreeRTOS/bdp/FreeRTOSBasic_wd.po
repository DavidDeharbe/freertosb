
THEORY ProofList IS
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(451) & afterIncrementTickSubstitution.6,(_f(462) => _f(463));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(451) & afterIncrementTickSubstitution.5,(_f(460) => _f(461));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(451) & afterIncrementTickSubstitution.4,(_f(458) => _f(459));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(451) & afterIncrementTickSubstitution.3,(_f(456) => _f(457));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(451) & afterIncrementTickSubstitution.2,(_f(454) => _f(455));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(451) & afterIncrementTickSubstitution.1,(_f(452) => _f(453));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(445) & incrementTickSubstitution.2,(_f(448) => _f(449));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(445) & incrementTickSubstitution.1,(_f(446) => _f(447));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & giveMutexPrecondition.1,(_f(440) => _f(441));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(405) & giveMutexSubstitution.17,(_f(438) => _f(439));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(405) & giveMutexSubstitution.16,(_f(436) => _f(437));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(405) & giveMutexSubstitution.15,(_f(434) => _f(435));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(405) & giveMutexSubstitution.14,(_f(432) => _f(433));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(405) & giveMutexSubstitution.13,(_f(430) => _f(431));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(405) & giveMutexSubstitution.12,(_f(428) => _f(429));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(405) & giveMutexSubstitution.11,(_f(426) => _f(427));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(405) & giveMutexSubstitution.10,(_f(424) => _f(425));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(405) & giveMutexSubstitution.9,(_f(422) => _f(423));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(405) & giveMutexSubstitution.8,(_f(420) => _f(421));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(405) & giveMutexSubstitution.7,(_f(418) => _f(419));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(405) & giveMutexSubstitution.6,(_f(416) => _f(417));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(405) & giveMutexSubstitution.5,(_f(414) => _f(415));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(405) & giveMutexSubstitution.4,(_f(412) => _f(413));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(405) & giveMutexSubstitution.3,(_f(410) => _f(411));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(405) & giveMutexSubstitution.2,(_f(408) => _f(409));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(405) & giveMutexSubstitution.1,(_f(406) => _f(407));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(389) & takeMutexSubstitution.7,(_f(402) => _f(403));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(389) & takeMutexSubstitution.6,(_f(400) => _f(401));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(389) & takeMutexSubstitution.5,(_f(398) => _f(399));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(389) & takeMutexSubstitution.4,(_f(396) => _f(397));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(389) & takeMutexSubstitution.3,(_f(394) => _f(395));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(389) & takeMutexSubstitution.2,(_f(392) => _f(393));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(389) & takeMutexSubstitution.1,(_f(390) => _f(391));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.26,(_f(384) => _f(385));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.25,(_f(382) => _f(383));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.24,(_f(380) => _f(381));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.23,(_f(378) => _f(379));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.22,(_f(376) => _f(377));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.21,(_f(374) => _f(375));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.20,(_f(372) => _f(373));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.19,(_f(370) => _f(371));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.18,(_f(368) => _f(369));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.17,(_f(366) => _f(367));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.16,(_f(364) => _f(365));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.15,(_f(362) => _f(363));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.14,(_f(360) => _f(361));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.13,(_f(358) => _f(359));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.12,(_f(356) => _f(357));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.11,(_f(354) => _f(355));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.10,(_f(352) => _f(353));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.9,(_f(350) => _f(351));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.8,(_f(348) => _f(349));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.7,(_f(346) => _f(347));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.6,(_f(344) => _f(345));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.5,(_f(342) => _f(343));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.4,(_f(340) => _f(341));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.3,(_f(338) => _f(339));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.2,(_f(336) => _f(337));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(333) & giveSemaphoreSubstitution.1,(_f(334) => _f(335));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.26,(_f(330) => _f(331));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.25,(_f(328) => _f(329));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.24,(_f(326) => _f(327));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.23,(_f(324) => _f(325));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.22,(_f(322) => _f(323));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.21,(_f(320) => _f(321));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.20,(_f(318) => _f(319));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.19,(_f(316) => _f(317));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.18,(_f(314) => _f(315));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.17,(_f(312) => _f(313));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.16,(_f(310) => _f(311));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.15,(_f(308) => _f(309));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.14,(_f(306) => _f(307));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.13,(_f(304) => _f(305));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.12,(_f(302) => _f(303));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.11,(_f(300) => _f(301));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.10,(_f(298) => _f(299));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.9,(_f(296) => _f(297));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.8,(_f(294) => _f(295));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.7,(_f(292) => _f(293));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.6,(_f(290) => _f(291));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.5,(_f(288) => _f(289));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.4,(_f(286) => _f(287));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.3,(_f(284) => _f(285));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.2,(_f(282) => _f(283));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(279) & takeSemaphoreSubstitution.1,(_f(280) => _f(281));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & deleteSemaphorePrecondition.2,(_f(276) => _f(277));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & deleteSemaphorePrecondition.1,(_f(274) => _f(275));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.30,(_f(266) => _f(267));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.29,(_f(264) => _f(265));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.28,(_f(262) => _f(263));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.27,(_f(260) => _f(261));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.26,(_f(258) => _f(259));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.25,(_f(256) => _f(257));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.24,(_f(254) => _f(255));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.23,(_f(252) => _f(253));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.22,(_f(250) => _f(251));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.21,(_f(248) => _f(249));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.20,(_f(246) => _f(247));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.19,(_f(244) => _f(245));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.18,(_f(242) => _f(243));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.17,(_f(240) => _f(241));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.16,(_f(238) => _f(239));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.15,(_f(236) => _f(237));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.14,(_f(234) => _f(235));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.13,(_f(232) => _f(233));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.12,(_f(230) => _f(231));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.11,(_f(228) => _f(229));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.10,(_f(226) => _f(227));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.9,(_f(224) => _f(225));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.8,(_f(222) => _f(223));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.7,(_f(220) => _f(221));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.6,(_f(218) => _f(219));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.5,(_f(216) => _f(217));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.4,(_f(214) => _f(215));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.3,(_f(212) => _f(213));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.2,(_f(210) => _f(211));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(207) & receiveItemSubstitution.1,(_f(208) => _f(209));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & sendItemPrecondition.1,(_f(204) => _f(205));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.30,(_f(202) => _f(203));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.29,(_f(200) => _f(201));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.28,(_f(198) => _f(199));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.27,(_f(196) => _f(197));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.26,(_f(194) => _f(195));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.25,(_f(192) => _f(193));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.24,(_f(190) => _f(191));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.23,(_f(188) => _f(189));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.22,(_f(186) => _f(187));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.21,(_f(184) => _f(185));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.20,(_f(182) => _f(183));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.19,(_f(180) => _f(181));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.18,(_f(178) => _f(179));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.17,(_f(176) => _f(177));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.16,(_f(174) => _f(175));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.15,(_f(172) => _f(173));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.14,(_f(170) => _f(171));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.13,(_f(168) => _f(169));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.12,(_f(166) => _f(167));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.11,(_f(164) => _f(165));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.10,(_f(162) => _f(163));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.9,(_f(160) => _f(161));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.8,(_f(158) => _f(159));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.7,(_f(156) => _f(157));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.6,(_f(154) => _f(155));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.5,(_f(152) => _f(153));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.4,(_f(150) => _f(151));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.3,(_f(148) => _f(149));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.2,(_f(146) => _f(147));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(143) & sendItemSubstitution.1,(_f(144) => _f(145));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & queueDeletePrecondition.2,(_f(140) => _f(141));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & queueDeletePrecondition.1,(_f(138) => _f(139));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(133) & queueDeleteSubstitution.2,(_f(136) => _f(137));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(133) & queueDeleteSubstitution.1,(_f(134) => _f(135));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(111) & vTaskSuspendSubstitution.8,(_f(126) => _f(127));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(111) & vTaskSuspendSubstitution.7,(_f(124) => _f(125));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(111) & vTaskSuspendSubstitution.6,(_f(122) => _f(123));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(111) & vTaskSuspendSubstitution.5,(_f(120) => _f(121));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(111) & vTaskSuspendSubstitution.4,(_f(118) => _f(119));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(111) & vTaskSuspendSubstitution.3,(_f(116) => _f(117));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(111) & vTaskSuspendSubstitution.2,(_f(114) => _f(115));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(111) & vTaskSuspendSubstitution.1,(_f(112) => _f(113));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(93) & xTaskResumeAllSubstitution.7,(_f(106) => _f(107));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(93) & xTaskResumeAllSubstitution.6,(_f(104) => _f(105));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(93) & xTaskResumeAllSubstitution.5,(_f(102) => _f(103));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(93) & xTaskResumeAllSubstitution.4,(_f(100) => _f(101));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(93) & xTaskResumeAllSubstitution.3,(_f(98) => _f(99));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(93) & xTaskResumeAllSubstitution.2,(_f(96) => _f(97));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(93) & xTaskResumeAllSubstitution.1,(_f(94) => _f(95));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(89) & beforeResumeAllSubstitution.1,(_f(90) => _f(91));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(71) & vTaskResumeSubstitution.8,(_f(86) => _f(87));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(71) & vTaskResumeSubstitution.7,(_f(84) => _f(85));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(71) & vTaskResumeSubstitution.6,(_f(82) => _f(83));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(71) & vTaskResumeSubstitution.5,(_f(80) => _f(81));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(71) & vTaskResumeSubstitution.4,(_f(78) => _f(79));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(71) & vTaskResumeSubstitution.3,(_f(76) => _f(77));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(71) & vTaskResumeSubstitution.2,(_f(74) => _f(75));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(71) & vTaskResumeSubstitution.1,(_f(72) => _f(73));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(63) & uxTaskGetNumberOfTasksSubstitution.1,(_f(64) => _f(65));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(41) & vTaskDeleteSubstitution.8,(_f(56) => _f(57));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(41) & vTaskDeleteSubstitution.7,(_f(54) => _f(55));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(41) & vTaskDeleteSubstitution.6,(_f(52) => _f(53));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(41) & vTaskDeleteSubstitution.5,(_f(50) => _f(51));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(41) & vTaskDeleteSubstitution.4,(_f(48) => _f(49));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(41) & vTaskDeleteSubstitution.3,(_f(46) => _f(47));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(41) & vTaskDeleteSubstitution.2,(_f(44) => _f(45));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(41) & vTaskDeleteSubstitution.1,(_f(42) => _f(43));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(37) & vTaskDelayUntilSubstitution.1,(_f(38) => _f(39));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.5,(_f(30) => _f(31));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.4,(_f(28) => _f(29));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.3,(_f(26) => _f(27));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.2,(_f(24) => _f(25));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.1,(_f(22) => _f(23));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & Invariants.5,(_f(20) => _f(21));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & Invariants.4,(_f(18) => _f(19));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & Invariants.3,(_f(16) => _f(17));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & Invariants.2,(_f(14) => _f(15));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & Invariants.1,(_f(12) => _f(13))

END
&

THEORY Formulas IS
("`Component constraints'" & btrue);
("`Used machines constraints'" & btrue);
("`Component properties'" & btrue);
("`Seen and used machines properties'" & BIT = 0..1 & MAX_DELAY: 0..maxint & 1<=MAX_DELAY & NULL_PARAMETER: PARAMETER & PRIORITY: POW(NAT) & TICK: POW(NAT) & TICK = 0..MAX_DELAY & TICK_INCREMENT: TICK*TICK +-> TICK & dom(TICK_INCREMENT) = TICK*TICK & TICK_INCREMENT = %(tick,inc).(tick: TICK & inc: TICK | (tick+inc) mod MAX_DELAY) & QUEUE_NULL: QUEUE & ITEM_NULL: ITEM & ITEM_EMPTY: ITEM & TASK_NULL: TASK & REMOVE_EVENT: TASK*POW(QUEUE)*(QUEUE +-> POW(TASK)) +-> (QUEUE +-> POW(TASK)) & REMOVE_EVENT = %(task,queues,pending).(task: TASK & queues: POW(QUEUE) & pending: QUEUE +-> POW(TASK) | %queue.(queue: queues & queue: dom(pending) | pending(queue)-{task})) & semGIVE_BLOCK_TIME: TICK & IDLE_PRIORITY: PRIORITY & IDLE_PRIORITY = 0 & QUEUE_LENGTH: POW(NAT) & QUEUE_LENGTH = 1..maxint & QUEUE_QUANT: POW(NAT) & QUEUE_QUANT = 0..maxint & NAME: FIN(INTEGER) & not(NAME = {}) & PARAMETER: FIN(INTEGER) & not(PARAMETER = {}) & TASK: FIN(INTEGER) & not(TASK = {}) & STACK: FIN(INTEGER) & not(STACK = {}) & TASK_CODE: FIN(INTEGER) & not(TASK_CODE = {}) & ITEM: FIN(INTEGER) & not(ITEM = {}) & QUEUE: FIN(INTEGER) & not(QUEUE = {}) & (1..3)*{SCHEDULER_STATE}: FIN(NATURAL*{SCHEDULER_STATE}) & not((1..3)*{SCHEDULER_STATE} = {}) & (1..2)*{COPY_POSITION}: FIN(NATURAL*{COPY_POSITION}) & not((1..2)*{COPY_POSITION} = {}) & (1..3)*{QUEUE_TYPE}: FIN(NATURAL*{QUEUE_TYPE}) & not((1..3)*{QUEUE_TYPE} = {}) & (1..10)*{ERROR_DEFINITION}: FIN(NATURAL*{ERROR_DEFINITION}) & not((1..10)*{ERROR_DEFINITION} = {}) & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES & configMAX_PRIORITIES<=maxint & 1<=configMAX_PRIORITIES & configTOTAL_HEAP_SIZE: INTEGER & 0<=configTOTAL_HEAP_SIZE & configTOTAL_HEAP_SIZE<=maxint & 0<=configTOTAL_HEAP_SIZE & configMINIMAL_STACK_SIZE: INTEGER & 0<=configMINIMAL_STACK_SIZE & configMINIMAL_STACK_SIZE<=maxint & 0<=configMINIMAL_STACK_SIZE & INCLUDE_uxTaskPriorityGet: BIT & INCLUDE_vTaskDelete: BIT & INCLUDE_vTaskSuspend: BIT & INCLUDE_xTaskGetSchedulerState: BIT & INCLUDE_vTaskPrioritySet: BIT & INCLUDE_xTaskGetCurrentTaskHandle: BIT & INCLUDE_vTaskDelayUntil: BIT & INCLUDE_vTaskDelay: BIT & PRIORITY = 0..configMAX_PRIORITIES-1);
("`Included,imported and extended machines properties'" & remove_task: (QUEUE +-> POW(TASK))*POW(TASK) +-> (QUEUE +-> POW(TASK)) & dom(remove_task) = (QUEUE +-> POW(TASK))*POW(TASK) & remove_task = %(q_task,unblocked).(q_task: QUEUE +-> POW(TASK) & unblocked: POW(TASK) | %q1.(q1: QUEUE & q1: dom(q_task) | q_task(q1)-unblocked)) & update_first: (QUEUE +-> POW(TASK))*POW(TASK) +-> (QUEUE +-> TASK) & dom(update_first) = (QUEUE +-> POW(TASK))*POW(TASK) & update_first = %(q_task,unblocked).(q_task: QUEUE +-> POW(TASK) & unblocked: POW(TASK) | SET(q1,task).(q1: QUEUE & q1: dom(q_task) & not(q_task(q1): POW(unblocked)) & task: TASK & task: q_task(q1) & not(task: unblocked))));
("`Component invariant'" & tickCount: TICK & tickMissed: TICK & !que.(que: queues => queue_sending(que): POW(blocked\/suspended)) & !que.(que: queues => queue_receiving(que): POW(blocked\/suspended)) & ran(mutex_holder): POW(tasks\/{TASK_NULL}) & !mt.(mt: mutexes => queue_sending(mt) = {}) & (active = TRUE => not(idle: ran(mutex_holder)) & !mt.(mt: mutexes_busy => mutex_holder(mt): tasks) & !mt.(mt: mutexes & not(mt: mutexes_busy) => not(mutex_holder(mt): tasks))) & btrue & btrue);
("`Seen and used machines invariants'" & btrue);
("`Included,imported and extended machines invariants'" & active: BOOL & tasks: FIN(TASK) & blocked: FIN(TASK) & blocked: POW(tasks) & unblocked: FIN(TASK) & unblocked: POW(blocked) & runable: FIN(TASK) & runable: POW(tasks) & suspended: FIN(TASK) & suspended: POW(tasks) & runable/\blocked = {} & blocked/\suspended = {} & suspended/\runable = {} & tasks = suspended\/blocked\/runable & running: TASK & idle: TASK & (active = TRUE => not(runable = {}) & running: runable & idle: runable & not(TASK_NULL: tasks)) & queues: POW(QUEUE) & queue_receiving: QUEUE +-> POW(TASK) & queue_sending: QUEUE +-> POW(TASK) & queues = dom(queue_receiving) & queues = dom(queue_sending) & first_receiving: QUEUE +-> TASK & first_sending: QUEUE +-> TASK & dom(first_receiving) = dom(queue_receiving) & dom(first_sending) = dom(queue_sending) & !q1.(q1: queues & q1: dom(first_receiving) & not(queue_receiving(q1) = {}) => first_receiving(q1): queue_receiving(q1)) & !q1.(q1: queues & q1: dom(first_sending) & not(queue_sending(q1) = {}) => first_sending(q1): queue_sending(q1)) & queues_msg: POW(queues) & queues_msg_full: POW(queues_msg) & queues_msg_empty: POW(queues_msg) & queues_msg_full/\queues_msg_empty = {} & queue_items: QUEUE +-> POW(ITEM) & queues_msg = dom(queue_items) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_sending(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & tk: TASK & tk: queue_sending(q2) => not(tk: queue_receiving(q1))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_receiving(q1) => not(tk: queue_receiving(q2))) & !(q1,q2,tk).(q1: queues & q2: queues & not(q1 = q2) & tk: TASK & tk: queue_sending(q1) => not(tk: queue_sending(q2))) & semaphores: POW(QUEUE) & semaphores: POW(queues) & semaphores_busy: POW(semaphores) & semaphores_full: POW(semaphores) & semaphores_busy/\semaphores_full = {} & mutexes: POW(queues) & mutex_holder: QUEUE +-> TASK & mutexes = dom(mutex_holder) & mutexes_busy: POW(mutexes) & !mt.(mt: mutexes_busy => not(mutex_holder(mt) = TASK_NULL)) & !mt.(mt: mutexes & not(mt: mutexes_busy) => mutex_holder(mt) = TASK_NULL) & queues_msg/\semaphores = {} & queues_msg/\mutexes = {} & mutexes/\semaphores = {});
("`Component assertions'" & (active = TRUE => !mt.(mt: mutexes_busy => not(mutex_holder(mt) = idle))) & !(que,task).(que: queues & task: TASK & not(task: blocked) & not(task: suspended) => not(task: queue_sending(que))) & !(que,task).(que: queues & task: TASK & not(task: blocked) & not(task: suspended) => not(task: queue_receiving(que))) & !(que,task).(que: queues & task: tasks & task: queue_sending(que) => task: blocked\/suspended) & !(que,task).(que: queues & task: tasks & task: queue_receiving(que) => task: blocked\/suspended));
("`Seen and used machines assertions'" & BIT: POW(NATURAL) & QUEUE_LENGTH: POW(QUEUE_QUANT) & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES);
("`Included,imported and extended machines assertions'" & (active = TRUE => not(runable = {})) & (active = TRUE => not(tasks = {})) & (active = TRUE => idle: runable) & (active = TRUE => not(idle: blocked)) & (active = TRUE => not(idle: suspended)) & (active = TRUE => not(idle = TASK_NULL)) & (active = TRUE => running: runable) & (active = TRUE => not(running: blocked)) & (active = TRUE => not(running: suspended)) & !que.(que: QUEUE & not(que: queues) => not(que: mutexes)) & !que.(que: QUEUE & not(que: queues) => not(que: semaphores)) & !que.(que: queues_msg & que: queues_msg_full => not(que: queues_msg_empty)) & !que.(que: queues_msg & que: queues_msg_empty => not(que: queues_msg_full)));
("`Local hypotheses'" & tickCount: TICK & tickMissed: TICK & que: queues);
(que: dom(queue_sending));
("`Local hypotheses'" & tickCount: TICK & tickMissed: TICK & !que.(que: queues => queue_sending(que): POW(blocked\/suspended)) & que: queues);
(que: dom(queue_receiving));
("`Local hypotheses'" & tickCount: TICK & tickMissed: TICK & !que.(que: queues => queue_sending(que): POW(blocked\/suspended)) & !que.(que: queues => queue_receiving(que): POW(blocked\/suspended)) & ran(mutex_holder): POW(tasks\/{TASK_NULL}) & mt: mutexes);
(mt: dom(queue_sending));
("`Local hypotheses'" & tickCount: TICK & tickMissed: TICK & !que.(que: queues => queue_sending(que): POW(blocked\/suspended)) & !que.(que: queues => queue_receiving(que): POW(blocked\/suspended)) & ran(mutex_holder): POW(tasks\/{TASK_NULL}) & !mt.(mt: mutexes => queue_sending(mt) = {}) & active = TRUE & not(idle: ran(mutex_holder)) & mt: mutexes_busy);
(mt: dom(mutex_holder));
("`Local hypotheses'" & tickCount: TICK & tickMissed: TICK & !que.(que: queues => queue_sending(que): POW(blocked\/suspended)) & !que.(que: queues => queue_receiving(que): POW(blocked\/suspended)) & ran(mutex_holder): POW(tasks\/{TASK_NULL}) & !mt.(mt: mutexes => queue_sending(mt) = {}) & active = TRUE & not(idle: ran(mutex_holder)) & !mt.(mt: mutexes_busy => mutex_holder(mt): tasks) & mt: mutexes & not(mt: mutexes_busy));
(mt: dom(mutex_holder));
("`Local hypotheses'" & mt: mutexes_busy & active = TRUE);
(mt: dom(mutex_holder));
("`Local hypotheses'" & (active = TRUE => !mt.(mt: mutexes_busy => not(mutex_holder(mt) = idle))) & que: queues & task: TASK & not(task: blocked) & not(task: suspended));
(que: dom(queue_sending));
("`Local hypotheses'" & (active = TRUE => !mt.(mt: mutexes_busy => not(mutex_holder(mt) = idle))) & !(que,task).(que: queues & task: TASK & not(task: blocked) & not(task: suspended) => not(task: queue_sending(que))) & que: queues & task: TASK & not(task: blocked) & not(task: suspended));
(que: dom(queue_receiving));
("`Local hypotheses'" & (active = TRUE => !mt.(mt: mutexes_busy => not(mutex_holder(mt) = idle))) & !(que,task).(que: queues & task: TASK & not(task: blocked) & not(task: suspended) => not(task: queue_sending(que))) & !(que,task).(que: queues & task: TASK & not(task: blocked) & not(task: suspended) => not(task: queue_receiving(que))) & que: queues & task: tasks);
(que: dom(queue_sending));
("`Local hypotheses'" & (active = TRUE => !mt.(mt: mutexes_busy => not(mutex_holder(mt) = idle))) & !(que,task).(que: queues & task: TASK & not(task: blocked) & not(task: suspended) => not(task: queue_sending(que))) & !(que,task).(que: queues & task: TASK & not(task: blocked) & not(task: suspended) => not(task: queue_receiving(que))) & !(que,task).(que: queues & task: tasks & task: queue_sending(que) => task: blocked\/suspended) & que: queues & task: tasks);
(que: dom(queue_receiving));
("`xTaskCreate preconditions in previous components'" & btrue);
("`xTaskCreate preconditions in this component'" & pvTaskCode: TASK_CODE & pcName: NAME & usStackDepth: INTEGER & 0<=usStackDepth & usStackDepth<=maxint & pvParameters: POW(PARAMETER) & uxPriority: PRIORITY);
("`vTaskDelay preconditions in previous components'" & btrue);
("`vTaskDelay preconditions in this component'" & xTicksToDelay: TICK & INCLUDE_vTaskDelay = 1 & not(running = idle) & running: runable);
("`vTaskDelayUntil preconditions in previous components'" & btrue);
("`vTaskDelayUntil preconditions in this component'" & pxPreviousWakeTime: TICK & xTimeIncrement: TICK & not(running = idle) & INCLUDE_vTaskDelayUntil = 1 & running: runable);
("`Local hypotheses'" & 1<=xTimeIncrement);
(pxPreviousWakeTime,xTimeIncrement: dom(TICK_INCREMENT));
("`vTaskDelete preconditions in previous components'" & btrue);
("`vTaskDelete preconditions in this component'" & INCLUDE_vTaskDelete = 1 & pxTaskToDelete: TASK & pxTaskToDelete: tasks & not(pxTaskToDelete = idle) & not(pxTaskToDelete: ran(mutex_holder)));
("`Local hypotheses'" & pxQueue: queues);
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & pxQueue: queues & pxTaskToDelete: queue_receiving(pxQueue) & n_receiving: POW(TASK));
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & pxQueue: queues & pxTaskToDelete: queue_receiving(pxQueue) & n_receiving: POW(TASK));
(pxQueue: dom(first_receiving));
("`Local hypotheses'" & pxQueue: queues & pxTaskToDelete: queue_receiving(pxQueue) & n_receiving: POW(TASK) & n_receiving = queue_receiving(pxQueue)-{first_receiving(pxQueue)} & n_first: TASK);
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & pxQueue: queues & n_sending: POW(TASK) & n_first: TASK);
(pxQueue: dom(queue_sending));
("`Local hypotheses'" & pxQueue: queues & n_sending: POW(TASK) & n_first: TASK & pxTaskToDelete: queue_sending(pxQueue));
(pxQueue: dom(queue_sending));
("`Local hypotheses'" & pxQueue: queues & n_sending: POW(TASK) & n_first: TASK & pxTaskToDelete: queue_sending(pxQueue));
(pxQueue: dom(first_sending));
("`Local hypotheses'" & pxQueue: queues & n_sending: POW(TASK) & n_first: TASK & pxTaskToDelete: queue_sending(pxQueue) & n_sending = queue_sending(pxQueue)-{first_sending(pxQueue)});
(pxQueue: dom(first_sending));
("`vTaskEndScheduler preconditions in previous components'" & btrue);
("`vTaskEndScheduler preconditions in this component'" & active = TRUE);
("`xTaskGetCurrentTaskHandle preconditions in previous components'" & btrue);
("`xTaskGetCurrentTaskHandle preconditions in this component'" & INCLUDE_xTaskGetCurrentTaskHandle = 1);
("`uxTaskGetNumberOfTasks preconditions in previous components'" & btrue);
("`uxTaskGetNumberOfTasks preconditions in this component'" & btrue);
("`Local hypotheses'" & btrue);
(tasks: FIN(tasks));
("`uxTaskPriorityGet preconditions in previous components'" & btrue);
("`uxTaskPriorityGet preconditions in this component'" & pxTask: TASK & pxTask: tasks & INCLUDE_uxTaskPriorityGet = 1);
("`vTaskPrioritySet preconditions in previous components'" & btrue);
("`vTaskPrioritySet preconditions in this component'" & pxTask: tasks & uxNewPriority: PRIORITY & active = TRUE & not(pxTask = idle));
("`vTaskResume preconditions in previous components'" & btrue);
("`vTaskResume preconditions in this component'" & INCLUDE_vTaskSuspend = 1 & not(suspended = {}) & pxTaskToResume: TASK & pxTaskToResume: suspended & active = TRUE);
("`Local hypotheses'" & pxQueue: queues);
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & pxQueue: queues & pxTaskToResume: queue_receiving(pxQueue) & n_receiving: POW(TASK));
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & pxQueue: queues & pxTaskToResume: queue_receiving(pxQueue) & n_receiving: POW(TASK));
(pxQueue: dom(first_receiving));
("`Local hypotheses'" & pxQueue: queues & pxTaskToResume: queue_receiving(pxQueue) & n_receiving: POW(TASK) & n_receiving = queue_receiving(pxQueue)-{first_receiving(pxQueue)} & n_first: TASK);
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & pxQueue: queues & n_sending: POW(TASK) & n_first: TASK);
(pxQueue: dom(queue_sending));
("`Local hypotheses'" & pxQueue: queues & n_sending: POW(TASK) & n_first: TASK & pxTaskToResume: queue_sending(pxQueue));
(pxQueue: dom(queue_sending));
("`Local hypotheses'" & pxQueue: queues & n_sending: POW(TASK) & n_first: TASK & pxTaskToResume: queue_sending(pxQueue));
(pxQueue: dom(first_sending));
("`Local hypotheses'" & pxQueue: queues & n_sending: POW(TASK) & n_first: TASK & pxTaskToResume: queue_sending(pxQueue) & n_sending = queue_sending(pxQueue)-{first_sending(pxQueue)});
(pxQueue: dom(first_sending));
("`beforeResumeAll preconditions in previous components'" & btrue);
("`beforeResumeAll preconditions in this component'" & active = FALSE);
("`Local hypotheses'" & btrue);
(tickCount,tickMissed: dom(TICK_INCREMENT));
("`xTaskResumeAll preconditions in previous components'" & btrue);
("`xTaskResumeAll preconditions in this component'" & active = FALSE);
("`Local hypotheses'" & unblocked: POW(TASK) & not(queue_sending = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending));
(queue_sending,unblocked: dom(remove_task));
("`Local hypotheses'" & unblocked: POW(TASK) & not(queue_sending = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending) & n_sending = remove_task(queue_sending,unblocked) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending) & q1: queues & q1: dom(n_first));
(q1: dom(n_sending));
("`Local hypotheses'" & unblocked: POW(TASK) & not(queue_sending = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending) & n_sending = remove_task(queue_sending,unblocked) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending) & q1: queues & q1: dom(n_first) & not(n_sending(q1) = {}));
(q1: dom(n_sending));
("`Local hypotheses'" & unblocked: POW(TASK) & not(queue_receiving = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving));
(queue_receiving,unblocked: dom(remove_task));
("`Local hypotheses'" & unblocked: POW(TASK) & not(queue_receiving = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving) & n_receiving = remove_task(queue_receiving,unblocked) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving) & q1: queues & q1: dom(n_first));
(q1: dom(n_receiving));
("`Local hypotheses'" & unblocked: POW(TASK) & not(queue_receiving = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving) & n_receiving = remove_task(queue_receiving,unblocked) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving) & q1: queues & q1: dom(n_first) & not(n_receiving(q1) = {}));
(q1: dom(n_receiving));
("`Local hypotheses'" & unblocked: POW(TASK));
(tickCount,tickMissed: dom(TICK_INCREMENT));
("`vTaskStartScheduler preconditions in previous components'" & btrue);
("`vTaskStartScheduler preconditions in this component'" & active = FALSE);
("`vTaskSuspend preconditions in previous components'" & btrue);
("`vTaskSuspend preconditions in this component'" & INCLUDE_vTaskSuspend = 1 & pxTaskToSuspend: TASK & pxTaskToSuspend: tasks & not(pxTaskToSuspend = idle));
("`Local hypotheses'" & not(pxTaskToSuspend: suspended) & pxQueue: queues);
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & not(pxTaskToSuspend: suspended) & pxQueue: queues & pxTaskToSuspend: queue_receiving(pxQueue) & n_receiving: POW(TASK));
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & not(pxTaskToSuspend: suspended) & pxQueue: queues & pxTaskToSuspend: queue_receiving(pxQueue) & n_receiving: POW(TASK));
(pxQueue: dom(first_receiving));
("`Local hypotheses'" & not(pxTaskToSuspend: suspended) & pxQueue: queues & pxTaskToSuspend: queue_receiving(pxQueue) & n_receiving: POW(TASK) & n_receiving = queue_receiving(pxQueue)-{first_receiving(pxQueue)} & n_first: TASK);
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & not(pxTaskToSuspend: suspended) & pxQueue: queues & n_sending: POW(TASK) & n_first: TASK);
(pxQueue: dom(queue_sending));
("`Local hypotheses'" & not(pxTaskToSuspend: suspended) & pxQueue: queues & n_sending: POW(TASK) & n_first: TASK & pxTaskToSuspend: queue_sending(pxQueue));
(pxQueue: dom(queue_sending));
("`Local hypotheses'" & not(pxTaskToSuspend: suspended) & pxQueue: queues & n_sending: POW(TASK) & n_first: TASK & pxTaskToSuspend: queue_sending(pxQueue));
(pxQueue: dom(first_sending));
("`Local hypotheses'" & not(pxTaskToSuspend: suspended) & pxQueue: queues & n_sending: POW(TASK) & n_first: TASK & pxTaskToSuspend: queue_sending(pxQueue) & n_sending = queue_sending(pxQueue)-{first_sending(pxQueue)});
(pxQueue: dom(first_sending));
("`vTaskSuspendAll preconditions in previous components'" & btrue);
("`vTaskSuspendAll preconditions in this component'" & active = TRUE);
("`xQueueCreate preconditions in previous components'" & btrue);
("`xQueueCreate preconditions in this component'" & uxQueueLength: QUEUE_LENGTH & uxItemSize: INTEGER & 0<=uxItemSize & uxItemSize<=maxint);
("`queueDelete preconditions in previous components'" & btrue);
("`queueDelete preconditions in this component'" & pxQueue: queues_msg & queue_receiving(pxQueue) = {} & queue_sending(pxQueue) = {});
("`Local hypotheses'" & pxQueue: queues & not(pxQueue: semaphores) & not(pxQueue: mutexes));
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & pxQueue: queues & not(pxQueue: semaphores) & not(pxQueue: mutexes));
(pxQueue: dom(queue_sending));
("`Local hypotheses'" & pxQueue: queues_msg);
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & pxQueue: queues_msg & queue_receiving(pxQueue) = {});
(pxQueue: dom(queue_sending));
("`sendItem preconditions in previous components'" & btrue);
("`sendItem preconditions in this component'" & pxQueue: queues_msg & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running = idle) & active = TRUE & not(pvItemToQueue: queue_items(pxQueue)));
("`Local hypotheses'" & not(pxQueue: queues_msg_full));
(pxQueue: dom(queue_items));
("`Local hypotheses'" & not(pxQueue: queues_msg_full));
(pxQueue: dom(queue_items));
("`Local hypotheses'" & not(pxQueue: queues_msg_full));
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(queue_receiving(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK);
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(queue_receiving(pxQueue) = {}) & n_receiving: POW(TASK) & n_first: TASK);
(pxQueue: dom(first_receiving));
("`Local hypotheses'" & not(pxQueue: queues_msg_full));
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & not(pxQueue: queues_msg_full));
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(queue_receiving(pxQueue) = {}));
(pxQueue: dom(first_receiving));
("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(queue_receiving(pxQueue) = {}) & first_receiving(pxQueue): TASK);
(pxQueue: dom(first_receiving));
("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(queue_receiving(pxQueue) = {}) & first_receiving(pxQueue): TASK & first_receiving(pxQueue): blocked\/suspended);
(pxQueue: dom(first_receiving));
("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(queue_receiving(pxQueue) = {}) & first_receiving(pxQueue): TASK & first_receiving(pxQueue): blocked\/suspended & first_receiving(pxQueue): blocked);
(pxQueue: dom(first_receiving));
("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(queue_receiving(pxQueue) = {}) & first_receiving(pxQueue): TASK & first_receiving(pxQueue): blocked\/suspended & first_receiving(pxQueue): blocked);
(pxQueue: dom(first_receiving));
("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(queue_receiving(pxQueue) = {}) & first_receiving(pxQueue): TASK & first_receiving(pxQueue): blocked\/suspended & first_receiving(pxQueue): blocked & first_receiving(pxQueue): unblocked);
(pxQueue: dom(first_receiving));
("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(queue_receiving(pxQueue) = {}) & first_receiving(pxQueue): TASK & first_receiving(pxQueue): blocked\/suspended & first_receiving(pxQueue): blocked);
(pxQueue: dom(first_receiving));
("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(queue_receiving(pxQueue) = {}) & first_receiving(pxQueue): TASK & first_receiving(pxQueue): blocked\/suspended);
(pxQueue: dom(first_receiving));
("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(queue_receiving(pxQueue) = {}) & first_receiving(pxQueue): TASK & first_receiving(pxQueue): blocked\/suspended);
(pxQueue: dom(first_receiving));
("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(queue_receiving(pxQueue) = {}) & first_receiving(pxQueue): TASK & first_receiving(pxQueue): blocked\/suspended & first_receiving(pxQueue): suspended);
(pxQueue: dom(first_receiving));
("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(queue_receiving(pxQueue) = {}) & first_receiving(pxQueue): TASK & first_receiving(pxQueue): blocked\/suspended);
(pxQueue: dom(first_receiving));
("`Local hypotheses'" & not(pxQueue: queues_msg_full) & not(queue_receiving(pxQueue) = {}) & first_receiving(pxQueue): TASK & first_receiving(pxQueue): blocked\/suspended & n_runable: POW(tasks));
(pxQueue: dom(first_receiving));
("`Local hypotheses'" & not(pxQueue: queues_msg_full));
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & pxQueue: queues_msg_full & running: runable & pxQueue: queues & q1: queues);
(q1: dom(queue_sending));
("`Local hypotheses'" & pxQueue: queues_msg_full & running: runable & pxQueue: queues & q1: queues & not(running: queue_sending(q1)));
(q1: dom(queue_receiving));
("`Local hypotheses'" & pxQueue: queues_msg_full & running: runable & pxQueue: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks & q1: queues);
(q1: dom(queue_sending));
("`Local hypotheses'" & pxQueue: queues_msg_full & running: runable & pxQueue: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks & q1: queues & not(running: queue_sending(q1)));
(q1: dom(queue_receiving));
("`Local hypotheses'" & pxQueue: queues_msg_full & running: runable & pxQueue: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(pxQueue: dom(queue_sending));
("`Local hypotheses'" & pxQueue: queues_msg_full & running: runable & pxQueue: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(pxQueue: dom(queue_sending));
("`Local hypotheses'" & pxQueue: queues_msg_full & running: runable & pxQueue: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(pxQueue: dom(queue_sending));
("`Local hypotheses'" & pxQueue: queues_msg_full & running: runable & pxQueue: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(pxQueue: dom(queue_sending));
("`Local hypotheses'" & pxQueue: queues_msg_full & running: runable & pxQueue: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(pxQueue: dom(queue_sending));
("`Local hypotheses'" & pxQueue: queues_msg_full & running: runable & pxQueue: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(pxQueue: dom(queue_sending));
("`Local hypotheses'" & pxQueue: queues_msg & pvItemToQueue: ITEM & xTicksToWait: TICK & copy_position: (1..2)*{COPY_POSITION} & not(running = idle) & active = TRUE);
(pxQueue: dom(queue_items));
("`receiveItem preconditions in previous components'" & btrue);
("`receiveItem preconditions in this component'" & active = TRUE & not(running = idle) & pxQueue: QUEUE & pxQueue: queues_msg & xTicksToWait: TICK & justPeeking: BOOL & running: runable & not(running = TASK_NULL));
("`Local hypotheses'" & pxQueue: queues_msg_empty & pxQueue: queues & q1: queues);
(q1: dom(queue_sending));
("`Local hypotheses'" & pxQueue: queues_msg_empty & pxQueue: queues & q1: queues & not(running: queue_sending(q1)));
(q1: dom(queue_receiving));
("`Local hypotheses'" & pxQueue: queues_msg_empty & pxQueue: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks & q1: queues);
(q1: dom(queue_sending));
("`Local hypotheses'" & pxQueue: queues_msg_empty & pxQueue: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks & q1: queues & not(running: queue_sending(q1)));
(q1: dom(queue_receiving));
("`Local hypotheses'" & pxQueue: queues_msg_empty & pxQueue: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & pxQueue: queues_msg_empty & pxQueue: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & pxQueue: queues_msg_empty & pxQueue: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & pxQueue: queues_msg_empty & pxQueue: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & pxQueue: queues_msg_empty & pxQueue: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & pxQueue: queues_msg_empty & pxQueue: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(pxQueue: dom(queue_receiving));
("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & item: ITEM);
(pxQueue: dom(queue_items));
("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE);
(pxQueue: dom(queue_sending));
("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & n_sending: POW(TASK) & n_first: TASK);
(pxQueue: dom(queue_sending));
("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & n_sending: POW(TASK) & n_first: TASK);
(pxQueue: dom(first_sending));
("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & n_sending: POW(TASK) & n_first: TASK & n_sending = queue_sending(pxQueue)-{first_sending(pxQueue)} & n_first: n_sending);
(pxQueue: dom(queue_items));
("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & item: ITEM & item: queue_items(pxQueue) & justPeeking = FALSE);
(pxQueue: dom(queue_sending));
("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & justPeeking = FALSE);
(pxQueue: dom(queue_sending));
("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}));
(pxQueue: dom(first_sending));
("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & first_sending(pxQueue): TASK);
(pxQueue: dom(first_sending));
("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & first_sending(pxQueue): TASK & first_sending(pxQueue): blocked\/suspended);
(pxQueue: dom(first_sending));
("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & first_sending(pxQueue): TASK & first_sending(pxQueue): blocked\/suspended & first_sending(pxQueue): blocked);
(pxQueue: dom(first_sending));
("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & first_sending(pxQueue): TASK & first_sending(pxQueue): blocked\/suspended & first_sending(pxQueue): blocked);
(pxQueue: dom(first_sending));
("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & first_sending(pxQueue): TASK & first_sending(pxQueue): blocked\/suspended & first_sending(pxQueue): blocked & first_sending(pxQueue): unblocked);
(pxQueue: dom(first_sending));
("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & first_sending(pxQueue): TASK & first_sending(pxQueue): blocked\/suspended & first_sending(pxQueue): blocked);
(pxQueue: dom(first_sending));
("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & first_sending(pxQueue): TASK & first_sending(pxQueue): blocked\/suspended);
(pxQueue: dom(first_sending));
("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & first_sending(pxQueue): TASK & first_sending(pxQueue): blocked\/suspended);
(pxQueue: dom(first_sending));
("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & first_sending(pxQueue): TASK & first_sending(pxQueue): blocked\/suspended & first_sending(pxQueue): suspended);
(pxQueue: dom(first_sending));
("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & first_sending(pxQueue): TASK & first_sending(pxQueue): blocked\/suspended);
(pxQueue: dom(first_sending));
("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & justPeeking = FALSE & not(queue_sending(pxQueue) = {}) & first_sending(pxQueue): TASK & first_sending(pxQueue): blocked\/suspended & n_runable: POW(tasks));
(pxQueue: dom(first_sending));
("`Local hypotheses'" & not(pxQueue: queues_msg_empty) & justPeeking = FALSE);
(pxQueue: dom(queue_sending));
("`vSemaphoreCreateBinary preconditions in previous components'" & btrue);
("`vSemaphoreCreateBinary preconditions in this component'" & btrue);
("`vSemaphoreCreateCounting preconditions in previous components'" & btrue);
("`vSemaphoreCreateCounting preconditions in this component'" & maxCount: QUEUE_LENGTH & initialCount: QUEUE_QUANT & initialCount<=maxCount);
("`deleteSemaphore preconditions in previous components'" & btrue);
("`deleteSemaphore preconditions in this component'" & semaphore: semaphores & not(queue_sending(semaphore) = {}) & not(queue_receiving(semaphore) = {}));
("`Local hypotheses'" & semaphore: semaphores);
(semaphore: dom(queue_sending));
("`Local hypotheses'" & semaphore: semaphores & not(queue_sending(semaphore) = {}));
(semaphore: dom(queue_receiving));
("`takeSemaphore preconditions in previous components'" & btrue);
("`takeSemaphore preconditions in this component'" & semaphore: semaphores & xTicksToWait: TICK & not(running = idle) & active = TRUE & not(running = TASK_NULL));
("`Local hypotheses'" & not(semaphore: semaphores_busy) & n_sending: POW(TASK));
(semaphore: dom(queue_sending));
("`Local hypotheses'" & not(semaphore: semaphores_busy) & n_sending: POW(TASK));
(semaphore: dom(first_sending));
("`Local hypotheses'" & not(semaphore: semaphores_busy));
(semaphore: dom(queue_sending));
("`Local hypotheses'" & not(semaphore: semaphores_busy) & not(queue_sending(semaphore) = {}));
(semaphore: dom(first_sending));
("`Local hypotheses'" & not(semaphore: semaphores_busy) & not(queue_sending(semaphore) = {}) & first_sending(semaphore): TASK);
(semaphore: dom(first_sending));
("`Local hypotheses'" & not(semaphore: semaphores_busy) & not(queue_sending(semaphore) = {}) & first_sending(semaphore): TASK & first_sending(semaphore): blocked\/suspended);
(semaphore: dom(first_sending));
("`Local hypotheses'" & not(semaphore: semaphores_busy) & not(queue_sending(semaphore) = {}) & first_sending(semaphore): TASK & first_sending(semaphore): blocked\/suspended & first_sending(semaphore): blocked);
(semaphore: dom(first_sending));
("`Local hypotheses'" & not(semaphore: semaphores_busy) & not(queue_sending(semaphore) = {}) & first_sending(semaphore): TASK & first_sending(semaphore): blocked\/suspended & first_sending(semaphore): blocked);
(semaphore: dom(first_sending));
("`Local hypotheses'" & not(semaphore: semaphores_busy) & not(queue_sending(semaphore) = {}) & first_sending(semaphore): TASK & first_sending(semaphore): blocked\/suspended & first_sending(semaphore): blocked & first_sending(semaphore): unblocked);
(semaphore: dom(first_sending));
("`Local hypotheses'" & not(semaphore: semaphores_busy) & not(queue_sending(semaphore) = {}) & first_sending(semaphore): TASK & first_sending(semaphore): blocked\/suspended & first_sending(semaphore): blocked);
(semaphore: dom(first_sending));
("`Local hypotheses'" & not(semaphore: semaphores_busy) & not(queue_sending(semaphore) = {}) & first_sending(semaphore): TASK & first_sending(semaphore): blocked\/suspended);
(semaphore: dom(first_sending));
("`Local hypotheses'" & not(semaphore: semaphores_busy) & not(queue_sending(semaphore) = {}) & first_sending(semaphore): TASK & first_sending(semaphore): blocked\/suspended);
(semaphore: dom(first_sending));
("`Local hypotheses'" & not(semaphore: semaphores_busy) & not(queue_sending(semaphore) = {}) & first_sending(semaphore): TASK & first_sending(semaphore): blocked\/suspended & first_sending(semaphore): suspended);
(semaphore: dom(first_sending));
("`Local hypotheses'" & not(semaphore: semaphores_busy) & not(queue_sending(semaphore) = {}) & first_sending(semaphore): TASK & first_sending(semaphore): blocked\/suspended);
(semaphore: dom(first_sending));
("`Local hypotheses'" & not(semaphore: semaphores_busy) & not(queue_sending(semaphore) = {}) & first_sending(semaphore): TASK & first_sending(semaphore): blocked\/suspended & n_runable: POW(tasks));
(semaphore: dom(first_sending));
("`Local hypotheses'" & not(semaphore: semaphores_busy));
(semaphore: dom(queue_sending));
("`Local hypotheses'" & semaphore: semaphores_busy & running: runable & semaphore: queues & q1: queues);
(q1: dom(queue_sending));
("`Local hypotheses'" & semaphore: semaphores_busy & running: runable & semaphore: queues & q1: queues & not(running: queue_sending(q1)));
(q1: dom(queue_receiving));
("`Local hypotheses'" & semaphore: semaphores_busy & running: runable & semaphore: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks & q1: queues);
(q1: dom(queue_sending));
("`Local hypotheses'" & semaphore: semaphores_busy & running: runable & semaphore: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks & q1: queues & not(running: queue_sending(q1)));
(q1: dom(queue_receiving));
("`Local hypotheses'" & semaphore: semaphores_busy & running: runable & semaphore: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(semaphore: dom(queue_receiving));
("`Local hypotheses'" & semaphore: semaphores_busy & running: runable & semaphore: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(semaphore: dom(queue_receiving));
("`Local hypotheses'" & semaphore: semaphores_busy & running: runable & semaphore: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(semaphore: dom(queue_receiving));
("`Local hypotheses'" & semaphore: semaphores_busy & running: runable & semaphore: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(semaphore: dom(queue_receiving));
("`Local hypotheses'" & semaphore: semaphores_busy & running: runable & semaphore: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(semaphore: dom(queue_receiving));
("`Local hypotheses'" & semaphore: semaphores_busy & running: runable & semaphore: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(semaphore: dom(queue_receiving));
("`giveSemaphore preconditions in previous components'" & btrue);
("`giveSemaphore preconditions in this component'" & semaphore: semaphores & xTicksToWait: TICK & not(running = idle) & active = TRUE & not(running = TASK_NULL));
("`Local hypotheses'" & not(semaphore: semaphores_full) & n_receiving: POW(TASK));
(semaphore: dom(queue_receiving));
("`Local hypotheses'" & not(semaphore: semaphores_full) & n_receiving: POW(TASK));
(semaphore: dom(first_receiving));
("`Local hypotheses'" & not(semaphore: semaphores_full));
(semaphore: dom(queue_receiving));
("`Local hypotheses'" & not(semaphore: semaphores_full) & not(queue_receiving(semaphore) = {}));
(semaphore: dom(first_receiving));
("`Local hypotheses'" & not(semaphore: semaphores_full) & not(queue_receiving(semaphore) = {}) & first_receiving(semaphore): TASK);
(semaphore: dom(first_receiving));
("`Local hypotheses'" & not(semaphore: semaphores_full) & not(queue_receiving(semaphore) = {}) & first_receiving(semaphore): TASK & first_receiving(semaphore): blocked\/suspended);
(semaphore: dom(first_receiving));
("`Local hypotheses'" & not(semaphore: semaphores_full) & not(queue_receiving(semaphore) = {}) & first_receiving(semaphore): TASK & first_receiving(semaphore): blocked\/suspended & first_receiving(semaphore): blocked);
(semaphore: dom(first_receiving));
("`Local hypotheses'" & not(semaphore: semaphores_full) & not(queue_receiving(semaphore) = {}) & first_receiving(semaphore): TASK & first_receiving(semaphore): blocked\/suspended & first_receiving(semaphore): blocked);
(semaphore: dom(first_receiving));
("`Local hypotheses'" & not(semaphore: semaphores_full) & not(queue_receiving(semaphore) = {}) & first_receiving(semaphore): TASK & first_receiving(semaphore): blocked\/suspended & first_receiving(semaphore): blocked & first_receiving(semaphore): unblocked);
(semaphore: dom(first_receiving));
("`Local hypotheses'" & not(semaphore: semaphores_full) & not(queue_receiving(semaphore) = {}) & first_receiving(semaphore): TASK & first_receiving(semaphore): blocked\/suspended & first_receiving(semaphore): blocked);
(semaphore: dom(first_receiving));
("`Local hypotheses'" & not(semaphore: semaphores_full) & not(queue_receiving(semaphore) = {}) & first_receiving(semaphore): TASK & first_receiving(semaphore): blocked\/suspended);
(semaphore: dom(first_receiving));
("`Local hypotheses'" & not(semaphore: semaphores_full) & not(queue_receiving(semaphore) = {}) & first_receiving(semaphore): TASK & first_receiving(semaphore): blocked\/suspended);
(semaphore: dom(first_receiving));
("`Local hypotheses'" & not(semaphore: semaphores_full) & not(queue_receiving(semaphore) = {}) & first_receiving(semaphore): TASK & first_receiving(semaphore): blocked\/suspended & first_receiving(semaphore): suspended);
(semaphore: dom(first_receiving));
("`Local hypotheses'" & not(semaphore: semaphores_full) & not(queue_receiving(semaphore) = {}) & first_receiving(semaphore): TASK & first_receiving(semaphore): blocked\/suspended);
(semaphore: dom(first_receiving));
("`Local hypotheses'" & not(semaphore: semaphores_full) & not(queue_receiving(semaphore) = {}) & first_receiving(semaphore): TASK & first_receiving(semaphore): blocked\/suspended & n_runable: POW(tasks));
(semaphore: dom(first_receiving));
("`Local hypotheses'" & not(semaphore: semaphores_full));
(semaphore: dom(queue_receiving));
("`Local hypotheses'" & semaphore: semaphores_full & running: runable & semaphore: queues & q1: queues);
(q1: dom(queue_sending));
("`Local hypotheses'" & semaphore: semaphores_full & running: runable & semaphore: queues & q1: queues & not(running: queue_sending(q1)));
(q1: dom(queue_receiving));
("`Local hypotheses'" & semaphore: semaphores_full & running: runable & semaphore: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks & q1: queues);
(q1: dom(queue_sending));
("`Local hypotheses'" & semaphore: semaphores_full & running: runable & semaphore: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks & q1: queues & not(running: queue_sending(q1)));
(q1: dom(queue_receiving));
("`Local hypotheses'" & semaphore: semaphores_full & running: runable & semaphore: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(semaphore: dom(queue_sending));
("`Local hypotheses'" & semaphore: semaphores_full & running: runable & semaphore: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(semaphore: dom(queue_sending));
("`Local hypotheses'" & semaphore: semaphores_full & running: runable & semaphore: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(semaphore: dom(queue_sending));
("`Local hypotheses'" & semaphore: semaphores_full & running: runable & semaphore: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(semaphore: dom(queue_sending));
("`Local hypotheses'" & semaphore: semaphores_full & running: runable & semaphore: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(semaphore: dom(queue_sending));
("`Local hypotheses'" & semaphore: semaphores_full & running: runable & semaphore: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))) & running: tasks);
(semaphore: dom(queue_sending));
("`xQueueCreateMutex preconditions in previous components'" & btrue);
("`xQueueCreateMutex preconditions in this component'" & btrue);
("`takeMutex preconditions in previous components'" & btrue);
("`takeMutex preconditions in this component'" & mutex: mutexes & xTicksToWait: TICK & active = TRUE & not(running = idle));
("`Local hypotheses'" & mutex: mutexes_busy);
(mutex: dom(mutex_holder));
("`Local hypotheses'" & mutex: mutexes_busy & mutex_holder(mutex): tasks);
(mutex: dom(mutex_holder));
("`Local hypotheses'" & mutex: mutexes_busy & mutex_holder(mutex): tasks & not(mutex_holder(mutex) = idle) & running: runable & mutex: queues & q1: queues);
(q1: dom(queue_sending));
("`Local hypotheses'" & mutex: mutexes_busy & mutex_holder(mutex): tasks & not(mutex_holder(mutex) = idle) & running: runable & mutex: queues & q1: queues & not(running: queue_sending(q1)));
(q1: dom(queue_receiving));
("`Local hypotheses'" & mutex: mutexes_busy & mutex_holder(mutex): tasks & not(mutex_holder(mutex) = idle) & running: runable & mutex: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))));
(mutex: dom(queue_receiving));
("`Local hypotheses'" & mutex: mutexes_busy & mutex_holder(mutex): tasks & not(mutex_holder(mutex) = idle) & running: runable & mutex: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))));
(mutex: dom(queue_receiving));
("`Local hypotheses'" & mutex: mutexes_busy & mutex_holder(mutex): tasks & not(mutex_holder(mutex) = idle) & running: runable & mutex: queues & !q1.(q1: queues => not(running: queue_sending(q1)) & not(running: queue_receiving(q1))));
(mutex: dom(queue_receiving));
("`giveMutex preconditions in previous components'" & btrue);
("`giveMutex preconditions in this component'" & mutex: mutexes & mutex: mutexes_busy & mutex_holder(mutex) = running & xTicksToWait: TICK & active = TRUE);
("`Local hypotheses'" & n_receiving: POW(TASK));
(mutex: dom(queue_receiving));
("`Local hypotheses'" & n_receiving: POW(TASK));
(mutex: dom(first_receiving));
("`Local hypotheses'" & btrue);
(mutex: dom(queue_receiving));
("`Local hypotheses'" & not(queue_receiving(mutex) = {}));
(mutex: dom(first_receiving));
("`Local hypotheses'" & not(queue_receiving(mutex) = {}) & first_receiving(mutex): TASK);
(mutex: dom(first_receiving));
("`Local hypotheses'" & not(queue_receiving(mutex) = {}) & first_receiving(mutex): TASK & first_receiving(mutex): tasks);
(mutex: dom(first_receiving));
("`Local hypotheses'" & not(queue_receiving(mutex) = {}) & first_receiving(mutex): TASK & first_receiving(mutex): tasks & first_receiving(mutex): blocked\/suspended & not(running = idle));
(mutex: dom(first_receiving));
("`Local hypotheses'" & not(queue_receiving(mutex) = {}) & first_receiving(mutex): TASK & first_receiving(mutex): tasks & first_receiving(mutex): blocked\/suspended & not(running = idle) & first_receiving(mutex): blocked);
(mutex: dom(first_receiving));
("`Local hypotheses'" & not(queue_receiving(mutex) = {}) & first_receiving(mutex): TASK & first_receiving(mutex): tasks & first_receiving(mutex): blocked\/suspended & not(running = idle) & first_receiving(mutex): blocked);
(mutex: dom(first_receiving));
("`Local hypotheses'" & not(queue_receiving(mutex) = {}) & first_receiving(mutex): TASK & first_receiving(mutex): tasks & first_receiving(mutex): blocked\/suspended & not(running = idle) & first_receiving(mutex): blocked & first_receiving(mutex): unblocked);
(mutex: dom(first_receiving));
("`Local hypotheses'" & not(queue_receiving(mutex) = {}) & first_receiving(mutex): TASK & first_receiving(mutex): tasks & first_receiving(mutex): blocked\/suspended & not(running = idle) & first_receiving(mutex): blocked);
(mutex: dom(first_receiving));
("`Local hypotheses'" & not(queue_receiving(mutex) = {}) & first_receiving(mutex): TASK & first_receiving(mutex): tasks & first_receiving(mutex): blocked\/suspended & not(running = idle));
(mutex: dom(first_receiving));
("`Local hypotheses'" & not(queue_receiving(mutex) = {}) & first_receiving(mutex): TASK & first_receiving(mutex): tasks & first_receiving(mutex): blocked\/suspended & not(running = idle));
(mutex: dom(first_receiving));
("`Local hypotheses'" & not(queue_receiving(mutex) = {}) & first_receiving(mutex): TASK & first_receiving(mutex): tasks & first_receiving(mutex): blocked\/suspended & not(running = idle) & first_receiving(mutex): suspended);
(mutex: dom(first_receiving));
("`Local hypotheses'" & not(queue_receiving(mutex) = {}) & first_receiving(mutex): TASK & first_receiving(mutex): tasks & first_receiving(mutex): blocked\/suspended & not(running = idle));
(mutex: dom(first_receiving));
("`Local hypotheses'" & not(queue_receiving(mutex) = {}) & first_receiving(mutex): TASK & first_receiving(mutex): tasks & first_receiving(mutex): blocked\/suspended & not(running = idle) & n_runable: POW(tasks));
(mutex: dom(first_receiving));
("`Local hypotheses'" & btrue);
(mutex: dom(queue_receiving));
("`Local hypotheses'" & mutex: mutexes & mutex: mutexes_busy);
(mutex: dom(mutex_holder));
("`xTaskGetTickCount preconditions in previous components'" & btrue);
("`xTaskGetTickCount preconditions in this component'" & INCLUDE_xTaskGetCurrentTaskHandle = 1);
("`incrementTick preconditions in previous components'" & btrue);
("`incrementTick preconditions in this component'" & active = TRUE);
("`Local hypotheses'" & btrue);
(tickCount,1: dom(TICK_INCREMENT));
("`Local hypotheses'" & TICK_INCREMENT(tickCount,1): TICK);
(tickCount,1: dom(TICK_INCREMENT));
("`afterIncrementTick preconditions in previous components'" & btrue);
("`afterIncrementTick preconditions in this component'" & active = TRUE);
("`Local hypotheses'" & unblocked: POW(TASK) & not(queue_sending = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending));
(queue_sending,unblocked: dom(remove_task));
("`Local hypotheses'" & unblocked: POW(TASK) & not(queue_sending = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending) & n_sending = remove_task(queue_sending,unblocked) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending) & q1: queues & q1: dom(n_first));
(q1: dom(n_sending));
("`Local hypotheses'" & unblocked: POW(TASK) & not(queue_sending = {}) & n_sending: QUEUE +-> POW(TASK) & dom(n_sending) = dom(queue_sending) & n_sending = remove_task(queue_sending,unblocked) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_sending) & q1: queues & q1: dom(n_first) & not(n_sending(q1) = {}));
(q1: dom(n_sending));
("`Local hypotheses'" & unblocked: POW(TASK) & not(queue_receiving = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving));
(queue_receiving,unblocked: dom(remove_task));
("`Local hypotheses'" & unblocked: POW(TASK) & not(queue_receiving = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving) & n_receiving = remove_task(queue_receiving,unblocked) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving) & q1: queues & q1: dom(n_first));
(q1: dom(n_receiving));
("`Local hypotheses'" & unblocked: POW(TASK) & not(queue_receiving = {}) & n_receiving: QUEUE +-> POW(TASK) & dom(n_receiving) = dom(queue_receiving) & n_receiving = remove_task(queue_receiving,unblocked) & n_first: QUEUE +-> TASK & dom(n_first) = dom(first_receiving) & q1: queues & q1: dom(n_first) & not(n_receiving(q1) = {}));
(q1: dom(n_receiving))

END
&

THEORY EnumerateX IS
(SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED});
(COPY_POSITION == {queueSEND_TO_BACK,queueSEND_TO_FRONT});
(QUEUE_TYPE == {TQUE,TSEMAPH,TMUT});
(ERROR_DEFINITION == {errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY,errNO_TASK_TO_RUN,errQUEUE_BLOCKED,errQUEUE_YIELD,errQUEUE_EMPTY,errQUEUE_FULL,pdPASS,pdFAIL,pdTRUE,pdFALSE});
(SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED});
(COPY_POSITION == {queueSEND_TO_BACK,queueSEND_TO_FRONT});
(QUEUE_TYPE == {TQUE,TSEMAPH,TMUT});
(ERROR_DEFINITION == {errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY,errNO_TASK_TO_RUN,errQUEUE_BLOCKED,errQUEUE_YIELD,errQUEUE_EMPTY,errQUEUE_FULL,pdPASS,pdFAIL,pdTRUE,pdFALSE})

END
