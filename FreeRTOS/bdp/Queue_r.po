THEORY ProofList IS
  _f(1) & _f(2) & _f(9) & createMutex.4,(_f(95) & _f(93) => _f(98));
  _f(1) & _f(2) & _f(9) & createMutex.3,(_f(95) & _f(18) => _f(97));
  _f(1) & _f(2) & _f(9) & createMutex.2,(_f(95) & _f(14) => _f(91));
  _f(1) & _f(2) & _f(9) & createMutex.1,(_f(95) & _f(12) => _f(96));
  _f(1) & _f(2) & _f(9) & _f(88) & createSemaphore.4,(_f(89) & _f(93) => _f(94));
  _f(1) & _f(2) & _f(9) & _f(88) & createSemaphore.3,(_f(89) & _f(18) => _f(92));
  _f(1) & _f(2) & _f(9) & _f(88) & createSemaphore.2,(_f(89) & _f(14) => _f(91));
  _f(1) & _f(2) & _f(9) & _f(88) & createSemaphore.1,(_f(89) & _f(12) => _f(90));
  _f(1) & _f(2) & _f(9) & q_endScheduler.3,(_f(18) => _f(8));
  _f(1) & _f(2) & _f(9) & q_endScheduler.2,(_f(14) => _f(6));
  _f(1) & _f(2) & _f(9) & q_endScheduler.1,(_f(12) => _f(4));
  _f(1) & _f(2) & _f(9) & _f(73) & removeFromEventListQueue.6,(_f(85) & _f(86) => _f(87));
  _f(1) & _f(2) & _f(9) & _f(73) & removeFromEventListQueue.5,(_f(74) & _f(83) => _f(84));
  _f(1) & _f(2) & _f(9) & _f(73) & removeFromEventListQueue.4,(_f(74) & _f(81) => _f(82));
  _f(1) & _f(2) & _f(9) & _f(73) & removeFromEventListQueue.3,(_f(74) & _f(79) => _f(80));
  _f(1) & _f(2) & _f(9) & _f(73) & removeFromEventListQueue.2,(_f(74) & _f(77) => _f(78));
  _f(1) & _f(2) & _f(9) & _f(73) & removeFromEventListQueue.1,(_f(74) & _f(75) => _f(76));
  _f(1) & _f(2) & _f(9) & _f(60) & receivedItem.14,(_f(72) & _f(30) => _f(64));
  _f(1) & _f(2) & _f(9) & _f(60) & receivedItem.13,(_f(72) & _f(30) => _f(63));
  _f(1) & _f(2) & _f(9) & _f(60) & receivedItem.12,(_f(71) & _f(30) => _f(64));
  _f(1) & _f(2) & _f(9) & _f(60) & receivedItem.11,(_f(71) & _f(30) => _f(63));
  _f(1) & _f(2) & _f(9) & _f(60) & receivedItem.10,(_f(70) & _f(21) => _f(68));
  _f(1) & _f(2) & _f(9) & _f(60) & receivedItem.9,(_f(69) & _f(16) => _f(66));
  _f(1) & _f(2) & _f(9) & _f(60) & receivedItem.8,(_f(69) & _f(14) => _f(65));
  _f(1) & _f(2) & _f(9) & _f(60) & receivedItem.7,(_f(69) & _f(30) => _f(64));
  _f(1) & _f(2) & _f(9) & _f(60) & receivedItem.6,(_f(69) & _f(30) => _f(63));
  _f(1) & _f(2) & _f(9) & _f(60) & receivedItem.5,(_f(67) & _f(21) => _f(68));
  _f(1) & _f(2) & _f(9) & _f(60) & receivedItem.4,(_f(61) & _f(16) => _f(66));
  _f(1) & _f(2) & _f(9) & _f(60) & receivedItem.3,(_f(61) & _f(14) => _f(65));
  _f(1) & _f(2) & _f(9) & _f(60) & receivedItem.2,(_f(61) & _f(62) => _f(64));
  _f(1) & _f(2) & _f(9) & _f(60) & receivedItem.1,(_f(61) & _f(62) => _f(63));
  _f(1) & _f(2) & _f(9) & _f(45) & sendItem.8,(_f(58) & _f(21) => _f(59));
  _f(1) & _f(2) & _f(9) & _f(45) & sendItem.7,(_f(56) & _f(16) => _f(57));
  _f(1) & _f(2) & _f(9) & _f(45) & sendItem.6,(_f(54) & _f(21) => _f(55));
  _f(1) & _f(2) & _f(9) & _f(45) & sendItem.5,(_f(51) & _f(16) => _f(53));
  _f(1) & _f(2) & _f(9) & _f(45) & sendItem.4,(_f(51) & _f(14) => _f(52));
  _f(1) & _f(2) & _f(9) & _f(45) & sendItem.3,(_f(49) & _f(21) => _f(50));
  _f(1) & _f(2) & _f(9) & _f(45) & sendItem.2,(_f(46) & _f(16) => _f(48));
  _f(1) & _f(2) & _f(9) & _f(45) & sendItem.1,(_f(46) & _f(14) => _f(47));
  _f(1) & _f(2) & _f(9) & _f(37) & queueDelete.5,(_f(43) & _f(21) => _f(44));
  _f(1) & _f(2) & _f(9) & _f(37) & queueDelete.4,(_f(38) & _f(18) => _f(42));
  _f(1) & _f(2) & _f(9) & _f(37) & queueDelete.3,(_f(38) & _f(16) => _f(41));
  _f(1) & _f(2) & _f(9) & _f(37) & queueDelete.2,(_f(38) & _f(14) => _f(40));
  _f(1) & _f(2) & _f(9) & _f(37) & queueDelete.1,(_f(38) & _f(12) => _f(39));
  _f(1) & _f(2) & _f(9) & _f(10) & xQueueCreate.12,(_f(35) & _f(21) => _f(36));
  _f(1) & _f(2) & _f(9) & _f(10) & xQueueCreate.11,(_f(23) & _f(16) => _f(34));
  _f(1) & _f(2) & _f(9) & _f(10) & xQueueCreate.10,(_f(23) & _f(32) => _f(33));
  _f(1) & _f(2) & _f(9) & _f(10) & xQueueCreate.9,(_f(23) & _f(30) => _f(31));
  _f(1) & _f(2) & _f(9) & _f(10) & xQueueCreate.8,(_f(23) & _f(28) => _f(29));
  _f(1) & _f(2) & _f(9) & _f(10) & xQueueCreate.7,(_f(23) & _f(26) => _f(27));
  _f(1) & _f(2) & _f(9) & _f(10) & xQueueCreate.6,(_f(23) & _f(24) => _f(25));
  _f(1) & _f(2) & _f(9) & _f(10) & xQueueCreate.5,(_f(20) & _f(21) => _f(22));
  _f(1) & _f(2) & _f(9) & _f(10) & xQueueCreate.4,(_f(11) & _f(18) => _f(19));
  _f(1) & _f(2) & _f(9) & _f(10) & xQueueCreate.3,(_f(11) & _f(16) => _f(17));
  _f(1) & _f(2) & _f(9) & _f(10) & xQueueCreate.2,(_f(11) & _f(14) => _f(15));
  _f(1) & _f(2) & _f(9) & _f(10) & xQueueCreate.1,(_f(11) & _f(12) => _f(13));
  _f(1) & _f(2) & Initialisation.3,(_f(7) => _f(8));
  _f(1) & _f(2) & Initialisation.2,(_f(5) => _f(6));
  _f(1) & _f(2) & Initialisation.1,(_f(3) => _f(4))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & BIT = 0..1 & MAX_DELAY: 0..2147483647 & 1<=MAX_DELAY & NULL_PARAMETER: PARAMETER & PRIORITY: POW(NAT) & TICK: POW(NAT) & TICK = 0..MAX_DELAY & TICK_INCREMENT: TICK*TICK +-> TICK & dom(TICK_INCREMENT) = TICK*TICK & TICK_INCREMENT = %(tick,inc).(tick: TICK & inc: TICK | (tick+inc) mod MAX_DELAY) & QUEUE_NULL: QUEUE & ITEM_NULL: ITEM & TASK_NULL: TASK & REMOVE_EVENT: TASK*POW(QUEUE)*(QUEUE +-> POW(TASK)) +-> (QUEUE +-> POW(TASK)) & REMOVE_EVENT = %(task,queues,pending).(task: TASK & queues: POW(QUEUE) & pending: QUEUE +-> POW(TASK) | %queue.(queue: queues & queue: dom(pending) | pending(queue)-{task})) & NAME: FIN(INTEGER) & not(NAME = {}) & PARAMETER: FIN(INTEGER) & not(PARAMETER = {}) & TASK: FIN(INTEGER) & not(TASK = {}) & STACK: FIN(INTEGER) & not(STACK = {}) & TASK_CODE: FIN(INTEGER) & not(TASK_CODE = {}) & ITEM: FIN(INTEGER) & not(ITEM = {}) & QUEUE: FIN(INTEGER) & not(QUEUE = {}) & (1..3)*{SCHEDULER_STATE}: FIN(NATURAL*{SCHEDULER_STATE}) & not((1..3)*{SCHEDULER_STATE} = {}) & (1..2)*{COPY_POSITION}: FIN(NATURAL*{COPY_POSITION}) & not((1..2)*{COPY_POSITION} = {}) & (1..3)*{QUEUE_TYPE}: FIN(NATURAL*{QUEUE_TYPE}) & not((1..3)*{QUEUE_TYPE} = {}) & (1..10)*{ERROR_DEFINITION}: FIN(NATURAL*{ERROR_DEFINITION}) & not((1..10)*{ERROR_DEFINITION} = {}) & "`Component properties'" & queue_is_full: QUEUE*(QUEUE +-> iseq(ITEM))*(QUEUE +-> NAT) +-> BOOL & dom(queue_is_full) = QUEUE*(QUEUE +-> iseq(ITEM))*(QUEUE +-> NAT) & queue_is_full = %(queue,items,queue_size).(queue: QUEUE & items: QUEUE +-> iseq(ITEM) & queue_size: QUEUE +-> NAT | bool(queue_size(queue) = size(items(queue)))) & "`Previous components properties'" & semSEMAPHORE_QUEUE_ITEM_LENGTH: INTEGER & 0<=semSEMAPHORE_QUEUE_ITEM_LENGTH & semSEMAPHORE_QUEUE_ITEM_LENGTH<=2147483647 & semSEMAPHORE_QUEUE_ITEM_LENGTH = 0 & semGIVE_BLOCK_TIME: TICK & semGIVE_BLOCK_TIME = 0);
  ("`Seen and used machines assertions'" & BIT: POW(NATURAL));
  "`Check that the invariant (queue_size$1: QUEUE +-> NAT) is established by the initialisation - ref 4.3, 5.4'";
  ({}: QUEUE +-> NAT);
  "`Check that the invariant (queue_items_r$1: QUEUE +-> seq(ITEM)) is established by the initialisation - ref 4.3, 5.4'";
  ({}: QUEUE +-> seq(ITEM));
  "`Check that the invariant (dom(queue_size$1) = queues$1) is established by the initialisation - ref 4.3, 5.4'";
  (dom({}) = {});
  ("`Previous components invariants'" & queues$1: POW(QUEUE) & queue_items: QUEUE +-> POW(ITEM) & queue_receiving$1: QUEUE +-> POW(TASK) & queue_sending$1: QUEUE +-> POW(TASK) & queue_type$1: QUEUE +-> (1..3)*{QUEUE_TYPE} & queue_holder$1: QUEUE +-> TASK & queue_recursive$1: QUEUE +-> NAT & queues$1 = dom(queue_items) & queues$1 = dom(queue_receiving$1) & queues$1 = dom(queue_sending$1) & queues$1 = dom(queue_type$1) & dom(queue_holder$1): POW(queues$1) & dom(queue_holder$1): POW(dom(queue_type$1|>{3|->QUEUE_TYPE})) & !queue.(queue: queues$1 & queue_type$1(queue) = 3|->QUEUE_TYPE & queue_items(queue) = {} => queue: dom(queue_holder$1)) & dom(queue_recursive$1): POW(queues$1) & dom(queue_recursive$1): POW(dom(queue_type$1|>{3|->QUEUE_TYPE})) & "`Component invariant'" & queue_size$1: QUEUE +-> NAT & queue_items_r$1: QUEUE +-> seq(ITEM) & dom(queue_items_r$1) = dom(queue_items) & dom(queue_size$1) = queues$1 & !queue.(queue: queues$1 => ran(queue_items_r$1(queue)) = queue_items(queue)) & queues = queues$1 & queue_receiving = queue_receiving$1 & queue_sending = queue_sending$1 & queue_type = queue_type$1 & queue_holder = queue_holder$1 & queue_recursive = queue_recursive$1);
  ("`xQueueCreate preconditions in previous components'" & uxQueueLength: INTEGER & 0<=uxQueueLength & uxQueueLength<=2147483647 & uxItemSize: INTEGER & 0<=uxItemSize & uxItemSize<=2147483647);
  ("`xQueueCreate preconditions in this component'" & uxQueueLength: INTEGER & 0<=uxQueueLength & uxQueueLength<=2147483647 & uxItemSize: INTEGER & 0<=uxItemSize & uxItemSize<=2147483647 & "`Local hypotheses'" & queue: QUEUE & not(queue: queues$1) & (queue = QUEUE_NULL & queue: queues$1 & queue|->{}: queue_receiving$1 & queue|->{}: queue_sending$1 & queue|->(1|->QUEUE_TYPE): queue_type$1 => not(queue_size$1\/{queue|->uxQueueLength}: QUEUE +-> NAT & queue_items_r$1\/{queue|->{}}: QUEUE +-> seq(ITEM) & dom(queue_items_r$1\/{queue|->{}}) = dom(queue_items) & dom(queue_size$1\/{queue|->uxQueueLength}) = queues$1\/{queue} & !(queue$0).(queue$0: queues$1\/{queue} => ran((queue_items_r$1\/{queue|->{}})(queue$0)) = queue_items(queue$0)))));
  "`Check that the invariant (queue_size$1: QUEUE +-> NAT) is preserved by the operation - ref 4.4, 5.5'";
  (queue_size$1\/{queue|->uxQueueLength}: QUEUE +-> NAT);
  "`Check that the invariant (queue_items_r$1: QUEUE +-> seq(ITEM)) is preserved by the operation - ref 4.4, 5.5'";
  (queue_items_r$1\/{queue|->{}}: QUEUE +-> seq(ITEM));
  "`Check that the invariant (dom(queue_items_r$1) = dom(queue_items)) is preserved by the operation - ref 4.4, 5.5'";
  (dom(queue_items_r$1\/{queue|->{}}) = dom(queue_items\/{queue|->{}}));
  "`Check that the invariant (dom(queue_size$1) = queues$1) is preserved by the operation - ref 4.4, 5.5'";
  (dom(queue_size$1\/{queue|->uxQueueLength}) = queues$1\/{queue});
  ("`xQueueCreate preconditions in this component'" & uxQueueLength: INTEGER & 0<=uxQueueLength & uxQueueLength<=2147483647 & uxItemSize: INTEGER & 0<=uxItemSize & uxItemSize<=2147483647 & "`Local hypotheses'" & queue: QUEUE & not(queue: queues$1) & (queue = QUEUE_NULL & queue: queues$1 & queue|->{}: queue_receiving$1 & queue|->{}: queue_sending$1 & queue|->(1|->QUEUE_TYPE): queue_type$1 => not(queue_size$1\/{queue|->uxQueueLength}: QUEUE +-> NAT & queue_items_r$1\/{queue|->{}}: QUEUE +-> seq(ITEM) & dom(queue_items_r$1\/{queue|->{}}) = dom(queue_items) & dom(queue_size$1\/{queue|->uxQueueLength}) = queues$1\/{queue} & !(queue$0).(queue$0: queues$1\/{queue} => ran((queue_items_r$1\/{queue|->{}})(queue$0)) = queue_items(queue$0)))) & queue$1: queues$1\/{queue});
  "`Check that the invariant (!queue.(queue: queues$1 => ran(queue_items_r$1(queue)) = queue_items(queue))) is preserved by the operation - ref 4.4, 5.5'";
  (ran((queue_items_r$1\/{queue|->{}})(queue$1)) = (queue_items\/{queue|->{}})(queue$1));
  ("`xQueueCreate preconditions in this component'" & uxQueueLength: INTEGER & 0<=uxQueueLength & uxQueueLength<=2147483647 & uxItemSize: INTEGER & 0<=uxItemSize & uxItemSize<=2147483647 & "`Local hypotheses'" & not(queue_size$1: QUEUE +-> NAT & queue_items_r$1: QUEUE +-> seq(ITEM) & dom(queue_items_r$1) = dom(queue_items) & dom(queue_size$1) = queues$1 & !queue.(queue: queues$1 => ran(queue_items_r$1(queue)) = queue_items(queue))));
  "`Check that the invariant (queue_recursive = queue_recursive$1) is preserved by the operation - ref 4.4, 5.5'";
  (not(QUEUE_NULL: queues$1));
  "`Check that the invariant (queues = queues$1) is preserved by the operation - ref 4.4, 5.5'";
  (queues$1 = queues$1\/{QUEUE_NULL});
  "`Check that the invariant (queue_receiving = queue_receiving$1) is preserved by the operation - ref 4.4, 5.5'";
  (queue_receiving$1 = queue_receiving$1\/{QUEUE_NULL|->{}});
  "`Check that the invariant (queue_sending = queue_sending$1) is preserved by the operation - ref 4.4, 5.5'";
  (queue_sending$1 = queue_sending$1\/{QUEUE_NULL|->{}});
  "`Check that the invariant (queue_type = queue_type$1) is preserved by the operation - ref 4.4, 5.5'";
  (queue_type$1 = queue_type$1\/{QUEUE_NULL|->(1|->QUEUE_TYPE)});
  (dom(queue_items_r$1) = dom(queue_items\/{QUEUE_NULL|->{}}));
  ("`xQueueCreate preconditions in this component'" & uxQueueLength: INTEGER & 0<=uxQueueLength & uxQueueLength<=2147483647 & uxItemSize: INTEGER & 0<=uxItemSize & uxItemSize<=2147483647 & "`Local hypotheses'" & not(queue_size$1: QUEUE +-> NAT & queue_items_r$1: QUEUE +-> seq(ITEM) & dom(queue_items_r$1) = dom(queue_items) & dom(queue_size$1) = queues$1 & !queue.(queue: queues$1 => ran(queue_items_r$1(queue)) = queue_items(queue))) & queue$0: queues$1);
  (ran(queue_items_r$1(queue$0)) = (queue_items\/{QUEUE_NULL|->{}})(queue$0));
  ("`queueDelete preconditions in previous components'" & queue: queues$1);
  ("`queueDelete preconditions in this component'" & queue: queues$1);
  ({queue}<<|queue_size$1: QUEUE +-> NAT);
  ({queue}<<|queue_items_r$1: QUEUE +-> seq(ITEM));
  (dom({queue}<<|queue_items_r$1) = dom({queue}<<|queue_items));
  (dom({queue}<<|queue_size$1) = queues$1-{queue});
  ("`queueDelete preconditions in this component'" & queue: queues$1 & "`Local hypotheses'" & queue$0: queues$1 & not(queue$0 = queue));
  (ran(({queue}<<|queue_items_r$1)(queue$0)) = ({queue}<<|queue_items)(queue$0));
  ("`sendItem preconditions in previous components'" & pxQueue: queues$1 & pxItem: ITEM & task: TASK & copy_position: (1..2)*{COPY_POSITION} & task: queue_receiving$1(pxQueue));
  ("`sendItem preconditions in this component'" & pxQueue: queues$1 & pxItem: ITEM & task: TASK & copy_position: (1..2)*{COPY_POSITION} & task: queue_receiving$1(pxQueue) & "`Local hypotheses'" & not(pxItem: ran(queue_items_r$1(pxQueue))) & copy_position = 1|->COPY_POSITION);
  (queue_items_r$1<+{pxQueue|->(queue_items_r$1(pxQueue)<-pxItem)}: QUEUE +-> seq(ITEM));
  (dom(queue_items_r$1<+{pxQueue|->(queue_items_r$1(pxQueue)<-pxItem)}) = dom(queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pxItem})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues$1 & pxItem: ITEM & task: TASK & copy_position: (1..2)*{COPY_POSITION} & task: queue_receiving$1(pxQueue) & "`Local hypotheses'" & not(pxItem: ran(queue_items_r$1(pxQueue))) & copy_position = 1|->COPY_POSITION & queue: queues$1);
  (ran((queue_items_r$1<+{pxQueue|->(queue_items_r$1(pxQueue)<-pxItem)})(queue)) = (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pxItem})})(queue));
  ("`sendItem preconditions in this component'" & pxQueue: queues$1 & pxItem: ITEM & task: TASK & copy_position: (1..2)*{COPY_POSITION} & task: queue_receiving$1(pxQueue) & "`Local hypotheses'" & not(pxItem: ran(queue_items_r$1(pxQueue))) & not(copy_position = 1|->COPY_POSITION));
  (queue_items_r$1<+{pxQueue|->(pxItem->queue_items_r$1(pxQueue))}: QUEUE +-> seq(ITEM));
  (dom(queue_items_r$1<+{pxQueue|->(pxItem->queue_items_r$1(pxQueue))}) = dom(queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pxItem})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues$1 & pxItem: ITEM & task: TASK & copy_position: (1..2)*{COPY_POSITION} & task: queue_receiving$1(pxQueue) & "`Local hypotheses'" & not(pxItem: ran(queue_items_r$1(pxQueue))) & not(copy_position = 1|->COPY_POSITION) & queue: queues$1);
  (ran((queue_items_r$1<+{pxQueue|->(pxItem->queue_items_r$1(pxQueue))})(queue)) = (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pxItem})})(queue));
  ("`sendItem preconditions in this component'" & pxQueue: queues$1 & pxItem: ITEM & task: TASK & copy_position: (1..2)*{COPY_POSITION} & task: queue_receiving$1(pxQueue) & "`Local hypotheses'" & pxItem: ran(queue_items_r$1(pxQueue)));
  (dom(queue_items_r$1) = dom(queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pxItem})}));
  ("`sendItem preconditions in this component'" & pxQueue: queues$1 & pxItem: ITEM & task: TASK & copy_position: (1..2)*{COPY_POSITION} & task: queue_receiving$1(pxQueue) & "`Local hypotheses'" & pxItem: ran(queue_items_r$1(pxQueue)) & queue: queues$1);
  (ran(queue_items_r$1(queue)) = (queue_items<+{pxQueue|->(queue_items(pxQueue)\/{pxItem})})(queue));
  ("`receivedItem preconditions in previous components'" & pxQueue: queues$1 & justPeeking: BOOL & task: TASK & task: queue_sending$1(pxQueue) & not(queue_items(pxQueue) = {}) & rTask: TASK);
  ("`receivedItem preconditions in this component'" & pxQueue: queues$1 & justPeeking: BOOL & task: TASK & task: queue_sending$1(pxQueue) & not(queue_items(pxQueue) = {}) & rTask: TASK & "`Local hypotheses'" & justPeeking = FALSE & queue_type$1(pxQueue) = 3|->QUEUE_TYPE);
  "`Check operation refinement - ref 4.4, 5.5'";
  (first(queue_items_r$1(pxQueue)): ITEM);
  (first(queue_items_r$1(pxQueue)): queue_items(pxQueue));
  (queue_items_r$1<+{pxQueue|->tail(queue_items_r$1(pxQueue))}: QUEUE +-> seq(ITEM));
  (dom(queue_items_r$1<+{pxQueue|->tail(queue_items_r$1(pxQueue))}) = dom(queue_items<+{pxQueue|->queue_items(pxQueue)-{first(queue_items_r$1(pxQueue))}}));
  ("`receivedItem preconditions in this component'" & pxQueue: queues$1 & justPeeking: BOOL & task: TASK & task: queue_sending$1(pxQueue) & not(queue_items(pxQueue) = {}) & rTask: TASK & "`Local hypotheses'" & justPeeking = FALSE & queue_type$1(pxQueue) = 3|->QUEUE_TYPE & queue: queues$1);
  (ran((queue_items_r$1<+{pxQueue|->tail(queue_items_r$1(pxQueue))})(queue)) = (queue_items<+{pxQueue|->queue_items(pxQueue)-{first(queue_items_r$1(pxQueue))}})(queue));
  ("`receivedItem preconditions in this component'" & pxQueue: queues$1 & justPeeking: BOOL & task: TASK & task: queue_sending$1(pxQueue) & not(queue_items(pxQueue) = {}) & rTask: TASK & "`Local hypotheses'" & justPeeking = FALSE & not(queue_type$1(pxQueue) = 3|->QUEUE_TYPE));
  ("`receivedItem preconditions in this component'" & pxQueue: queues$1 & justPeeking: BOOL & task: TASK & task: queue_sending$1(pxQueue) & not(queue_items(pxQueue) = {}) & rTask: TASK & "`Local hypotheses'" & justPeeking = FALSE & not(queue_type$1(pxQueue) = 3|->QUEUE_TYPE) & queue: queues$1);
  ("`receivedItem preconditions in this component'" & pxQueue: queues$1 & justPeeking: BOOL & task: TASK & task: queue_sending$1(pxQueue) & not(queue_items(pxQueue) = {}) & rTask: TASK & "`Local hypotheses'" & not(justPeeking = FALSE) & queue_type$1(pxQueue) = 3|->QUEUE_TYPE);
  ("`receivedItem preconditions in this component'" & pxQueue: queues$1 & justPeeking: BOOL & task: TASK & task: queue_sending$1(pxQueue) & not(queue_items(pxQueue) = {}) & rTask: TASK & "`Local hypotheses'" & not(justPeeking = FALSE) & not(queue_type$1(pxQueue) = 3|->QUEUE_TYPE));
  ("`removeFromEventListQueue preconditions in previous components'" & task: TASK);
  ("`removeFromEventListQueue preconditions in this component'" & task: TASK & "`Local hypotheses'" & receiving = REMOVE_EVENT(task,queues$1,queue_receiving$1) & sending = REMOVE_EVENT(task,queues$1,queue_sending$1) & holder = queue_holder$1|>{task});
  "`Check that the invariant (queue_receiving = queue_receiving$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  (queue_receiving$1<+receiving = queue_receiving$1<+REMOVE_EVENT(task,queues$1,queue_receiving$1));
  "`Check that the invariant (queue_sending = queue_sending$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  (queue_sending$1<+sending = queue_sending$1<+REMOVE_EVENT(task,queues$1,queue_sending$1));
  "`Check that the invariant (queue_holder = queue_holder$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  (queue_holder$1-holder = queue_holder$1-(queue_holder$1|>{task}));
  "`Check that the invariant (queue_items_r$1: QUEUE +-> seq(ITEM)) is preserved by the operation - ref 4.4, 5.5'";
  (queue_items_r$1<+%queue.(queue: dom(holder) | [ITEM_NULL]): QUEUE +-> seq(ITEM));
  "`Check that the invariant (dom(queue_items_r$1) = dom(queue_items)) is preserved by the operation - ref 4.4, 5.5'";
  (dom(queue_items_r$1<+%queue.(queue: dom(holder) | [ITEM_NULL])) = dom(queue_items<+%queue.(queue: dom(queue_holder$1|>{task}) | {ITEM_NULL})));
  ("`removeFromEventListQueue preconditions in this component'" & task: TASK & "`Local hypotheses'" & receiving = REMOVE_EVENT(task,queues$1,queue_receiving$1) & sending = REMOVE_EVENT(task,queues$1,queue_sending$1) & holder = queue_holder$1|>{task} & queue: queues$1);
  "`Check that the invariant (!queue.(queue: queues$1 => ran(queue_items_r$1(queue)) = queue_items(queue))) is preserved by the operation - ref 4.4, 5.5'";
  (ran((queue_items_r$1<+%queue.(queue: dom(holder) | [ITEM_NULL]))(queue)) = (queue_items<+%queue.(queue: dom(queue_holder$1|>{task}) | {ITEM_NULL}))(queue));
  ("`createSemaphore preconditions in previous components'" & maxCount: INTEGER & 0<=maxCount & maxCount<=2147483647 & initialCount: INTEGER & 0<=initialCount & initialCount<=2147483647 & initialCount<=maxCount);
  ("`createSemaphore preconditions in this component'" & maxCount: INTEGER & 0<=maxCount & maxCount<=2147483647 & initialCount: INTEGER & 0<=initialCount & initialCount<=2147483647 & initialCount<=maxCount & "`Local hypotheses'" & queue: QUEUE & not(queue: queues$1) & initialItems: POW(ITEM) & not(initialItems = {}) & initialSeq: seq(ITEM) & ran(initialSeq) = initialItems & size(initialSeq) = initialCount);
  (queue_size$1\/{queue|->maxCount}: QUEUE +-> NAT);
  (queue_items_r$1\/{queue|->initialSeq}: QUEUE +-> seq(ITEM));
  (dom(queue_size$1\/{queue|->maxCount}) = queues$1\/{queue});
  "`Check that the invariant (dom(queue_items_r$1) = dom(queue_items) & !queue.(queue: queues$1 => ran(queue_items_r$1(queue)) = queue_items(queue))) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  (#(initialItems$0).(initialItems$0: POW(ITEM) & dom(queue_items_r$1\/{queue|->initialSeq}) = dom(queue_items\/{queue|->initialItems$0}) & !(queue$1).(queue$1: queues$1\/{queue} => ran((queue_items_r$1\/{queue|->initialSeq})(queue$1)) = (queue_items\/{queue|->initialItems$0})(queue$1))));
  ("`Local hypotheses'" & queue: QUEUE & not(queue: queues$1) & initialItems: POW(ITEM) & not(initialItems = {}) & initialSeq: seq(ITEM) & ran(initialSeq) = initialItems & size(initialSeq) = 1);
  (queue_size$1\/{queue|->1}: QUEUE +-> NAT);
  (dom(queue_size$1\/{queue|->1}) = queues$1\/{queue});
  (#(initialItems$0).(initialItems$0: POW(ITEM) & not(initialItems$0 = {}) & dom(queue_items_r$1\/{queue|->initialSeq}) = dom(queue_items\/{queue|->initialItems$0}) & !(queue$1).(queue$1: queues$1\/{queue} => ran((queue_items_r$1\/{queue|->initialSeq})(queue$1)) = (queue_items\/{queue|->initialItems$0})(queue$1))))
END
&
THEORY EnumerateX IS
  SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED};
  COPY_POSITION == {queueSEND_TO_BACK,queueSEND_TO_FRONT};
  QUEUE_TYPE == {TQUE,TSEMAPH,TMUT};
  ERROR_DEFINITION == {errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY,errNO_TASK_TO_RUN,errQUEUE_BLOCKED,errQUEUE_YIELD,errQUEUE_EMPTY,errQUEUE_FULL,pdPASS,pdFAIL,pdTRUE,pdFALSE}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK)
END
