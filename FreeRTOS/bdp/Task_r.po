THEORY ProofList IS
  _f(1) & _f(2) & _f(8) & _f(20) & _f(182) & t_unblockMutex.2,(_f(183) & _f(34) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(182) & t_unblockMutex.1,(_f(183) & _f(34) => _f(184));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(177) & t_resumeIncrement.3,(_f(181) & _f(34) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(177) & t_resumeIncrement.2,(_f(180) & _f(34) => _f(83));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(177) & t_resumeIncrement.1,(_f(178) & _f(86) => _f(179));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(163) & t_PriorityInherit.11,(_f(176) & _f(50) => _f(167));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(163) & t_PriorityInherit.10,(_f(176) & _f(50) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(163) & t_PriorityInherit.9,(_f(176) & _f(28) => _f(97));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(163) & t_PriorityInherit.8,(_f(174) & _f(34) => _f(175));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(163) & t_PriorityInherit.7,(_f(172) & _f(34) => _f(173));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(163) & t_PriorityInherit.6,(_f(170) & _f(34) => _f(171));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(163) & t_PriorityInherit.5,(_f(164) & _f(32) => _f(169));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(163) & t_PriorityInherit.4,(_f(164) & _f(104) => _f(168));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(163) & t_PriorityInherit.3,(_f(164) & _f(23) => _f(167));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(163) & t_PriorityInherit.2,(_f(164) & _f(165) => _f(166));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(163) & t_PriorityInherit.1,(_f(164) & _f(96) => _f(97));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(139) & t_setPriority.19,(_f(162) & _f(34) => _f(149));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(139) & t_setPriority.18,(_f(160) & _f(34) => _f(161));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(139) & t_setPriority.17,(_f(159) & _f(34) => _f(145));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(139) & t_setPriority.16,(_f(158) & _f(32) => _f(143));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(139) & t_setPriority.15,(_f(158) & _f(104) => _f(142));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(139) & t_setPriority.14,(_f(151) & _f(28) => _f(157));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(139) & t_setPriority.13,(_f(156) & _f(34) => _f(149));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(139) & t_setPriority.12,(_f(154) & _f(34) => _f(155));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(139) & t_setPriority.11,(_f(153) & _f(34) => _f(145));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(139) & t_setPriority.10,(_f(151) & _f(32) => _f(143));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(139) & t_setPriority.9,(_f(151) & _f(104) => _f(142));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(139) & t_setPriority.8,(_f(151) & _f(86) => _f(152));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(139) & t_setPriority.7,(_f(140) & _f(28) => _f(150));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(139) & t_setPriority.6,(_f(148) & _f(34) => _f(149));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(139) & t_setPriority.5,(_f(146) & _f(34) => _f(147));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(139) & t_setPriority.4,(_f(144) & _f(34) => _f(145));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(139) & t_setPriority.3,(_f(140) & _f(32) => _f(143));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(139) & t_setPriority.2,(_f(140) & _f(104) => _f(142));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(139) & t_setPriority.1,(_f(140) & _f(86) => _f(141));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(134) & t_unblock.3,(_f(138) & _f(34) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(134) & t_unblock.2,(_f(137) & _f(34) => _f(83));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(134) & t_unblock.1,(_f(135) & _f(86) => _f(136));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(119) & t_resumeAll.16,(_f(133) & _f(34) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(119) & t_resumeAll.15,(_f(132) & _f(122) => _f(118));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(119) & t_resumeAll.14,(_f(131) & _f(122) => _f(118));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(119) & t_resumeAll.13,(_f(130) & _f(34) => _f(83));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(119) & t_resumeAll.12,(_f(129) & _f(122) => _f(118));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(119) & t_resumeAll.11,(_f(129) & _f(86) => _f(121));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(119) & t_resumeAll.10,(_f(128) & _f(122) => _f(118));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(119) & t_resumeAll.9,(_f(128) & _f(86) => _f(121));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(119) & t_resumeAll.8,(_f(127) & _f(34) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(119) & t_resumeAll.7,(_f(126) & _f(122) => _f(118));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(119) & t_resumeAll.6,(_f(125) & _f(122) => _f(118));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(119) & t_resumeAll.5,(_f(124) & _f(34) => _f(83));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(119) & t_resumeAll.4,(_f(123) & _f(122) => _f(118));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(119) & t_resumeAll.3,(_f(123) & _f(86) => _f(121));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(119) & t_resumeAll.2,(_f(120) & _f(122) => _f(118));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(119) & t_resumeAll.1,(_f(120) & _f(86) => _f(121));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(115) & t_endScheduler.3,(_f(116) & _f(32) => _f(7));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(115) & t_endScheduler.2,(_f(116) & _f(104) => _f(5));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(115) & t_endScheduler.1,(_f(116) & _f(117) => _f(118));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(100) & t_startScheduler.9,(_f(101) & _f(113) => _f(114));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(100) & t_startScheduler.8,(_f(101) & _f(50) => _f(112));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(100) & t_startScheduler.7,(_f(110) & _f(34) => _f(111));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(100) & t_startScheduler.6,(_f(108) & _f(34) => _f(109));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(100) & t_startScheduler.5,(_f(101) & _f(34) => _f(107));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(100) & t_startScheduler.4,(_f(101) & _f(32) => _f(106));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(100) & t_startScheduler.3,(_f(101) & _f(104) => _f(105));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(100) & t_startScheduler.2,(_f(101) & _f(28) => _f(103));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(100) & t_startScheduler.1,(_f(101) & _f(23) => _f(102));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(94) & t_delayTask.4,(_f(99) & _f(34) => _f(83));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(94) & t_delayTask.3,(_f(95) & _f(23) => _f(98));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(94) & t_delayTask.2,(_f(95) & _f(23) => _f(52));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(94) & t_delayTask.1,(_f(95) & _f(96) => _f(97));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(91) & t_getPriority.1,(_f(92) & _f(23) => _f(93));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(84) & t_resume.3,(_f(89) & _f(34) => _f(90));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(84) & t_resume.2,(_f(88) & _f(34) => _f(83));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(84) & t_resume.1,(_f(85) & _f(86) => _f(87));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(76) & t_suspend.4,(_f(82) & _f(34) => _f(83));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(76) & t_suspend.3,(_f(79) & _f(80) => _f(81));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(76) & t_suspend.2,(_f(77) & _f(28) => _f(78));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(76) & t_suspend.1,(_f(77) & _f(28) => _f(52));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.28,(_f(75) & _f(34) => _f(39));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.27,(_f(74) & _f(34) => _f(43));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.26,(_f(73) & _f(34) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.25,(_f(72) & _f(32) => _f(54));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.24,(_f(71) & _f(34) => _f(39));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.23,(_f(70) & _f(34) => _f(43));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.22,(_f(69) & _f(34) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.21,(_f(68) & _f(32) => _f(54));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.20,(_f(67) & _f(34) => _f(39));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.19,(_f(66) & _f(34) => _f(43));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.18,(_f(65) & _f(34) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.17,(_f(64) & _f(32) => _f(54));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.16,(_f(63) & _f(34) => _f(39));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.15,(_f(62) & _f(34) => _f(43));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.14,(_f(61) & _f(34) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.13,(_f(60) & _f(32) => _f(54));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.12,(_f(60) & _f(50) => _f(51));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.11,(_f(57) & _f(32) => _f(54));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.10,(_f(57) & _f(28) => _f(59));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.9,(_f(57) & _f(28) => _f(58));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.8,(_f(57) & _f(50) => _f(51));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.7,(_f(56) & _f(34) => _f(39));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.6,(_f(55) & _f(34) => _f(37));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.5,(_f(49) & _f(34) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.4,(_f(49) & _f(32) => _f(54));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.3,(_f(49) & _f(28) => _f(53));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.2,(_f(49) & _f(28) => _f(52));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(48) & t_delete.1,(_f(49) & _f(50) => _f(51));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.33,(_f(47) & _f(32) => _f(33));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.32,(_f(47) & _f(28) => _f(29));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.31,(_f(47) & _f(26) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.30,(_f(47) & _f(41) => _f(25));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.29,(_f(47) & _f(41) => _f(24));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.28,(_f(46) & _f(32) => _f(33));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.27,(_f(46) & _f(30) => _f(31));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.26,(_f(46) & _f(28) => _f(29));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.25,(_f(46) & _f(26) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.24,(_f(46) & _f(41) => _f(25));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.23,(_f(46) & _f(41) => _f(24));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.22,(_f(45) & _f(32) => _f(33));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.21,(_f(45) & _f(28) => _f(29));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.20,(_f(45) & _f(26) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.19,(_f(45) & _f(41) => _f(25));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.18,(_f(45) & _f(41) => _f(24));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.17,(_f(44) & _f(34) => _f(39));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.16,(_f(42) & _f(34) => _f(43));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.15,(_f(40) & _f(34) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.14,(_f(40) & _f(32) => _f(33));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.13,(_f(40) & _f(28) => _f(29));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.12,(_f(40) & _f(26) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.11,(_f(40) & _f(41) => _f(25));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.10,(_f(40) & _f(41) => _f(24));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.9,(_f(38) & _f(34) => _f(39));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.8,(_f(36) & _f(34) => _f(37));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.7,(_f(22) & _f(34) => _f(35));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.6,(_f(22) & _f(32) => _f(33));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.5,(_f(22) & _f(30) => _f(31));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.4,(_f(22) & _f(28) => _f(29));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.3,(_f(22) & _f(26) => _f(27));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.2,(_f(22) & _f(23) => _f(25));
  _f(1) & _f(2) & _f(8) & _f(20) & _f(21) & t_create.1,(_f(22) & _f(23) => _f(24));
  _f(1) & _f(2) & _f(8) & AssertionLemmas.4,(_f(17) & _f(18) => _f(19));
  _f(1) & _f(2) & _f(8) & AssertionLemmas.3,(_f(14) & _f(15) => _f(16));
  _f(1) & _f(2) & _f(8) & AssertionLemmas.2,(_f(11) & _f(12) => _f(13));
  _f(1) & _f(2) & _f(8) & AssertionLemmas.1,(_f(9) => _f(10));
  _f(1) & _f(2) & Initialisation.2,(_f(3) & _f(6) => _f(7));
  _f(1) & _f(2) & Initialisation.1,(_f(3) & _f(4) => _f(5))
END
&
THEORY Formulas IS
  ("`Seen and used machines properties'" & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES & configMAX_PRIORITIES<=2147483647 & 1<=configMAX_PRIORITIES & configTOTAL_HEAP_SIZE: INTEGER & 0<=configTOTAL_HEAP_SIZE & configTOTAL_HEAP_SIZE<=2147483647 & configMINIMAL_STACK_SIZE: INTEGER & 0<=configMINIMAL_STACK_SIZE & configMINIMAL_STACK_SIZE<=2147483647 & INCLUDE_uxTaskPriorityGet: BIT & INCLUDE_vTaskDelete: BIT & INCLUDE_vTaskSuspend: BIT & INCLUDE_xTaskGetSchedulerState: BIT & INCLUDE_vTaskPrioritySet: BIT & INCLUDE_xTaskGetCurrentTaskHandle: BIT & INCLUDE_vTaskDelayUntil: BIT & INCLUDE_vTaskDelay: BIT & PRIORITY = 0..configMAX_PRIORITIES-1 & BIT = 0..1 & MAX_DELAY: 0..2147483647 & 1<=MAX_DELAY & NULL_PARAMETER: PARAMETER & PRIORITY: POW(NAT) & TICK: POW(NAT) & TICK = 0..MAX_DELAY & TICK_INCREMENT: TICK*TICK +-> TICK & dom(TICK_INCREMENT) = TICK*TICK & TICK_INCREMENT = %(tick,inc).(tick: TICK & inc: TICK | (tick+inc) mod MAX_DELAY) & QUEUE_NULL: QUEUE & ITEM_NULL: ITEM & ITEM_EMPTY: ITEM & TASK_NULL: TASK & REMOVE_EVENT: TASK*POW(QUEUE)*(QUEUE +-> POW(TASK)) +-> (QUEUE +-> POW(TASK)) & REMOVE_EVENT = %(task,queues,pending).(task: TASK & queues: POW(QUEUE) & pending: QUEUE +-> POW(TASK) | %queue.(queue: queues & queue: dom(pending) | pending(queue)-{task})) & semGIVE_BLOCK_TIME: TICK & IDLE_PRIORITY: PRIORITY & IDLE_PRIORITY = 0 & NAME: FIN(INTEGER) & not(NAME = {}) & PARAMETER: FIN(INTEGER) & not(PARAMETER = {}) & TASK: FIN(INTEGER) & not(TASK = {}) & STACK: FIN(INTEGER) & not(STACK = {}) & TASK_CODE: FIN(INTEGER) & not(TASK_CODE = {}) & ITEM: FIN(INTEGER) & not(ITEM = {}) & QUEUE: FIN(INTEGER) & not(QUEUE = {}) & (1..3)*{SCHEDULER_STATE}: FIN(NATURAL*{SCHEDULER_STATE}) & not((1..3)*{SCHEDULER_STATE} = {}) & (1..2)*{COPY_POSITION}: FIN(NATURAL*{COPY_POSITION}) & not((1..2)*{COPY_POSITION} = {}) & (1..3)*{QUEUE_TYPE}: FIN(NATURAL*{QUEUE_TYPE}) & not((1..3)*{QUEUE_TYPE} = {}) & (1..10)*{ERROR_DEFINITION}: FIN(NATURAL*{ERROR_DEFINITION}) & not((1..10)*{ERROR_DEFINITION} = {}) & "`Component properties'" & max_prt: PRIORITY*PRIORITY +-> PRIORITY & dom(max_prt) = PRIORITY*PRIORITY & max_prt = %(tmp_mprt_ready,t_prt).(tmp_mprt_ready: PRIORITY & t_prt: PRIORITY | max({tmp_mprt_ready}\/{t_prt})) & schedule_p: FIN(TASK)*(TASK +-> PRIORITY) +-> FIN(TASK) & schedule_p = %(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) | tasks/\dom(t_priority|>{max(t_priority[tasks])})));
  ("`Seen and used machines assertions'" & configMAX_PRIORITIES: INTEGER & 0<=configMAX_PRIORITIES & BIT: POW(NATURAL));
  ("`Local hypotheses'" & running$2: TASK & idle$2: TASK);
  "`Check that the invariant (t_priority$1: TASK +-> PRIORITY) is established by the initialisation - ref 4.3, 5.4'";
  ({}: TASK +-> PRIORITY);
  "`Check that the invariant (dom(t_priority$1) = tasks$1) is established by the initialisation - ref 4.3, 5.4'";
  (dom({}) = {});
  ("`Previous components invariants'" & active$1: BOOL & tasks$1: FIN(TASK) & idle$1: TASK & not(TASK_NULL: tasks$1) & blocked$1: FIN(TASK) & blocked$1: POW(tasks$1) & ready$1: FIN(TASK) & ready$1: POW(tasks$1) & suspended$1: FIN(TASK) & suspended$1: POW(tasks$1) & pending$1: FIN(TASK) & pending$1: POW(suspended$1\/blocked$1) & ready$1/\blocked$1 = {} & blocked$1/\suspended$1 = {} & suspended$1/\ready$1 = {} & tasks$1 = suspended$1\/blocked$1\/ready$1 & running$1: TASK & (active$1 = TRUE => not(ready$1 = {}) & running$1: ready$1 & idle$1: ready$1) & "`Previous components assertions'" & (active$1 = TRUE => not(tasks$1 = {})) & (active$1 = TRUE => idle$1: tasks$1) & (active$1 = TRUE => not(idle$1: blocked$1)) & (active$1 = TRUE => not(idle$1: suspended$1)) & (active$1 = TRUE => running$1: tasks$1) & (active$1 = TRUE => not(running$1: blocked$1)) & (active$1 = TRUE => not(running$1: suspended$1)) & "`Component invariant'" & t_priority$1: TASK +-> PRIORITY & dom(t_priority$1) = tasks$1 & (active$1 = TRUE => t_priority$1(idle$1) = IDLE_PRIORITY & !tt.(tt: ready$1 => t_priority$1(tt)<=t_priority$1(running$1)) & !tt.(tt: tasks$1 => IDLE_PRIORITY<=t_priority$1(tt))) & active = active$1 & tasks = tasks$1 & blocked = blocked$1 & ready = ready$1 & suspended = suspended$1 & running = running$1 & pending = pending$1 & idle = idle$1);
  "`Check assertion (PRIORITY <: NATURAL) deduction - ref 3.2, 4.2, 5.3'";
  (PRIORITY: POW(NATURAL));
  ("`Local hypotheses'" & PRIORITY: POW(NATURAL) & active$1 = TRUE);
  "`Check assertion (active = TRUE => running: dom(t_priority)) deduction - ref 3.2, 4.2, 5.3'";
  (running$1: dom(t_priority$1));
  ("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active$1 = TRUE => running$1: dom(t_priority$1)) & (active$1 = TRUE => !tt.(tt: ready$1 => t_priority$1(tt)<=t_priority$1(running$1))) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)));
  "`Check assertion (!(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) => schedule_p(tasks,t_priority) <: tasks)) deduction - ref 3.2, 4.2, 5.3'";
  (schedule_p(tasks$0,t_priority$0): POW(tasks$0));
  ("`Local hypotheses'" & PRIORITY: POW(NATURAL) & (active$1 = TRUE => running$1: dom(t_priority$1)) & (active$1 = TRUE => !tt.(tt: ready$1 => t_priority$1(tt)<=t_priority$1(running$1))) & !(tasks,t_priority$0).(tasks: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority$0)) => schedule_p(tasks,t_priority$0): POW(tasks)) & tasks$0: FIN(TASK) & t_priority$0: TASK +-> PRIORITY & not(tasks$0 = {}) & tasks$0: POW(dom(t_priority$0)) & task: tasks$0 & task: schedule_p(tasks$0,t_priority$0));
  "`Check assertion (!(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & tasks/={} & tasks <: dom(t_priority) => !task.(task: tasks & task: schedule_p(tasks,t_priority) => t_priority(task) = max(t_priority[tasks])))) deduction - ref 3.2, 4.2, 5.3'";
  (t_priority$0(task) = max(t_priority$0[tasks$0]));
  ("`Component assertions'" & PRIORITY: POW(NATURAL) & (active$1 = TRUE => running$1: dom(t_priority$1)) & (active$1 = TRUE => !tt.(tt: ready$1 => t_priority$1(tt)<=t_priority$1(running$1))) & !(tasks,t_priority).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) => schedule_p(tasks,t_priority): POW(tasks)) & !(tasks,t_priority,task$0).(tasks: FIN(TASK) & t_priority: TASK +-> PRIORITY & not(tasks = {}) & tasks: POW(dom(t_priority)) & (task$0: tasks & task$0: schedule_p(tasks,t_priority)) => t_priority(task$0) = max(t_priority[tasks])));
  ("`t_create preconditions in previous components'" & priority: PRIORITY);
  ("`t_create preconditions in this component'" & priority: PRIORITY & "`Local hypotheses'" & task: TASK & not(task: tasks$1) & not(task = TASK_NULL) & n_tasks: FIN(TASK) & n_tasks = {task}\/tasks$1 & n_ready: POW(tasks$1) & n_ready = {task}\/ready$1 & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1\/{task|->priority} & priority<=t_priority$1(running$1) & running$2: schedule_p(n_ready,n_priority) & active$1 = TRUE);
  "`Check operation refinement - ref 4.4, 5.5'";
  (task: tasks$1);
  (tasks$1\/{task}: FIN(TASK));
  "`Check that the invariant (tasks = tasks$1) is preserved by the operation - ref 4.4, 5.5'";
  (n_tasks = tasks$1\/{task});
  "`Check that the invariant (ready = ready$1) is preserved by the operation - ref 4.4, 5.5'";
  (n_ready = ready$1\/{task});
  "`Check that the invariant (running = running$1 & running = running$1 & running = running$1) is preserved by the operation - ref 4.4, 5.5'";
  (running$2 = task or running$2 = running$1 or #(running$0).(running$0: ready$1\/{task} & running$2 = running$0));
  "`Check that the invariant (dom(t_priority$1) = tasks$1) is preserved by the operation - ref 4.4, 5.5'";
  (dom(n_priority) = n_tasks);
  "`Check that the invariant (active$1 = TRUE => t_priority$1(idle$1) = IDLE_PRIORITY & !tt.(tt: ready$1 => t_priority$1(tt)<=t_priority$1(running$1)) & !tt.(tt: tasks$1 => IDLE_PRIORITY<=t_priority$1(tt))) is preserved by the operation - ref 4.4, 5.5'";
  (n_priority(idle$1) = IDLE_PRIORITY);
  ("`t_create preconditions in this component'" & priority: PRIORITY & "`Local hypotheses'" & task: TASK & not(task: tasks$1) & not(task = TASK_NULL) & n_tasks: FIN(TASK) & n_tasks = {task}\/tasks$1 & n_ready: POW(tasks$1) & n_ready = {task}\/ready$1 & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1\/{task|->priority} & priority<=t_priority$1(running$1) & running$2: schedule_p(n_ready,n_priority) & active$1 = TRUE & tt: n_ready);
  (n_priority(tt)<=n_priority(running$2));
  ("`t_create preconditions in this component'" & priority: PRIORITY & "`Local hypotheses'" & task: TASK & not(task: tasks$1) & not(task = TASK_NULL) & n_tasks: FIN(TASK) & n_tasks = {task}\/tasks$1 & n_ready: POW(tasks$1) & n_ready = {task}\/ready$1 & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1\/{task|->priority} & priority<=t_priority$1(running$1) & running$2: schedule_p(n_ready,n_priority) & active$1 = TRUE & tt: n_tasks);
  (IDLE_PRIORITY<=n_priority(tt));
  ("`t_create preconditions in this component'" & priority: PRIORITY & "`Local hypotheses'" & task: TASK & not(task: tasks$1) & not(task = TASK_NULL) & n_tasks: FIN(TASK) & n_tasks = {task}\/tasks$1 & n_ready: POW(tasks$1) & n_ready = {task}\/ready$1 & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1\/{task|->priority} & not(priority<=t_priority$1(running$1)) & active$1 = TRUE);
  "`Check that the invariant (idle = idle$1) is preserved by the operation - ref 4.4, 5.5'";
  ("`t_create preconditions in this component'" & priority: PRIORITY & "`Local hypotheses'" & task: TASK & not(task: tasks$1) & not(task = TASK_NULL) & n_tasks: FIN(TASK) & n_tasks = {task}\/tasks$1 & n_ready: POW(tasks$1) & n_ready = {task}\/ready$1 & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1\/{task|->priority} & not(priority<=t_priority$1(running$1)) & active$1 = TRUE & tt: n_ready);
  (n_priority(tt)<=n_priority(running$1));
  ("`t_create preconditions in this component'" & priority: PRIORITY & "`Local hypotheses'" & task: TASK & not(task: tasks$1) & not(task = TASK_NULL) & n_tasks: FIN(TASK) & n_tasks = {task}\/tasks$1 & n_ready: POW(tasks$1) & n_ready = {task}\/ready$1 & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1\/{task|->priority} & not(priority<=t_priority$1(running$1)) & active$1 = TRUE & tt: n_tasks);
  ("`t_create preconditions in this component'" & priority: PRIORITY & "`Local hypotheses'" & task: TASK & not(task: tasks$1) & not(task = TASK_NULL) & n_tasks: FIN(TASK) & n_tasks = {task}\/tasks$1 & n_ready: POW(tasks$1) & n_ready = {task}\/ready$1 & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1\/{task|->priority} & not(active$1 = TRUE) & ready$1 = {});
  ("`t_create preconditions in this component'" & priority: PRIORITY & "`Local hypotheses'" & task: TASK & not(task: tasks$1) & not(task = TASK_NULL) & n_tasks: FIN(TASK) & n_tasks = {task}\/tasks$1 & n_ready: POW(tasks$1) & n_ready = {task}\/ready$1 & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1\/{task|->priority} & not(active$1 = TRUE) & not(ready$1 = {}) & priority<=t_priority$1(running$1) & running$2: schedule_p(n_ready,n_priority));
  ("`t_create preconditions in this component'" & priority: PRIORITY & "`Local hypotheses'" & task: TASK & not(task: tasks$1) & not(task = TASK_NULL) & n_tasks: FIN(TASK) & n_tasks = {task}\/tasks$1 & n_ready: POW(tasks$1) & n_ready = {task}\/ready$1 & n_priority: TASK +-> PRIORITY & n_priority = t_priority$1\/{task|->priority} & not(active$1 = TRUE) & not(ready$1 = {}) & not(priority<=t_priority$1(running$1)));
  ("`t_delete preconditions in previous components'" & atask: TASK & atask: tasks$1 & not(atask = idle$1));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & atask: ready$1 & n_ready: POW(tasks$1) & n_ready = ready$1-{atask} & atask = running$1 & running$2: schedule_p(n_ready,n_priority) & active$1 = TRUE);
  "`Check that the invariant (blocked = blocked$1) is preserved by the operation - ref 4.4, 5.5'";
  (ready$1-{atask}: POW(tasks$1));
  (running$2: ready$1);
  (not(running$2 = atask));
  (dom(n_priority) = tasks$1-{atask});
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & atask: ready$1 & n_ready: POW(tasks$1) & n_ready = ready$1-{atask} & atask = running$1 & running$2: schedule_p(n_ready,n_priority) & active$1 = TRUE & tt: n_ready);
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & atask: ready$1 & n_ready: POW(tasks$1) & n_ready = ready$1-{atask} & atask = running$1 & running$2: schedule_p(n_ready,n_priority) & active$1 = TRUE & tt: tasks$1 & not(tt = atask));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & atask: ready$1 & n_ready: POW(tasks$1) & n_ready = ready$1-{atask} & atask = running$1 & not(active$1 = TRUE));
  (running$1: ready$1);
  (not(running$1 = atask));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & atask: ready$1 & n_ready: POW(tasks$1) & n_ready = ready$1-{atask} & not(atask = running$1));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & atask: ready$1 & n_ready: POW(tasks$1) & n_ready = ready$1-{atask} & not(atask = running$1) & active$1 = TRUE);
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & atask: ready$1 & n_ready: POW(tasks$1) & n_ready = ready$1-{atask} & not(atask = running$1) & active$1 = TRUE & tt: n_ready);
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & atask: ready$1 & n_ready: POW(tasks$1) & n_ready = ready$1-{atask} & not(atask = running$1) & active$1 = TRUE & tt: tasks$1 & not(tt = atask));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & not(atask: ready$1) & atask: blocked$1);
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & not(atask: ready$1) & atask: blocked$1 & active$1 = TRUE);
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & not(atask: ready$1) & atask: blocked$1 & active$1 = TRUE & tt: ready$1);
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & not(atask: ready$1) & atask: blocked$1 & active$1 = TRUE & tt: tasks$1 & not(tt = atask));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & not(atask: ready$1) & not(atask: blocked$1) & atask: suspended$1);
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & not(atask: ready$1) & not(atask: blocked$1) & atask: suspended$1 & active$1 = TRUE);
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & not(atask: ready$1) & not(atask: blocked$1) & atask: suspended$1 & active$1 = TRUE & tt: ready$1);
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & not(atask: ready$1) & not(atask: blocked$1) & atask: suspended$1 & active$1 = TRUE & tt: tasks$1 & not(tt = atask));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & not(atask: ready$1) & not(atask: blocked$1) & not(atask: suspended$1));
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & not(atask: ready$1) & not(atask: blocked$1) & not(atask: suspended$1) & active$1 = TRUE);
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & not(atask: ready$1) & not(atask: blocked$1) & not(atask: suspended$1) & active$1 = TRUE & tt: ready$1);
  ("`t_delete preconditions in this component'" & atask: TASK & atask: tasks$1 & not(atask = idle$1) & "`Local hypotheses'" & n_priority: TASK +-> PRIORITY & n_priority = {atask}<<|t_priority$1 & not(atask: ready$1) & not(atask: blocked$1) & not(atask: suspended$1) & active$1 = TRUE & tt: tasks$1 & not(tt = atask));
  ("`t_suspend preconditions in previous components'" & stask: TASK & stask: tasks$1 & not(stask = idle$1));
  ("`t_suspend preconditions in this component'" & stask: TASK & stask: tasks$1 & not(stask = idle$1) & "`Local hypotheses'" & stask: ready$1 & n_ready: POW(tasks$1) & n_ready = ready$1-{stask} & running$2: schedule_p(n_ready,t_priority$1) & stask = running$1);
  (not(running$2 = stask));
  ("`t_suspend preconditions in this component'" & stask: TASK & stask: tasks$1 & not(stask = idle$1) & "`Local hypotheses'" & stask: ready$1 & n_ready: POW(tasks$1) & n_ready = ready$1-{stask} & running$2: schedule_p(n_ready,t_priority$1) & not(stask = running$1));
  "`Check that the invariant (running = running$1) is preserved by the operation - ref 4.4, 5.5'";
  (running$2 = running$1);
  ("`t_suspend preconditions in this component'" & stask: TASK & stask: tasks$1 & not(stask = idle$1) & "`Local hypotheses'" & stask: ready$1 & n_ready: POW(tasks$1) & n_ready = ready$1-{stask} & running$2: schedule_p(n_ready,t_priority$1) & active$1 = TRUE & tt: n_ready);
  (t_priority$1(tt)<=t_priority$1(running$2));
  ("`t_resume preconditions in previous components'" & rtask: TASK & rtask: suspended$1 & not(rtask: pending$1));
  ("`t_resume preconditions in this component'" & rtask: TASK & rtask: suspended$1 & not(rtask: pending$1) & "`Local hypotheses'" & n_ready: POW(tasks$1) & n_ready = ready$1\/{rtask} & t_priority$1(running$1)<=t_priority$1(rtask) & running$2: schedule_p(n_ready,t_priority$1));
  "`Check that the invariant (running = running$1 & running = running$1) is preserved by the operation - ref 4.4, 5.5'";
  (#(running$0).(running$0: ready$1\/{rtask} & running$2 = running$0) or running$2 = running$1);
  ("`t_resume preconditions in this component'" & rtask: TASK & rtask: suspended$1 & not(rtask: pending$1) & "`Local hypotheses'" & n_ready: POW(tasks$1) & n_ready = ready$1\/{rtask} & t_priority$1(running$1)<=t_priority$1(rtask) & running$2: schedule_p(n_ready,t_priority$1) & active$1 = TRUE & tt: n_ready);
  ("`t_resume preconditions in this component'" & rtask: TASK & rtask: suspended$1 & not(rtask: pending$1) & "`Local hypotheses'" & n_ready: POW(tasks$1) & n_ready = ready$1\/{rtask} & not(t_priority$1(running$1)<=t_priority$1(rtask)) & active$1 = TRUE & tt: n_ready);
  (t_priority$1(tt)<=t_priority$1(running$1));
  ("`t_getPriority preconditions in previous components'" & atask: TASK & atask: tasks$1);
  ("`t_getPriority preconditions in this component'" & atask: TASK & atask: tasks$1);
  (t_priority$1(atask): PRIORITY);
  ("`t_delayTask preconditions in previous components'" & task: TASK & task = running$1 & running$1: ready$1 & not(running$1 = idle$1) & ticks: TICK);
  ("`t_delayTask preconditions in this component'" & task: TASK & task = running$1 & running$1: ready$1 & not(running$1 = idle$1) & ticks: TICK & "`Local hypotheses'" & n_ready: POW(tasks$1) & n_ready = ready$1-{running$1} & running$2: schedule_p(n_ready,t_priority$1));
  "`Check that the invariant (ready = ready$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  (ready$1 = ready$1-{running$1});
  (not(running$2 = running$1));
  ("`t_delayTask preconditions in this component'" & task: TASK & task = running$1 & running$1: ready$1 & not(running$1 = idle$1) & ticks: TICK & "`Local hypotheses'" & n_ready: POW(tasks$1) & n_ready = ready$1-{running$1} & running$2: schedule_p(n_ready,t_priority$1) & active$1 = TRUE & tt: ready$1);
  ("`t_startScheduler preconditions in previous components'" & active$1 = FALSE);
  ("`t_startScheduler preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & idle_task: TASK & not(idle_task: tasks$1) & n_ready: POW(tasks$1) & n_ready = ready$1\/{idle_task} & running$2: schedule_p(n_ready,t_priority$1));
  (not(idle_task = TASK_NULL));
  (running$2: ready$1\/{idle_task});
  "`Check that the invariant (t_priority$1: TASK +-> PRIORITY) is preserved by the operation - ref 4.4, 5.5'";
  (t_priority$1\/{idle_task|->IDLE_PRIORITY}: TASK +-> PRIORITY);
  (dom(t_priority$1\/{idle_task|->IDLE_PRIORITY}) = tasks$1\/{idle_task});
  ((t_priority$1\/{idle_task|->IDLE_PRIORITY})(idle_task) = IDLE_PRIORITY);
  ("`t_startScheduler preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & idle_task: TASK & not(idle_task: tasks$1) & n_ready: POW(tasks$1) & n_ready = ready$1\/{idle_task} & running$2: schedule_p(n_ready,t_priority$1) & tt: n_ready);
  ((t_priority$1\/{idle_task|->IDLE_PRIORITY})(tt)<=(t_priority$1\/{idle_task|->IDLE_PRIORITY})(running$2));
  ("`t_startScheduler preconditions in this component'" & active$1 = FALSE & "`Local hypotheses'" & idle_task: TASK & not(idle_task: tasks$1) & n_ready: POW(tasks$1) & n_ready = ready$1\/{idle_task} & running$2: schedule_p(n_ready,t_priority$1) & tt: tasks$1\/{idle_task});
  (IDLE_PRIORITY<=(t_priority$1\/{idle_task|->IDLE_PRIORITY})(tt));
  (blocked$1 = {});
  "`Check that the invariant (suspended = suspended$1) is preserved by the operation - ref 4.4, 5.5'";
  (suspended$1 = {});
  ("`t_endScheduler preconditions in previous components'" & active$1 = TRUE);
  ("`t_endScheduler preconditions in this component'" & active$1 = TRUE);
  "`Check that the invariant (pending = pending$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  (pending$1 = {});
  ("`t_resumeAll preconditions in previous components'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1));
  ("`t_resumeAll preconditions in this component'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & "`Local hypotheses'" & n_ready: POW(tasks$1) & n_ready = ready$1\/unblocked\/pending$1 & not(unblocked = {}) & t_priority$1(running$1)<=max(t_priority$1[schedule_p(n_ready,t_priority$1)]) & running$2: schedule_p(n_ready,t_priority$1));
  (#(running$0).(running$0: unblocked\/pending$1 & running$2 = running$0) or running$2 = running$1);
  "`Check that the invariant (pending = pending$1) is preserved by the operation - ref 4.4, 5.5'";
  ("`t_resumeAll preconditions in this component'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & "`Local hypotheses'" & n_ready: POW(tasks$1) & n_ready = ready$1\/unblocked\/pending$1 & not(unblocked = {}) & t_priority$1(running$1)<=max(t_priority$1[schedule_p(n_ready,t_priority$1)]) & running$2: schedule_p(n_ready,t_priority$1) & not(pending$1 = {}));
  ("`t_resumeAll preconditions in this component'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & "`Local hypotheses'" & n_ready: POW(tasks$1) & n_ready = ready$1\/unblocked\/pending$1 & not(unblocked = {}) & t_priority$1(running$1)<=max(t_priority$1[schedule_p(n_ready,t_priority$1)]) & running$2: schedule_p(n_ready,t_priority$1) & active$1 = TRUE & tt: n_ready);
  ("`t_resumeAll preconditions in this component'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & "`Local hypotheses'" & n_ready: POW(tasks$1) & n_ready = ready$1\/unblocked\/pending$1 & not(unblocked = {}) & not(t_priority$1(running$1)<=max(t_priority$1[schedule_p(n_ready,t_priority$1)])));
  ("`t_resumeAll preconditions in this component'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & "`Local hypotheses'" & n_ready: POW(tasks$1) & n_ready = ready$1\/unblocked\/pending$1 & not(unblocked = {}) & not(t_priority$1(running$1)<=max(t_priority$1[schedule_p(n_ready,t_priority$1)])) & not(pending$1 = {}));
  ("`t_resumeAll preconditions in this component'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & "`Local hypotheses'" & n_ready: POW(tasks$1) & n_ready = ready$1\/unblocked\/pending$1 & not(unblocked = {}) & not(t_priority$1(running$1)<=max(t_priority$1[schedule_p(n_ready,t_priority$1)])) & active$1 = TRUE & tt: n_ready);
  ("`t_resumeAll preconditions in this component'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & "`Local hypotheses'" & n_ready: POW(tasks$1) & n_ready = ready$1\/unblocked\/pending$1 & not(pending$1 = {}) & t_priority$1(running$1)<=max(t_priority$1[schedule_p(n_ready,t_priority$1)]) & running$2: schedule_p(n_ready,t_priority$1) & not(unblocked = {}));
  ("`t_resumeAll preconditions in this component'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & "`Local hypotheses'" & n_ready: POW(tasks$1) & n_ready = ready$1\/unblocked\/pending$1 & not(pending$1 = {}) & t_priority$1(running$1)<=max(t_priority$1[schedule_p(n_ready,t_priority$1)]) & running$2: schedule_p(n_ready,t_priority$1));
  ("`t_resumeAll preconditions in this component'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & "`Local hypotheses'" & n_ready: POW(tasks$1) & n_ready = ready$1\/unblocked\/pending$1 & not(pending$1 = {}) & t_priority$1(running$1)<=max(t_priority$1[schedule_p(n_ready,t_priority$1)]) & running$2: schedule_p(n_ready,t_priority$1) & active$1 = TRUE & tt: n_ready);
  ("`t_resumeAll preconditions in this component'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & "`Local hypotheses'" & n_ready: POW(tasks$1) & n_ready = ready$1\/unblocked\/pending$1 & not(pending$1 = {}) & not(t_priority$1(running$1)<=max(t_priority$1[schedule_p(n_ready,t_priority$1)])) & not(unblocked = {}));
  ("`t_resumeAll preconditions in this component'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & "`Local hypotheses'" & n_ready: POW(tasks$1) & n_ready = ready$1\/unblocked\/pending$1 & not(pending$1 = {}) & not(t_priority$1(running$1)<=max(t_priority$1[schedule_p(n_ready,t_priority$1)])));
  ("`t_resumeAll preconditions in this component'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & "`Local hypotheses'" & n_ready: POW(tasks$1) & n_ready = ready$1\/unblocked\/pending$1 & not(pending$1 = {}) & not(t_priority$1(running$1)<=max(t_priority$1[schedule_p(n_ready,t_priority$1)])) & active$1 = TRUE & tt: n_ready);
  ("`t_unblock preconditions in previous components'" & task: TASK & task: blocked$1 & not(task: pending$1));
  ("`t_unblock preconditions in this component'" & task: TASK & task: blocked$1 & not(task: pending$1) & "`Local hypotheses'" & n_ready: POW(tasks$1) & n_ready = ready$1\/{task} & t_priority$1(running$1)<=t_priority$1(task) & running$2: schedule_p(n_ready,t_priority$1));
  (running$2 = task or running$2 = running$1);
  ("`t_unblock preconditions in this component'" & task: TASK & task: blocked$1 & not(task: pending$1) & "`Local hypotheses'" & n_ready: POW(tasks$1) & n_ready = ready$1\/{task} & t_priority$1(running$1)<=t_priority$1(task) & running$2: schedule_p(n_ready,t_priority$1) & active$1 = TRUE & tt: n_ready);
  ("`t_unblock preconditions in this component'" & task: TASK & task: blocked$1 & not(task: pending$1) & "`Local hypotheses'" & n_ready: POW(tasks$1) & n_ready = ready$1\/{task} & not(t_priority$1(running$1)<=t_priority$1(task)) & active$1 = TRUE & tt: n_ready);
  ("`t_setPriority preconditions in previous components'" & task: tasks$1 & priority: PRIORITY & not(task = idle$1));
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & not(task = idle$1) & "`Local hypotheses'" & task: ready$1 & t_priority$1(running$1)<=priority);
  (#(running$0).(running$0: ready$1 & task = running$0) or task = running$1);
  (t_priority$1<+{task|->priority}: TASK +-> PRIORITY);
  (dom(t_priority$1<+{task|->priority}) = tasks$1);
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & not(task = idle$1) & "`Local hypotheses'" & task: ready$1 & t_priority$1(running$1)<=priority & active$1 = TRUE);
  ((t_priority$1<+{task|->priority})(idle$1) = IDLE_PRIORITY);
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & not(task = idle$1) & "`Local hypotheses'" & task: ready$1 & t_priority$1(running$1)<=priority & active$1 = TRUE & tt: ready$1\/{running$1} & not(tt = task));
  ((t_priority$1<+{task|->priority})(tt)<=(t_priority$1<+{task|->priority})(task));
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & not(task = idle$1) & "`Local hypotheses'" & task: ready$1 & t_priority$1(running$1)<=priority & active$1 = TRUE & tt: tasks$1);
  (IDLE_PRIORITY<=(t_priority$1<+{task|->priority})(tt));
  (ready$1 = (ready$1\/{running$1})-{task});
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & not(task = idle$1) & "`Local hypotheses'" & not(task: ready$1 & t_priority$1(running$1)<=priority) & task = running$1 & priority+1<=max(t_priority$1[ready$1]) & atask: TASK & atask: schedule_p(ready$1,t_priority$1));
  (#(running$0).(running$0: ready$1 & atask = running$0) or atask = running$1);
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & not(task = idle$1) & "`Local hypotheses'" & not(task: ready$1 & t_priority$1(running$1)<=priority) & task = running$1 & priority+1<=max(t_priority$1[ready$1]) & atask: TASK & atask: schedule_p(ready$1,t_priority$1) & active$1 = TRUE);
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & not(task = idle$1) & "`Local hypotheses'" & not(task: ready$1 & t_priority$1(running$1)<=priority) & task = running$1 & priority+1<=max(t_priority$1[ready$1]) & atask: TASK & atask: schedule_p(ready$1,t_priority$1) & active$1 = TRUE & tt: ready$1\/{running$1} & not(tt = atask));
  ((t_priority$1<+{task|->priority})(tt)<=(t_priority$1<+{task|->priority})(atask));
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & not(task = idle$1) & "`Local hypotheses'" & not(task: ready$1 & t_priority$1(running$1)<=priority) & task = running$1 & priority+1<=max(t_priority$1[ready$1]) & atask: TASK & atask: schedule_p(ready$1,t_priority$1) & active$1 = TRUE & tt: tasks$1);
  (ready$1 = (ready$1\/{running$1})-{atask});
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & not(task = idle$1) & "`Local hypotheses'" & not(task: ready$1 & t_priority$1(running$1)<=priority) & not(task = running$1 & priority+1<=max(t_priority$1[ready$1])));
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & not(task = idle$1) & "`Local hypotheses'" & not(task: ready$1 & t_priority$1(running$1)<=priority) & not(task = running$1 & priority+1<=max(t_priority$1[ready$1])) & active$1 = TRUE);
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & not(task = idle$1) & "`Local hypotheses'" & not(task: ready$1 & t_priority$1(running$1)<=priority) & not(task = running$1 & priority+1<=max(t_priority$1[ready$1])) & active$1 = TRUE & tt: ready$1);
  ((t_priority$1<+{task|->priority})(tt)<=(t_priority$1<+{task|->priority})(running$1));
  ("`t_setPriority preconditions in this component'" & task: tasks$1 & priority: PRIORITY & not(task = idle$1) & "`Local hypotheses'" & not(task: ready$1 & t_priority$1(running$1)<=priority) & not(task = running$1 & priority+1<=max(t_priority$1[ready$1])) & active$1 = TRUE & tt: tasks$1);
  ("`t_PriorityInherit preconditions in previous components'" & xTicksToWait: TICK & holderTask: tasks$1 & not(holderTask = idle$1) & not(running$1 = idle$1) & running$1: ready$1);
  ("`t_PriorityInherit preconditions in this component'" & xTicksToWait: TICK & holderTask: tasks$1 & not(holderTask = idle$1) & not(running$1 = idle$1) & running$1: ready$1 & "`Local hypotheses'" & t_priority$1(holderTask)+1<=t_priority$1(running$1));
  "`Check that the invariant (blocked = blocked$1) is preserved by the operation - ref 4.4, 5.5'" & "`Check operation refinement - ref 4.4, 5.5'";
  (blocked$1 = blocked$1\/{running$1});
  (bfalse);
  (t_priority$1<+{holderTask|->t_priority$1(running$1)}: TASK +-> PRIORITY);
  (dom(t_priority$1<+{holderTask|->t_priority$1(running$1)}) = tasks$1);
  ("`t_PriorityInherit preconditions in this component'" & xTicksToWait: TICK & holderTask: tasks$1 & not(holderTask = idle$1) & not(running$1 = idle$1) & running$1: ready$1 & "`Local hypotheses'" & t_priority$1(holderTask)+1<=t_priority$1(running$1) & active$1 = TRUE);
  ((t_priority$1<+{holderTask|->t_priority$1(running$1)})(idle$1) = IDLE_PRIORITY);
  ("`t_PriorityInherit preconditions in this component'" & xTicksToWait: TICK & holderTask: tasks$1 & not(holderTask = idle$1) & not(running$1 = idle$1) & running$1: ready$1 & "`Local hypotheses'" & t_priority$1(holderTask)+1<=t_priority$1(running$1) & active$1 = TRUE & tt: ready$1);
  ((t_priority$1<+{holderTask|->t_priority$1(running$1)})(tt)<=(t_priority$1<+{holderTask|->t_priority$1(running$1)})(running$1));
  ("`t_PriorityInherit preconditions in this component'" & xTicksToWait: TICK & holderTask: tasks$1 & not(holderTask = idle$1) & not(running$1 = idle$1) & running$1: ready$1 & "`Local hypotheses'" & t_priority$1(holderTask)+1<=t_priority$1(running$1) & active$1 = TRUE & tt: tasks$1);
  (IDLE_PRIORITY<=(t_priority$1<+{holderTask|->t_priority$1(running$1)})(tt));
  ("`t_PriorityInherit preconditions in this component'" & xTicksToWait: TICK & holderTask: tasks$1 & not(holderTask = idle$1) & not(running$1 = idle$1) & running$1: ready$1 & "`Local hypotheses'" & not(t_priority$1(holderTask)+1<=t_priority$1(running$1)));
  ("`t_resumeIncrement preconditions in previous components'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & unblocked/\pending$1 = {});
  ("`t_resumeIncrement preconditions in this component'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & unblocked/\pending$1 = {} & "`Local hypotheses'" & not(unblocked = {}) & running$2: unblocked);
  (#(running$0).(running$0: unblocked & running$2 = running$0) or running$2 = running$1);
  ("`t_resumeIncrement preconditions in this component'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & unblocked/\pending$1 = {} & "`Local hypotheses'" & not(unblocked = {}) & running$2: unblocked & active$1 = TRUE & tt: ready$1\/unblocked);
  ("`t_resumeIncrement preconditions in this component'" & unblocked: FIN(TASK) & unblocked: POW(blocked$1) & unblocked/\pending$1 = {} & "`Local hypotheses'" & not(unblocked = {}) & active$1 = TRUE & tt: ready$1\/unblocked);
  ("`t_unblockMutex preconditions in previous components'" & task: TASK & task: blocked$1 & not(task: pending$1));
  ("`t_unblockMutex preconditions in this component'" & task: TASK & task: blocked$1 & not(task: pending$1) & "`Local hypotheses'" & active$1 = TRUE & tt: ready$1\/{task});
  (t_priority$1(tt)<=t_priority$1(task))
END
&
THEORY EnumerateX IS
  SCHEDULER_STATE == {taskSCHEDULER_NOT_STARTED,taskSCHEDULER_RUNNING,taskSCHEDULER_SUSPENDED};
  COPY_POSITION == {queueSEND_TO_BACK,queueSEND_TO_FRONT};
  QUEUE_TYPE == {TQUE,TSEMAPH,TMUT};
  ERROR_DEFINITION == {errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY,errNO_TASK_TO_RUN,errQUEUE_BLOCKED,errQUEUE_YIELD,errQUEUE_EMPTY,errQUEUE_FULL,pdPASS,pdFAIL,pdTRUE,pdFALSE}
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO, genDivergencePO == KO, local_op == OK)
END
